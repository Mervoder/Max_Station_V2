
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bf8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08010dc8  08010dc8  00011dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011348  08011348  000132ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011348  08011348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011350  08011350  000132ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011350  08011350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011354  08011354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08011358  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a74  200002f0  08011644  000132f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d64  08011644  00013d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba9f  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a7  00000000  00000000  0002edbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114c  00000000  00000000  000348e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285be  00000000  00000000  00035a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c45  00000000  00000000  0005dff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1544  00000000  00000000  0007ec37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016017b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007298  00000000  00000000  001601c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00167458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010db0 	.word	0x08010db0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f4 	.word	0x200002f4
 800020c:	08010db0 	.word	0x08010db0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00c f9ac 	bl	800d444 <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00d f8e2 	bl	800e38e <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00d f8d8 	bl	800e38e <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00d f8c9 	bl	800e38e <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00d f8bf 	bl	800e38e <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00d f8b0 	bl	800e38e <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00d f8a6 	bl	800e38e <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00d f897 	bl	800e38e <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00d f88d 	bl	800e38e <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	08010dc8 	.word	0x08010dc8
 80014b0:	08010dd0 	.word	0x08010dd0
 80014b4:	08010dd8 	.word	0x08010dd8
 80014b8:	08010de0 	.word	0x08010de0
 80014bc:	08010de8 	.word	0x08010de8
 80014c0:	08010df0 	.word	0x08010df0
 80014c4:	08010df8 	.word	0x08010df8
 80014c8:	08010e00 	.word	0x08010e00
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00c fdf0 	bl	800e4c2 <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00c fd04 	bl	800e37e <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00c fceb 	bl	800e37e <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d11e      	bne.n	8001b4e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d00f      	beq.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
 8001b18:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b45      	cmp	r3, #69	@ 0x45
 8001b1e:	d80b      	bhi.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	b2d1      	uxtb	r1, r2
 8001b28:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b2a:	7011      	strb	r1, [r2, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_UART_RxCpltCallback+0xbc>)
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	e005      	b.n	8001b44 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

		}
HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	491b      	ldr	r1, [pc, #108]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b48:	4819      	ldr	r0, [pc, #100]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8001b4a:	f005 fc01 	bl	8007350 <HAL_UART_Receive_IT>
	}

	if(huart == &huart2) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d127      	bne.n	8001ba6 <HAL_UART_RxCpltCallback+0xa6>
			if( rx_data != '\n'&& rx_index < RX_BUFFER_SIZE) {
 8001b56:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d010      	beq.n	8001b80 <HAL_UART_RxCpltCallback+0x80>
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0b      	blt.n	8001b80 <HAL_UART_RxCpltCallback+0x80>
				gps_rx_buffer[rx_index++] = rx_data;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	b2d1      	uxtb	r1, r2
 8001b70:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b72:	7011      	strb	r1, [r2, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b78:	7819      	ldrb	r1, [r3, #0]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_UART_RxCpltCallback+0xcc>)
 8001b7c:	5499      	strb	r1, [r3, r2]
 8001b7e:	e00d      	b.n	8001b9c <HAL_UART_RxCpltCallback+0x9c>
			} else {
				lwgps_process(&gps, gps_rx_buffer, rx_index+1);
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	461a      	mov	r2, r3
 8001b88:	4910      	ldr	r1, [pc, #64]	@ (8001bcc <HAL_UART_RxCpltCallback+0xcc>)
 8001b8a:	4811      	ldr	r0, [pc, #68]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b8c:	f7ff fef8 	bl	8001980 <lwgps_process>
				rx_index = 0;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001ba2:	f005 fbd5 	bl	8007350 <HAL_UART_Receive_IT>
		}
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000488 	.word	0x20000488
 8001bb4:	20000513 	.word	0x20000513
 8001bb8:	20000512 	.word	0x20000512
 8001bbc:	200004cc 	.word	0x200004cc
 8001bc0:	20000444 	.word	0x20000444
 8001bc4:	200005e5 	.word	0x200005e5
 8001bc8:	200005e4 	.word	0x200005e4
 8001bcc:	20000564 	.word	0x20000564
 8001bd0:	20000740 	.word	0x20000740

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0a0      	sub	sp, #128	@ 0x80
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f001 fed7 	bl	800398c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 fd93 	bl	8002708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f000 ff31 	bl	8002a48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001be6:	f000 fdfb 	bl	80027e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001bea:	f000 fe4b 	bl	8002884 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bee:	f000 fe77 	bl	80028e0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001bf2:	f000 feab 	bl	800294c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001bf6:	f000 fed3 	bl	80029a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001bfa:	f000 fefb 	bl	80029f4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001bfe:	f009 fff7 	bl	800bbf0 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8001c02:	f007 ff85 	bl	8009b10 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8001c06:	2201      	movs	r2, #1
 8001c08:	49bd      	ldr	r1, [pc, #756]	@ (8001f00 <main+0x32c>)
 8001c0a:	48be      	ldr	r0, [pc, #760]	@ (8001f04 <main+0x330>)
 8001c0c:	f005 fba0 	bl	8007350 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8001c10:	2201      	movs	r2, #1
 8001c12:	49bd      	ldr	r1, [pc, #756]	@ (8001f08 <main+0x334>)
 8001c14:	48bd      	ldr	r0, [pc, #756]	@ (8001f0c <main+0x338>)
 8001c16:	f005 fb9b 	bl	8007350 <HAL_UART_Receive_IT>
  E220_CONFIG(0x8,0x2A,0x10,1);
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	212a      	movs	r1, #42	@ 0x2a
 8001c20:	2008      	movs	r0, #8
 8001c22:	f000 ffbd 	bl	8002ba0 <E220_CONFIG>
  lwgps_init(&gps);
 8001c26:	48ba      	ldr	r0, [pc, #744]	@ (8001f10 <main+0x33c>)
 8001c28:	f7ff fe9c 	bl	8001964 <lwgps_init>


  tim1=HAL_GetTick();
 8001c2c:	f001 ff14 	bl	8003a58 <HAL_GetTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4ab8      	ldr	r2, [pc, #736]	@ (8001f14 <main+0x340>)
 8001c34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // HAL_UART_Receive(&huart2, lora_rx_buffer, 70 , 1000);

	  if(HAL_GetTick()-tim1>10)
 8001c36:	f001 ff0f 	bl	8003a58 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4bb5      	ldr	r3, [pc, #724]	@ (8001f14 <main+0x340>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	f240 83ea 	bls.w	800241c <main+0x848>
{
		  HYI_BUFFER_Fill();
 8001c48:	f001 f82e 	bl	8002ca8 <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 8001c4c:	4bb2      	ldr	r3, [pc, #712]	@ (8001f18 <main+0x344>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	f040 8223 	bne.w	800209c <main+0x4c8>
 8001c56:	4bb0      	ldr	r3, [pc, #704]	@ (8001f18 <main+0x344>)
 8001c58:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c5c:	2b31      	cmp	r3, #49	@ 0x31
 8001c5e:	f040 821d 	bne.w	800209c <main+0x4c8>

		  Sustainer.satsinview=lora_rx_buffer[4];
 8001c62:	4bad      	ldr	r3, [pc, #692]	@ (8001f18 <main+0x344>)
 8001c64:	791a      	ldrb	r2, [r3, #4]
 8001c66:	4bad      	ldr	r3, [pc, #692]	@ (8001f1c <main+0x348>)
 8001c68:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001c70:	e019      	b.n	8001ca6 <main+0xd2>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8001c72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c76:	1d5a      	adds	r2, r3, #5
 8001c78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c7c:	49a6      	ldr	r1, [pc, #664]	@ (8001f18 <main+0x344>)
 8001c7e:	5c8a      	ldrb	r2, [r1, r2]
 8001c80:	3380      	adds	r3, #128	@ 0x80
 8001c82:	443b      	add	r3, r7
 8001c84:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8001c88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c8c:	1d5a      	adds	r2, r3, #5
 8001c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c92:	330a      	adds	r3, #10
 8001c94:	49a0      	ldr	r1, [pc, #640]	@ (8001f18 <main+0x344>)
 8001c96:	5c89      	ldrb	r1, [r1, r2]
 8001c98:	4aa1      	ldr	r2, [pc, #644]	@ (8001f20 <main+0x34c>)
 8001c9a:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001c9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ca6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d9e1      	bls.n	8001c72 <main+0x9e>
				 }
				 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 8001cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cb0:	4a9a      	ldr	r2, [pc, #616]	@ (8001f1c <main+0x348>)
 8001cb2:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001cba:	e01b      	b.n	8001cf4 <main+0x120>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8001cbc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001cc0:	f103 0209 	add.w	r2, r3, #9
 8001cc4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001cc8:	4993      	ldr	r1, [pc, #588]	@ (8001f18 <main+0x344>)
 8001cca:	5c8a      	ldrb	r2, [r1, r2]
 8001ccc:	3380      	adds	r3, #128	@ 0x80
 8001cce:	443b      	add	r3, r7
 8001cd0:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 8001cd4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001cd8:	f103 0209 	add.w	r2, r3, #9
 8001cdc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001ce0:	330e      	adds	r3, #14
 8001ce2:	498d      	ldr	r1, [pc, #564]	@ (8001f18 <main+0x344>)
 8001ce4:	5c89      	ldrb	r1, [r1, r2]
 8001ce6:	4a8e      	ldr	r2, [pc, #568]	@ (8001f20 <main+0x34c>)
 8001ce8:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001cea:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001cf4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d9df      	bls.n	8001cbc <main+0xe8>
				 }
				 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8001cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cfe:	4a87      	ldr	r2, [pc, #540]	@ (8001f1c <main+0x348>)
 8001d00:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001d08:	e01b      	b.n	8001d42 <main+0x16e>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8001d0a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d0e:	f103 020d 	add.w	r2, r3, #13
 8001d12:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d16:	4980      	ldr	r1, [pc, #512]	@ (8001f18 <main+0x344>)
 8001d18:	5c8a      	ldrb	r2, [r1, r2]
 8001d1a:	3380      	adds	r3, #128	@ 0x80
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 8001d22:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d26:	f103 020d 	add.w	r2, r3, #13
 8001d2a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d2e:	3312      	adds	r3, #18
 8001d30:	4979      	ldr	r1, [pc, #484]	@ (8001f18 <main+0x344>)
 8001d32:	5c89      	ldrb	r1, [r1, r2]
 8001d34:	4a7a      	ldr	r2, [pc, #488]	@ (8001f20 <main+0x34c>)
 8001d36:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d38:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001d42:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9df      	bls.n	8001d0a <main+0x136>
				 }
				 Sustainer.gpslongitude=f2u8_longitude.fVal;
 8001d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d4c:	4a73      	ldr	r2, [pc, #460]	@ (8001f1c <main+0x348>)
 8001d4e:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8001d56:	e01b      	b.n	8001d90 <main+0x1bc>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 8001d58:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d5c:	f103 0211 	add.w	r2, r3, #17
 8001d60:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d64:	496c      	ldr	r1, [pc, #432]	@ (8001f18 <main+0x344>)
 8001d66:	5c8a      	ldrb	r2, [r1, r2]
 8001d68:	3380      	adds	r3, #128	@ 0x80
 8001d6a:	443b      	add	r3, r7
 8001d6c:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 8001d70:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d74:	f103 0211 	add.w	r2, r3, #17
 8001d78:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	4966      	ldr	r1, [pc, #408]	@ (8001f18 <main+0x344>)
 8001d80:	5c89      	ldrb	r1, [r1, r2]
 8001d82:	4a67      	ldr	r2, [pc, #412]	@ (8001f20 <main+0x34c>)
 8001d84:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d86:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8001d90:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d9df      	bls.n	8001d58 <main+0x184>
				 }
				 Sustainer.altitude=f2u8_altitude.fVal;
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <main+0x348>)
 8001d9c:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001da4:	e010      	b.n	8001dc8 <main+0x1f4>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8001da6:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001daa:	f103 0215 	add.w	r2, r3, #21
 8001dae:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001db2:	4959      	ldr	r1, [pc, #356]	@ (8001f18 <main+0x344>)
 8001db4:	5c8a      	ldrb	r2, [r1, r2]
 8001db6:	3380      	adds	r3, #128	@ 0x80
 8001db8:	443b      	add	r3, r7
 8001dba:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8001dbe:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001dc8:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d9ea      	bls.n	8001da6 <main+0x1d2>
				 }
				 Sustainer.speed=f2u8_speed.fVal;
 8001dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dd2:	4a52      	ldr	r2, [pc, #328]	@ (8001f1c <main+0x348>)
 8001dd4:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001ddc:	e010      	b.n	8001e00 <main+0x22c>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8001dde:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001de2:	f103 0219 	add.w	r2, r3, #25
 8001de6:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001dea:	494b      	ldr	r1, [pc, #300]	@ (8001f18 <main+0x344>)
 8001dec:	5c8a      	ldrb	r2, [r1, r2]
 8001dee:	3380      	adds	r3, #128	@ 0x80
 8001df0:	443b      	add	r3, r7
 8001df2:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8001df6:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001e00:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d9ea      	bls.n	8001dde <main+0x20a>
				 }
				 Sustainer.temperature=f2u8_temp.fVal;
 8001e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0a:	4a44      	ldr	r2, [pc, #272]	@ (8001f1c <main+0x348>)
 8001e0c:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8001e14:	e01b      	b.n	8001e4e <main+0x27a>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 8001e16:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e1a:	f103 021d 	add.w	r2, r3, #29
 8001e1e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e22:	493d      	ldr	r1, [pc, #244]	@ (8001f18 <main+0x344>)
 8001e24:	5c8a      	ldrb	r2, [r1, r2]
 8001e26:	3380      	adds	r3, #128	@ 0x80
 8001e28:	443b      	add	r3, r7
 8001e2a:	f803 2c38 	strb.w	r2, [r3, #-56]
					 HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
 8001e2e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e32:	f103 021d 	add.w	r2, r3, #29
 8001e36:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e3a:	333a      	adds	r3, #58	@ 0x3a
 8001e3c:	4936      	ldr	r1, [pc, #216]	@ (8001f18 <main+0x344>)
 8001e3e:	5c89      	ldrb	r1, [r1, r2]
 8001e40:	4a37      	ldr	r2, [pc, #220]	@ (8001f20 <main+0x34c>)
 8001e42:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001e44:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8001e4e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d9df      	bls.n	8001e16 <main+0x242>
				 }
				 Sustainer.accx=f2u8_accx.fVal;
 8001e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e58:	4a30      	ldr	r2, [pc, #192]	@ (8001f1c <main+0x348>)
 8001e5a:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8001e62:	e01b      	b.n	8001e9c <main+0x2c8>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 8001e64:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001e68:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001e6c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001e70:	4929      	ldr	r1, [pc, #164]	@ (8001f18 <main+0x344>)
 8001e72:	5c8a      	ldrb	r2, [r1, r2]
 8001e74:	3380      	adds	r3, #128	@ 0x80
 8001e76:	443b      	add	r3, r7
 8001e78:	f803 2c3c 	strb.w	r2, [r3, #-60]
					 HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
 8001e7c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001e80:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001e84:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001e88:	333e      	adds	r3, #62	@ 0x3e
 8001e8a:	4923      	ldr	r1, [pc, #140]	@ (8001f18 <main+0x344>)
 8001e8c:	5c89      	ldrb	r1, [r1, r2]
 8001e8e:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <main+0x34c>)
 8001e90:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001e92:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001e96:	3301      	adds	r3, #1
 8001e98:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8001e9c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d9df      	bls.n	8001e64 <main+0x290>
				 }
				 Sustainer.accy=f2u8_accy.fVal;
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <main+0x348>)
 8001ea8:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001eb0:	e01b      	b.n	8001eea <main+0x316>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 8001eb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001eb6:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001eba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001ebe:	4916      	ldr	r1, [pc, #88]	@ (8001f18 <main+0x344>)
 8001ec0:	5c8a      	ldrb	r2, [r1, r2]
 8001ec2:	3380      	adds	r3, #128	@ 0x80
 8001ec4:	443b      	add	r3, r7
 8001ec6:	f803 2c40 	strb.w	r2, [r3, #-64]
			    	  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
 8001eca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001ece:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001ed2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001ed6:	3342      	adds	r3, #66	@ 0x42
 8001ed8:	490f      	ldr	r1, [pc, #60]	@ (8001f18 <main+0x344>)
 8001eda:	5c89      	ldrb	r1, [r1, r2]
 8001edc:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <main+0x34c>)
 8001ede:	54d1      	strb	r1, [r2, r3]
			      for(uint8_t i=0;i<4;i++)
 8001ee0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001eea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d9df      	bls.n	8001eb2 <main+0x2de>
				 }
			      Sustainer.accz=f2u8_accz.fVal;
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <main+0x348>)
 8001ef6:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001efe:	e022      	b.n	8001f46 <main+0x372>
 8001f00:	20000513 	.word	0x20000513
 8001f04:	20000488 	.word	0x20000488
 8001f08:	200005e5 	.word	0x200005e5
 8001f0c:	20000444 	.word	0x20000444
 8001f10:	20000740 	.word	0x20000740
 8001f14:	20000738 	.word	0x20000738
 8001f18:	200004cc 	.word	0x200004cc
 8001f1c:	20000670 	.word	0x20000670
 8001f20:	20000514 	.word	0x20000514
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 8001f24:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f28:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001f2c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f30:	49b9      	ldr	r1, [pc, #740]	@ (8002218 <main+0x644>)
 8001f32:	5c8a      	ldrb	r2, [r1, r2]
 8001f34:	3380      	adds	r3, #128	@ 0x80
 8001f36:	443b      	add	r3, r7
 8001f38:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 8001f3c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f40:	3301      	adds	r3, #1
 8001f42:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001f46:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d9ea      	bls.n	8001f24 <main+0x350>
				 }
				  Sustainer.normal=f2u8_roll.fVal;
 8001f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f50:	4ab2      	ldr	r2, [pc, #712]	@ (800221c <main+0x648>)
 8001f52:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8001f5a:	e010      	b.n	8001f7e <main+0x3aa>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8001f5c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001f60:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8001f64:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001f68:	49ab      	ldr	r1, [pc, #684]	@ (8002218 <main+0x644>)
 8001f6a:	5c8a      	ldrb	r2, [r1, r2]
 8001f6c:	3380      	adds	r3, #128	@ 0x80
 8001f6e:	443b      	add	r3, r7
 8001f70:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 8001f74:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8001f7e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d9ea      	bls.n	8001f5c <main+0x388>
				 }
				  Sustainer.pitch=f2u8_pitch.fVal;
 8001f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f88:	4aa4      	ldr	r2, [pc, #656]	@ (800221c <main+0x648>)
 8001f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Sustainer.battery=lora_rx_buffer[49];
 8001f8c:	4ba2      	ldr	r3, [pc, #648]	@ (8002218 <main+0x644>)
 8001f8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800221c <main+0x648>)
 8001f9c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				  Sustainer.mod=lora_rx_buffer[50];
 8001fa0:	4b9d      	ldr	r3, [pc, #628]	@ (8002218 <main+0x644>)
 8001fa2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8001fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800221c <main+0x648>)
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Sustainer.communication=lora_rx_buffer[51];
 8001fac:	4b9a      	ldr	r3, [pc, #616]	@ (8002218 <main+0x644>)
 8001fae:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8001fb2:	4b9a      	ldr	r3, [pc, #616]	@ (800221c <main+0x648>)
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8001fb8:	4b97      	ldr	r3, [pc, #604]	@ (8002218 <main+0x644>)
 8001fba:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8001fbe:	4b98      	ldr	r3, [pc, #608]	@ (8002220 <main+0x64c>)
 8001fc0:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 8001fc2:	4b95      	ldr	r3, [pc, #596]	@ (8002218 <main+0x644>)
 8001fc4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8001fc8:	4b96      	ldr	r3, [pc, #600]	@ (8002224 <main+0x650>)
 8001fca:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8001fd2:	e010      	b.n	8001ff6 <main+0x422>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 8001fd4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001fd8:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8001fdc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001fe0:	498d      	ldr	r1, [pc, #564]	@ (8002218 <main+0x644>)
 8001fe2:	5c8a      	ldrb	r2, [r1, r2]
 8001fe4:	3380      	adds	r3, #128	@ 0x80
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8001fec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8001ff6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d9ea      	bls.n	8001fd4 <main+0x400>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002000:	4a89      	ldr	r2, [pc, #548]	@ (8002228 <main+0x654>)
 8002002:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800200a:	e010      	b.n	800202e <main+0x45a>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 800200c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002010:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 8002014:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002018:	497f      	ldr	r1, [pc, #508]	@ (8002218 <main+0x644>)
 800201a:	5c8a      	ldrb	r2, [r1, r2]
 800201c:	3380      	adds	r3, #128	@ 0x80
 800201e:	443b      	add	r3, r7
 8002020:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 8002024:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002028:	3301      	adds	r3, #1
 800202a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800202e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002032:	2b03      	cmp	r3, #3
 8002034:	d9ea      	bls.n	800200c <main+0x438>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8002036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002038:	4a7c      	ldr	r2, [pc, #496]	@ (800222c <main+0x658>)
 800203a:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8002042:	e010      	b.n	8002066 <main+0x492>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 8002044:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002048:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 800204c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002050:	4971      	ldr	r1, [pc, #452]	@ (8002218 <main+0x644>)
 8002052:	5c8a      	ldrb	r2, [r1, r2]
 8002054:	3380      	adds	r3, #128	@ 0x80
 8002056:	443b      	add	r3, r7
 8002058:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 800205c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002060:	3301      	adds	r3, #1
 8002062:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8002066:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800206a:	2b03      	cmp	r3, #3
 800206c:	d9ea      	bls.n	8002044 <main+0x470>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 800206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002070:	4a6f      	ldr	r2, [pc, #444]	@ (8002230 <main+0x65c>)
 8002072:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 8002074:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <main+0x644>)
 8002076:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800207a:	4b6e      	ldr	r3, [pc, #440]	@ (8002234 <main+0x660>)
 800207c:	701a      	strb	r2, [r3, #0]

					  EGU_UCUS_BASLADIMI=lora_rx_buffer[66];
 800207e:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <main+0x644>)
 8002080:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8002084:	4b6c      	ldr	r3, [pc, #432]	@ (8002238 <main+0x664>)
 8002086:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 8002088:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <main+0x644>)
 800208a:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 800208e:	4b6b      	ldr	r3, [pc, #428]	@ (800223c <main+0x668>)
 8002090:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 8002092:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <main+0x644>)
 8002094:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8002098:	4b69      	ldr	r3, [pc, #420]	@ (8002240 <main+0x66c>)
 800209a:	701a      	strb	r2, [r3, #0]
}

	  if(lora_rx_buffer[3]==1 && lora_rx_buffer[50]==0x32){
 800209c:	4b5e      	ldr	r3, [pc, #376]	@ (8002218 <main+0x644>)
 800209e:	78db      	ldrb	r3, [r3, #3]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	f040 8191 	bne.w	80023c8 <main+0x7f4>
 80020a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <main+0x644>)
 80020a8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80020ac:	2b32      	cmp	r3, #50	@ 0x32
 80020ae:	f040 818b 	bne.w	80023c8 <main+0x7f4>

		  Booster.satsinview=lora_rx_buffer[4];
 80020b2:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <main+0x644>)
 80020b4:	791a      	ldrb	r2, [r3, #4]
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <main+0x670>)
 80020b8:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80020c0:	e019      	b.n	80020f6 <main+0x522>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 80020c2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020c6:	1d5a      	adds	r2, r3, #5
 80020c8:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020cc:	4952      	ldr	r1, [pc, #328]	@ (8002218 <main+0x644>)
 80020ce:	5c8a      	ldrb	r2, [r1, r2]
 80020d0:	3380      	adds	r3, #128	@ 0x80
 80020d2:	443b      	add	r3, r7
 80020d4:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 80020d8:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020dc:	1d5a      	adds	r2, r3, #5
 80020de:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020e2:	3322      	adds	r3, #34	@ 0x22
 80020e4:	494c      	ldr	r1, [pc, #304]	@ (8002218 <main+0x644>)
 80020e6:	5c89      	ldrb	r1, [r1, r2]
 80020e8:	4a57      	ldr	r2, [pc, #348]	@ (8002248 <main+0x674>)
 80020ea:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80020ec:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020f0:	3301      	adds	r3, #1
 80020f2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80020f6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d9e1      	bls.n	80020c2 <main+0x4ee>
				 }
				 Booster.gpsaltitude=f2u8_bgpsalt.fVal;
 80020fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002100:	4a50      	ldr	r2, [pc, #320]	@ (8002244 <main+0x670>)
 8002102:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 800210a:	e01b      	b.n	8002144 <main+0x570>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 800210c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002110:	f103 0209 	add.w	r2, r3, #9
 8002114:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002118:	493f      	ldr	r1, [pc, #252]	@ (8002218 <main+0x644>)
 800211a:	5c8a      	ldrb	r2, [r1, r2]
 800211c:	3380      	adds	r3, #128	@ 0x80
 800211e:	443b      	add	r3, r7
 8002120:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8002124:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002128:	f103 0209 	add.w	r2, r3, #9
 800212c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002130:	3326      	adds	r3, #38	@ 0x26
 8002132:	4939      	ldr	r1, [pc, #228]	@ (8002218 <main+0x644>)
 8002134:	5c89      	ldrb	r1, [r1, r2]
 8002136:	4a44      	ldr	r2, [pc, #272]	@ (8002248 <main+0x674>)
 8002138:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 800213a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800213e:	3301      	adds	r3, #1
 8002140:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8002144:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002148:	2b03      	cmp	r3, #3
 800214a:	d9df      	bls.n	800210c <main+0x538>
				 }
				 Booster.gpslatitude=f2u8_blatitude.fVal;
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	4a3d      	ldr	r2, [pc, #244]	@ (8002244 <main+0x670>)
 8002150:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8002152:	2300      	movs	r3, #0
 8002154:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002158:	e01b      	b.n	8002192 <main+0x5be>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 800215a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800215e:	f103 020d 	add.w	r2, r3, #13
 8002162:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002166:	492c      	ldr	r1, [pc, #176]	@ (8002218 <main+0x644>)
 8002168:	5c8a      	ldrb	r2, [r1, r2]
 800216a:	3380      	adds	r3, #128	@ 0x80
 800216c:	443b      	add	r3, r7
 800216e:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8002172:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002176:	f103 020d 	add.w	r2, r3, #13
 800217a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800217e:	332a      	adds	r3, #42	@ 0x2a
 8002180:	4925      	ldr	r1, [pc, #148]	@ (8002218 <main+0x644>)
 8002182:	5c89      	ldrb	r1, [r1, r2]
 8002184:	4a30      	ldr	r2, [pc, #192]	@ (8002248 <main+0x674>)
 8002186:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8002188:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800218c:	3301      	adds	r3, #1
 800218e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002192:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002196:	2b03      	cmp	r3, #3
 8002198:	d9df      	bls.n	800215a <main+0x586>
				 }
				 Booster.gpslongitude=f2u8_blongitude.fVal;
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <main+0x670>)
 800219e:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80021a6:	e010      	b.n	80021ca <main+0x5f6>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 80021a8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80021ac:	f103 0211 	add.w	r2, r3, #17
 80021b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80021b4:	4918      	ldr	r1, [pc, #96]	@ (8002218 <main+0x644>)
 80021b6:	5c8a      	ldrb	r2, [r1, r2]
 80021b8:	3380      	adds	r3, #128	@ 0x80
 80021ba:	443b      	add	r3, r7
 80021bc:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 80021c0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80021c4:	3301      	adds	r3, #1
 80021c6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80021ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d9ea      	bls.n	80021a8 <main+0x5d4>
				 }
				 Booster.altitude=f2u8_baltitude.fVal;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <main+0x670>)
 80021d6:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80021de:	e010      	b.n	8002202 <main+0x62e>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 80021e0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021e4:	f103 0215 	add.w	r2, r3, #21
 80021e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021ec:	490a      	ldr	r1, [pc, #40]	@ (8002218 <main+0x644>)
 80021ee:	5c8a      	ldrb	r2, [r1, r2]
 80021f0:	3380      	adds	r3, #128	@ 0x80
 80021f2:	443b      	add	r3, r7
 80021f4:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 80021f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80021fc:	3301      	adds	r3, #1
 80021fe:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8002202:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002206:	2b03      	cmp	r3, #3
 8002208:	d9ea      	bls.n	80021e0 <main+0x60c>
				 }
				 Booster.speed=f2u8_bspeed.fVal;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <main+0x670>)
 800220e:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8002210:	2300      	movs	r3, #0
 8002212:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8002216:	e02a      	b.n	800226e <main+0x69a>
 8002218:	200004cc 	.word	0x200004cc
 800221c:	20000670 	.word	0x20000670
 8002220:	200005e8 	.word	0x200005e8
 8002224:	200005e9 	.word	0x200005e9
 8002228:	200005f0 	.word	0x200005f0
 800222c:	200005f8 	.word	0x200005f8
 8002230:	200005f4 	.word	0x200005f4
 8002234:	200005ed 	.word	0x200005ed
 8002238:	200005ec 	.word	0x200005ec
 800223c:	200005eb 	.word	0x200005eb
 8002240:	200005ea 	.word	0x200005ea
 8002244:	20000638 	.word	0x20000638
 8002248:	20000514 	.word	0x20000514
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 800224c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002250:	f103 0219 	add.w	r2, r3, #25
 8002254:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002258:	4942      	ldr	r1, [pc, #264]	@ (8002364 <main+0x790>)
 800225a:	5c8a      	ldrb	r2, [r1, r2]
 800225c:	3380      	adds	r3, #128	@ 0x80
 800225e:	443b      	add	r3, r7
 8002260:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 8002264:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002268:	3301      	adds	r3, #1
 800226a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800226e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002272:	2b03      	cmp	r3, #3
 8002274:	d9ea      	bls.n	800224c <main+0x678>
				 }
				 Booster.temperature=f2u8_btemp.fVal;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a3b      	ldr	r2, [pc, #236]	@ (8002368 <main+0x794>)
 800227a:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 800227c:	2300      	movs	r3, #0
 800227e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8002282:	e010      	b.n	80022a6 <main+0x6d2>
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 8002284:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002288:	f103 021d 	add.w	r2, r3, #29
 800228c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002290:	4934      	ldr	r1, [pc, #208]	@ (8002364 <main+0x790>)
 8002292:	5c8a      	ldrb	r2, [r1, r2]
 8002294:	3380      	adds	r3, #128	@ 0x80
 8002296:	443b      	add	r3, r7
 8002298:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 800229c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80022a0:	3301      	adds	r3, #1
 80022a2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80022a6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d9ea      	bls.n	8002284 <main+0x6b0>
				 }
				 Booster.accx=f2u8_baccx.fVal;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002368 <main+0x794>)
 80022b2:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80022ba:	e010      	b.n	80022de <main+0x70a>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 80022bc:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022c0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80022c4:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022c8:	4926      	ldr	r1, [pc, #152]	@ (8002364 <main+0x790>)
 80022ca:	5c8a      	ldrb	r2, [r1, r2]
 80022cc:	3380      	adds	r3, #128	@ 0x80
 80022ce:	443b      	add	r3, r7
 80022d0:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 80022d4:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022d8:	3301      	adds	r3, #1
 80022da:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80022de:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9ea      	bls.n	80022bc <main+0x6e8>
				 }
				 Booster.accy=f2u8_baccy.fVal;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <main+0x794>)
 80022ea:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 80022f2:	e010      	b.n	8002316 <main+0x742>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 80022f4:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80022f8:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 80022fc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002300:	4918      	ldr	r1, [pc, #96]	@ (8002364 <main+0x790>)
 8002302:	5c8a      	ldrb	r2, [r1, r2]
 8002304:	3380      	adds	r3, #128	@ 0x80
 8002306:	443b      	add	r3, r7
 8002308:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 800230c:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002310:	3301      	adds	r3, #1
 8002312:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8002316:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800231a:	2b03      	cmp	r3, #3
 800231c:	d9ea      	bls.n	80022f4 <main+0x720>
				 }
			      Booster.accz=f2u8_baccz.fVal;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <main+0x794>)
 8002322:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800232a:	e010      	b.n	800234e <main+0x77a>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 800232c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002330:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8002334:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002338:	490a      	ldr	r1, [pc, #40]	@ (8002364 <main+0x790>)
 800233a:	5c8a      	ldrb	r2, [r1, r2]
 800233c:	3380      	adds	r3, #128	@ 0x80
 800233e:	443b      	add	r3, r7
 8002340:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 8002344:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002348:	3301      	adds	r3, #1
 800234a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800234e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002352:	2b03      	cmp	r3, #3
 8002354:	d9ea      	bls.n	800232c <main+0x758>
				 }
				  Booster.normal=f2u8_broll.fVal;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a03      	ldr	r2, [pc, #12]	@ (8002368 <main+0x794>)
 800235a:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002362:	e014      	b.n	800238e <main+0x7ba>
 8002364:	200004cc 	.word	0x200004cc
 8002368:	20000638 	.word	0x20000638
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 800236c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002370:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8002374:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002378:	49ae      	ldr	r1, [pc, #696]	@ (8002634 <main+0xa60>)
 800237a:	5c8a      	ldrb	r2, [r1, r2]
 800237c:	3380      	adds	r3, #128	@ 0x80
 800237e:	443b      	add	r3, r7
 8002380:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8002384:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800238e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002392:	2b03      	cmp	r3, #3
 8002394:	d9ea      	bls.n	800236c <main+0x798>
				 }
				  Booster.pitch=f2u8_bpitch.fVal;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	4aa7      	ldr	r2, [pc, #668]	@ (8002638 <main+0xa64>)
 800239a:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Booster.battery=lora_rx_buffer[49];
 800239c:	4ba5      	ldr	r3, [pc, #660]	@ (8002634 <main+0xa60>)
 800239e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	4ba3      	ldr	r3, [pc, #652]	@ (8002638 <main+0xa64>)
 80023ac:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				  Booster.mod=lora_rx_buffer[50];
 80023b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002634 <main+0xa60>)
 80023b2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80023b6:	4ba0      	ldr	r3, [pc, #640]	@ (8002638 <main+0xa64>)
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Booster.communication=lora_rx_buffer[51];
 80023bc:	4b9d      	ldr	r3, [pc, #628]	@ (8002634 <main+0xa60>)
 80023be:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80023c2:	4b9d      	ldr	r3, [pc, #628]	@ (8002638 <main+0xa64>)
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35


	  	  }

		  if(lora_rx_buffer[3]==3 && lora_rx_buffer[50]==0x33)
 80023c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002634 <main+0xa60>)
 80023ca:	78db      	ldrb	r3, [r3, #3]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d120      	bne.n	8002412 <main+0x83e>
 80023d0:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <main+0xa60>)
 80023d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80023d6:	2b33      	cmp	r3, #51	@ 0x33
 80023d8:	d11b      	bne.n	8002412 <main+0x83e>
		  {

		  Payload.satsinview=lora_rx_buffer[4];
 80023da:	4b96      	ldr	r3, [pc, #600]	@ (8002634 <main+0xa60>)
 80023dc:	791a      	ldrb	r2, [r3, #4]
 80023de:	4b97      	ldr	r3, [pc, #604]	@ (800263c <main+0xa68>)
 80023e0:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 80023e2:	f000 fc91 	bl	8002d08 <Payload_union_converter>

		  Payload.battery=lora_rx_buffer[49];
 80023e6:	4b93      	ldr	r3, [pc, #588]	@ (8002634 <main+0xa60>)
 80023e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f4:	4b91      	ldr	r3, [pc, #580]	@ (800263c <main+0xa68>)
 80023f6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		  Payload.mod=lora_rx_buffer[50];
 80023fa:	4b8e      	ldr	r3, [pc, #568]	@ (8002634 <main+0xa60>)
 80023fc:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002400:	4b8e      	ldr	r3, [pc, #568]	@ (800263c <main+0xa68>)
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.communication=lora_rx_buffer[51];
 8002406:	4b8b      	ldr	r3, [pc, #556]	@ (8002634 <main+0xa60>)
 8002408:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800240c:	4b8b      	ldr	r3, [pc, #556]	@ (800263c <main+0xa68>)
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		  }


	  tim1=HAL_GetTick();
 8002412:	f001 fb21 	bl	8003a58 <HAL_GetTick>
 8002416:	4603      	mov	r3, r0
 8002418:	4a89      	ldr	r2, [pc, #548]	@ (8002640 <main+0xa6c>)
 800241a:	6013      	str	r3, [r2, #0]
	  }



	  // EKRANA YAZMA
     	sprintf(b_altitude,"%4.3f",Booster.altitude);
 800241c:	4b86      	ldr	r3, [pc, #536]	@ (8002638 <main+0xa64>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8b1 	bl	8000588 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4986      	ldr	r1, [pc, #536]	@ (8002644 <main+0xa70>)
 800242c:	4886      	ldr	r0, [pc, #536]	@ (8002648 <main+0xa74>)
 800242e:	f00b ff43 	bl	800e2b8 <siprintf>
     	sprintf(b_temperature,"%2.2f",Booster.temperature);
 8002432:	4b81      	ldr	r3, [pc, #516]	@ (8002638 <main+0xa64>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f8a6 	bl	8000588 <__aeabi_f2d>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4982      	ldr	r1, [pc, #520]	@ (800264c <main+0xa78>)
 8002442:	4883      	ldr	r0, [pc, #524]	@ (8002650 <main+0xa7c>)
 8002444:	f00b ff38 	bl	800e2b8 <siprintf>
     	sprintf(b_speed,"%2.2f",Booster.speed);
 8002448:	4b7b      	ldr	r3, [pc, #492]	@ (8002638 <main+0xa64>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	497d      	ldr	r1, [pc, #500]	@ (800264c <main+0xa78>)
 8002458:	487e      	ldr	r0, [pc, #504]	@ (8002654 <main+0xa80>)
 800245a:	f00b ff2d 	bl	800e2b8 <siprintf>
     	sprintf(b_roll,"%2.2f",Booster.normal);
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <main+0xa64>)
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f890 	bl	8000588 <__aeabi_f2d>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4977      	ldr	r1, [pc, #476]	@ (800264c <main+0xa78>)
 800246e:	487a      	ldr	r0, [pc, #488]	@ (8002658 <main+0xa84>)
 8002470:	f00b ff22 	bl	800e2b8 <siprintf>
     	sprintf(b_pitch,"%2.2f",Booster.pitch);
 8002474:	4b70      	ldr	r3, [pc, #448]	@ (8002638 <main+0xa64>)
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f885 	bl	8000588 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4972      	ldr	r1, [pc, #456]	@ (800264c <main+0xa78>)
 8002484:	4875      	ldr	r0, [pc, #468]	@ (800265c <main+0xa88>)
 8002486:	f00b ff17 	bl	800e2b8 <siprintf>
     	sprintf(b_latitude,"%2.2f",Booster.gpslatitude);
 800248a:	4b6b      	ldr	r3, [pc, #428]	@ (8002638 <main+0xa64>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f87a 	bl	8000588 <__aeabi_f2d>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	496c      	ldr	r1, [pc, #432]	@ (800264c <main+0xa78>)
 800249a:	4871      	ldr	r0, [pc, #452]	@ (8002660 <main+0xa8c>)
 800249c:	f00b ff0c 	bl	800e2b8 <siprintf>
     	sprintf(b_longitude,"%2.2f",Booster.gpslongitude);
 80024a0:	4b65      	ldr	r3, [pc, #404]	@ (8002638 <main+0xa64>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f86f 	bl	8000588 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4967      	ldr	r1, [pc, #412]	@ (800264c <main+0xa78>)
 80024b0:	486c      	ldr	r0, [pc, #432]	@ (8002664 <main+0xa90>)
 80024b2:	f00b ff01 	bl	800e2b8 <siprintf>


     	sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 80024b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002668 <main+0xa94>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f864 	bl	8000588 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	495f      	ldr	r1, [pc, #380]	@ (8002644 <main+0xa70>)
 80024c6:	4869      	ldr	r0, [pc, #420]	@ (800266c <main+0xa98>)
 80024c8:	f00b fef6 	bl	800e2b8 <siprintf>
     	sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 80024cc:	4b66      	ldr	r3, [pc, #408]	@ (8002668 <main+0xa94>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f859 	bl	8000588 <__aeabi_f2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	495c      	ldr	r1, [pc, #368]	@ (800264c <main+0xa78>)
 80024dc:	4864      	ldr	r0, [pc, #400]	@ (8002670 <main+0xa9c>)
 80024de:	f00b feeb 	bl	800e2b8 <siprintf>
     	sprintf(s_speed,"%2.2f",Sustainer.speed);
 80024e2:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <main+0xa94>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f84e 	bl	8000588 <__aeabi_f2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4956      	ldr	r1, [pc, #344]	@ (800264c <main+0xa78>)
 80024f2:	4860      	ldr	r0, [pc, #384]	@ (8002674 <main+0xaa0>)
 80024f4:	f00b fee0 	bl	800e2b8 <siprintf>
     	sprintf(s_roll,"%2.2f",Sustainer.normal);
 80024f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <main+0xa94>)
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f843 	bl	8000588 <__aeabi_f2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4951      	ldr	r1, [pc, #324]	@ (800264c <main+0xa78>)
 8002508:	485b      	ldr	r0, [pc, #364]	@ (8002678 <main+0xaa4>)
 800250a:	f00b fed5 	bl	800e2b8 <siprintf>
     	sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 800250e:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <main+0xa94>)
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f838 	bl	8000588 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	494b      	ldr	r1, [pc, #300]	@ (800264c <main+0xa78>)
 800251e:	4857      	ldr	r0, [pc, #348]	@ (800267c <main+0xaa8>)
 8002520:	f00b feca 	bl	800e2b8 <siprintf>
     	sprintf(s_latitude,"%2.2f",Sustainer.gpslatitude);
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <main+0xa94>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f82d 	bl	8000588 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4946      	ldr	r1, [pc, #280]	@ (800264c <main+0xa78>)
 8002534:	4852      	ldr	r0, [pc, #328]	@ (8002680 <main+0xaac>)
 8002536:	f00b febf 	bl	800e2b8 <siprintf>
     	sprintf(s_longitude,"%2.2f",Sustainer.gpslongitude);
 800253a:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <main+0xa94>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f822 	bl	8000588 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4940      	ldr	r1, [pc, #256]	@ (800264c <main+0xa78>)
 800254a:	484e      	ldr	r0, [pc, #312]	@ (8002684 <main+0xab0>)
 800254c:	f00b feb4 	bl	800e2b8 <siprintf>
     	sprintf(susbattary,"%2.0f",Sustainer.battery);
 8002550:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <main+0xa94>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe f817 	bl	8000588 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	494a      	ldr	r1, [pc, #296]	@ (8002688 <main+0xab4>)
 8002560:	484a      	ldr	r0, [pc, #296]	@ (800268c <main+0xab8>)
 8002562:	f00b fea9 	bl	800e2b8 <siprintf>
    	sprintf(suscom,"%1.0f",Sustainer.communication);
 8002566:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <main+0xa94>)
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256c:	461a      	mov	r2, r3
 800256e:	4948      	ldr	r1, [pc, #288]	@ (8002690 <main+0xabc>)
 8002570:	4848      	ldr	r0, [pc, #288]	@ (8002694 <main+0xac0>)
 8002572:	f00b fea1 	bl	800e2b8 <siprintf>



        NEXTION_SendString("bs1", b_altitude);
 8002576:	4934      	ldr	r1, [pc, #208]	@ (8002648 <main+0xa74>)
 8002578:	4847      	ldr	r0, [pc, #284]	@ (8002698 <main+0xac4>)
 800257a:	f000 fb6f 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs2", b_temperature);
 800257e:	4934      	ldr	r1, [pc, #208]	@ (8002650 <main+0xa7c>)
 8002580:	4846      	ldr	r0, [pc, #280]	@ (800269c <main+0xac8>)
 8002582:	f000 fb6b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs3", b_speed);
 8002586:	4933      	ldr	r1, [pc, #204]	@ (8002654 <main+0xa80>)
 8002588:	4845      	ldr	r0, [pc, #276]	@ (80026a0 <main+0xacc>)
 800258a:	f000 fb67 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs4", b_roll);
 800258e:	4932      	ldr	r1, [pc, #200]	@ (8002658 <main+0xa84>)
 8002590:	4844      	ldr	r0, [pc, #272]	@ (80026a4 <main+0xad0>)
 8002592:	f000 fb63 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs5", b_pitch);
 8002596:	4931      	ldr	r1, [pc, #196]	@ (800265c <main+0xa88>)
 8002598:	4843      	ldr	r0, [pc, #268]	@ (80026a8 <main+0xad4>)
 800259a:	f000 fb5f 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs6", &boostgpssatsinview);
 800259e:	4943      	ldr	r1, [pc, #268]	@ (80026ac <main+0xad8>)
 80025a0:	4843      	ldr	r0, [pc, #268]	@ (80026b0 <main+0xadc>)
 80025a2:	f000 fb5b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs7", b_latitude);
 80025a6:	492e      	ldr	r1, [pc, #184]	@ (8002660 <main+0xa8c>)
 80025a8:	4842      	ldr	r0, [pc, #264]	@ (80026b4 <main+0xae0>)
 80025aa:	f000 fb57 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("bs8", b_longitude);
 80025ae:	492d      	ldr	r1, [pc, #180]	@ (8002664 <main+0xa90>)
 80025b0:	4841      	ldr	r0, [pc, #260]	@ (80026b8 <main+0xae4>)
 80025b2:	f000 fb53 	bl	8002c5c <NEXTION_SendString>
      //  NEXTION_SendString("bs9", &Booster.battery);
        NEXTION_SendString("t56", &Booster.communication);
 80025b6:	4941      	ldr	r1, [pc, #260]	@ (80026bc <main+0xae8>)
 80025b8:	4841      	ldr	r0, [pc, #260]	@ (80026c0 <main+0xaec>)
 80025ba:	f000 fb4f 	bl	8002c5c <NEXTION_SendString>

       // Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
        NEXTION_SendString("s1", s_altitude);
 80025be:	492b      	ldr	r1, [pc, #172]	@ (800266c <main+0xa98>)
 80025c0:	4840      	ldr	r0, [pc, #256]	@ (80026c4 <main+0xaf0>)
 80025c2:	f000 fb4b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s2", s_temperature);
 80025c6:	492a      	ldr	r1, [pc, #168]	@ (8002670 <main+0xa9c>)
 80025c8:	483f      	ldr	r0, [pc, #252]	@ (80026c8 <main+0xaf4>)
 80025ca:	f000 fb47 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s3", s_speed);
 80025ce:	4929      	ldr	r1, [pc, #164]	@ (8002674 <main+0xaa0>)
 80025d0:	483e      	ldr	r0, [pc, #248]	@ (80026cc <main+0xaf8>)
 80025d2:	f000 fb43 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s4", s_roll);
 80025d6:	4928      	ldr	r1, [pc, #160]	@ (8002678 <main+0xaa4>)
 80025d8:	483d      	ldr	r0, [pc, #244]	@ (80026d0 <main+0xafc>)
 80025da:	f000 fb3f 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s5", s_pitch);
 80025de:	4927      	ldr	r1, [pc, #156]	@ (800267c <main+0xaa8>)
 80025e0:	483c      	ldr	r0, [pc, #240]	@ (80026d4 <main+0xb00>)
 80025e2:	f000 fb3b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s6", &sustgpssatsinview);
 80025e6:	493c      	ldr	r1, [pc, #240]	@ (80026d8 <main+0xb04>)
 80025e8:	483c      	ldr	r0, [pc, #240]	@ (80026dc <main+0xb08>)
 80025ea:	f000 fb37 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s7", s_latitude);
 80025ee:	4924      	ldr	r1, [pc, #144]	@ (8002680 <main+0xaac>)
 80025f0:	483b      	ldr	r0, [pc, #236]	@ (80026e0 <main+0xb0c>)
 80025f2:	f000 fb33 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s8", s_longitude);
 80025f6:	4923      	ldr	r1, [pc, #140]	@ (8002684 <main+0xab0>)
 80025f8:	483a      	ldr	r0, [pc, #232]	@ (80026e4 <main+0xb10>)
 80025fa:	f000 fb2f 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("s9", susbattary);
 80025fe:	4923      	ldr	r1, [pc, #140]	@ (800268c <main+0xab8>)
 8002600:	4839      	ldr	r0, [pc, #228]	@ (80026e8 <main+0xb14>)
 8002602:	f000 fb2b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("t57", suscom);
 8002606:	4923      	ldr	r1, [pc, #140]	@ (8002694 <main+0xac0>)
 8002608:	4838      	ldr	r0, [pc, #224]	@ (80026ec <main+0xb18>)
 800260a:	f000 fb27 	bl	8002c5c <NEXTION_SendString>

        Enum_State_bs();
 800260e:	f000 fc95 	bl	8002f3c <Enum_State_bs>
        Enum_State_s();
 8002612:	f000 fd9d 	bl	8003150 <Enum_State_s>
     //   NEXTION_SendString("t58", &EGU_MOTOR_ATESLEME_TALEP_IN);


        NEXTION_SendString("t4", &gps.hours);
 8002616:	4936      	ldr	r1, [pc, #216]	@ (80026f0 <main+0xb1c>)
 8002618:	4836      	ldr	r0, [pc, #216]	@ (80026f4 <main+0xb20>)
 800261a:	f000 fb1f 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("t6", &gps.minutes);
 800261e:	4936      	ldr	r1, [pc, #216]	@ (80026f8 <main+0xb24>)
 8002620:	4836      	ldr	r0, [pc, #216]	@ (80026fc <main+0xb28>)
 8002622:	f000 fb1b 	bl	8002c5c <NEXTION_SendString>
        NEXTION_SendString("t8", &gps.seconds);
 8002626:	4936      	ldr	r1, [pc, #216]	@ (8002700 <main+0xb2c>)
 8002628:	4836      	ldr	r0, [pc, #216]	@ (8002704 <main+0xb30>)
 800262a:	f000 fb17 	bl	8002c5c <NEXTION_SendString>
	  if(HAL_GetTick()-tim1>10)
 800262e:	f7ff bb02 	b.w	8001c36 <main+0x62>
 8002632:	bf00      	nop
 8002634:	200004cc 	.word	0x200004cc
 8002638:	20000638 	.word	0x20000638
 800263c:	20000600 	.word	0x20000600
 8002640:	20000738 	.word	0x20000738
 8002644:	08010e08 	.word	0x08010e08
 8002648:	200006a8 	.word	0x200006a8
 800264c:	08010e10 	.word	0x08010e10
 8002650:	200006b0 	.word	0x200006b0
 8002654:	200006b8 	.word	0x200006b8
 8002658:	200006c0 	.word	0x200006c0
 800265c:	200006c8 	.word	0x200006c8
 8002660:	200006d0 	.word	0x200006d0
 8002664:	200006d8 	.word	0x200006d8
 8002668:	20000670 	.word	0x20000670
 800266c:	200006f8 	.word	0x200006f8
 8002670:	20000700 	.word	0x20000700
 8002674:	20000708 	.word	0x20000708
 8002678:	20000710 	.word	0x20000710
 800267c:	20000718 	.word	0x20000718
 8002680:	20000720 	.word	0x20000720
 8002684:	20000728 	.word	0x20000728
 8002688:	08010e18 	.word	0x08010e18
 800268c:	20000730 	.word	0x20000730
 8002690:	08010e20 	.word	0x08010e20
 8002694:	20000734 	.word	0x20000734
 8002698:	08010e28 	.word	0x08010e28
 800269c:	08010e2c 	.word	0x08010e2c
 80026a0:	08010e30 	.word	0x08010e30
 80026a4:	08010e34 	.word	0x08010e34
 80026a8:	08010e38 	.word	0x08010e38
 80026ac:	200005fc 	.word	0x200005fc
 80026b0:	08010e3c 	.word	0x08010e3c
 80026b4:	08010e40 	.word	0x08010e40
 80026b8:	08010e44 	.word	0x08010e44
 80026bc:	2000066d 	.word	0x2000066d
 80026c0:	08010e48 	.word	0x08010e48
 80026c4:	08010e4c 	.word	0x08010e4c
 80026c8:	08010e50 	.word	0x08010e50
 80026cc:	08010e54 	.word	0x08010e54
 80026d0:	08010e58 	.word	0x08010e58
 80026d4:	08010e5c 	.word	0x08010e5c
 80026d8:	200005e6 	.word	0x200005e6
 80026dc:	08010e60 	.word	0x08010e60
 80026e0:	08010e64 	.word	0x08010e64
 80026e4:	08010e68 	.word	0x08010e68
 80026e8:	08010e6c 	.word	0x08010e6c
 80026ec:	08010e70 	.word	0x08010e70
 80026f0:	20000762 	.word	0x20000762
 80026f4:	08010e74 	.word	0x08010e74
 80026f8:	20000763 	.word	0x20000763
 80026fc:	08010e78 	.word	0x08010e78
 8002700:	20000764 	.word	0x20000764
 8002704:	08010e7c 	.word	0x08010e7c

08002708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b094      	sub	sp, #80	@ 0x50
 800270c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	2234      	movs	r2, #52	@ 0x34
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f00b fe31 	bl	800e37e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <SystemClock_Config+0xd0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <SystemClock_Config+0xd0>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6413      	str	r3, [r2, #64]	@ 0x40
 800273c:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <SystemClock_Config+0xd0>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002748:	2300      	movs	r3, #0
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <SystemClock_Config+0xd4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	@ (80027dc <SystemClock_Config+0xd4>)
 8002752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <SystemClock_Config+0xd4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002764:	2301      	movs	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800276c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276e:	2302      	movs	r3, #2
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002778:	2304      	movs	r3, #4
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800277c:	23a8      	movs	r3, #168	@ 0xa8
 800277e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002780:	2302      	movs	r3, #2
 8002782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002784:	2307      	movs	r3, #7
 8002786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4618      	mov	r0, r3
 8002792:	f004 f9d7 	bl	8006b44 <HAL_RCC_OscConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800279c:	f000 fdc2 	bl	8003324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a0:	230f      	movs	r3, #15
 80027a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80027a4:	2303      	movs	r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	2105      	movs	r1, #5
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fb4c 	bl	8005e5c <HAL_RCC_ClockConfig>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027ca:	f000 fdab 	bl	8003324 <Error_Handler>
  }
}
 80027ce:	bf00      	nop
 80027d0:	3750      	adds	r7, #80	@ 0x50
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000

080027e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027e6:	463b      	mov	r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <MX_ADC1_Init+0x98>)
 80027f4:	4a21      	ldr	r2, [pc, #132]	@ (800287c <MX_ADC1_Init+0x9c>)
 80027f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <MX_ADC1_Init+0x98>)
 80027fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002806:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <MX_ADC1_Init+0x98>)
 800280e:	2200      	movs	r2, #0
 8002810:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002812:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800281a:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <MX_ADC1_Init+0x98>)
 800281c:	2200      	movs	r2, #0
 800281e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002822:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <MX_ADC1_Init+0xa0>)
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <MX_ADC1_Init+0x98>)
 800282e:	2201      	movs	r2, #1
 8002830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <MX_ADC1_Init+0x98>)
 800283c:	2201      	movs	r2, #1
 800283e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002842:	f001 f939 	bl	8003ab8 <HAL_ADC_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800284c:	f000 fd6a 	bl	8003324 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002850:	230c      	movs	r3, #12
 8002852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002854:	2301      	movs	r3, #1
 8002856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285c:	463b      	mov	r3, r7
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_ADC1_Init+0x98>)
 8002862:	f001 f96d 	bl	8003b40 <HAL_ADC_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800286c:	f000 fd5a 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000030c 	.word	0x2000030c
 800287c:	40012000 	.word	0x40012000
 8002880:	0f000001 	.word	0x0f000001

08002884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <MX_I2C1_Init+0x50>)
 800288a:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <MX_I2C1_Init+0x54>)
 800288c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <MX_I2C1_Init+0x50>)
 8002890:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <MX_I2C1_Init+0x58>)
 8002892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_I2C1_Init+0x50>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_I2C1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <MX_I2C1_Init+0x50>)
 80028c2:	f001 febd 	bl	8004640 <HAL_I2C_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028cc:	f000 fd2a 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000354 	.word	0x20000354
 80028d8:	40005400 	.word	0x40005400
 80028dc:	000186a0 	.word	0x000186a0

080028e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028e4:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <MX_SPI1_Init+0x64>)
 80028e6:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <MX_SPI1_Init+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <MX_SPI1_Init+0x64>)
 80028ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <MX_SPI1_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <MX_SPI1_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <MX_SPI1_Init+0x64>)
 800290c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002914:	2220      	movs	r2, #32
 8002916:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <MX_SPI1_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MX_SPI1_Init+0x64>)
 800292c:	220a      	movs	r2, #10
 800292e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <MX_SPI1_Init+0x64>)
 8002932:	f004 fba5 	bl	8007080 <HAL_SPI_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800293c:	f000 fcf2 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200003a8 	.word	0x200003a8
 8002948:	40013000 	.word	0x40013000

0800294c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <MX_UART4_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002958:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800295c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <MX_UART4_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_UART4_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <MX_UART4_Init+0x4c>)
 8002984:	f004 fc05 	bl	8007192 <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800298e:	f000 fcc9 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000400 	.word	0x20000400
 800299c:	40004c00 	.word	0x40004c00

080029a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <MX_USART2_UART_Init+0x50>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029aa:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <MX_USART2_UART_Init+0x4c>)
 80029d8:	f004 fbdb 	bl	8007192 <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029e2:	f000 fc9f 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000444 	.word	0x20000444
 80029f0:	40004400 	.word	0x40004400

080029f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <MX_USART3_UART_Init+0x50>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_USART3_UART_Init+0x4c>)
 8002a2c:	f004 fbb1 	bl	8007192 <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a36:	f000 fc75 	bl	8003324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000488 	.word	0x20000488
 8002a44:	40004800 	.word	0x40004800

08002a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b4c      	ldr	r3, [pc, #304]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a4b      	ldr	r2, [pc, #300]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6e:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b45      	ldr	r3, [pc, #276]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a44      	ldr	r2, [pc, #272]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b42      	ldr	r3, [pc, #264]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b37      	ldr	r3, [pc, #220]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a36      	ldr	r2, [pc, #216]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <MX_GPIO_Init+0x14c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f640 4112 	movw	r1, #3090	@ 0xc12
 8002ad4:	4830      	ldr	r0, [pc, #192]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002ad6:	f001 fd99 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8002ada:	2200      	movs	r2, #0
 8002adc:	f246 011f 	movw	r1, #24607	@ 0x601f
 8002ae0:	482e      	ldr	r0, [pc, #184]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002ae2:	f001 fd93 	bl	800460c <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002ae6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4827      	ldr	r0, [pc, #156]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002afc:	f001 fbf2 	bl	80042e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 8002b00:	f640 4312 	movw	r3, #3090	@ 0xc12
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	481f      	ldr	r0, [pc, #124]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002b1a:	f001 fbe3 	bl	80042e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8002b1e:	f246 031f 	movw	r3, #24607	@ 0x601f
 8002b22:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b24:	2301      	movs	r3, #1
 8002b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	4619      	mov	r1, r3
 8002b36:	4819      	ldr	r0, [pc, #100]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002b38:	f001 fbd4 	bl	80042e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8002b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4812      	ldr	r0, [pc, #72]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002b52:	f001 fbc7 	bl	80042e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	480b      	ldr	r0, [pc, #44]	@ (8002b98 <MX_GPIO_Init+0x150>)
 8002b6c:	f001 fbba 	bl	80042e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8002b70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <MX_GPIO_Init+0x154>)
 8002b88:	f001 fbac 	bl	80042e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	@ 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71bb      	strb	r3, [r7, #6]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	717b      	strb	r3, [r7, #5]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	4824      	ldr	r0, [pc, #144]	@ (8002c54 <E220_CONFIG+0xb4>)
 8002bc4:	f001 fd22 	bl	800460c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4821      	ldr	r0, [pc, #132]	@ (8002c54 <E220_CONFIG+0xb4>)
 8002bce:	f001 fd1d 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002bd2:	2032      	movs	r0, #50	@ 0x32
 8002bd4:	f000 ff4c 	bl	8003a70 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8002be0:	793b      	ldrb	r3, [r7, #4]
 8002be2:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8002be8:	79bb      	ldrb	r3, [r7, #6]
 8002bea:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8002bec:	2362      	movs	r3, #98	@ 0x62
 8002bee:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8002bf4:	797b      	ldrb	r3, [r7, #5]
 8002bf6:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <E220_CONFIG+0x64>
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d003      	beq.n	8002c0a <E220_CONFIG+0x6a>
 8002c02:	e005      	b.n	8002c10 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8002c04:	2300      	movs	r3, #0
 8002c06:	747b      	strb	r3, [r7, #17]
            break;
 8002c08:	e004      	b.n	8002c14 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8002c0a:	2311      	movs	r3, #17
 8002c0c:	747b      	strb	r3, [r7, #17]
            break;
 8002c0e:	e001      	b.n	8002c14 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8002c10:	2311      	movs	r3, #17
 8002c12:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8002c14:	2300      	movs	r3, #0
 8002c16:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8002c1c:	f107 010c 	add.w	r1, r7, #12
 8002c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c24:	2208      	movs	r2, #8
 8002c26:	480c      	ldr	r0, [pc, #48]	@ (8002c58 <E220_CONFIG+0xb8>)
 8002c28:	f004 fb00 	bl	800722c <HAL_UART_Transmit>

    HAL_Delay(25);
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f000 ff1f 	bl	8003a70 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2104      	movs	r1, #4
 8002c36:	4807      	ldr	r0, [pc, #28]	@ (8002c54 <E220_CONFIG+0xb4>)
 8002c38:	f001 fce8 	bl	800460c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4804      	ldr	r0, [pc, #16]	@ (8002c54 <E220_CONFIG+0xb4>)
 8002c42:	f001 fce3 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8002c46:	2019      	movs	r0, #25
 8002c48:	f000 ff12 	bl	8003a70 <HAL_Delay>
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	40020400 	.word	0x40020400
 8002c58:	20000488 	.word	0x20000488

08002c5c <NEXTION_SendString>:
    double angle_deg = angle_rad * 180.0 / PI;
    return angle_deg;
}

void NEXTION_SendString (char *ID, char *string)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b090      	sub	sp, #64	@ 0x40
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 8002c66:	f107 0008 	add.w	r0, r7, #8
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	490b      	ldr	r1, [pc, #44]	@ (8002c9c <NEXTION_SendString+0x40>)
 8002c70:	f00b fb22 	bl	800e2b8 <siprintf>
 8002c74:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 8002c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	f107 0108 	add.w	r1, r7, #8
 8002c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c82:	4807      	ldr	r0, [pc, #28]	@ (8002ca0 <NEXTION_SendString+0x44>)
 8002c84:	f004 fad2 	bl	800722c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 8002c88:	2364      	movs	r3, #100	@ 0x64
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	4905      	ldr	r1, [pc, #20]	@ (8002ca4 <NEXTION_SendString+0x48>)
 8002c8e:	4804      	ldr	r0, [pc, #16]	@ (8002ca0 <NEXTION_SendString+0x44>)
 8002c90:	f004 facc 	bl	800722c <HAL_UART_Transmit>
}
 8002c94:	bf00      	nop
 8002c96:	3740      	adds	r7, #64	@ 0x40
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	08010e80 	.word	0x08010e80
 8002ca0:	20000400 	.word	0x20000400
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HYI_BUFFER_Fill>:
    // Send the command to the Nextion display
    Nextion_SendCommand(command);
}

void HYI_BUFFER_Fill()
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cae:	22ff      	movs	r2, #255	@ 0xff
 8002cb0:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cb4:	22ff      	movs	r2, #255	@ 0xff
 8002cb6:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[3] =0x54;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cba:	2254      	movs	r2, #84	@ 0x54
 8002cbc:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	711a      	strb	r2, [r3, #4]
	HYI_BUFFER[5] =takim_sayac;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <HYI_BUFFER_Fill+0x58>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002ccc:	715a      	strb	r2, [r3, #5]
	HYI_BUFFER[74]= EGU_AYRILMA_TESPIT;
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HYI_BUFFER_Fill+0x5c>)
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cd4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	HYI_BUFFER[75]= 0; // CRC
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	HYI_BUFFER[76]= 0x0D;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002ce2:	220d      	movs	r2, #13
 8002ce4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <HYI_BUFFER_Fill+0x54>)
 8002cea:	220a      	movs	r2, #10
 8002cec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d



}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000514 	.word	0x20000514
 8002d00:	2000073c 	.word	0x2000073c
 8002d04:	200005e9 	.word	0x200005e9

08002d08 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e013      	b.n	8002d3c <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+5];
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	1d5a      	adds	r2, r3, #5
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	4985      	ldr	r1, [pc, #532]	@ (8002f30 <Payload_union_converter+0x228>)
 8002d1c:	5c8a      	ldrb	r2, [r1, r2]
 8002d1e:	3310      	adds	r3, #16
 8002d20:	443b      	add	r3, r7
 8002d22:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	1d5a      	adds	r2, r3, #5
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3322      	adds	r3, #34	@ 0x22
 8002d2e:	4980      	ldr	r1, [pc, #512]	@ (8002f30 <Payload_union_converter+0x228>)
 8002d30:	5c89      	ldrb	r1, [r1, r2]
 8002d32:	4a80      	ldr	r2, [pc, #512]	@ (8002f34 <Payload_union_converter+0x22c>)
 8002d34:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d9e8      	bls.n	8002d14 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4a7c      	ldr	r2, [pc, #496]	@ (8002f38 <Payload_union_converter+0x230>)
 8002d46:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73bb      	strb	r3, [r7, #14]
 8002d4c:	e015      	b.n	8002d7a <Payload_union_converter+0x72>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+9];
 8002d4e:	7bbb      	ldrb	r3, [r7, #14]
 8002d50:	f103 0209 	add.w	r2, r3, #9
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	4976      	ldr	r1, [pc, #472]	@ (8002f30 <Payload_union_converter+0x228>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	443b      	add	r3, r7
 8002d5e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
 8002d64:	f103 0209 	add.w	r2, r3, #9
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	3326      	adds	r3, #38	@ 0x26
 8002d6c:	4970      	ldr	r1, [pc, #448]	@ (8002f30 <Payload_union_converter+0x228>)
 8002d6e:	5c89      	ldrb	r1, [r1, r2]
 8002d70:	4a70      	ldr	r2, [pc, #448]	@ (8002f34 <Payload_union_converter+0x22c>)
 8002d72:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	3301      	adds	r3, #1
 8002d78:	73bb      	strb	r3, [r7, #14]
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d9e6      	bls.n	8002d4e <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4a6d      	ldr	r2, [pc, #436]	@ (8002f38 <Payload_union_converter+0x230>)
 8002d84:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	737b      	strb	r3, [r7, #13]
 8002d8a:	e015      	b.n	8002db8 <Payload_union_converter+0xb0>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+13];
 8002d8c:	7b7b      	ldrb	r3, [r7, #13]
 8002d8e:	f103 020d 	add.w	r2, r3, #13
 8002d92:	7b7b      	ldrb	r3, [r7, #13]
 8002d94:	4966      	ldr	r1, [pc, #408]	@ (8002f30 <Payload_union_converter+0x228>)
 8002d96:	5c8a      	ldrb	r2, [r1, r2]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	443b      	add	r3, r7
 8002d9c:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8002da0:	7b7b      	ldrb	r3, [r7, #13]
 8002da2:	f103 020d 	add.w	r2, r3, #13
 8002da6:	7b7b      	ldrb	r3, [r7, #13]
 8002da8:	332a      	adds	r3, #42	@ 0x2a
 8002daa:	4961      	ldr	r1, [pc, #388]	@ (8002f30 <Payload_union_converter+0x228>)
 8002dac:	5c89      	ldrb	r1, [r1, r2]
 8002dae:	4a61      	ldr	r2, [pc, #388]	@ (8002f34 <Payload_union_converter+0x22c>)
 8002db0:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002db2:	7b7b      	ldrb	r3, [r7, #13]
 8002db4:	3301      	adds	r3, #1
 8002db6:	737b      	strb	r3, [r7, #13]
 8002db8:	7b7b      	ldrb	r3, [r7, #13]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d9e6      	bls.n	8002d8c <Payload_union_converter+0x84>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f38 <Payload_union_converter+0x230>)
 8002dc2:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	733b      	strb	r3, [r7, #12]
 8002dc8:	e00c      	b.n	8002de4 <Payload_union_converter+0xdc>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+17];
 8002dca:	7b3b      	ldrb	r3, [r7, #12]
 8002dcc:	f103 0211 	add.w	r2, r3, #17
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
 8002dd2:	4957      	ldr	r1, [pc, #348]	@ (8002f30 <Payload_union_converter+0x228>)
 8002dd4:	5c8a      	ldrb	r2, [r1, r2]
 8002dd6:	3310      	adds	r3, #16
 8002dd8:	443b      	add	r3, r7
 8002dda:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002dde:	7b3b      	ldrb	r3, [r7, #12]
 8002de0:	3301      	adds	r3, #1
 8002de2:	733b      	strb	r3, [r7, #12]
 8002de4:	7b3b      	ldrb	r3, [r7, #12]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d9ef      	bls.n	8002dca <Payload_union_converter+0xc2>
			 }
			 Payload.altitude=f2u8.fVal;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <Payload_union_converter+0x230>)
 8002dee:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	72fb      	strb	r3, [r7, #11]
 8002df4:	e00c      	b.n	8002e10 <Payload_union_converter+0x108>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+21];
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f103 0215 	add.w	r2, r3, #21
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	494c      	ldr	r1, [pc, #304]	@ (8002f30 <Payload_union_converter+0x228>)
 8002e00:	5c8a      	ldrb	r2, [r1, r2]
 8002e02:	3310      	adds	r3, #16
 8002e04:	443b      	add	r3, r7
 8002e06:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	72fb      	strb	r3, [r7, #11]
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d9ef      	bls.n	8002df6 <Payload_union_converter+0xee>
			 }
			 Payload.speed=f2u8.fVal;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4a47      	ldr	r2, [pc, #284]	@ (8002f38 <Payload_union_converter+0x230>)
 8002e1a:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	72bb      	strb	r3, [r7, #10]
 8002e20:	e00c      	b.n	8002e3c <Payload_union_converter+0x134>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+25];
 8002e22:	7abb      	ldrb	r3, [r7, #10]
 8002e24:	f103 0219 	add.w	r2, r3, #25
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	4941      	ldr	r1, [pc, #260]	@ (8002f30 <Payload_union_converter+0x228>)
 8002e2c:	5c8a      	ldrb	r2, [r1, r2]
 8002e2e:	3310      	adds	r3, #16
 8002e30:	443b      	add	r3, r7
 8002e32:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002e36:	7abb      	ldrb	r3, [r7, #10]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	72bb      	strb	r3, [r7, #10]
 8002e3c:	7abb      	ldrb	r3, [r7, #10]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d9ef      	bls.n	8002e22 <Payload_union_converter+0x11a>
			 }
			 Payload.temperature=f2u8.fVal;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4a3c      	ldr	r2, [pc, #240]	@ (8002f38 <Payload_union_converter+0x230>)
 8002e46:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	727b      	strb	r3, [r7, #9]
 8002e4c:	e00c      	b.n	8002e68 <Payload_union_converter+0x160>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+29];
 8002e4e:	7a7b      	ldrb	r3, [r7, #9]
 8002e50:	f103 021d 	add.w	r2, r3, #29
 8002e54:	7a7b      	ldrb	r3, [r7, #9]
 8002e56:	4936      	ldr	r1, [pc, #216]	@ (8002f30 <Payload_union_converter+0x228>)
 8002e58:	5c8a      	ldrb	r2, [r1, r2]
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	443b      	add	r3, r7
 8002e5e:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002e62:	7a7b      	ldrb	r3, [r7, #9]
 8002e64:	3301      	adds	r3, #1
 8002e66:	727b      	strb	r3, [r7, #9]
 8002e68:	7a7b      	ldrb	r3, [r7, #9]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d9ef      	bls.n	8002e4e <Payload_union_converter+0x146>
			 }
			 Payload.accx=f2u8.fVal;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4a31      	ldr	r2, [pc, #196]	@ (8002f38 <Payload_union_converter+0x230>)
 8002e72:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	723b      	strb	r3, [r7, #8]
 8002e78:	e00c      	b.n	8002e94 <Payload_union_converter+0x18c>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+33];
 8002e7a:	7a3b      	ldrb	r3, [r7, #8]
 8002e7c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002e80:	7a3b      	ldrb	r3, [r7, #8]
 8002e82:	492b      	ldr	r1, [pc, #172]	@ (8002f30 <Payload_union_converter+0x228>)
 8002e84:	5c8a      	ldrb	r2, [r1, r2]
 8002e86:	3310      	adds	r3, #16
 8002e88:	443b      	add	r3, r7
 8002e8a:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002e8e:	7a3b      	ldrb	r3, [r7, #8]
 8002e90:	3301      	adds	r3, #1
 8002e92:	723b      	strb	r3, [r7, #8]
 8002e94:	7a3b      	ldrb	r3, [r7, #8]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d9ef      	bls.n	8002e7a <Payload_union_converter+0x172>
			 }
			 Payload.accy=f2u8.fVal;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <Payload_union_converter+0x230>)
 8002e9e:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	71fb      	strb	r3, [r7, #7]
 8002ea4:	e00c      	b.n	8002ec0 <Payload_union_converter+0x1b8>
			 {
		    	  f2u8.array[i]=lora_rx_buffer[i+37];
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	4920      	ldr	r1, [pc, #128]	@ (8002f30 <Payload_union_converter+0x228>)
 8002eb0:	5c8a      	ldrb	r2, [r1, r2]
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	443b      	add	r3, r7
 8002eb6:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d9ef      	bls.n	8002ea6 <Payload_union_converter+0x19e>
			 }
		      Payload.accz=f2u8.fVal;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f38 <Payload_union_converter+0x230>)
 8002eca:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	71bb      	strb	r3, [r7, #6]
 8002ed0:	e00c      	b.n	8002eec <Payload_union_converter+0x1e4>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+41];
 8002ed2:	79bb      	ldrb	r3, [r7, #6]
 8002ed4:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8002ed8:	79bb      	ldrb	r3, [r7, #6]
 8002eda:	4915      	ldr	r1, [pc, #84]	@ (8002f30 <Payload_union_converter+0x228>)
 8002edc:	5c8a      	ldrb	r2, [r1, r2]
 8002ede:	3310      	adds	r3, #16
 8002ee0:	443b      	add	r3, r7
 8002ee2:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	71bb      	strb	r3, [r7, #6]
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d9ef      	bls.n	8002ed2 <Payload_union_converter+0x1ca>
			 }
			  Payload.normal=f2u8.fVal;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <Payload_union_converter+0x230>)
 8002ef6:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	717b      	strb	r3, [r7, #5]
 8002efc:	e00c      	b.n	8002f18 <Payload_union_converter+0x210>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+45];
 8002efe:	797b      	ldrb	r3, [r7, #5]
 8002f00:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8002f04:	797b      	ldrb	r3, [r7, #5]
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <Payload_union_converter+0x228>)
 8002f08:	5c8a      	ldrb	r2, [r1, r2]
 8002f0a:	3310      	adds	r3, #16
 8002f0c:	443b      	add	r3, r7
 8002f0e:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	3301      	adds	r3, #1
 8002f16:	717b      	strb	r3, [r7, #5]
 8002f18:	797b      	ldrb	r3, [r7, #5]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d9ef      	bls.n	8002efe <Payload_union_converter+0x1f6>
			 }
			  Payload.pitch=f2u8.fVal;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <Payload_union_converter+0x230>)
 8002f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	200004cc 	.word	0x200004cc
 8002f34:	20000514 	.word	0x20000514
 8002f38:	20000600 	.word	0x20000600

08002f3c <Enum_State_bs>:
void Enum_State_bs(void){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0

    switch(boostv4_mod){
 8002f40:	4b7f      	ldr	r3, [pc, #508]	@ (8003140 <Enum_State_bs+0x204>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	2b07      	cmp	r3, #7
 8002f48:	f200 80f4 	bhi.w	8003134 <Enum_State_bs+0x1f8>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <Enum_State_bs+0x18>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f75 	.word	0x08002f75
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fe5 	.word	0x08002fe5
 8002f60:	0800301d 	.word	0x0800301d
 8002f64:	08003055 	.word	0x08003055
 8002f68:	0800308d 	.word	0x0800308d
 8002f6c:	080030c5 	.word	0x080030c5
 8002f70:	080030fd 	.word	0x080030fd

    case 1:
    	enum_bs[0]='R';
 8002f74:	4b73      	ldr	r3, [pc, #460]	@ (8003144 <Enum_State_bs+0x208>)
 8002f76:	2252      	movs	r2, #82	@ 0x52
 8002f78:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='A';
 8002f7a:	4b72      	ldr	r3, [pc, #456]	@ (8003144 <Enum_State_bs+0x208>)
 8002f7c:	2241      	movs	r2, #65	@ 0x41
 8002f7e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='M';
 8002f80:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <Enum_State_bs+0x208>)
 8002f82:	224d      	movs	r2, #77	@ 0x4d
 8002f84:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='P';
 8002f86:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <Enum_State_bs+0x208>)
 8002f88:	2250      	movs	r2, #80	@ 0x50
 8002f8a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='A';
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <Enum_State_bs+0x208>)
 8002f8e:	2241      	movs	r2, #65	@ 0x41
 8002f90:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8002f92:	4b6c      	ldr	r3, [pc, #432]	@ (8003144 <Enum_State_bs+0x208>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8002f98:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <Enum_State_bs+0x208>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8002f9e:	4b69      	ldr	r3, [pc, #420]	@ (8003144 <Enum_State_bs+0x208>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8002fa4:	4b67      	ldr	r3, [pc, #412]	@ (8003144 <Enum_State_bs+0x208>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	721a      	strb	r2, [r3, #8]
    	break;
 8002faa:	e0c3      	b.n	8003134 <Enum_State_bs+0x1f8>

    case 2:
    	enum_bs[0]='U';
 8002fac:	4b65      	ldr	r3, [pc, #404]	@ (8003144 <Enum_State_bs+0x208>)
 8002fae:	2255      	movs	r2, #85	@ 0x55
 8002fb0:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='C';
 8002fb2:	4b64      	ldr	r3, [pc, #400]	@ (8003144 <Enum_State_bs+0x208>)
 8002fb4:	2243      	movs	r2, #67	@ 0x43
 8002fb6:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='U';
 8002fb8:	4b62      	ldr	r3, [pc, #392]	@ (8003144 <Enum_State_bs+0x208>)
 8002fba:	2255      	movs	r2, #85	@ 0x55
 8002fbc:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='S';
 8002fbe:	4b61      	ldr	r3, [pc, #388]	@ (8003144 <Enum_State_bs+0x208>)
 8002fc0:	2253      	movs	r2, #83	@ 0x53
 8002fc2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	@ (8003144 <Enum_State_bs+0x208>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8002fca:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <Enum_State_bs+0x208>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8002fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8003144 <Enum_State_bs+0x208>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003144 <Enum_State_bs+0x208>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8002fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8003148 <Enum_State_bs+0x20c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	721a      	strb	r2, [r3, #8]
    	break;
 8002fe2:	e0a7      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 3:
    	enum_bs[0]='B';
 8002fe4:	4b57      	ldr	r3, [pc, #348]	@ (8003144 <Enum_State_bs+0x208>)
 8002fe6:	2242      	movs	r2, #66	@ 0x42
 8002fe8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='U';
 8002fea:	4b56      	ldr	r3, [pc, #344]	@ (8003144 <Enum_State_bs+0x208>)
 8002fec:	2255      	movs	r2, #85	@ 0x55
 8002fee:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8002ff0:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <Enum_State_bs+0x208>)
 8002ff2:	2252      	movs	r2, #82	@ 0x52
 8002ff4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='N';
 8002ff6:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <Enum_State_bs+0x208>)
 8002ff8:	224e      	movs	r2, #78	@ 0x4e
 8002ffa:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='O';
 8002ffc:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <Enum_State_bs+0x208>)
 8002ffe:	224f      	movs	r2, #79	@ 0x4f
 8003000:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='U';
 8003002:	4b50      	ldr	r3, [pc, #320]	@ (8003144 <Enum_State_bs+0x208>)
 8003004:	2255      	movs	r2, #85	@ 0x55
 8003006:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='T';
 8003008:	4b4e      	ldr	r3, [pc, #312]	@ (8003144 <Enum_State_bs+0x208>)
 800300a:	2254      	movs	r2, #84	@ 0x54
 800300c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800300e:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <Enum_State_bs+0x208>)
 8003010:	2200      	movs	r2, #0
 8003012:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003014:	4b4b      	ldr	r3, [pc, #300]	@ (8003144 <Enum_State_bs+0x208>)
 8003016:	2200      	movs	r2, #0
 8003018:	721a      	strb	r2, [r3, #8]
    	break;
 800301a:	e08b      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 4:
    	enum_bs[0]='A';
 800301c:	4b49      	ldr	r3, [pc, #292]	@ (8003144 <Enum_State_bs+0x208>)
 800301e:	2241      	movs	r2, #65	@ 0x41
 8003020:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003022:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <Enum_State_bs+0x208>)
 8003024:	2259      	movs	r2, #89	@ 0x59
 8003026:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='I';
 8003028:	4b46      	ldr	r3, [pc, #280]	@ (8003144 <Enum_State_bs+0x208>)
 800302a:	2249      	movs	r2, #73	@ 0x49
 800302c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='R';
 800302e:	4b45      	ldr	r3, [pc, #276]	@ (8003144 <Enum_State_bs+0x208>)
 8003030:	2252      	movs	r2, #82	@ 0x52
 8003032:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 8003034:	4b43      	ldr	r3, [pc, #268]	@ (8003144 <Enum_State_bs+0x208>)
 8003036:	2200      	movs	r2, #0
 8003038:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 800303a:	4b42      	ldr	r3, [pc, #264]	@ (8003144 <Enum_State_bs+0x208>)
 800303c:	2200      	movs	r2, #0
 800303e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003040:	4b40      	ldr	r3, [pc, #256]	@ (8003144 <Enum_State_bs+0x208>)
 8003042:	2200      	movs	r2, #0
 8003044:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003046:	4b3f      	ldr	r3, [pc, #252]	@ (8003144 <Enum_State_bs+0x208>)
 8003048:	2200      	movs	r2, #0
 800304a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 800304c:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <Enum_State_bs+0x208>)
 800304e:	2200      	movs	r2, #0
 8003050:	721a      	strb	r2, [r3, #8]
    	break;
 8003052:	e06f      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 5:
    	enum_bs[0]='A';
 8003054:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <Enum_State_bs+0x208>)
 8003056:	2241      	movs	r2, #65	@ 0x41
 8003058:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 800305a:	4b3a      	ldr	r3, [pc, #232]	@ (8003144 <Enum_State_bs+0x208>)
 800305c:	2259      	movs	r2, #89	@ 0x59
 800305e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <Enum_State_bs+0x208>)
 8003062:	2252      	movs	r2, #82	@ 0x52
 8003064:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <Enum_State_bs+0x208>)
 8003068:	2249      	movs	r2, #73	@ 0x49
 800306a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 800306c:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <Enum_State_bs+0x208>)
 800306e:	224c      	movs	r2, #76	@ 0x4c
 8003070:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 8003072:	4b34      	ldr	r3, [pc, #208]	@ (8003144 <Enum_State_bs+0x208>)
 8003074:	2244      	movs	r2, #68	@ 0x44
 8003076:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 8003078:	4b32      	ldr	r3, [pc, #200]	@ (8003144 <Enum_State_bs+0x208>)
 800307a:	2249      	movs	r2, #73	@ 0x49
 800307c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='?';
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <Enum_State_bs+0x208>)
 8003080:	223f      	movs	r2, #63	@ 0x3f
 8003082:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003084:	4b2f      	ldr	r3, [pc, #188]	@ (8003144 <Enum_State_bs+0x208>)
 8003086:	2200      	movs	r2, #0
 8003088:	721a      	strb	r2, [r3, #8]
    	break;
 800308a:	e053      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 6:
    	enum_bs[0]='A';
 800308c:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <Enum_State_bs+0x208>)
 800308e:	2241      	movs	r2, #65	@ 0x41
 8003090:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003092:	4b2c      	ldr	r3, [pc, #176]	@ (8003144 <Enum_State_bs+0x208>)
 8003094:	2259      	movs	r2, #89	@ 0x59
 8003096:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003098:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <Enum_State_bs+0x208>)
 800309a:	2252      	movs	r2, #82	@ 0x52
 800309c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <Enum_State_bs+0x208>)
 80030a0:	2249      	movs	r2, #73	@ 0x49
 80030a2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <Enum_State_bs+0x208>)
 80030a6:	224c      	movs	r2, #76	@ 0x4c
 80030a8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <Enum_State_bs+0x208>)
 80030ac:	2244      	movs	r2, #68	@ 0x44
 80030ae:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <Enum_State_bs+0x208>)
 80030b2:	2249      	movs	r2, #73	@ 0x49
 80030b4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <Enum_State_bs+0x208>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80030bc:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <Enum_State_bs+0x208>)
 80030be:	2200      	movs	r2, #0
 80030c0:	721a      	strb	r2, [r3, #8]
    	break;
 80030c2:	e037      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 7:
    	enum_bs[0]='A';
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <Enum_State_bs+0x208>)
 80030c6:	2241      	movs	r2, #65	@ 0x41
 80030c8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 80030ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <Enum_State_bs+0x208>)
 80030cc:	2259      	movs	r2, #89	@ 0x59
 80030ce:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 80030d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <Enum_State_bs+0x208>)
 80030d2:	2252      	movs	r2, #82	@ 0x52
 80030d4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <Enum_State_bs+0x208>)
 80030d8:	2249      	movs	r2, #73	@ 0x49
 80030da:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <Enum_State_bs+0x208>)
 80030de:	224c      	movs	r2, #76	@ 0x4c
 80030e0:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='M';
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <Enum_State_bs+0x208>)
 80030e4:	224d      	movs	r2, #77	@ 0x4d
 80030e6:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='A';
 80030e8:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <Enum_State_bs+0x208>)
 80030ea:	2241      	movs	r2, #65	@ 0x41
 80030ec:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='D';
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <Enum_State_bs+0x208>)
 80030f0:	2244      	movs	r2, #68	@ 0x44
 80030f2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='I';
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <Enum_State_bs+0x208>)
 80030f6:	2249      	movs	r2, #73	@ 0x49
 80030f8:	721a      	strb	r2, [r3, #8]
    	break;
 80030fa:	e01b      	b.n	8003134 <Enum_State_bs+0x1f8>
    case 8:
    	enum_bs[0]='F';
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <Enum_State_bs+0x208>)
 80030fe:	2246      	movs	r2, #70	@ 0x46
 8003100:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='I';
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <Enum_State_bs+0x208>)
 8003104:	2249      	movs	r2, #73	@ 0x49
 8003106:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='N';
 8003108:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <Enum_State_bs+0x208>)
 800310a:	224e      	movs	r2, #78	@ 0x4e
 800310c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <Enum_State_bs+0x208>)
 8003110:	2249      	movs	r2, #73	@ 0x49
 8003112:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='S';
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <Enum_State_bs+0x208>)
 8003116:	2253      	movs	r2, #83	@ 0x53
 8003118:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='H';
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <Enum_State_bs+0x208>)
 800311c:	2248      	movs	r2, #72	@ 0x48
 800311e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <Enum_State_bs+0x208>)
 8003122:	2200      	movs	r2, #0
 8003124:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <Enum_State_bs+0x208>)
 8003128:	2200      	movs	r2, #0
 800312a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <Enum_State_bs+0x208>)
 800312e:	2200      	movs	r2, #0
 8003130:	721a      	strb	r2, [r3, #8]
    	break;
 8003132:	bf00      	nop

    	 }

    NEXTION_SendString("bs10", &enum_bs);
 8003134:	4903      	ldr	r1, [pc, #12]	@ (8003144 <Enum_State_bs+0x208>)
 8003136:	4805      	ldr	r0, [pc, #20]	@ (800314c <Enum_State_bs+0x210>)
 8003138:	f7ff fd90 	bl	8002c5c <NEXTION_SendString>


}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200005fd 	.word	0x200005fd
 8003144:	200006e0 	.word	0x200006e0
 8003148:	200006ec 	.word	0x200006ec
 800314c:	08010eb0 	.word	0x08010eb0

08003150 <Enum_State_s>:
void Enum_State_s(void){
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0

    switch(sustv4_mod){
 8003154:	4b70      	ldr	r3, [pc, #448]	@ (8003318 <Enum_State_s+0x1c8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	3b01      	subs	r3, #1
 800315a:	2b06      	cmp	r3, #6
 800315c:	f200 80d6 	bhi.w	800330c <Enum_State_s+0x1bc>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <Enum_State_s+0x18>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	08003185 	.word	0x08003185
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031f5 	.word	0x080031f5
 8003174:	0800322d 	.word	0x0800322d
 8003178:	08003265 	.word	0x08003265
 800317c:	0800329d 	.word	0x0800329d
 8003180:	080032d5 	.word	0x080032d5

    case 1:
    	enum_s[0]='R';
 8003184:	4b65      	ldr	r3, [pc, #404]	@ (800331c <Enum_State_s+0x1cc>)
 8003186:	2252      	movs	r2, #82	@ 0x52
 8003188:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 800318a:	4b64      	ldr	r3, [pc, #400]	@ (800331c <Enum_State_s+0x1cc>)
 800318c:	2241      	movs	r2, #65	@ 0x41
 800318e:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='M';
 8003190:	4b62      	ldr	r3, [pc, #392]	@ (800331c <Enum_State_s+0x1cc>)
 8003192:	224d      	movs	r2, #77	@ 0x4d
 8003194:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='P';
 8003196:	4b61      	ldr	r3, [pc, #388]	@ (800331c <Enum_State_s+0x1cc>)
 8003198:	2250      	movs	r2, #80	@ 0x50
 800319a:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='A';
 800319c:	4b5f      	ldr	r3, [pc, #380]	@ (800331c <Enum_State_s+0x1cc>)
 800319e:	2241      	movs	r2, #65	@ 0x41
 80031a0:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 80031a2:	4b5e      	ldr	r3, [pc, #376]	@ (800331c <Enum_State_s+0x1cc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80031a8:	4b5c      	ldr	r3, [pc, #368]	@ (800331c <Enum_State_s+0x1cc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80031ae:	4b5b      	ldr	r3, [pc, #364]	@ (800331c <Enum_State_s+0x1cc>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 80031b4:	4b59      	ldr	r3, [pc, #356]	@ (800331c <Enum_State_s+0x1cc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	721a      	strb	r2, [r3, #8]
    	break;
 80031ba:	e0a7      	b.n	800330c <Enum_State_s+0x1bc>

    case 2:
    	enum_s[0]='U';
 80031bc:	4b57      	ldr	r3, [pc, #348]	@ (800331c <Enum_State_s+0x1cc>)
 80031be:	2255      	movs	r2, #85	@ 0x55
 80031c0:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='C';
 80031c2:	4b56      	ldr	r3, [pc, #344]	@ (800331c <Enum_State_s+0x1cc>)
 80031c4:	2243      	movs	r2, #67	@ 0x43
 80031c6:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='U';
 80031c8:	4b54      	ldr	r3, [pc, #336]	@ (800331c <Enum_State_s+0x1cc>)
 80031ca:	2255      	movs	r2, #85	@ 0x55
 80031cc:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='S';
 80031ce:	4b53      	ldr	r3, [pc, #332]	@ (800331c <Enum_State_s+0x1cc>)
 80031d0:	2253      	movs	r2, #83	@ 0x53
 80031d2:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 80031d4:	4b51      	ldr	r3, [pc, #324]	@ (800331c <Enum_State_s+0x1cc>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 80031da:	4b50      	ldr	r3, [pc, #320]	@ (800331c <Enum_State_s+0x1cc>)
 80031dc:	2200      	movs	r2, #0
 80031de:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80031e0:	4b4e      	ldr	r3, [pc, #312]	@ (800331c <Enum_State_s+0x1cc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80031e6:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <Enum_State_s+0x1cc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 80031ec:	4b4b      	ldr	r3, [pc, #300]	@ (800331c <Enum_State_s+0x1cc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	721a      	strb	r2, [r3, #8]
    	break;
 80031f2:	e08b      	b.n	800330c <Enum_State_s+0x1bc>
    case 3:
    	enum_s[0]='A';
 80031f4:	4b49      	ldr	r3, [pc, #292]	@ (800331c <Enum_State_s+0x1cc>)
 80031f6:	2241      	movs	r2, #65	@ 0x41
 80031f8:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 80031fa:	4b48      	ldr	r3, [pc, #288]	@ (800331c <Enum_State_s+0x1cc>)
 80031fc:	2259      	movs	r2, #89	@ 0x59
 80031fe:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003200:	4b46      	ldr	r3, [pc, #280]	@ (800331c <Enum_State_s+0x1cc>)
 8003202:	2252      	movs	r2, #82	@ 0x52
 8003204:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003206:	4b45      	ldr	r3, [pc, #276]	@ (800331c <Enum_State_s+0x1cc>)
 8003208:	2249      	movs	r2, #73	@ 0x49
 800320a:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 800320c:	4b43      	ldr	r3, [pc, #268]	@ (800331c <Enum_State_s+0x1cc>)
 800320e:	224c      	movs	r2, #76	@ 0x4c
 8003210:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003212:	4b42      	ldr	r3, [pc, #264]	@ (800331c <Enum_State_s+0x1cc>)
 8003214:	2244      	movs	r2, #68	@ 0x44
 8003216:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003218:	4b40      	ldr	r3, [pc, #256]	@ (800331c <Enum_State_s+0x1cc>)
 800321a:	2249      	movs	r2, #73	@ 0x49
 800321c:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='?';
 800321e:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <Enum_State_s+0x1cc>)
 8003220:	223f      	movs	r2, #63	@ 0x3f
 8003222:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003224:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <Enum_State_s+0x1cc>)
 8003226:	2200      	movs	r2, #0
 8003228:	721a      	strb	r2, [r3, #8]
    	break;
 800322a:	e06f      	b.n	800330c <Enum_State_s+0x1bc>
    case 4:
    	enum_s[0]='A';
 800322c:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <Enum_State_s+0x1cc>)
 800322e:	2241      	movs	r2, #65	@ 0x41
 8003230:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 8003232:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <Enum_State_s+0x1cc>)
 8003234:	2259      	movs	r2, #89	@ 0x59
 8003236:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003238:	4b38      	ldr	r3, [pc, #224]	@ (800331c <Enum_State_s+0x1cc>)
 800323a:	2252      	movs	r2, #82	@ 0x52
 800323c:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 800323e:	4b37      	ldr	r3, [pc, #220]	@ (800331c <Enum_State_s+0x1cc>)
 8003240:	2249      	movs	r2, #73	@ 0x49
 8003242:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003244:	4b35      	ldr	r3, [pc, #212]	@ (800331c <Enum_State_s+0x1cc>)
 8003246:	224c      	movs	r2, #76	@ 0x4c
 8003248:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 800324a:	4b34      	ldr	r3, [pc, #208]	@ (800331c <Enum_State_s+0x1cc>)
 800324c:	2244      	movs	r2, #68	@ 0x44
 800324e:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003250:	4b32      	ldr	r3, [pc, #200]	@ (800331c <Enum_State_s+0x1cc>)
 8003252:	2249      	movs	r2, #73	@ 0x49
 8003254:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <Enum_State_s+0x1cc>)
 8003258:	2200      	movs	r2, #0
 800325a:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 800325c:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <Enum_State_s+0x1cc>)
 800325e:	2200      	movs	r2, #0
 8003260:	721a      	strb	r2, [r3, #8]
    	break;
 8003262:	e053      	b.n	800330c <Enum_State_s+0x1bc>
    case 5:
    	enum_s[0]='A';
 8003264:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <Enum_State_s+0x1cc>)
 8003266:	2241      	movs	r2, #65	@ 0x41
 8003268:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='P';
 800326a:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <Enum_State_s+0x1cc>)
 800326c:	2250      	movs	r2, #80	@ 0x50
 800326e:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='O';
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <Enum_State_s+0x1cc>)
 8003272:	224f      	movs	r2, #79	@ 0x4f
 8003274:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='G';
 8003276:	4b29      	ldr	r3, [pc, #164]	@ (800331c <Enum_State_s+0x1cc>)
 8003278:	2247      	movs	r2, #71	@ 0x47
 800327a:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='E';
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <Enum_State_s+0x1cc>)
 800327e:	2245      	movs	r2, #69	@ 0x45
 8003280:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='E';
 8003282:	4b26      	ldr	r3, [pc, #152]	@ (800331c <Enum_State_s+0x1cc>)
 8003284:	2245      	movs	r2, #69	@ 0x45
 8003286:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <Enum_State_s+0x1cc>)
 800328a:	2200      	movs	r2, #0
 800328c:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 800328e:	4b23      	ldr	r3, [pc, #140]	@ (800331c <Enum_State_s+0x1cc>)
 8003290:	2200      	movs	r2, #0
 8003292:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <Enum_State_s+0x1cc>)
 8003296:	2200      	movs	r2, #0
 8003298:	721a      	strb	r2, [r3, #8]
    	break;
 800329a:	e037      	b.n	800330c <Enum_State_s+0x1bc>
    case 6:
    	enum_s[0]='M';
 800329c:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <Enum_State_s+0x1cc>)
 800329e:	224d      	movs	r2, #77	@ 0x4d
 80032a0:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <Enum_State_s+0x1cc>)
 80032a4:	2241      	movs	r2, #65	@ 0x41
 80032a6:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='I';
 80032a8:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <Enum_State_s+0x1cc>)
 80032aa:	2249      	movs	r2, #73	@ 0x49
 80032ac:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='N';
 80032ae:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <Enum_State_s+0x1cc>)
 80032b0:	224e      	movs	r2, #78	@ 0x4e
 80032b2:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <Enum_State_s+0x1cc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 80032ba:	4b18      	ldr	r3, [pc, #96]	@ (800331c <Enum_State_s+0x1cc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <Enum_State_s+0x1cc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <Enum_State_s+0x1cc>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <Enum_State_s+0x1cc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	721a      	strb	r2, [r3, #8]
    	break;
 80032d2:	e01b      	b.n	800330c <Enum_State_s+0x1bc>
    case 7:
    	enum_s[0]='F';
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <Enum_State_s+0x1cc>)
 80032d6:	2246      	movs	r2, #70	@ 0x46
 80032d8:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='I';
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <Enum_State_s+0x1cc>)
 80032dc:	2249      	movs	r2, #73	@ 0x49
 80032de:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='N';
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <Enum_State_s+0x1cc>)
 80032e2:	224e      	movs	r2, #78	@ 0x4e
 80032e4:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 80032e6:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <Enum_State_s+0x1cc>)
 80032e8:	2249      	movs	r2, #73	@ 0x49
 80032ea:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='S';
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <Enum_State_s+0x1cc>)
 80032ee:	2253      	movs	r2, #83	@ 0x53
 80032f0:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='H';
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <Enum_State_s+0x1cc>)
 80032f4:	2248      	movs	r2, #72	@ 0x48
 80032f6:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <Enum_State_s+0x1cc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80032fe:	4b07      	ldr	r3, [pc, #28]	@ (800331c <Enum_State_s+0x1cc>)
 8003300:	2200      	movs	r2, #0
 8003302:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <Enum_State_s+0x1cc>)
 8003306:	2200      	movs	r2, #0
 8003308:	721a      	strb	r2, [r3, #8]
    	break;
 800330a:	bf00      	nop



    	 }

    NEXTION_SendString("s10", &enum_s);
 800330c:	4903      	ldr	r1, [pc, #12]	@ (800331c <Enum_State_s+0x1cc>)
 800330e:	4804      	ldr	r0, [pc, #16]	@ (8003320 <Enum_State_s+0x1d0>)
 8003310:	f7ff fca4 	bl	8002c5c <NEXTION_SendString>


}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200005e7 	.word	0x200005e7
 800331c:	200006ec 	.word	0x200006ec
 8003320:	08010eb8 	.word	0x08010eb8

08003324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003328:	b672      	cpsid	i
}
 800332a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <Error_Handler+0x8>

08003330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a0f      	ldr	r2, [pc, #60]	@ (800337c <HAL_MspInit+0x4c>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <HAL_MspInit+0x4c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <HAL_MspInit+0x4c>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_MspInit+0x4c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_ADC_MspInit+0x7c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d127      	bne.n	80033f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <HAL_ADC_MspInit+0x80>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 80033da:	2304      	movs	r3, #4
 80033dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033de:	2303      	movs	r3, #3
 80033e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4805      	ldr	r0, [pc, #20]	@ (8003404 <HAL_ADC_MspInit+0x84>)
 80033ee:	f000 ff79 	bl	80042e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40012000 	.word	0x40012000
 8003400:	40023800 	.word	0x40023800
 8003404:	40020800 	.word	0x40020800

08003408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	@ (800348c <HAL_I2C_MspInit+0x84>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12b      	bne.n	8003482 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a17      	ldr	r2, [pc, #92]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003446:	23c0      	movs	r3, #192	@ 0xc0
 8003448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344a:	2312      	movs	r3, #18
 800344c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003456:	2304      	movs	r3, #4
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	4619      	mov	r1, r3
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <HAL_I2C_MspInit+0x8c>)
 8003462:	f000 ff3f 	bl	80042e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 8003470:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_I2C_MspInit+0x88>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003482:	bf00      	nop
 8003484:	3728      	adds	r7, #40	@ 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40005400 	.word	0x40005400
 8003490:	40023800 	.word	0x40023800
 8003494:	40020400 	.word	0x40020400

08003498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a19      	ldr	r2, [pc, #100]	@ (800351c <HAL_SPI_MspInit+0x84>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d12b      	bne.n	8003512 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_SPI_MspInit+0x88>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034f2:	23e0      	movs	r3, #224	@ 0xe0
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003502:	2305      	movs	r3, #5
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	4805      	ldr	r0, [pc, #20]	@ (8003524 <HAL_SPI_MspInit+0x8c>)
 800350e:	f000 fee9 	bl	80042e4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	@ 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40013000 	.word	0x40013000
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000

08003528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	@ 0x38
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a62      	ldr	r2, [pc, #392]	@ (80036d0 <HAL_UART_MspInit+0x1a8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d12c      	bne.n	80035a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	4b61      	ldr	r3, [pc, #388]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	4a60      	ldr	r2, [pc, #384]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003554:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003558:	6413      	str	r3, [r2, #64]	@ 0x40
 800355a:	4b5e      	ldr	r3, [pc, #376]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	4b5a      	ldr	r3, [pc, #360]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	4a59      	ldr	r2, [pc, #356]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6313      	str	r3, [r2, #48]	@ 0x30
 8003576:	4b57      	ldr	r3, [pc, #348]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003582:	2303      	movs	r3, #3
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358e:	2303      	movs	r3, #3
 8003590:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003592:	2308      	movs	r3, #8
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800359a:	4619      	mov	r1, r3
 800359c:	484e      	ldr	r0, [pc, #312]	@ (80036d8 <HAL_UART_MspInit+0x1b0>)
 800359e:	f000 fea1 	bl	80042e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035a2:	e091      	b.n	80036c8 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	@ (80036dc <HAL_UART_MspInit+0x1b4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d134      	bne.n	8003618 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	4b48      	ldr	r3, [pc, #288]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4a47      	ldr	r2, [pc, #284]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035be:	4b45      	ldr	r3, [pc, #276]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a40      	ldr	r2, [pc, #256]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80035e6:	230c      	movs	r3, #12
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035f6:	2307      	movs	r3, #7
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fe:	4619      	mov	r1, r3
 8003600:	4835      	ldr	r0, [pc, #212]	@ (80036d8 <HAL_UART_MspInit+0x1b0>)
 8003602:	f000 fe6f 	bl	80042e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003606:	2200      	movs	r2, #0
 8003608:	2100      	movs	r1, #0
 800360a:	2026      	movs	r0, #38	@ 0x26
 800360c:	f000 fda1 	bl	8004152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003610:	2026      	movs	r0, #38	@ 0x26
 8003612:	f000 fdba 	bl	800418a <HAL_NVIC_EnableIRQ>
}
 8003616:	e057      	b.n	80036c8 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <HAL_UART_MspInit+0x1b8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d152      	bne.n	80036c8 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6313      	str	r3, [r2, #48]	@ 0x30
 800364e:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_UART_MspInit+0x1ac>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8003676:	2320      	movs	r3, #32
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003686:	2307      	movs	r3, #7
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368e:	4619      	mov	r1, r3
 8003690:	4814      	ldr	r0, [pc, #80]	@ (80036e4 <HAL_UART_MspInit+0x1bc>)
 8003692:	f000 fe27 	bl	80042e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8003696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036a8:	2307      	movs	r3, #7
 80036aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b0:	4619      	mov	r1, r3
 80036b2:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <HAL_UART_MspInit+0x1c0>)
 80036b4:	f000 fe16 	bl	80042e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2027      	movs	r0, #39	@ 0x27
 80036be:	f000 fd48 	bl	8004152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036c2:	2027      	movs	r0, #39	@ 0x27
 80036c4:	f000 fd61 	bl	800418a <HAL_NVIC_EnableIRQ>
}
 80036c8:	bf00      	nop
 80036ca:	3738      	adds	r7, #56	@ 0x38
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40004400 	.word	0x40004400
 80036e0:	40004800 	.word	0x40004800
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020400 	.word	0x40020400

080036ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <NMI_Handler+0x4>

080036f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <MemManage_Handler+0x4>

08003704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <UsageFault_Handler+0x4>

08003714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003742:	f000 f975 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <USART2_IRQHandler+0x10>)
 8003752:	f003 fe2d 	bl	80073b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000444 	.word	0x20000444

08003760 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <USART3_IRQHandler+0x10>)
 8003766:	f003 fe23 	bl	80073b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000488 	.word	0x20000488

08003774 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <OTG_FS_IRQHandler+0x10>)
 800377a:	f001 f9fc 	bl	8004b76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200014ec 	.word	0x200014ec

08003788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return 1;
 800378c:	2301      	movs	r3, #1
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_kill>:

int _kill(int pid, int sig)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037a2:	f00a fe61 	bl	800e468 <__errno>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2216      	movs	r2, #22
 80037aa:	601a      	str	r2, [r3, #0]
  return -1;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_exit>:

void _exit (int status)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffe7 	bl	8003798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ca:	bf00      	nop
 80037cc:	e7fd      	b.n	80037ca <_exit+0x12>

080037ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e00a      	b.n	80037f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037e0:	f3af 8000 	nop.w
 80037e4:	4601      	mov	r1, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	60ba      	str	r2, [r7, #8]
 80037ec:	b2ca      	uxtb	r2, r1
 80037ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3301      	adds	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	dbf0      	blt.n	80037e0 <_read+0x12>
  }

  return len;
 80037fe:	687b      	ldr	r3, [r7, #4]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e009      	b.n	800382e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	60ba      	str	r2, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3301      	adds	r3, #1
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	dbf1      	blt.n	800381a <_write+0x12>
  }
  return len;
 8003836:	687b      	ldr	r3, [r7, #4]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <_close>:

int _close(int file)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003868:	605a      	str	r2, [r3, #4]
  return 0;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_isatty>:

int _isatty(int file)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003880:	2301      	movs	r3, #1
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b0:	4a14      	ldr	r2, [pc, #80]	@ (8003904 <_sbrk+0x5c>)
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <_sbrk+0x60>)
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038bc:	4b13      	ldr	r3, [pc, #76]	@ (800390c <_sbrk+0x64>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c4:	4b11      	ldr	r3, [pc, #68]	@ (800390c <_sbrk+0x64>)
 80038c6:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <_sbrk+0x68>)
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ca:	4b10      	ldr	r3, [pc, #64]	@ (800390c <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d8:	f00a fdc6 	bl	800e468 <__errno>
 80038dc:	4603      	mov	r3, r0
 80038de:	220c      	movs	r2, #12
 80038e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e009      	b.n	80038fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <_sbrk+0x64>)
 80038f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20020000 	.word	0x20020000
 8003908:	00000400 	.word	0x00000400
 800390c:	200007f0 	.word	0x200007f0
 8003910:	20001d68 	.word	0x20001d68

08003914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <SystemInit+0x20>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	4a05      	ldr	r2, [pc, #20]	@ (8003934 <SystemInit+0x20>)
 8003920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800393c:	480d      	ldr	r0, [pc, #52]	@ (8003974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800393e:	490e      	ldr	r1, [pc, #56]	@ (8003978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003940:	4a0e      	ldr	r2, [pc, #56]	@ (800397c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a0b      	ldr	r2, [pc, #44]	@ (8003980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003954:	4c0b      	ldr	r4, [pc, #44]	@ (8003984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003962:	f7ff ffd7 	bl	8003914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003966:	f00a fd85 	bl	800e474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7fe f933 	bl	8001bd4 <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003978:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800397c:	08011358 	.word	0x08011358
  ldr r2, =_sbss
 8003980:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8003984:	20001d64 	.word	0x20001d64

08003988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <ADC_IRQHandler>
	...

0800398c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <HAL_Init+0x40>)
 8003996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800399a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <HAL_Init+0x40>)
 80039a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a8:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <HAL_Init+0x40>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <HAL_Init+0x40>)
 80039ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f000 fbc1 	bl	800413c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ba:	200f      	movs	r0, #15
 80039bc:	f000 f808 	bl	80039d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7ff fcb6 	bl	8003330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d8:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_InitTick+0x54>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_InitTick+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fbd9 	bl	80041a6 <HAL_SYSTICK_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d80a      	bhi.n	8003a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f000 fba1 	bl	8004152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a10:	4a06      	ldr	r2, [pc, #24]	@ (8003a2c <HAL_InitTick+0x5c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000004 	.word	0x20000004
 8003a28:	2000000c 	.word	0x2000000c
 8003a2c:	20000008 	.word	0x20000008

08003a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b06      	ldr	r3, [pc, #24]	@ (8003a50 <HAL_IncTick+0x20>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <HAL_IncTick+0x24>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a04      	ldr	r2, [pc, #16]	@ (8003a54 <HAL_IncTick+0x24>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	200007f4 	.word	0x200007f4

08003a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <HAL_GetTick+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200007f4 	.word	0x200007f4

08003a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff ffee 	bl	8003a58 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d005      	beq.n	8003a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <HAL_Delay+0x44>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a96:	bf00      	nop
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d8f7      	bhi.n	8003a98 <HAL_Delay+0x28>
  {
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000000c 	.word	0x2000000c

08003ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e033      	b.n	8003b36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fc52 	bl	8003380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d118      	bne.n	8003b28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003afe:	f023 0302 	bic.w	r3, r3, #2
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f94a 	bl	8003da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1c>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e113      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x244>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d925      	bls.n	8003bb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68d9      	ldr	r1, [r3, #12]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	3b1e      	subs	r3, #30
 8003b82:	2207      	movs	r2, #7
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	400a      	ands	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4403      	add	r3, r0
 8003baa:	3b1e      	subs	r3, #30
 8003bac:	409a      	lsls	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e022      	b.n	8003bfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6919      	ldr	r1, [r3, #16]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	2207      	movs	r2, #7
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	400a      	ands	r2, r1
 8003bda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6919      	ldr	r1, [r3, #16]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4618      	mov	r0, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4403      	add	r3, r0
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d824      	bhi.n	8003c50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b05      	subs	r3, #5
 8003c18:	221f      	movs	r2, #31
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	400a      	ands	r2, r1
 8003c26:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	4618      	mov	r0, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b05      	subs	r3, #5
 8003c42:	fa00 f203 	lsl.w	r2, r0, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c4e:	e04c      	b.n	8003cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d824      	bhi.n	8003ca2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	3b23      	subs	r3, #35	@ 0x23
 8003c6a:	221f      	movs	r2, #31
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43da      	mvns	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	400a      	ands	r2, r1
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	4618      	mov	r0, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	3b23      	subs	r3, #35	@ 0x23
 8003c94:	fa00 f203 	lsl.w	r2, r0, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca0:	e023      	b.n	8003cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3b41      	subs	r3, #65	@ 0x41
 8003cb4:	221f      	movs	r2, #31
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b41      	subs	r3, #65	@ 0x41
 8003cde:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cea:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <HAL_ADC_ConfigChannel+0x250>)
 8003cec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a28      	ldr	r2, [pc, #160]	@ (8003d94 <HAL_ADC_ConfigChannel+0x254>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10f      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x1d8>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b12      	cmp	r3, #18
 8003cfe:	d10b      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d94 <HAL_ADC_ConfigChannel+0x254>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12b      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x23a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1c      	ldr	r2, [pc, #112]	@ (8003d98 <HAL_ADC_ConfigChannel+0x258>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <HAL_ADC_ConfigChannel+0x1f4>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b11      	cmp	r3, #17
 8003d32:	d122      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <HAL_ADC_ConfigChannel+0x258>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d111      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_ADC_ConfigChannel+0x25c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a11      	ldr	r2, [pc, #68]	@ (8003da0 <HAL_ADC_ConfigChannel+0x260>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	0c9a      	lsrs	r2, r3, #18
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d6c:	e002      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f9      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012300 	.word	0x40012300
 8003d94:	40012000 	.word	0x40012000
 8003d98:	10000012 	.word	0x10000012
 8003d9c:	20000004 	.word	0x20000004
 8003da0:	431bde83 	.word	0x431bde83

08003da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dac:	4b79      	ldr	r3, [pc, #484]	@ (8003f94 <ADC_Init+0x1f0>)
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <ADC_Init+0x1f4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e00f      	b.n	8003ea2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ea0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0202 	bic.w	r2, r2, #2
 8003eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7e1b      	ldrb	r3, [r3, #24]
 8003ebc:	005a      	lsls	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ede:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003eee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	3b01      	subs	r3, #1
 8003efc:	035a      	lsls	r2, r3, #13
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	e007      	b.n	8003f18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	051a      	lsls	r2, r3, #20
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f5a:	025a      	lsls	r2, r3, #9
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	029a      	lsls	r2, r3, #10
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40012300 	.word	0x40012300
 8003f98:	0f000001 	.word	0x0f000001

08003f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fce:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	60d3      	str	r3, [r2, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__NVIC_GetPriorityGrouping+0x18>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0307 	and.w	r3, r3, #7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db0b      	blt.n	800402a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4907      	ldr	r1, [pc, #28]	@ (8004038 <__NVIC_EnableIRQ+0x38>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2001      	movs	r0, #1
 8004022:	fa00 f202 	lsl.w	r2, r0, r2
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	@ (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	@ (800408c <__NVIC_SetPriority+0x50>)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	@ 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f1c3 0307 	rsb	r3, r3, #7
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf28      	it	cs
 80040ae:	2304      	movcs	r3, #4
 80040b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d902      	bls.n	80040c0 <NVIC_EncodePriority+0x30>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3b03      	subs	r3, #3
 80040be:	e000      	b.n	80040c2 <NVIC_EncodePriority+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	401a      	ands	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43d9      	mvns	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	4313      	orrs	r3, r2
         );
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	@ 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004108:	d301      	bcc.n	800410e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800410a:	2301      	movs	r3, #1
 800410c:	e00f      	b.n	800412e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410e:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <SysTick_Config+0x40>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004116:	210f      	movs	r1, #15
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	f7ff ff8e 	bl	800403c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <SysTick_Config+0x40>)
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004126:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <SysTick_Config+0x40>)
 8004128:	2207      	movs	r2, #7
 800412a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	e000e010 	.word	0xe000e010

0800413c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff29 	bl	8003f9c <__NVIC_SetPriorityGrouping>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004164:	f7ff ff3e 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 8004168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7ff ff8e 	bl	8004090 <NVIC_EncodePriority>
 8004174:	4602      	mov	r2, r0
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff5d 	bl	800403c <__NVIC_SetPriority>
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff31 	bl	8004000 <__NVIC_EnableIRQ>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ffa2 	bl	80040f8 <SysTick_Config>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff fc44 	bl	8003a58 <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d008      	beq.n	80041f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2280      	movs	r2, #128	@ 0x80
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e052      	b.n	8004296 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0216 	bic.w	r2, r2, #22
 80041fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800420e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_DMA_Abort+0x62>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0208 	bic.w	r2, r2, #8
 800422e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004240:	e013      	b.n	800426a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004242:	f7ff fc09 	bl	8003a58 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b05      	cmp	r3, #5
 800424e:	d90c      	bls.n	800426a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2203      	movs	r2, #3
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e015      	b.n	8004296 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e4      	bne.n	8004242 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	223f      	movs	r2, #63	@ 0x3f
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d004      	beq.n	80042bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2280      	movs	r2, #128	@ 0x80
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e00c      	b.n	80042d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2205      	movs	r2, #5
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	@ 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e165      	b.n	80045cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004300:	2201      	movs	r2, #1
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	429a      	cmp	r2, r3
 800431a:	f040 8154 	bne.w	80045c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d005      	beq.n	8004336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004332:	2b02      	cmp	r3, #2
 8004334:	d130      	bne.n	8004398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	2203      	movs	r2, #3
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800436c:	2201      	movs	r2, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 0201 	and.w	r2, r3, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d017      	beq.n	80043d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	2203      	movs	r2, #3
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d123      	bne.n	8004428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	08da      	lsrs	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3208      	adds	r2, #8
 80043e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	220f      	movs	r2, #15
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	08da      	lsrs	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3208      	adds	r2, #8
 8004422:	69b9      	ldr	r1, [r7, #24]
 8004424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0203 	and.w	r2, r3, #3
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ae 	beq.w	80045c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b5d      	ldr	r3, [pc, #372]	@ (80045e4 <HAL_GPIO_Init+0x300>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	4a5c      	ldr	r2, [pc, #368]	@ (80045e4 <HAL_GPIO_Init+0x300>)
 8004474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004478:	6453      	str	r3, [r2, #68]	@ 0x44
 800447a:	4b5a      	ldr	r3, [pc, #360]	@ (80045e4 <HAL_GPIO_Init+0x300>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004486:	4a58      	ldr	r2, [pc, #352]	@ (80045e8 <HAL_GPIO_Init+0x304>)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	3302      	adds	r3, #2
 800448e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	220f      	movs	r2, #15
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	@ (80045ec <HAL_GPIO_Init+0x308>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d025      	beq.n	80044fe <HAL_GPIO_Init+0x21a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4e      	ldr	r2, [pc, #312]	@ (80045f0 <HAL_GPIO_Init+0x30c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01f      	beq.n	80044fa <HAL_GPIO_Init+0x216>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4d      	ldr	r2, [pc, #308]	@ (80045f4 <HAL_GPIO_Init+0x310>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d019      	beq.n	80044f6 <HAL_GPIO_Init+0x212>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	@ (80045f8 <HAL_GPIO_Init+0x314>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0x20e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	@ (80045fc <HAL_GPIO_Init+0x318>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00d      	beq.n	80044ee <HAL_GPIO_Init+0x20a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004600 <HAL_GPIO_Init+0x31c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <HAL_GPIO_Init+0x206>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a49      	ldr	r2, [pc, #292]	@ (8004604 <HAL_GPIO_Init+0x320>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_GPIO_Init+0x202>
 80044e2:	2306      	movs	r3, #6
 80044e4:	e00c      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044e6:	2307      	movs	r3, #7
 80044e8:	e00a      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044ea:	2305      	movs	r3, #5
 80044ec:	e008      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e006      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044f2:	2303      	movs	r3, #3
 80044f4:	e004      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e002      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_GPIO_Init+0x21c>
 80044fe:	2300      	movs	r3, #0
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	f002 0203 	and.w	r2, r2, #3
 8004506:	0092      	lsls	r2, r2, #2
 8004508:	4093      	lsls	r3, r2
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004510:	4935      	ldr	r1, [pc, #212]	@ (80045e8 <HAL_GPIO_Init+0x304>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	3302      	adds	r3, #2
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451e:	4b3a      	ldr	r3, [pc, #232]	@ (8004608 <HAL_GPIO_Init+0x324>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004542:	4a31      	ldr	r2, [pc, #196]	@ (8004608 <HAL_GPIO_Init+0x324>)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004548:	4b2f      	ldr	r3, [pc, #188]	@ (8004608 <HAL_GPIO_Init+0x324>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800456c:	4a26      	ldr	r2, [pc, #152]	@ (8004608 <HAL_GPIO_Init+0x324>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004572:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <HAL_GPIO_Init+0x324>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004596:	4a1c      	ldr	r2, [pc, #112]	@ (8004608 <HAL_GPIO_Init+0x324>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459c:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_GPIO_Init+0x324>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045c0:	4a11      	ldr	r2, [pc, #68]	@ (8004608 <HAL_GPIO_Init+0x324>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3301      	adds	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	f67f ae96 	bls.w	8004300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	3724      	adds	r7, #36	@ 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40013800 	.word	0x40013800
 80045ec:	40020000 	.word	0x40020000
 80045f0:	40020400 	.word	0x40020400
 80045f4:	40020800 	.word	0x40020800
 80045f8:	40020c00 	.word	0x40020c00
 80045fc:	40021000 	.word	0x40021000
 8004600:	40021400 	.word	0x40021400
 8004604:	40021800 	.word	0x40021800
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e12b      	b.n	80048aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fe fece 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	@ 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046a4:	f001 fccc 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a81      	ldr	r2, [pc, #516]	@ (80048b4 <HAL_I2C_Init+0x274>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d807      	bhi.n	80046c4 <HAL_I2C_Init+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a80      	ldr	r2, [pc, #512]	@ (80048b8 <HAL_I2C_Init+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf94      	ite	ls
 80046bc:	2301      	movls	r3, #1
 80046be:	2300      	movhi	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e006      	b.n	80046d2 <HAL_I2C_Init+0x92>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	@ (80048bc <HAL_I2C_Init+0x27c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0e7      	b.n	80048aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a78      	ldr	r2, [pc, #480]	@ (80048c0 <HAL_I2C_Init+0x280>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0c9b      	lsrs	r3, r3, #18
 80046e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a6a      	ldr	r2, [pc, #424]	@ (80048b4 <HAL_I2C_Init+0x274>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <HAL_I2C_Init+0xd4>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	e009      	b.n	8004728 <HAL_I2C_Init+0xe8>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_I2C_Init+0x284>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	3301      	adds	r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	430b      	orrs	r3, r1
 800472e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800473a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	495c      	ldr	r1, [pc, #368]	@ (80048b4 <HAL_I2C_Init+0x274>)
 8004744:	428b      	cmp	r3, r1
 8004746:	d819      	bhi.n	800477c <HAL_I2C_Init+0x13c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e59      	subs	r1, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fbb1 f3f3 	udiv	r3, r1, r3
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800475c:	400b      	ands	r3, r1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_I2C_Init+0x138>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e59      	subs	r1, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	e051      	b.n	800481c <HAL_I2C_Init+0x1dc>
 8004778:	2304      	movs	r3, #4
 800477a:	e04f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <HAL_I2C_Init+0x168>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	440b      	add	r3, r1
 8004792:	fbb0 f3f3 	udiv	r3, r0, r3
 8004796:	3301      	adds	r3, #1
 8004798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e012      	b.n	80047ce <HAL_I2C_Init+0x18e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x196>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e022      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10e      	bne.n	80047fc <HAL_I2C_Init+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e58      	subs	r0, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	440b      	add	r3, r1
 80047ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fa:	e00f      	b.n	800481c <HAL_I2C_Init+0x1dc>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800484a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6911      	ldr	r1, [r2, #16]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68d2      	ldr	r2, [r2, #12]
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	430b      	orrs	r3, r1
 800485e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	001e847f 	.word	0x001e847f
 80048bc:	003d08ff 	.word	0x003d08ff
 80048c0:	431bde83 	.word	0x431bde83
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ca:	b08f      	sub	sp, #60	@ 0x3c
 80048cc:	af0a      	add	r7, sp, #40	@ 0x28
 80048ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e116      	b.n	8004b08 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f007 fb6d 	bl	800bfd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f003 fdc6 	bl	80084aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	687e      	ldr	r6, [r7, #4]
 8004926:	466d      	mov	r5, sp
 8004928:	f106 0410 	add.w	r4, r6, #16
 800492c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004938:	e885 0003 	stmia.w	r5, {r0, r1}
 800493c:	1d33      	adds	r3, r6, #4
 800493e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f003 fc9d 	bl	8008280 <USB_CoreInit>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0d7      	b.n	8004b08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fdb4 	bl	80084cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e04a      	b.n	8004a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	333d      	adds	r3, #61	@ 0x3d
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	333c      	adds	r3, #60	@ 0x3c
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	b298      	uxth	r0, r3
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	3344      	adds	r3, #68	@ 0x44
 80049a6:	4602      	mov	r2, r0
 80049a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	3340      	adds	r3, #64	@ 0x40
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3348      	adds	r3, #72	@ 0x48
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	334c      	adds	r3, #76	@ 0x4c
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3354      	adds	r3, #84	@ 0x54
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3301      	adds	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d3af      	bcc.n	800496a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e044      	b.n	8004a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3b5      	bcc.n	8004a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	687e      	ldr	r6, [r7, #4]
 8004aac:	466d      	mov	r5, sp
 8004aae:	f106 0410 	add.w	r4, r6, #16
 8004ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ac2:	1d33      	adds	r3, r6, #4
 8004ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f003 fd4c 	bl	8008564 <USB_DevInit>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e014      	b.n	8004b08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f98c 	bl	8005e14 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f004 fe8e 	bl	8009822 <USB_DevDisconnect>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_PCD_Start+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e020      	b.n	8004b6e <HAL_PCD_Start+0x5e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d109      	bne.n	8004b50 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d005      	beq.n	8004b50 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f003 fc97 	bl	8008488 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f004 fe3e 	bl	80097e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b76:	b590      	push	{r4, r7, lr}
 8004b78:	b08d      	sub	sp, #52	@ 0x34
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f004 fefc 	bl	800998a <USB_GetMode>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 84b7 	bne.w	8005508 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f004 fe60 	bl	8009864 <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 84ad 	beq.w	8005506 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f004 fe4d 	bl	8009864 <USB_ReadInterrupts>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d107      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f002 0202 	and.w	r2, r2, #2
 8004be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f004 fe3b 	bl	8009864 <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d161      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0210 	bic.w	r2, r2, #16
 8004c06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	3304      	adds	r3, #4
 8004c26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	0c5b      	lsrs	r3, r3, #17
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d124      	bne.n	8004c7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d035      	beq.n	8004cac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6a38      	ldr	r0, [r7, #32]
 8004c54:	f004 fc72 	bl	800953c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c64:	441a      	add	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c76:	441a      	add	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
 8004c7c:	e016      	b.n	8004cac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	0c5b      	lsrs	r3, r3, #17
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d110      	bne.n	8004cac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004c90:	2208      	movs	r2, #8
 8004c92:	4619      	mov	r1, r3
 8004c94:	6a38      	ldr	r0, [r7, #32]
 8004c96:	f004 fc51 	bl	800953c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ca6:	441a      	add	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0210 	orr.w	r2, r2, #16
 8004cba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f004 fdcf 	bl	8009864 <USB_ReadInterrupts>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ccc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cd0:	f040 80a7 	bne.w	8004e22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fdd4 	bl	800988a <USB_ReadDevAllOutEpInterrupt>
 8004ce2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004ce4:	e099      	b.n	8004e1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 808e 	beq.w	8004e0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f004 fdf8 	bl	80098f2 <USB_ReadDevOutEPInterrupt>
 8004d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fef0 	bl	8005b08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2308      	movs	r3, #8
 8004d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 ffc6 	bl	8005cd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	2310      	movs	r3, #16
 8004d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d030      	beq.n	8004dd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b80      	cmp	r3, #128	@ 0x80
 8004d7c:	d109      	bne.n	8004d92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	3304      	adds	r3, #4
 8004da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	78db      	ldrb	r3, [r3, #3]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d108      	bne.n	8004dc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f007 fa25 	bl	800c20c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	2320      	movs	r3, #32
 8004dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	3301      	adds	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af62 	bne.w	8004ce6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f004 fd1c 	bl	8009864 <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e36:	f040 80db 	bne.w	8004ff0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f004 fd3d 	bl	80098be <USB_ReadDevAllInEpInterrupt>
 8004e44:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004e4a:	e0cd      	b.n	8004fe8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80c2 	beq.w	8004fdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 fd63 	bl	800992e <USB_ReadDevInEPInterrupt>
 8004e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d057      	beq.n	8004f24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69f9      	ldr	r1, [r7, #28]
 8004e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e94:	4013      	ands	r3, r2
 8004e96:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d132      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	334c      	adds	r3, #76	@ 0x4c
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4403      	add	r3, r0
 8004ed2:	3348      	adds	r3, #72	@ 0x48
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4419      	add	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4403      	add	r3, r0
 8004ee6:	334c      	adds	r3, #76	@ 0x4c
 8004ee8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d113      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x3a2>
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3354      	adds	r3, #84	@ 0x54
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d108      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004f10:	461a      	mov	r2, r3
 8004f12:	2101      	movs	r1, #1
 8004f14:	f004 fd6a 	bl	80099ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f007 f8ef 	bl	800c102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f56:	461a      	mov	r2, r3
 8004f58:	2310      	movs	r3, #16
 8004f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f72:	461a      	mov	r2, r3
 8004f74:	2340      	movs	r3, #64	@ 0x40
 8004f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d023      	beq.n	8004fca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f84:	6a38      	ldr	r0, [r7, #32]
 8004f86:	f003 fc4b 	bl	8008820 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	3338      	adds	r3, #56	@ 0x38
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	78db      	ldrb	r3, [r3, #3]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d108      	bne.n	8004fb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f007 f93c 	bl	800c230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fd08 	bl	80059ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f af2e 	bne.w	8004e4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f004 fc35 	bl	8009864 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005004:	d122      	bne.n	800504c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800502c:	2100      	movs	r1, #0
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f007 fab6 	bl	800c5a0 <HAL_PCDEx_LPM_Callback>
 8005034:	e002      	b.n	800503c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f007 f8da 	bl	800c1f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800504a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f004 fc07 	bl	8009864 <USB_ReadInterrupts>
 8005056:	4603      	mov	r3, r0
 8005058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005060:	d112      	bne.n	8005088 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f007 f896 	bl	800c1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005086:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f004 fbe9 	bl	8009864 <USB_ReadInterrupts>
 8005092:	4603      	mov	r3, r0
 8005094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800509c:	d121      	bne.n	80050e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80050ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d111      	bne.n	80050dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050d2:	2101      	movs	r1, #1
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f007 fa63 	bl	800c5a0 <HAL_PCDEx_LPM_Callback>
 80050da:	e002      	b.n	80050e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f007 f861 	bl	800c1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f004 fbbc 	bl	8009864 <USB_ReadInterrupts>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f6:	f040 80b7 	bne.w	8005268 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2110      	movs	r1, #16
 8005114:	4618      	mov	r0, r3
 8005116:	f003 fb83 	bl	8008820 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511a:	2300      	movs	r3, #0
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511e:	e046      	b.n	80051ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512c:	461a      	mov	r2, r3
 800512e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800514e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051aa:	3301      	adds	r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3b3      	bcc.n	8005120 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051c6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d016      	beq.n	8005202 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e4:	f043 030b 	orr.w	r3, r3, #11
 80051e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051fa:	f043 030b 	orr.w	r3, r3, #11
 80051fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005200:	e015      	b.n	800522e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005214:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005218:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005228:	f043 030b 	orr.w	r3, r3, #11
 800522c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800523c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005240:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005252:	461a      	mov	r2, r3
 8005254:	f004 fbca 	bl	80099ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f004 faf9 	bl	8009864 <USB_ReadInterrupts>
 8005272:	4603      	mov	r3, r0
 8005274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800527c:	d124      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f004 fb8f 	bl	80099a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f003 fb44 	bl	800891a <USB_GetDevSpeed>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681c      	ldr	r4, [r3, #0]
 800529e:	f000 fec3 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 80052a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	4620      	mov	r0, r4
 80052ae:	f003 f849 	bl	8008344 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f006 ff4d 	bl	800c152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fac9 	bl	8009864 <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d10a      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f006 ff2a 	bl	800c136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f002 0208 	and.w	r2, r2, #8
 80052f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 fab4 	bl	8009864 <USB_ReadInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b80      	cmp	r3, #128	@ 0x80
 8005304:	d122      	bne.n	800534c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005312:	2301      	movs	r3, #1
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
 8005316:	e014      	b.n	8005342 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d105      	bne.n	800533c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	b2db      	uxtb	r3, r3
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fb27 	bl	800598a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	3301      	adds	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005348:	429a      	cmp	r2, r3
 800534a:	d3e5      	bcc.n	8005318 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f004 fa87 	bl	8009864 <USB_ReadInterrupts>
 8005356:	4603      	mov	r3, r0
 8005358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005360:	d13b      	bne.n	80053da <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005362:	2301      	movs	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
 8005366:	e02b      	b.n	80053c0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	3340      	adds	r3, #64	@ 0x40
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d115      	bne.n	80053ba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800538e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005390:	2b00      	cmp	r3, #0
 8005392:	da12      	bge.n	80053ba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	333f      	adds	r3, #63	@ 0x3f
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fae8 	bl	800598a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	3301      	adds	r3, #1
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d3ce      	bcc.n	8005368 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80053d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f004 fa40 	bl	8009864 <USB_ReadInterrupts>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053ee:	d155      	bne.n	800549c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053f0:	2301      	movs	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f4:	e045      	b.n	8005482 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d12e      	bne.n	800547c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800541e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005420:	2b00      	cmp	r3, #0
 8005422:	da2b      	bge.n	800547c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005430:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005434:	429a      	cmp	r2, r3
 8005436:	d121      	bne.n	800547c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005474:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005478:	6053      	str	r3, [r2, #4]
            break;
 800547a:	e007      	b.n	800548c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005488:	429a      	cmp	r2, r3
 800548a:	d3b4      	bcc.n	80053f6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800549a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 f9df 	bl	8009864 <USB_ReadInterrupts>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b0:	d10a      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f006 fece 	bl	800c254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 f9c9 	bl	8009864 <USB_ReadInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d115      	bne.n	8005508 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f006 febe 	bl	800c270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	e000      	b.n	8005508 <HAL_PCD_IRQHandler+0x992>
      return;
 8005506:	bf00      	nop
    }
  }
}
 8005508:	3734      	adds	r7, #52	@ 0x34
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}

0800550e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_PCD_SetAddress+0x1a>
 8005524:	2302      	movs	r3, #2
 8005526:	e013      	b.n	8005550 <HAL_PCD_SetAddress+0x42>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f004 f927 	bl	8009794 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	461a      	mov	r2, r3
 8005566:	4603      	mov	r3, r0
 8005568:	70fb      	strb	r3, [r7, #3]
 800556a:	460b      	mov	r3, r1
 800556c:	803b      	strh	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da0f      	bge.n	800559e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	3338      	adds	r3, #56	@ 0x38
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	705a      	strb	r2, [r3, #1]
 800559c:	e00f      	b.n	80055be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055ca:	883a      	ldrh	r2, [r7, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	78ba      	ldrb	r2, [r7, #2]
 80055d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055e8:	78bb      	ldrb	r3, [r7, #2]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d102      	bne.n	80055f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_PCD_EP_Open+0xaa>
 80055fe:	2302      	movs	r3, #2
 8005600:	e00e      	b.n	8005620 <HAL_PCD_EP_Open+0xc8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	4618      	mov	r0, r3
 8005612:	f003 f9a7 	bl	8008964 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800561e:	7afb      	ldrb	r3, [r7, #11]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da0f      	bge.n	800565c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	3338      	adds	r3, #56	@ 0x38
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	3304      	adds	r3, #4
 8005652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	705a      	strb	r2, [r3, #1]
 800565a:	e00f      	b.n	800567c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 020f 	and.w	r2, r3, #15
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_PCD_EP_Close+0x6e>
 8005692:	2302      	movs	r3, #2
 8005694:	e00e      	b.n	80056b4 <HAL_PCD_EP_Close+0x8c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f003 f9e5 	bl	8008a74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	460b      	mov	r3, r1
 80056ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	3304      	adds	r3, #4
 80056e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d102      	bne.n	8005718 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005718:	7afb      	ldrb	r3, [r7, #11]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	f003 fcc4 	bl	80090bc <USB_EP0StartXfer>
 8005734:	e008      	b.n	8005748 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	f003 fa72 	bl	8008c2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8005774:	681b      	ldr	r3, [r3, #0]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	460b      	mov	r3, r1
 8005790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3338      	adds	r3, #56	@ 0x38
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2201      	movs	r2, #1
 80057c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d102      	bne.n	80057dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6979      	ldr	r1, [r7, #20]
 80057f4:	f003 fc62 	bl	80090bc <USB_EP0StartXfer>
 80057f8:	e008      	b.n	800580c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	f003 fa10 	bl	8008c2c <USB_EPStartXfer>
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d901      	bls.n	8005834 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e050      	b.n	80058d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da0f      	bge.n	800585c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	3338      	adds	r3, #56	@ 0x38
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	705a      	strb	r2, [r3, #1]
 800585a:	e00d      	b.n	8005878 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_PCD_EP_SetStall+0x82>
 8005894:	2302      	movs	r3, #2
 8005896:	e01e      	b.n	80058d6 <HAL_PCD_EP_SetStall+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f003 fea0 	bl	80095ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	b2d9      	uxtb	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80058c6:	461a      	mov	r2, r3
 80058c8:	f004 f890 	bl	80099ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d901      	bls.n	80058fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e042      	b.n	8005982 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005900:	2b00      	cmp	r3, #0
 8005902:	da0f      	bge.n	8005924 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3338      	adds	r3, #56	@ 0x38
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	705a      	strb	r2, [r3, #1]
 8005922:	e00f      	b.n	8005944 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4413      	add	r3, r2
 800593a:	3304      	adds	r3, #4
 800593c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_PCD_EP_ClrStall+0x86>
 8005960:	2302      	movs	r3, #2
 8005962:	e00e      	b.n	8005982 <HAL_PCD_EP_ClrStall+0xa4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	4618      	mov	r0, r3
 8005974:	f003 fea8 	bl	80096c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da0c      	bge.n	80059b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3338      	adds	r3, #56	@ 0x38
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	3304      	adds	r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e00c      	b.n	80059d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68f9      	ldr	r1, [r7, #12]
 80059d8:	4618      	mov	r0, r3
 80059da:	f003 fcc7 	bl	800936c <USB_EPStopXfer>
 80059de:	4603      	mov	r3, r0
 80059e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059e2:	7afb      	ldrb	r3, [r7, #11]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	@ 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3338      	adds	r3, #56	@ 0x38
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d901      	bls.n	8005a24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e06c      	b.n	8005afe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d902      	bls.n	8005a40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3303      	adds	r3, #3
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a48:	e02b      	b.n	8005aa2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d902      	bls.n	8005a66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3303      	adds	r3, #3
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4603      	mov	r3, r0
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f003 fd1b 	bl	80094c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	441a      	add	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	441a      	add	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d809      	bhi.n	8005acc <PCD_WriteEmptyTxFifo+0xe0>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d203      	bcs.n	8005acc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1be      	bne.n	8005a4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d811      	bhi.n	8005afc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	2201      	movs	r2, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	6939      	ldr	r1, [r7, #16]
 8005af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af8:	4013      	ands	r3, r2
 8005afa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	333c      	adds	r3, #60	@ 0x3c
 8005b20:	3304      	adds	r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d17b      	bne.n	8005c36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4a61      	ldr	r2, [pc, #388]	@ (8005cd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	f240 80b9 	bls.w	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80b3 	beq.w	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b70:	6093      	str	r3, [r2, #8]
 8005b72:	e0a7      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	6093      	str	r3, [r2, #8]
 8005b90:	e098      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 8093 	bne.w	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d90f      	bls.n	8005bc6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc2:	6093      	str	r3, [r2, #8]
 8005bc4:	e07e      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3304      	adds	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	0159      	lsls	r1, r3, #5
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	440b      	add	r3, r1
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d114      	bne.n	8005c28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005c10:	461a      	mov	r2, r3
 8005c12:	2101      	movs	r1, #1
 8005c14:	f003 feea 	bl	80099ec <USB_EP0_OutStart>
 8005c18:	e006      	b.n	8005c28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	441a      	add	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f006 fa4c 	bl	800c0cc <HAL_PCD_DataOutStageCallback>
 8005c34:	e046      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d124      	bne.n	8005c88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5a:	6093      	str	r3, [r2, #8]
 8005c5c:	e032      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c74:	461a      	mov	r2, r3
 8005c76:	2320      	movs	r3, #32
 8005c78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f006 fa23 	bl	800c0cc <HAL_PCD_DataOutStageCallback>
 8005c86:	e01d      	b.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d114      	bne.n	8005cb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f003 fe9a 	bl	80099ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f006 fa04 	bl	800c0cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	4f54300a 	.word	0x4f54300a
 8005cd4:	4f54310a 	.word	0x4f54310a

08005cd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	333c      	adds	r3, #60	@ 0x3c
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d90e      	bls.n	8005d2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f006 f9bb 	bl	800c0a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d90c      	bls.n	8005d54 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d108      	bne.n	8005d54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2101      	movs	r1, #1
 8005d50:	f003 fe4c 	bl	80099ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	4f54300a 	.word	0x4f54300a

08005d64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
 8005d70:	4613      	mov	r3, r2
 8005d72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d107      	bne.n	8005d92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d82:	883b      	ldrh	r3, [r7, #0]
 8005d84:	0419      	lsls	r1, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d90:	e028      	b.n	8005de4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e00d      	b.n	8005dc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	3340      	adds	r3, #64	@ 0x40
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4413      	add	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d3ec      	bcc.n	8005da6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dcc:	883b      	ldrh	r3, [r7, #0]
 8005dce:	0418      	lsls	r0, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	4302      	orrs	r2, r0
 8005ddc:	3340      	adds	r3, #64	@ 0x40
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	887a      	ldrh	r2, [r7, #2]
 8005e04:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e46:	f043 0303 	orr.w	r3, r3, #3
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0cc      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e70:	4b68      	ldr	r3, [pc, #416]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d90c      	bls.n	8005e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b65      	ldr	r3, [pc, #404]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b63      	ldr	r3, [pc, #396]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0b8      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d020      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eb0:	4b59      	ldr	r3, [pc, #356]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a58      	ldr	r2, [pc, #352]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec8:	4b53      	ldr	r3, [pc, #332]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a52      	ldr	r2, [pc, #328]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed4:	4b50      	ldr	r3, [pc, #320]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	494d      	ldr	r1, [pc, #308]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d044      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b47      	ldr	r3, [pc, #284]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d119      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e07f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d003      	beq.n	8005f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e06f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e067      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3a:	4b37      	ldr	r3, [pc, #220]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4934      	ldr	r1, [pc, #208]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fd fd84 	bl	8003a58 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f54:	f7fd fd80 	bl	8003a58 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e04f      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 020c 	and.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d1eb      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d20c      	bcs.n	8005fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b22      	ldr	r3, [pc, #136]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	4b20      	ldr	r3, [pc, #128]	@ (8006014 <HAL_RCC_ClockConfig+0x1b8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e032      	b.n	800600a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb0:	4b19      	ldr	r3, [pc, #100]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4916      	ldr	r1, [pc, #88]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fce:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	490e      	ldr	r1, [pc, #56]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fe2:	f000 fb7f 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	490a      	ldr	r1, [pc, #40]	@ (800601c <HAL_RCC_ClockConfig+0x1c0>)
 8005ff4:	5ccb      	ldrb	r3, [r1, r3]
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ffe:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <HAL_RCC_ClockConfig+0x1c8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7fd fce4 	bl	80039d0 <HAL_InitTick>

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40023c00 	.word	0x40023c00
 8006018:	40023800 	.word	0x40023800
 800601c:	08010f04 	.word	0x08010f04
 8006020:	20000004 	.word	0x20000004
 8006024:	20000008 	.word	0x20000008

08006028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800602c:	4b03      	ldr	r3, [pc, #12]	@ (800603c <HAL_RCC_GetHCLKFreq+0x14>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000004 	.word	0x20000004

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006044:	f7ff fff0 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0a9b      	lsrs	r3, r3, #10
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40023800 	.word	0x40023800
 8006064:	08010f14 	.word	0x08010f14

08006068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800606c:	f7ff ffdc 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	0b5b      	lsrs	r3, r3, #13
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4903      	ldr	r1, [pc, #12]	@ (800608c <HAL_RCC_GetPCLK2Freq+0x24>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40023800 	.word	0x40023800
 800608c:	08010f14 	.word	0x08010f14

08006090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	@ 0x30
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d010      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80060c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	496c      	ldr	r1, [pc, #432]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80060e6:	2301      	movs	r3, #1
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d010      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80060f6:	4b64      	ldr	r3, [pc, #400]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060fc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	4960      	ldr	r1, [pc, #384]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d017      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006124:	4b58      	ldr	r3, [pc, #352]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800612a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006132:	4955      	ldr	r1, [pc, #340]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006142:	d101      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006150:	2301      	movs	r3, #1
 8006152:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006160:	4b49      	ldr	r3, [pc, #292]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	4946      	ldr	r1, [pc, #280]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800617e:	d101      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006180:	2301      	movs	r3, #1
 8006182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 808a 	beq.w	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	4b39      	ldr	r3, [pc, #228]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	4a38      	ldr	r2, [pc, #224]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ae:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061ba:	4b34      	ldr	r3, [pc, #208]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a33      	ldr	r2, [pc, #204]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061c6:	f7fd fc47 	bl	8003a58 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7fd fc43 	bl	8003a58 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e278      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061e0:	4b2a      	ldr	r3, [pc, #168]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ec:	4b26      	ldr	r3, [pc, #152]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	429a      	cmp	r2, r3
 8006208:	d028      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006214:	4b1e      	ldr	r3, [pc, #120]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800621a:	4b1d      	ldr	r3, [pc, #116]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006226:	4b18      	ldr	r3, [pc, #96]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b01      	cmp	r3, #1
 8006230:	d114      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006232:	f7fd fc11 	bl	8003a58 <HAL_GetTick>
 8006236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006238:	e00a      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623a:	f7fd fc0d 	bl	8003a58 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006248:	4293      	cmp	r3, r2
 800624a:	d901      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e240      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006250:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0ee      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006268:	d114      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800626a:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800627a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627e:	4902      	ldr	r1, [pc, #8]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006280:	4313      	orrs	r3, r2
 8006282:	608b      	str	r3, [r1, #8]
 8006284:	e00c      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	40007000 	.word	0x40007000
 8006290:	42470e40 	.word	0x42470e40
 8006294:	4b4a      	ldr	r3, [pc, #296]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4a49      	ldr	r2, [pc, #292]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800629a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800629e:	6093      	str	r3, [r2, #8]
 80062a0:	4b47      	ldr	r3, [pc, #284]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ac:	4944      	ldr	r1, [pc, #272]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80062c4:	4b3f      	ldr	r3, [pc, #252]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80062c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80062d4:	4b3a      	ldr	r3, [pc, #232]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	4937      	ldr	r1, [pc, #220]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062f6:	4b32      	ldr	r3, [pc, #200]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80062f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006304:	492e      	ldr	r1, [pc, #184]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006318:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800631a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800631e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006326:	4926      	ldr	r1, [pc, #152]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006336:	d101      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006338:	2301      	movs	r3, #1
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006348:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800634a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800634e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	491a      	ldr	r1, [pc, #104]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006366:	2b00      	cmp	r3, #0
 8006368:	d011      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800636c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006370:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006378:	4911      	ldr	r1, [pc, #68]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006388:	d101      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800638a:	2301      	movs	r3, #1
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d005      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639c:	f040 80ff 	bne.w	800659e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063a0:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063a6:	f7fd fb57 	bl	8003a58 <HAL_GetTick>
 80063aa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063ac:	e00e      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063ae:	f7fd fb53 	bl	8003a58 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d907      	bls.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e188      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80063c0:	40023800 	.word	0x40023800
 80063c4:	424711e0 	.word	0x424711e0
 80063c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063cc:	4b7e      	ldr	r3, [pc, #504]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ea      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d028      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d124      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006400:	4b71      	ldr	r3, [pc, #452]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	3301      	adds	r3, #1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006412:	4b6d      	ldr	r3, [pc, #436]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006418:	0e1b      	lsrs	r3, r3, #24
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	431a      	orrs	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	3b01      	subs	r3, #1
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	431a      	orrs	r2, r3
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	071b      	lsls	r3, r3, #28
 8006442:	4961      	ldr	r1, [pc, #388]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006468:	2b00      	cmp	r3, #0
 800646a:	d035      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006474:	d130      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006476:	4b54      	ldr	r3, [pc, #336]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	3301      	adds	r3, #1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006488:	4b4f      	ldr	r3, [pc, #316]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648e:	0f1b      	lsrs	r3, r3, #28
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	019b      	lsls	r3, r3, #6
 80064a0:	431a      	orrs	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	3b01      	subs	r3, #1
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	431a      	orrs	r2, r3
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	071b      	lsls	r3, r3, #28
 80064b8:	4943      	ldr	r1, [pc, #268]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064c0:	4b41      	ldr	r3, [pc, #260]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064c6:	f023 021f 	bic.w	r2, r3, #31
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	493d      	ldr	r1, [pc, #244]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d029      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ec:	d124      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80064ee:	4b36      	ldr	r3, [pc, #216]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80064f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006500:	4b31      	ldr	r3, [pc, #196]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006506:	0f1b      	lsrs	r3, r3, #28
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	019b      	lsls	r3, r3, #6
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	3b01      	subs	r3, #1
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	431a      	orrs	r2, r3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	431a      	orrs	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	071b      	lsls	r3, r3, #28
 8006530:	4925      	ldr	r1, [pc, #148]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006540:	2b00      	cmp	r3, #0
 8006542:	d016      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	019b      	lsls	r3, r3, #6
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	3b01      	subs	r3, #1
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	061b      	lsls	r3, r3, #24
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	071b      	lsls	r3, r3, #28
 800656a:	4917      	ldr	r1, [pc, #92]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006572:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006578:	f7fd fa6e 	bl	8003a58 <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006580:	f7fd fa6a 	bl	8003a58 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e09f      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 8095 	bne.w	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065a6:	4b0a      	ldr	r3, [pc, #40]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ac:	f7fd fa54 	bl	8003a58 <HAL_GetTick>
 80065b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065b2:	e00f      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065b4:	f7fd fa50 	bl	8003a58 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d908      	bls.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e085      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800
 80065cc:	42470068 	.word	0x42470068
 80065d0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065d4:	4b41      	ldr	r3, [pc, #260]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e0:	d0e8      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02b      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006606:	2b00      	cmp	r3, #0
 8006608:	d127      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800660a:	4b34      	ldr	r3, [pc, #208]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	019b      	lsls	r3, r3, #6
 8006626:	431a      	orrs	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	3b01      	subs	r3, #1
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	061b      	lsls	r3, r3, #24
 8006638:	4928      	ldr	r1, [pc, #160]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006640:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006646:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	3b01      	subs	r3, #1
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	4922      	ldr	r1, [pc, #136]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01d      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666e:	d118      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006670:	4b1a      	ldr	r3, [pc, #104]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006676:	0e1b      	lsrs	r3, r3, #24
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	019b      	lsls	r3, r3, #6
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	3b01      	subs	r3, #1
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	4910      	ldr	r1, [pc, #64]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066a2:	4b0f      	ldr	r3, [pc, #60]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a8:	f7fd f9d6 	bl	8003a58 <HAL_GetTick>
 80066ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066b0:	f7fd f9d2 	bl	8003a58 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e007      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066c2:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ce:	d1ef      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3730      	adds	r7, #48	@ 0x30
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800
 80066e0:	42470070 	.word	0x42470070

080066e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e8:	b0ae      	sub	sp, #184	@ 0xb8
 80066ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800670a:	4bcb      	ldr	r3, [pc, #812]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 030c 	and.w	r3, r3, #12
 8006712:	2b0c      	cmp	r3, #12
 8006714:	f200 8206 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x440>
 8006718:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <HAL_RCC_GetSysClockFreq+0x3c>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006755 	.word	0x08006755
 8006724:	08006b25 	.word	0x08006b25
 8006728:	08006b25 	.word	0x08006b25
 800672c:	08006b25 	.word	0x08006b25
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006b25 	.word	0x08006b25
 8006738:	08006b25 	.word	0x08006b25
 800673c:	08006b25 	.word	0x08006b25
 8006740:	08006765 	.word	0x08006765
 8006744:	08006b25 	.word	0x08006b25
 8006748:	08006b25 	.word	0x08006b25
 800674c:	08006b25 	.word	0x08006b25
 8006750:	08006955 	.word	0x08006955
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006754:	4bb9      	ldr	r3, [pc, #740]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x358>)
 8006756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800675a:	e1e7      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800675c:	4bb8      	ldr	r3, [pc, #736]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800675e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006762:	e1e3      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006764:	4bb4      	ldr	r3, [pc, #720]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006770:	4bb1      	ldr	r3, [pc, #708]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d071      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677c:	4bae      	ldr	r3, [pc, #696]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	099b      	lsrs	r3, r3, #6
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006788:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800678c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006798:	2300      	movs	r3, #0
 800679a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800679e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067a2:	4622      	mov	r2, r4
 80067a4:	462b      	mov	r3, r5
 80067a6:	f04f 0000 	mov.w	r0, #0
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	0159      	lsls	r1, r3, #5
 80067b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067b4:	0150      	lsls	r0, r2, #5
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4621      	mov	r1, r4
 80067bc:	1a51      	subs	r1, r2, r1
 80067be:	6439      	str	r1, [r7, #64]	@ 0x40
 80067c0:	4629      	mov	r1, r5
 80067c2:	eb63 0301 	sbc.w	r3, r3, r1
 80067c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80067d4:	4649      	mov	r1, r9
 80067d6:	018b      	lsls	r3, r1, #6
 80067d8:	4641      	mov	r1, r8
 80067da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067de:	4641      	mov	r1, r8
 80067e0:	018a      	lsls	r2, r1, #6
 80067e2:	4641      	mov	r1, r8
 80067e4:	1a51      	subs	r1, r2, r1
 80067e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067e8:	4649      	mov	r1, r9
 80067ea:	eb63 0301 	sbc.w	r3, r3, r1
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80067fc:	4649      	mov	r1, r9
 80067fe:	00cb      	lsls	r3, r1, #3
 8006800:	4641      	mov	r1, r8
 8006802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006806:	4641      	mov	r1, r8
 8006808:	00ca      	lsls	r2, r1, #3
 800680a:	4610      	mov	r0, r2
 800680c:	4619      	mov	r1, r3
 800680e:	4603      	mov	r3, r0
 8006810:	4622      	mov	r2, r4
 8006812:	189b      	adds	r3, r3, r2
 8006814:	633b      	str	r3, [r7, #48]	@ 0x30
 8006816:	462b      	mov	r3, r5
 8006818:	460a      	mov	r2, r1
 800681a:	eb42 0303 	adc.w	r3, r2, r3
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800682c:	4629      	mov	r1, r5
 800682e:	024b      	lsls	r3, r1, #9
 8006830:	4621      	mov	r1, r4
 8006832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006836:	4621      	mov	r1, r4
 8006838:	024a      	lsls	r2, r1, #9
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800684c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006850:	f7fa fa3a 	bl	8000cc8 <__aeabi_uldivmod>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4613      	mov	r3, r2
 800685a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800685e:	e067      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006860:	4b75      	ldr	r3, [pc, #468]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	099b      	lsrs	r3, r3, #6
 8006866:	2200      	movs	r2, #0
 8006868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800686c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800687a:	2300      	movs	r3, #0
 800687c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800687e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	f04f 0000 	mov.w	r0, #0
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	0159      	lsls	r1, r3, #5
 8006890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006894:	0150      	lsls	r0, r2, #5
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4621      	mov	r1, r4
 800689c:	1a51      	subs	r1, r2, r1
 800689e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068a0:	4629      	mov	r1, r5
 80068a2:	eb63 0301 	sbc.w	r3, r3, r1
 80068a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80068b4:	4649      	mov	r1, r9
 80068b6:	018b      	lsls	r3, r1, #6
 80068b8:	4641      	mov	r1, r8
 80068ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068be:	4641      	mov	r1, r8
 80068c0:	018a      	lsls	r2, r1, #6
 80068c2:	4641      	mov	r1, r8
 80068c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80068c8:	4649      	mov	r1, r9
 80068ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068e2:	4692      	mov	sl, r2
 80068e4:	469b      	mov	fp, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	eb1a 0303 	adds.w	r3, sl, r3
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	462b      	mov	r3, r5
 80068f0:	eb4b 0303 	adc.w	r3, fp, r3
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006902:	4629      	mov	r1, r5
 8006904:	028b      	lsls	r3, r1, #10
 8006906:	4621      	mov	r1, r4
 8006908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800690c:	4621      	mov	r1, r4
 800690e:	028a      	lsls	r2, r1, #10
 8006910:	4610      	mov	r0, r2
 8006912:	4619      	mov	r1, r3
 8006914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006918:	2200      	movs	r2, #0
 800691a:	673b      	str	r3, [r7, #112]	@ 0x70
 800691c:	677a      	str	r2, [r7, #116]	@ 0x74
 800691e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006922:	f7fa f9d1 	bl	8000cc8 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4613      	mov	r3, r2
 800692c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006930:	4b41      	ldr	r3, [pc, #260]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	3301      	adds	r3, #1
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8006942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006952:	e0eb      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006954:	4b38      	ldr	r3, [pc, #224]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800695c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006960:	4b35      	ldr	r3, [pc, #212]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d06b      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800696c:	4b32      	ldr	r3, [pc, #200]	@ (8006a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	099b      	lsrs	r3, r3, #6
 8006972:	2200      	movs	r2, #0
 8006974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006980:	2300      	movs	r3, #0
 8006982:	667b      	str	r3, [r7, #100]	@ 0x64
 8006984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	f04f 0000 	mov.w	r0, #0
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	0159      	lsls	r1, r3, #5
 8006996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800699a:	0150      	lsls	r0, r2, #5
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4621      	mov	r1, r4
 80069a2:	1a51      	subs	r1, r2, r1
 80069a4:	61b9      	str	r1, [r7, #24]
 80069a6:	4629      	mov	r1, r5
 80069a8:	eb63 0301 	sbc.w	r3, r3, r1
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80069ba:	4659      	mov	r1, fp
 80069bc:	018b      	lsls	r3, r1, #6
 80069be:	4651      	mov	r1, sl
 80069c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069c4:	4651      	mov	r1, sl
 80069c6:	018a      	lsls	r2, r1, #6
 80069c8:	4651      	mov	r1, sl
 80069ca:	ebb2 0801 	subs.w	r8, r2, r1
 80069ce:	4659      	mov	r1, fp
 80069d0:	eb63 0901 	sbc.w	r9, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069e8:	4690      	mov	r8, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	eb18 0303 	adds.w	r3, r8, r3
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	462b      	mov	r3, r5
 80069f6:	eb49 0303 	adc.w	r3, r9, r3
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a08:	4629      	mov	r1, r5
 8006a0a:	024b      	lsls	r3, r1, #9
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a12:	4621      	mov	r1, r4
 8006a14:	024a      	lsls	r2, r1, #9
 8006a16:	4610      	mov	r0, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a1e:	2200      	movs	r2, #0
 8006a20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a28:	f7fa f94e 	bl	8000cc8 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4613      	mov	r3, r2
 8006a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a36:	e065      	b.n	8006b04 <HAL_RCC_GetSysClockFreq+0x420>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	00f42400 	.word	0x00f42400
 8006a40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a44:	4b3d      	ldr	r3, [pc, #244]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	099b      	lsrs	r3, r3, #6
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	4611      	mov	r1, r2
 8006a50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a56:	2300      	movs	r3, #0
 8006a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006a5e:	4642      	mov	r2, r8
 8006a60:	464b      	mov	r3, r9
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f04f 0100 	mov.w	r1, #0
 8006a6a:	0159      	lsls	r1, r3, #5
 8006a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a70:	0150      	lsls	r0, r2, #5
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4641      	mov	r1, r8
 8006a78:	1a51      	subs	r1, r2, r1
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a90:	4659      	mov	r1, fp
 8006a92:	018b      	lsls	r3, r1, #6
 8006a94:	4651      	mov	r1, sl
 8006a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a9a:	4651      	mov	r1, sl
 8006a9c:	018a      	lsls	r2, r1, #6
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	1a54      	subs	r4, r2, r1
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	eb63 0501 	sbc.w	r5, r3, r1
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	00eb      	lsls	r3, r5, #3
 8006ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ab6:	00e2      	lsls	r2, r4, #3
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	4643      	mov	r3, r8
 8006abe:	18e3      	adds	r3, r4, r3
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	eb45 0303 	adc.w	r3, r5, r3
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	028b      	lsls	r3, r1, #10
 8006ada:	4621      	mov	r1, r4
 8006adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	028a      	lsls	r2, r1, #10
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aec:	2200      	movs	r2, #0
 8006aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006af6:	f7fa f8e7 	bl	8000cc8 <__aeabi_uldivmod>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4613      	mov	r3, r2
 8006b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b04:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	0f1b      	lsrs	r3, r3, #28
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b22:	e003      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	37b8      	adds	r7, #184	@ 0xb8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	00f42400 	.word	0x00f42400

08006b44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e28d      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8083 	beq.w	8006c6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b64:	4b94      	ldr	r3, [pc, #592]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d019      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b70:	4b91      	ldr	r3, [pc, #580]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b7c:	4b8e      	ldr	r3, [pc, #568]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b88:	d00c      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b8a:	4b8b      	ldr	r3, [pc, #556]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b92:	2b0c      	cmp	r3, #12
 8006b94:	d112      	bne.n	8006bbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b96:	4b88      	ldr	r3, [pc, #544]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba2:	d10b      	bne.n	8006bbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba4:	4b84      	ldr	r3, [pc, #528]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05b      	beq.n	8006c68 <HAL_RCC_OscConfig+0x124>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d157      	bne.n	8006c68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e25a      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d106      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x90>
 8006bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a7b      	ldr	r2, [pc, #492]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e01d      	b.n	8006c10 <HAL_RCC_OscConfig+0xcc>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0xb4>
 8006bde:	4b76      	ldr	r3, [pc, #472]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a75      	ldr	r2, [pc, #468]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	4b73      	ldr	r3, [pc, #460]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a72      	ldr	r2, [pc, #456]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e00b      	b.n	8006c10 <HAL_RCC_OscConfig+0xcc>
 8006bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a6e      	ldr	r2, [pc, #440]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	4b6c      	ldr	r3, [pc, #432]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a6b      	ldr	r2, [pc, #428]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c18:	f7fc ff1e 	bl	8003a58 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fc ff1a 	bl	8003a58 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	@ 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e21f      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b61      	ldr	r3, [pc, #388]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0xdc>
 8006c3e:	e014      	b.n	8006c6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc ff0a 	bl	8003a58 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c48:	f7fc ff06 	bl	8003a58 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	@ 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e20b      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	4b57      	ldr	r3, [pc, #348]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x104>
 8006c66:	e000      	b.n	8006c6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d06f      	beq.n	8006d56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c76:	4b50      	ldr	r3, [pc, #320]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c82:	4b4d      	ldr	r3, [pc, #308]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d105      	bne.n	8006c9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9a:	4b47      	ldr	r3, [pc, #284]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d11c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca6:	4b44      	ldr	r3, [pc, #272]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d116      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb2:	4b41      	ldr	r3, [pc, #260]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <HAL_RCC_OscConfig+0x186>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d001      	beq.n	8006cca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e1d3      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cca:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	4937      	ldr	r1, [pc, #220]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cde:	e03a      	b.n	8006d56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d020      	beq.n	8006d2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce8:	4b34      	ldr	r3, [pc, #208]	@ (8006dbc <HAL_RCC_OscConfig+0x278>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cee:	f7fc feb3 	bl	8003a58 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf6:	f7fc feaf 	bl	8003a58 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e1b4      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d08:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d14:	4b28      	ldr	r3, [pc, #160]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4925      	ldr	r1, [pc, #148]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]
 8006d28:	e015      	b.n	8006d56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d2a:	4b24      	ldr	r3, [pc, #144]	@ (8006dbc <HAL_RCC_OscConfig+0x278>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d30:	f7fc fe92 	bl	8003a58 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d38:	f7fc fe8e 	bl	8003a58 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e193      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f0      	bne.n	8006d38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d036      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d016      	beq.n	8006d98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d6a:	4b15      	ldr	r3, [pc, #84]	@ (8006dc0 <HAL_RCC_OscConfig+0x27c>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d70:	f7fc fe72 	bl	8003a58 <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fc fe6e 	bl	8003a58 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e173      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_OscConfig+0x274>)
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x234>
 8006d96:	e01b      	b.n	8006dd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d98:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9e:	f7fc fe5b 	bl	8003a58 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da4:	e00e      	b.n	8006dc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da6:	f7fc fe57 	bl	8003a58 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d907      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e15c      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	42470000 	.word	0x42470000
 8006dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ea      	bne.n	8006da6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8097 	beq.w	8006f0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dde:	2300      	movs	r3, #0
 8006de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006de2:	4b83      	ldr	r3, [pc, #524]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10f      	bne.n	8006e0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dfe:	4b7c      	ldr	r3, [pc, #496]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	60bb      	str	r3, [r7, #8]
 8006e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0e:	4b79      	ldr	r3, [pc, #484]	@ (8006ff4 <HAL_RCC_OscConfig+0x4b0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d118      	bne.n	8006e4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e1a:	4b76      	ldr	r3, [pc, #472]	@ (8006ff4 <HAL_RCC_OscConfig+0x4b0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a75      	ldr	r2, [pc, #468]	@ (8006ff4 <HAL_RCC_OscConfig+0x4b0>)
 8006e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e26:	f7fc fe17 	bl	8003a58 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2e:	f7fc fe13 	bl	8003a58 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e118      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e40:	4b6c      	ldr	r3, [pc, #432]	@ (8006ff4 <HAL_RCC_OscConfig+0x4b0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d106      	bne.n	8006e62 <HAL_RCC_OscConfig+0x31e>
 8006e54:	4b66      	ldr	r3, [pc, #408]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e58:	4a65      	ldr	r2, [pc, #404]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e60:	e01c      	b.n	8006e9c <HAL_RCC_OscConfig+0x358>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	d10c      	bne.n	8006e84 <HAL_RCC_OscConfig+0x340>
 8006e6a:	4b61      	ldr	r3, [pc, #388]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6e:	4a60      	ldr	r2, [pc, #384]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e76:	4b5e      	ldr	r3, [pc, #376]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7a:	4a5d      	ldr	r2, [pc, #372]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e82:	e00b      	b.n	8006e9c <HAL_RCC_OscConfig+0x358>
 8006e84:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e88:	4a59      	ldr	r2, [pc, #356]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e90:	4b57      	ldr	r3, [pc, #348]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e94:	4a56      	ldr	r2, [pc, #344]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006e96:	f023 0304 	bic.w	r3, r3, #4
 8006e9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d015      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fc fdd8 	bl	8003a58 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eac:	f7fc fdd4 	bl	8003a58 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e0d7      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0ee      	beq.n	8006eac <HAL_RCC_OscConfig+0x368>
 8006ece:	e014      	b.n	8006efa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fc fdc2 	bl	8003a58 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed8:	f7fc fdbe 	bl	8003a58 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e0c1      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eee:	4b40      	ldr	r3, [pc, #256]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1ee      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d105      	bne.n	8006f0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f00:	4b3b      	ldr	r3, [pc, #236]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	4a3a      	ldr	r2, [pc, #232]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80ad 	beq.w	8007070 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f16:	4b36      	ldr	r3, [pc, #216]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 030c 	and.w	r3, r3, #12
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d060      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d145      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2a:	4b33      	ldr	r3, [pc, #204]	@ (8006ff8 <HAL_RCC_OscConfig+0x4b4>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fc fd92 	bl	8003a58 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f38:	f7fc fd8e 	bl	8003a58 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e093      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f4a:	4b29      	ldr	r3, [pc, #164]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69da      	ldr	r2, [r3, #28]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	019b      	lsls	r3, r3, #6
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	061b      	lsls	r3, r3, #24
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	071b      	lsls	r3, r3, #28
 8006f82:	491b      	ldr	r1, [pc, #108]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <HAL_RCC_OscConfig+0x4b4>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8e:	f7fc fd63 	bl	8003a58 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f96:	f7fc fd5f 	bl	8003a58 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e064      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa8:	4b11      	ldr	r3, [pc, #68]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x452>
 8006fb4:	e05c      	b.n	8007070 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <HAL_RCC_OscConfig+0x4b4>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc fd4c 	bl	8003a58 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7fc fd48 	bl	8003a58 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e04d      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd6:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <HAL_RCC_OscConfig+0x4ac>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x480>
 8006fe2:	e045      	b.n	8007070 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d107      	bne.n	8006ffc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e040      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800707c <HAL_RCC_OscConfig+0x538>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d030      	beq.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d129      	bne.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007022:	429a      	cmp	r2, r3
 8007024:	d122      	bne.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800702c:	4013      	ands	r3, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007034:	4293      	cmp	r3, r2
 8007036:	d119      	bne.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	3b01      	subs	r3, #1
 8007046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007048:	429a      	cmp	r2, r3
 800704a:	d10f      	bne.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d107      	bne.n	800706c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007066:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d001      	beq.n	8007070 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800

08007080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e07b      	b.n	800718a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070a2:	d009      	beq.n	80070b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	61da      	str	r2, [r3, #28]
 80070aa:	e005      	b.n	80070b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc f9e0 	bl	8003498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800713c:	ea42 0103 	orr.w	r1, r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	f003 0104 	and.w	r1, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	f003 0210 	and.w	r2, r3, #16
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e03f      	b.n	8007224 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fc f9b5 	bl	8003528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	@ 0x24
 80071c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fdde 	bl	8007d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800720a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b20      	cmp	r3, #32
 800724a:	d17c      	bne.n	8007346 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_UART_Transmit+0x2c>
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e075      	b.n	8007348 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_UART_Transmit+0x3e>
 8007266:	2302      	movs	r3, #2
 8007268:	e06e      	b.n	8007348 <HAL_UART_Transmit+0x11c>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2221      	movs	r2, #33	@ 0x21
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007280:	f7fc fbea 	bl	8003a58 <HAL_GetTick>
 8007284:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	d108      	bne.n	80072ae <HAL_UART_Transmit+0x82>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e003      	b.n	80072b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80072be:	e02a      	b.n	8007316 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	2180      	movs	r1, #128	@ 0x80
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fb1e 	bl	800790c <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e036      	b.n	8007348 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3302      	adds	r3, #2
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	e007      	b.n	8007308 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	3301      	adds	r3, #1
 8007306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1cf      	bne.n	80072c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2200      	movs	r2, #0
 8007328:	2140      	movs	r1, #64	@ 0x40
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 faee 	bl	800790c <UART_WaitOnFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e006      	b.n	8007348 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b20      	cmp	r3, #32
 8007368:	d11d      	bne.n	80073a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <HAL_UART_Receive_IT+0x26>
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e016      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_UART_Receive_IT+0x38>
 8007384:	2302      	movs	r3, #2
 8007386:	e00f      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	461a      	mov	r2, r3
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fb23 	bl	80079e8 <UART_Start_Receive_IT>
 80073a2:	4603      	mov	r3, r0
 80073a4:	e000      	b.n	80073a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
  }
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0ba      	sub	sp, #232	@ 0xe8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <HAL_UART_IRQHandler+0x66>
 8007402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc07 	bl	8007c22 <UART_Receive_IT>
      return;
 8007414:	e256      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80de 	beq.w	80075dc <HAL_UART_IRQHandler+0x22c>
 8007420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80d1 	beq.w	80075dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_UART_IRQHandler+0xae>
 8007446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800744a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	f043 0201 	orr.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <HAL_UART_IRQHandler+0xd2>
 800746a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	f043 0202 	orr.w	r2, r3, #2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
 800748e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f043 0204 	orr.w	r2, r3, #4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d011      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
 80074b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	f043 0208 	orr.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 81ed 	beq.w	80078ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_UART_IRQHandler+0x14e>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb92 	bl	8007c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007508:	2b40      	cmp	r3, #64	@ 0x40
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <HAL_UART_IRQHandler+0x17a>
 8007522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d04f      	beq.n	80075ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa9a 	bl	8007a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753a:	2b40      	cmp	r3, #64	@ 0x40
 800753c:	d141      	bne.n	80075c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800755c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800756a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800756e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1d9      	bne.n	800753e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	d013      	beq.n	80075ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	4a7d      	ldr	r2, [pc, #500]	@ (800778c <HAL_UART_IRQHandler+0x3dc>)
 8007598:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fc fe7d 	bl	800429e <HAL_DMA_Abort_IT>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d016      	beq.n	80075d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e00e      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f990 	bl	80078e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e00a      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f98c 	bl	80078e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	e006      	b.n	80075d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f988 	bl	80078e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80075d6:	e170      	b.n	80078ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d8:	bf00      	nop
    return;
 80075da:	e16e      	b.n	80078ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	f040 814a 	bne.w	800787a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8143 	beq.w	800787a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 813c 	beq.w	800787a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	f040 80b4 	bne.w	8007790 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8140 	beq.w	80078be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007646:	429a      	cmp	r2, r3
 8007648:	f080 8139 	bcs.w	80078be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007652:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765e:	f000 8088 	beq.w	8007772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800767c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800768e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800769a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d9      	bne.n	8007662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3314      	adds	r3, #20
 80076b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3314      	adds	r3, #20
 80076ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e1      	bne.n	80076ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3314      	adds	r3, #20
 800770a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800770e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800771c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e3      	bne.n	80076ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007754:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007756:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800775a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e3      	bne.n	8007730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	4618      	mov	r0, r3
 800776e:	f7fc fd26 	bl	80041be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800777a:	b29b      	uxth	r3, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	b29b      	uxth	r3, r3
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8b6 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007788:	e099      	b.n	80078be <HAL_UART_IRQHandler+0x50e>
 800778a:	bf00      	nop
 800778c:	08007b2b 	.word	0x08007b2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007798:	b29b      	uxth	r3, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 808b 	beq.w	80078c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8086 	beq.w	80078c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077da:	647a      	str	r2, [r7, #68]	@ 0x44
 80077dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3314      	adds	r3, #20
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	623b      	str	r3, [r7, #32]
   return(result);
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007812:	633a      	str	r2, [r7, #48]	@ 0x30
 8007814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	617b      	str	r3, [r7, #20]
   return(result);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800786c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f83e 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007878:	e023      	b.n	80078c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <HAL_UART_IRQHandler+0x4ea>
 8007886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f95d 	bl	8007b52 <UART_Transmit_IT>
    return;
 8007898:	e014      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00e      	beq.n	80078c4 <HAL_UART_IRQHandler+0x514>
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f99d 	bl	8007bf2 <UART_EndTransmit_IT>
    return;
 80078b8:	e004      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
    return;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
      return;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_UART_IRQHandler+0x514>
      return;
 80078c2:	bf00      	nop
  }
}
 80078c4:	37e8      	adds	r7, #232	@ 0xe8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b090      	sub	sp, #64	@ 0x40
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791c:	e050      	b.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d04c      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <UART_WaitOnFlagUntilTimeout+0x30>
 800792c:	f7fc f894 	bl	8003a58 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007938:	429a      	cmp	r2, r3
 800793a:	d241      	bcs.n	80079c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800795c:	637a      	str	r2, [r7, #52]	@ 0x34
 800795e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800796a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3314      	adds	r3, #20
 8007976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	613b      	str	r3, [r7, #16]
   return(result);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007990:	623a      	str	r2, [r7, #32]
 8007992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	61bb      	str	r3, [r7, #24]
   return(result);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e00f      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d09f      	beq.n	800791e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3740      	adds	r7, #64	@ 0x40
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2222      	movs	r2, #34	@ 0x22
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a34:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695a      	ldr	r2, [r3, #20]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0201 	orr.w	r2, r2, #1
 8007a44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0220 	orr.w	r2, r2, #32
 8007a54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b095      	sub	sp, #84	@ 0x54
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e5      	bne.n	8007a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f023 0301 	bic.w	r3, r3, #1
 8007ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3314      	adds	r3, #20
 8007abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e5      	bne.n	8007aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d119      	bne.n	8007b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f023 0310 	bic.w	r3, r3, #16
 8007af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	330c      	adds	r3, #12
 8007afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afc:	61ba      	str	r2, [r7, #24]
 8007afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6979      	ldr	r1, [r7, #20]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e5      	bne.n	8007adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b1e:	bf00      	nop
 8007b20:	3754      	adds	r7, #84	@ 0x54
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff fecb 	bl	80078e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b21      	cmp	r3, #33	@ 0x21
 8007b64:	d13e      	bne.n	8007be4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6e:	d114      	bne.n	8007b9a <UART_Transmit_IT+0x48>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d110      	bne.n	8007b9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	1c9a      	adds	r2, r3, #2
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]
 8007b98:	e008      	b.n	8007bac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	1c59      	adds	r1, r3, #1
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6211      	str	r1, [r2, #32]
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10f      	bne.n	8007be0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e000      	b.n	8007be6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007be4:	2302      	movs	r3, #2
  }
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fe5a 	bl	80078cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08c      	sub	sp, #48	@ 0x30
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b22      	cmp	r3, #34	@ 0x22
 8007c34:	f040 80ab 	bne.w	8007d8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c40:	d117      	bne.n	8007c72 <UART_Receive_IT+0x50>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d113      	bne.n	8007c72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	1c9a      	adds	r2, r3, #2
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c70:	e026      	b.n	8007cc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c84:	d007      	beq.n	8007c96 <UART_Receive_IT+0x74>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <UART_Receive_IT+0x82>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e008      	b.n	8007cb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d15a      	bne.n	8007d8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0220 	bic.w	r2, r2, #32
 8007ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695a      	ldr	r2, [r3, #20]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0201 	bic.w	r2, r2, #1
 8007d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d135      	bne.n	8007d80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d3a:	623a      	str	r2, [r7, #32]
 8007d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69f9      	ldr	r1, [r7, #28]
 8007d40:	6a3a      	ldr	r2, [r7, #32]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e5      	bne.n	8007d1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d10a      	bne.n	8007d72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fdbb 	bl	80078f4 <HAL_UARTEx_RxEventCallback>
 8007d7e:	e002      	b.n	8007d86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7f9 febd 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e002      	b.n	8007d90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e000      	b.n	8007d90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d8e:	2302      	movs	r3, #2
  }
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3730      	adds	r7, #48	@ 0x30
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d9c:	b0c0      	sub	sp, #256	@ 0x100
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db4:	68d9      	ldr	r1, [r3, #12]
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	ea40 0301 	orr.w	r3, r0, r1
 8007dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007df0:	f021 010c 	bic.w	r1, r1, #12
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e12:	6999      	ldr	r1, [r3, #24]
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	ea40 0301 	orr.w	r3, r0, r1
 8007e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b8f      	ldr	r3, [pc, #572]	@ (8008064 <UART_SetConfig+0x2cc>)
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d005      	beq.n	8007e38 <UART_SetConfig+0xa0>
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b8d      	ldr	r3, [pc, #564]	@ (8008068 <UART_SetConfig+0x2d0>)
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d104      	bne.n	8007e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e38:	f7fe f916 	bl	8006068 <HAL_RCC_GetPCLK2Freq>
 8007e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e40:	e003      	b.n	8007e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e42:	f7fe f8fd 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8007e46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e54:	f040 810c 	bne.w	8008070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	462b      	mov	r3, r5
 8007e6e:	1891      	adds	r1, r2, r2
 8007e70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e72:	415b      	adcs	r3, r3
 8007e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	eb12 0801 	adds.w	r8, r2, r1
 8007e80:	4629      	mov	r1, r5
 8007e82:	eb43 0901 	adc.w	r9, r3, r1
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e9a:	4690      	mov	r8, r2
 8007e9c:	4699      	mov	r9, r3
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	eb18 0303 	adds.w	r3, r8, r3
 8007ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	eb49 0303 	adc.w	r3, r9, r3
 8007eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	18db      	adds	r3, r3, r3
 8007eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ecc:	4613      	mov	r3, r2
 8007ece:	eb42 0303 	adc.w	r3, r2, r3
 8007ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007edc:	f7f8 fef4 	bl	8000cc8 <__aeabi_uldivmod>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4b61      	ldr	r3, [pc, #388]	@ (800806c <UART_SetConfig+0x2d4>)
 8007ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	011c      	lsls	r4, r3, #4
 8007eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	1891      	adds	r1, r2, r2
 8007f06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f08:	415b      	adcs	r3, r3
 8007f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f10:	4641      	mov	r1, r8
 8007f12:	eb12 0a01 	adds.w	sl, r2, r1
 8007f16:	4649      	mov	r1, r9
 8007f18:	eb43 0b01 	adc.w	fp, r3, r1
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f30:	4692      	mov	sl, r2
 8007f32:	469b      	mov	fp, r3
 8007f34:	4643      	mov	r3, r8
 8007f36:	eb1a 0303 	adds.w	r3, sl, r3
 8007f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	eb4b 0303 	adc.w	r3, fp, r3
 8007f44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	18db      	adds	r3, r3, r3
 8007f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f62:	4613      	mov	r3, r2
 8007f64:	eb42 0303 	adc.w	r3, r2, r3
 8007f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f72:	f7f8 fea9 	bl	8000cc8 <__aeabi_uldivmod>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800806c <UART_SetConfig+0x2d4>)
 8007f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	2264      	movs	r2, #100	@ 0x64
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	1acb      	subs	r3, r1, r3
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f92:	4b36      	ldr	r3, [pc, #216]	@ (800806c <UART_SetConfig+0x2d4>)
 8007f94:	fba3 2302 	umull	r2, r3, r3, r2
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007fa0:	441c      	add	r4, r3
 8007fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fb4:	4642      	mov	r2, r8
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	1891      	adds	r1, r2, r2
 8007fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fbc:	415b      	adcs	r3, r3
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	1851      	adds	r1, r2, r1
 8007fc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fca:	4649      	mov	r1, r9
 8007fcc:	414b      	adcs	r3, r1
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fdc:	4659      	mov	r1, fp
 8007fde:	00cb      	lsls	r3, r1, #3
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe6:	4651      	mov	r1, sl
 8007fe8:	00ca      	lsls	r2, r1, #3
 8007fea:	4610      	mov	r0, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	189b      	adds	r3, r3, r2
 8007ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	460a      	mov	r2, r1
 8007ffc:	eb42 0303 	adc.w	r3, r2, r3
 8008000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008018:	460b      	mov	r3, r1
 800801a:	18db      	adds	r3, r3, r3
 800801c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800801e:	4613      	mov	r3, r2
 8008020:	eb42 0303 	adc.w	r3, r2, r3
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800802a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800802e:	f7f8 fe4b 	bl	8000cc8 <__aeabi_uldivmod>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <UART_SetConfig+0x2d4>)
 8008038:	fba3 1302 	umull	r1, r3, r3, r2
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	2164      	movs	r1, #100	@ 0x64
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	3332      	adds	r3, #50	@ 0x32
 800804a:	4a08      	ldr	r2, [pc, #32]	@ (800806c <UART_SetConfig+0x2d4>)
 800804c:	fba2 2303 	umull	r2, r3, r2, r3
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	f003 0207 	and.w	r2, r3, #7
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4422      	add	r2, r4
 800805e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008060:	e106      	b.n	8008270 <UART_SetConfig+0x4d8>
 8008062:	bf00      	nop
 8008064:	40011000 	.word	0x40011000
 8008068:	40011400 	.word	0x40011400
 800806c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008074:	2200      	movs	r2, #0
 8008076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800807a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800807e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008082:	4642      	mov	r2, r8
 8008084:	464b      	mov	r3, r9
 8008086:	1891      	adds	r1, r2, r2
 8008088:	6239      	str	r1, [r7, #32]
 800808a:	415b      	adcs	r3, r3
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
 800808e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008092:	4641      	mov	r1, r8
 8008094:	1854      	adds	r4, r2, r1
 8008096:	4649      	mov	r1, r9
 8008098:	eb43 0501 	adc.w	r5, r3, r1
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	00eb      	lsls	r3, r5, #3
 80080a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080aa:	00e2      	lsls	r2, r4, #3
 80080ac:	4614      	mov	r4, r2
 80080ae:	461d      	mov	r5, r3
 80080b0:	4643      	mov	r3, r8
 80080b2:	18e3      	adds	r3, r4, r3
 80080b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080b8:	464b      	mov	r3, r9
 80080ba:	eb45 0303 	adc.w	r3, r5, r3
 80080be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080de:	4629      	mov	r1, r5
 80080e0:	008b      	lsls	r3, r1, #2
 80080e2:	4621      	mov	r1, r4
 80080e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e8:	4621      	mov	r1, r4
 80080ea:	008a      	lsls	r2, r1, #2
 80080ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080f0:	f7f8 fdea 	bl	8000cc8 <__aeabi_uldivmod>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4b60      	ldr	r3, [pc, #384]	@ (800827c <UART_SetConfig+0x4e4>)
 80080fa:	fba3 2302 	umull	r2, r3, r3, r2
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	011c      	lsls	r4, r3, #4
 8008102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008106:	2200      	movs	r2, #0
 8008108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800810c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008114:	4642      	mov	r2, r8
 8008116:	464b      	mov	r3, r9
 8008118:	1891      	adds	r1, r2, r2
 800811a:	61b9      	str	r1, [r7, #24]
 800811c:	415b      	adcs	r3, r3
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008124:	4641      	mov	r1, r8
 8008126:	1851      	adds	r1, r2, r1
 8008128:	6139      	str	r1, [r7, #16]
 800812a:	4649      	mov	r1, r9
 800812c:	414b      	adcs	r3, r1
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800813c:	4659      	mov	r1, fp
 800813e:	00cb      	lsls	r3, r1, #3
 8008140:	4651      	mov	r1, sl
 8008142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008146:	4651      	mov	r1, sl
 8008148:	00ca      	lsls	r2, r1, #3
 800814a:	4610      	mov	r0, r2
 800814c:	4619      	mov	r1, r3
 800814e:	4603      	mov	r3, r0
 8008150:	4642      	mov	r2, r8
 8008152:	189b      	adds	r3, r3, r2
 8008154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008158:	464b      	mov	r3, r9
 800815a:	460a      	mov	r2, r1
 800815c:	eb42 0303 	adc.w	r3, r2, r3
 8008160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800816e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800817c:	4649      	mov	r1, r9
 800817e:	008b      	lsls	r3, r1, #2
 8008180:	4641      	mov	r1, r8
 8008182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008186:	4641      	mov	r1, r8
 8008188:	008a      	lsls	r2, r1, #2
 800818a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800818e:	f7f8 fd9b 	bl	8000cc8 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4611      	mov	r1, r2
 8008198:	4b38      	ldr	r3, [pc, #224]	@ (800827c <UART_SetConfig+0x4e4>)
 800819a:	fba3 2301 	umull	r2, r3, r3, r1
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	2264      	movs	r2, #100	@ 0x64
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	1acb      	subs	r3, r1, r3
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	3332      	adds	r3, #50	@ 0x32
 80081ac:	4a33      	ldr	r2, [pc, #204]	@ (800827c <UART_SetConfig+0x4e4>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081b8:	441c      	add	r4, r3
 80081ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081be:	2200      	movs	r2, #0
 80081c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80081c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80081c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081c8:	4642      	mov	r2, r8
 80081ca:	464b      	mov	r3, r9
 80081cc:	1891      	adds	r1, r2, r2
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	415b      	adcs	r3, r3
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d8:	4641      	mov	r1, r8
 80081da:	1851      	adds	r1, r2, r1
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	4649      	mov	r1, r9
 80081e0:	414b      	adcs	r3, r1
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	f04f 0300 	mov.w	r3, #0
 80081ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081f0:	4659      	mov	r1, fp
 80081f2:	00cb      	lsls	r3, r1, #3
 80081f4:	4651      	mov	r1, sl
 80081f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081fa:	4651      	mov	r1, sl
 80081fc:	00ca      	lsls	r2, r1, #3
 80081fe:	4610      	mov	r0, r2
 8008200:	4619      	mov	r1, r3
 8008202:	4603      	mov	r3, r0
 8008204:	4642      	mov	r2, r8
 8008206:	189b      	adds	r3, r3, r2
 8008208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800820a:	464b      	mov	r3, r9
 800820c:	460a      	mov	r2, r1
 800820e:	eb42 0303 	adc.w	r3, r2, r3
 8008212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	663b      	str	r3, [r7, #96]	@ 0x60
 800821e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800822c:	4649      	mov	r1, r9
 800822e:	008b      	lsls	r3, r1, #2
 8008230:	4641      	mov	r1, r8
 8008232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008236:	4641      	mov	r1, r8
 8008238:	008a      	lsls	r2, r1, #2
 800823a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800823e:	f7f8 fd43 	bl	8000cc8 <__aeabi_uldivmod>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <UART_SetConfig+0x4e4>)
 8008248:	fba3 1302 	umull	r1, r3, r3, r2
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	2164      	movs	r1, #100	@ 0x64
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	3332      	adds	r3, #50	@ 0x32
 800825a:	4a08      	ldr	r2, [pc, #32]	@ (800827c <UART_SetConfig+0x4e4>)
 800825c:	fba2 2303 	umull	r2, r3, r2, r3
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	f003 020f 	and.w	r2, r3, #15
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4422      	add	r2, r4
 800826e:	609a      	str	r2, [r3, #8]
}
 8008270:	bf00      	nop
 8008272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008276:	46bd      	mov	sp, r7
 8008278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800827c:	51eb851f 	.word	0x51eb851f

08008280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008280:	b084      	sub	sp, #16
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	f107 001c 	add.w	r0, r7, #28
 800828e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2b01      	cmp	r3, #1
 8008296:	d122      	bne.n	80082de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80082ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fbe8 	bl	8009aa8 <USB_CoreReset>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
 80082dc:	e01a      	b.n	8008314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 fbdc 	bl	8009aa8 <USB_CoreReset>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	639a      	str	r2, [r3, #56]	@ 0x38
 8008306:	e005      	b.n	8008314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	2b01      	cmp	r3, #1
 8008318:	d10b      	bne.n	8008332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f043 0206 	orr.w	r2, r3, #6
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f043 0220 	orr.w	r2, r3, #32
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833e:	b004      	add	sp, #16
 8008340:	4770      	bx	lr
	...

08008344 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d165      	bne.n	8008424 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4a41      	ldr	r2, [pc, #260]	@ (8008460 <USB_SetTurnaroundTime+0x11c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d906      	bls.n	800836e <USB_SetTurnaroundTime+0x2a>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4a40      	ldr	r2, [pc, #256]	@ (8008464 <USB_SetTurnaroundTime+0x120>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d202      	bcs.n	800836e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008368:	230f      	movs	r3, #15
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e062      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4a3c      	ldr	r2, [pc, #240]	@ (8008464 <USB_SetTurnaroundTime+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d306      	bcc.n	8008384 <USB_SetTurnaroundTime+0x40>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4a3b      	ldr	r2, [pc, #236]	@ (8008468 <USB_SetTurnaroundTime+0x124>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d202      	bcs.n	8008384 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800837e:	230e      	movs	r3, #14
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e057      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4a38      	ldr	r2, [pc, #224]	@ (8008468 <USB_SetTurnaroundTime+0x124>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d306      	bcc.n	800839a <USB_SetTurnaroundTime+0x56>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4a37      	ldr	r2, [pc, #220]	@ (800846c <USB_SetTurnaroundTime+0x128>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d202      	bcs.n	800839a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008394:	230d      	movs	r3, #13
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e04c      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a33      	ldr	r2, [pc, #204]	@ (800846c <USB_SetTurnaroundTime+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d306      	bcc.n	80083b0 <USB_SetTurnaroundTime+0x6c>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4a32      	ldr	r2, [pc, #200]	@ (8008470 <USB_SetTurnaroundTime+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d802      	bhi.n	80083b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083aa:	230c      	movs	r3, #12
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e041      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008470 <USB_SetTurnaroundTime+0x12c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d906      	bls.n	80083c6 <USB_SetTurnaroundTime+0x82>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008474 <USB_SetTurnaroundTime+0x130>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d802      	bhi.n	80083c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083c0:	230b      	movs	r3, #11
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e036      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008474 <USB_SetTurnaroundTime+0x130>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d906      	bls.n	80083dc <USB_SetTurnaroundTime+0x98>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a29      	ldr	r2, [pc, #164]	@ (8008478 <USB_SetTurnaroundTime+0x134>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d802      	bhi.n	80083dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083d6:	230a      	movs	r3, #10
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e02b      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a26      	ldr	r2, [pc, #152]	@ (8008478 <USB_SetTurnaroundTime+0x134>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d906      	bls.n	80083f2 <USB_SetTurnaroundTime+0xae>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4a25      	ldr	r2, [pc, #148]	@ (800847c <USB_SetTurnaroundTime+0x138>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d202      	bcs.n	80083f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083ec:	2309      	movs	r3, #9
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e020      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4a21      	ldr	r2, [pc, #132]	@ (800847c <USB_SetTurnaroundTime+0x138>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d306      	bcc.n	8008408 <USB_SetTurnaroundTime+0xc4>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4a20      	ldr	r2, [pc, #128]	@ (8008480 <USB_SetTurnaroundTime+0x13c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d802      	bhi.n	8008408 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008402:	2308      	movs	r3, #8
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	e015      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <USB_SetTurnaroundTime+0x13c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d906      	bls.n	800841e <USB_SetTurnaroundTime+0xda>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4a1c      	ldr	r2, [pc, #112]	@ (8008484 <USB_SetTurnaroundTime+0x140>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d202      	bcs.n	800841e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008418:	2307      	movs	r3, #7
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e00a      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800841e:	2306      	movs	r3, #6
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e007      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800842a:	2309      	movs	r3, #9
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	e001      	b.n	8008434 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008430:	2309      	movs	r3, #9
 8008432:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	00d8acbf 	.word	0x00d8acbf
 8008464:	00e4e1c0 	.word	0x00e4e1c0
 8008468:	00f42400 	.word	0x00f42400
 800846c:	01067380 	.word	0x01067380
 8008470:	011a499f 	.word	0x011a499f
 8008474:	01312cff 	.word	0x01312cff
 8008478:	014ca43f 	.word	0x014ca43f
 800847c:	016e3600 	.word	0x016e3600
 8008480:	01a6ab1f 	.word	0x01a6ab1f
 8008484:	01e84800 	.word	0x01e84800

08008488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f043 0201 	orr.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d115      	bne.n	800851a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f7fb fab8 	bl	8003a70 <HAL_Delay>
      ms++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fa3f 	bl	800998a <USB_GetMode>
 800850c:	4603      	mov	r3, r0
 800850e:	2b01      	cmp	r3, #1
 8008510:	d01e      	beq.n	8008550 <USB_SetCurrentMode+0x84>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b31      	cmp	r3, #49	@ 0x31
 8008516:	d9f0      	bls.n	80084fa <USB_SetCurrentMode+0x2e>
 8008518:	e01a      	b.n	8008550 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d115      	bne.n	800854c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800852c:	2001      	movs	r0, #1
 800852e:	f7fb fa9f 	bl	8003a70 <HAL_Delay>
      ms++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fa26 	bl	800998a <USB_GetMode>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <USB_SetCurrentMode+0x84>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b31      	cmp	r3, #49	@ 0x31
 8008548:	d9f0      	bls.n	800852c <USB_SetCurrentMode+0x60>
 800854a:	e001      	b.n	8008550 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e005      	b.n	800855c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b32      	cmp	r3, #50	@ 0x32
 8008554:	d101      	bne.n	800855a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008564:	b084      	sub	sp, #16
 8008566:	b580      	push	{r7, lr}
 8008568:	b086      	sub	sp, #24
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	e009      	b.n	8008598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3340      	adds	r3, #64	@ 0x40
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	2200      	movs	r2, #0
 8008590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3301      	adds	r3, #1
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b0e      	cmp	r3, #14
 800859c:	d9f2      	bls.n	8008584 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800859e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d11c      	bne.n	80085de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085b2:	f043 0302 	orr.w	r3, r3, #2
 80085b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e005      	b.n	80085ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085f0:	461a      	mov	r2, r3
 80085f2:	2300      	movs	r3, #0
 80085f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085fc:	4619      	mov	r1, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008604:	461a      	mov	r2, r3
 8008606:	680b      	ldr	r3, [r1, #0]
 8008608:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800860a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860c:	2b01      	cmp	r3, #1
 800860e:	d10c      	bne.n	800862a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008616:	2100      	movs	r1, #0
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f965 	bl	80088e8 <USB_SetDevSpeed>
 800861e:	e008      	b.n	8008632 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008620:	2101      	movs	r1, #1
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f960 	bl	80088e8 <USB_SetDevSpeed>
 8008628:	e003      	b.n	8008632 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800862a:	2103      	movs	r1, #3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f95b 	bl	80088e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008632:	2110      	movs	r1, #16
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f8f3 	bl	8008820 <USB_FlushTxFifo>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f91f 	bl	8008888 <USB_FlushRxFifo>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800865a:	461a      	mov	r2, r3
 800865c:	2300      	movs	r3, #0
 800865e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008666:	461a      	mov	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	461a      	mov	r2, r3
 8008674:	2300      	movs	r3, #0
 8008676:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008678:	2300      	movs	r3, #0
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	e043      	b.n	8008706 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008694:	d118      	bne.n	80086c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a8:	461a      	mov	r2, r3
 80086aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	e013      	b.n	80086da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086be:	461a      	mov	r2, r3
 80086c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e008      	b.n	80086da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d4:	461a      	mov	r2, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e6:	461a      	mov	r2, r3
 80086e8:	2300      	movs	r3, #0
 80086ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	461a      	mov	r2, r3
 80086fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3301      	adds	r3, #1
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d3b7      	bcc.n	800867e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	e043      	b.n	800879c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800872a:	d118      	bne.n	800875e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873e:	461a      	mov	r2, r3
 8008740:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	e013      	b.n	8008770 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008754:	461a      	mov	r2, r3
 8008756:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e008      	b.n	8008770 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876a:	461a      	mov	r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877c:	461a      	mov	r2, r3
 800877e:	2300      	movs	r3, #0
 8008780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	461a      	mov	r2, r3
 8008790:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d3b7      	bcc.n	8008714 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80087c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f043 0210 	orr.w	r2, r3, #16
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	4b0f      	ldr	r3, [pc, #60]	@ (800881c <USB_DevInit+0x2b8>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f043 0208 	orr.w	r2, r3, #8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d107      	bne.n	800880c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008804:	f043 0304 	orr.w	r3, r3, #4
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008818:	b004      	add	sp, #16
 800881a:	4770      	bx	lr
 800881c:	803c3800 	.word	0x803c3800

08008820 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a13      	ldr	r2, [pc, #76]	@ (8008884 <USB_FlushTxFifo+0x64>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d901      	bls.n	8008840 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e01b      	b.n	8008878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	daf2      	bge.n	800882e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	019b      	lsls	r3, r3, #6
 8008850:	f043 0220 	orr.w	r2, r3, #32
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4a08      	ldr	r2, [pc, #32]	@ (8008884 <USB_FlushTxFifo+0x64>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d901      	bls.n	800886a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e006      	b.n	8008878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b20      	cmp	r3, #32
 8008874:	d0f0      	beq.n	8008858 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	00030d40 	.word	0x00030d40

08008888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4a11      	ldr	r2, [pc, #68]	@ (80088e4 <USB_FlushRxFifo+0x5c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e018      	b.n	80088d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	daf2      	bge.n	8008894 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2210      	movs	r2, #16
 80088b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3301      	adds	r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4a08      	ldr	r2, [pc, #32]	@ (80088e4 <USB_FlushRxFifo+0x5c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d901      	bls.n	80088ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e006      	b.n	80088d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b10      	cmp	r3, #16
 80088d4:	d0f0      	beq.n	80088b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	00030d40 	.word	0x00030d40

080088e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008908:	4313      	orrs	r3, r2
 800890a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800891a:	b480      	push	{r7}
 800891c:	b087      	sub	sp, #28
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f003 0306 	and.w	r3, r3, #6
 8008932:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
 800893e:	e00a      	b.n	8008956 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d002      	beq.n	800894c <USB_GetDevSpeed+0x32>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b06      	cmp	r3, #6
 800894a:	d102      	bne.n	8008952 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800894c:	2302      	movs	r3, #2
 800894e:	75fb      	strb	r3, [r7, #23]
 8008950:	e001      	b.n	8008956 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008952:	230f      	movs	r3, #15
 8008954:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d13a      	bne.n	80089f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008986:	69da      	ldr	r2, [r3, #28]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	68f9      	ldr	r1, [r7, #12]
 800899a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800899e:	4313      	orrs	r3, r2
 80089a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d155      	bne.n	8008a64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	791b      	ldrb	r3, [r3, #4]
 80089d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089dc:	4313      	orrs	r3, r2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	e036      	b.n	8008a64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	2101      	movs	r1, #1
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a14:	4313      	orrs	r3, r2
 8008a16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d11a      	bne.n	8008a64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d161      	bne.n	8008b54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aa6:	d11f      	bne.n	8008ae8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ac6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	2101      	movs	r1, #1
 8008afa:	fa01 f303 	lsl.w	r3, r1, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b08:	4013      	ands	r3, r2
 8008b0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	0159      	lsls	r1, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	440b      	add	r3, r1
 8008b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <USB_DeactivateEndpoint+0x1b0>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	600b      	str	r3, [r1, #0]
 8008b52:	e060      	b.n	8008c16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b6a:	d11f      	bne.n	8008bac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ba6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008baa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc2:	041b      	lsls	r3, r3, #16
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bcc:	4013      	ands	r3, r2
 8008bce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f303 	lsl.w	r3, r1, r3
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	43db      	mvns	r3, r3
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	0159      	lsls	r1, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	440b      	add	r3, r1
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <USB_DeactivateEndpoint+0x1b4>)
 8008c12:	4013      	ands	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	ec337800 	.word	0xec337800
 8008c28:	eff37800 	.word	0xeff37800

08008c2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	@ 0x28
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	785b      	ldrb	r3, [r3, #1]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	f040 815c 	bne.w	8008f06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d132      	bne.n	8008cbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb4:	0cdb      	lsrs	r3, r3, #19
 8008cb6:	04db      	lsls	r3, r3, #19
 8008cb8:	6113      	str	r3, [r2, #16]
 8008cba:	e074      	b.n	8008da6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cd6:	0cdb      	lsrs	r3, r3, #19
 8008cd8:	04db      	lsls	r3, r3, #19
 8008cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6999      	ldr	r1, [r3, #24]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	440b      	add	r3, r1
 8008d18:	1e59      	subs	r1, r3, #1
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d24:	4b9d      	ldr	r3, [pc, #628]	@ (8008f9c <USB_EPStartXfer+0x370>)
 8008d26:	400b      	ands	r3, r1
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	0148      	lsls	r0, r1, #5
 8008d2c:	69f9      	ldr	r1, [r7, #28]
 8008d2e:	4401      	add	r1, r0
 8008d30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d34:	4313      	orrs	r3, r2
 8008d36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4e:	69b9      	ldr	r1, [r7, #24]
 8008d50:	0148      	lsls	r0, r1, #5
 8008d52:	69f9      	ldr	r1, [r7, #28]
 8008d54:	4401      	add	r1, r0
 8008d56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	791b      	ldrb	r3, [r3, #4]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d11f      	bne.n	8008da6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d80:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008d84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	69fa      	ldr	r2, [r7, #28]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008da4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d14b      	bne.n	8008e44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	791b      	ldrb	r3, [r3, #4]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d128      	bne.n	8008e22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d110      	bne.n	8008e02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	e00f      	b.n	8008e22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e133      	b.n	80090ac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	791b      	ldrb	r3, [r3, #4]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d015      	beq.n	8008e98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 811b 	beq.w	80090ac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	2101      	movs	r1, #1
 8008e88:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8c:	69f9      	ldr	r1, [r7, #28]
 8008e8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e92:	4313      	orrs	r3, r2
 8008e94:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e96:	e109      	b.n	80090ac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d110      	bne.n	8008eca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	e00f      	b.n	8008eea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	0151      	lsls	r1, r2, #5
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	440a      	add	r2, r1
 8008ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ee8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	6919      	ldr	r1, [r3, #16]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	b298      	uxth	r0, r3
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4603      	mov	r3, r0
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fade 	bl	80094c0 <USB_WritePacket>
 8008f04:	e0d2      	b.n	80090ac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f20:	0cdb      	lsrs	r3, r3, #19
 8008f22:	04db      	lsls	r3, r3, #19
 8008f24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d126      	bne.n	8008fa0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5e:	691a      	ldr	r2, [r3, #16]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f68:	69b9      	ldr	r1, [r7, #24]
 8008f6a:	0148      	lsls	r0, r1, #5
 8008f6c:	69f9      	ldr	r1, [r7, #28]
 8008f6e:	4401      	add	r1, r0
 8008f70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f74:	4313      	orrs	r3, r2
 8008f76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	0151      	lsls	r1, r2, #5
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f96:	6113      	str	r3, [r2, #16]
 8008f98:	e03a      	b.n	8009010 <USB_EPStartXfer+0x3e4>
 8008f9a:	bf00      	nop
 8008f9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	1e5a      	subs	r2, r3, #1
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	8afa      	ldrh	r2, [r7, #22]
 8008fbc:	fb03 f202 	mul.w	r2, r3, r2
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	8afb      	ldrh	r3, [r7, #22]
 8008fd4:	04d9      	lsls	r1, r3, #19
 8008fd6:	4b38      	ldr	r3, [pc, #224]	@ (80090b8 <USB_EPStartXfer+0x48c>)
 8008fd8:	400b      	ands	r3, r1
 8008fda:	69b9      	ldr	r1, [r7, #24]
 8008fdc:	0148      	lsls	r0, r1, #5
 8008fde:	69f9      	ldr	r1, [r7, #28]
 8008fe0:	4401      	add	r1, r0
 8008fe2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009000:	69b9      	ldr	r1, [r7, #24]
 8009002:	0148      	lsls	r0, r1, #5
 8009004:	69f9      	ldr	r1, [r7, #28]
 8009006:	4401      	add	r1, r0
 8009008:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800900c:	4313      	orrs	r3, r2
 800900e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d10d      	bne.n	8009032 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6919      	ldr	r1, [r3, #16]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902e:	460a      	mov	r2, r1
 8009030:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	791b      	ldrb	r3, [r3, #4]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d128      	bne.n	800908c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d110      	bne.n	800906c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009064:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e00f      	b.n	800908c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800908a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	1ff80000 	.word	0x1ff80000

080090bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f040 80ce 	bne.w	800927a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d132      	bne.n	800914c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009100:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009104:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	440a      	add	r2, r1
 8009120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009144:	0cdb      	lsrs	r3, r3, #19
 8009146:	04db      	lsls	r3, r3, #19
 8009148:	6113      	str	r3, [r2, #16]
 800914a:	e04e      	b.n	80091ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009166:	0cdb      	lsrs	r3, r3, #19
 8009168:	04db      	lsls	r3, r3, #19
 800916a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009186:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800918a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800918e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	699a      	ldr	r2, [r3, #24]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	429a      	cmp	r2, r3
 800919a:	d903      	bls.n	80091a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091da:	6939      	ldr	r1, [r7, #16]
 80091dc:	0148      	lsls	r0, r1, #5
 80091de:	6979      	ldr	r1, [r7, #20]
 80091e0:	4401      	add	r1, r0
 80091e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091e6:	4313      	orrs	r3, r2
 80091e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d11e      	bne.n	800922e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d009      	beq.n	800920c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	461a      	mov	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009226:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	e097      	b.n	800935e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	440a      	add	r2, r1
 8009244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009248:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800924c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8083 	beq.w	800935e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f303 	lsl.w	r3, r1, r3
 800926e:	6979      	ldr	r1, [r7, #20]
 8009270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009274:	4313      	orrs	r3, r2
 8009276:	634b      	str	r3, [r1, #52]	@ 0x34
 8009278:	e071      	b.n	800935e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	440a      	add	r2, r1
 8009290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009294:	0cdb      	lsrs	r3, r3, #19
 8009296:	04db      	lsls	r3, r3, #19
 8009298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	0151      	lsls	r1, r2, #5
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	440a      	add	r2, r1
 80092b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	0151      	lsls	r1, r2, #5
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	440a      	add	r2, r1
 80092ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800930c:	6939      	ldr	r1, [r7, #16]
 800930e:	0148      	lsls	r0, r1, #5
 8009310:	6979      	ldr	r1, [r7, #20]
 8009312:	4401      	add	r1, r0
 8009314:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009318:	4313      	orrs	r3, r2
 800931a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d10d      	bne.n	800933e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6919      	ldr	r1, [r3, #16]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933a:	460a      	mov	r2, r1
 800933c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	0151      	lsls	r1, r2, #5
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	440a      	add	r2, r1
 8009354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009358:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800935c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d14a      	bne.n	8009420 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800939e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a2:	f040 8086 	bne.w	80094b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	7812      	ldrb	r2, [r2, #0]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d902      	bls.n	8009404 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
          break;
 8009402:	e056      	b.n	80094b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800941c:	d0e7      	beq.n	80093ee <USB_EPStopXfer+0x82>
 800941e:	e048      	b.n	80094b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009438:	d13b      	bne.n	80094b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	7812      	ldrb	r2, [r2, #0]
 800944e:	0151      	lsls	r1, r2, #5
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	440a      	add	r2, r1
 8009454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800945c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	7812      	ldrb	r2, [r2, #0]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800947c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800948e:	4293      	cmp	r3, r2
 8009490:	d902      	bls.n	8009498 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
          break;
 8009496:	e00c      	b.n	80094b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094b0:	d0e7      	beq.n	8009482 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	@ 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4611      	mov	r1, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	460b      	mov	r3, r1
 80094d0:	71fb      	strb	r3, [r7, #7]
 80094d2:	4613      	mov	r3, r2
 80094d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d123      	bne.n	800952e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094e6:	88bb      	ldrh	r3, [r7, #4]
 80094e8:	3303      	adds	r3, #3
 80094ea:	089b      	lsrs	r3, r3, #2
 80094ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094ee:	2300      	movs	r3, #0
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	e018      	b.n	8009526 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	031a      	lsls	r2, r3, #12
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009500:	461a      	mov	r2, r3
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	3301      	adds	r3, #1
 800950c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	3301      	adds	r3, #1
 8009512:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	3301      	adds	r3, #1
 8009518:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	3301      	adds	r3, #1
 800951e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	3301      	adds	r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	429a      	cmp	r2, r3
 800952c:	d3e2      	bcc.n	80094f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3724      	adds	r7, #36	@ 0x24
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800953c:	b480      	push	{r7}
 800953e:	b08b      	sub	sp, #44	@ 0x2c
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	089b      	lsrs	r3, r3, #2
 8009556:	b29b      	uxth	r3, r3
 8009558:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009562:	2300      	movs	r3, #0
 8009564:	623b      	str	r3, [r7, #32]
 8009566:	e014      	b.n	8009592 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	601a      	str	r2, [r3, #0]
    pDest++;
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	3301      	adds	r3, #1
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	3301      	adds	r3, #1
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	3301      	adds	r3, #1
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	3301      	adds	r3, #1
 800958a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	3301      	adds	r3, #1
 8009590:	623b      	str	r3, [r7, #32]
 8009592:	6a3a      	ldr	r2, [r7, #32]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	429a      	cmp	r2, r3
 8009598:	d3e6      	bcc.n	8009568 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800959a:	8bfb      	ldrh	r3, [r7, #30]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01e      	beq.n	80095de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095aa:	461a      	mov	r2, r3
 80095ac:	f107 0310 	add.w	r3, r7, #16
 80095b0:	6812      	ldr	r2, [r2, #0]
 80095b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	fa22 f303 	lsr.w	r3, r2, r3
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	701a      	strb	r2, [r3, #0]
      i++;
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	3301      	adds	r3, #1
 80095ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	3301      	adds	r3, #1
 80095d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80095d2:	8bfb      	ldrh	r3, [r7, #30]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095d8:	8bfb      	ldrh	r3, [r7, #30]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1ea      	bne.n	80095b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	372c      	adds	r7, #44	@ 0x2c
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	785b      	ldrb	r3, [r3, #1]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d12c      	bne.n	8009662 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	db12      	blt.n	8009640 <USB_EPSetStall+0x54>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00f      	beq.n	8009640 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	440a      	add	r2, r1
 8009636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800963a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800963e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	440a      	add	r2, r1
 8009656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800965a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	e02b      	b.n	80096ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db12      	blt.n	800969a <USB_EPSetStall+0xae>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00f      	beq.n	800969a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	0151      	lsls	r1, r2, #5
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	440a      	add	r2, r1
 8009690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009694:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009698:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	0151      	lsls	r1, r2, #5
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	440a      	add	r2, r1
 80096b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d128      	bne.n	8009736 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009702:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	791b      	ldrb	r3, [r3, #4]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d003      	beq.n	8009714 <USB_EPClearStall+0x4c>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	791b      	ldrb	r3, [r3, #4]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d138      	bne.n	8009786 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800972e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e027      	b.n	8009786 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009750:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009754:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	791b      	ldrb	r3, [r3, #4]
 800975a:	2b03      	cmp	r3, #3
 800975c:	d003      	beq.n	8009766 <USB_EPClearStall+0x9e>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	791b      	ldrb	r3, [r3, #4]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d10f      	bne.n	8009786 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	0151      	lsls	r1, r2, #5
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	440a      	add	r2, r1
 800977c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009784:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80097b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80097c8:	68f9      	ldr	r1, [r7, #12]
 80097ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097ce:	4313      	orrs	r3, r2
 80097d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097fa:	f023 0303 	bic.w	r3, r3, #3
 80097fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800980e:	f023 0302 	bic.w	r3, r3, #2
 8009812:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800983c:	f023 0303 	bic.w	r3, r3, #3
 8009840:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4013      	ands	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4013      	ands	r3, r2
 80098ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	0c1b      	lsrs	r3, r3, #16
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4013      	ands	r3, r2
 80098e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	b29b      	uxth	r3, r3
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4013      	ands	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009920:	68bb      	ldr	r3, [r7, #8]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800992e:	b480      	push	{r7}
 8009930:	b087      	sub	sp, #28
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009950:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	01db      	lsls	r3, r3, #7
 8009960:	b2db      	uxtb	r3, r3
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	4313      	orrs	r3, r2
 8009966:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	4013      	ands	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800997c:	68bb      	ldr	r3, [r7, #8]
}
 800997e:	4618      	mov	r0, r3
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	f003 0301 	and.w	r3, r3, #1
}
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b085      	sub	sp, #20
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80099c4:	f023 0307 	bic.w	r3, r3, #7
 80099c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	460b      	mov	r3, r1
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	333c      	adds	r3, #60	@ 0x3c
 8009a02:	3304      	adds	r3, #4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4a26      	ldr	r2, [pc, #152]	@ (8009aa4 <USB_EP0_OutStart+0xb8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d90a      	bls.n	8009a26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a20:	d101      	bne.n	8009a26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e037      	b.n	8009a96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a54:	f043 0318 	orr.w	r3, r3, #24
 8009a58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d10f      	bne.n	8009a94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	4f54300a 	.word	0x4f54300a

08009aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a13      	ldr	r2, [pc, #76]	@ (8009b0c <USB_CoreReset+0x64>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e01b      	b.n	8009afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	daf2      	bge.n	8009ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f043 0201 	orr.w	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a09      	ldr	r2, [pc, #36]	@ (8009b0c <USB_CoreReset+0x64>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d901      	bls.n	8009af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e006      	b.n	8009afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d0f0      	beq.n	8009ade <USB_CoreReset+0x36>

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	00030d40 	.word	0x00030d40

08009b10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b14:	4904      	ldr	r1, [pc, #16]	@ (8009b28 <MX_FATFS_Init+0x18>)
 8009b16:	4805      	ldr	r0, [pc, #20]	@ (8009b2c <MX_FATFS_Init+0x1c>)
 8009b18:	f002 f85a 	bl	800bbd0 <FATFS_LinkDriver>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4b03      	ldr	r3, [pc, #12]	@ (8009b30 <MX_FATFS_Init+0x20>)
 8009b22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b24:	bf00      	nop
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	200007fc 	.word	0x200007fc
 8009b2c:	20000010 	.word	0x20000010
 8009b30:	200007f8 	.word	0x200007f8

08009b34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009b3e:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <USER_initialize+0x24>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009b44:	4b04      	ldr	r3, [pc, #16]	@ (8009b58 <USER_initialize+0x24>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	2000000d 	.word	0x2000000d

08009b5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009b66:	4b06      	ldr	r3, [pc, #24]	@ (8009b80 <USER_status+0x24>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009b6c:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <USER_status+0x24>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	2000000d 	.word	0x2000000d

08009b84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009b94:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009bb2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	603a      	str	r2, [r7, #0]
 8009bca:	71fb      	strb	r3, [r7, #7]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
    return res;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bf4:	f002 fd22 	bl	800c63c <USBD_static_malloc>
 8009bf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32b0      	adds	r2, #176	@ 0xb0
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0d4      	b.n	8009dbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c18:	2100      	movs	r1, #0
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f004 fbaf 	bl	800e37e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	32b0      	adds	r2, #176	@ 0xb0
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32b0      	adds	r2, #176	@ 0xb0
 8009c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7c1b      	ldrb	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d138      	bne.n	8009cbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009c4e:	7819      	ldrb	r1, [r3, #0]
 8009c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c54:	2202      	movs	r2, #2
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f002 fb7f 	bl	800c35a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	2201      	movs	r2, #1
 8009c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c76:	4b55      	ldr	r3, [pc, #340]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c7e:	2202      	movs	r2, #2
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f002 fb6a 	bl	800c35a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c86:	4b51      	ldr	r3, [pc, #324]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	f003 020f 	and.w	r2, r3, #15
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f003 020f 	and.w	r2, r3, #15
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3326      	adds	r3, #38	@ 0x26
 8009cb8:	2210      	movs	r2, #16
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e035      	b.n	8009d2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cbe:	4b42      	ldr	r3, [pc, #264]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009cc0:	7819      	ldrb	r1, [r3, #0]
 8009cc2:	2340      	movs	r3, #64	@ 0x40
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f002 fb47 	bl	800c35a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	f003 020f 	and.w	r2, r3, #15
 8009cd4:	6879      	ldr	r1, [r7, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	440b      	add	r3, r1
 8009ce0:	3324      	adds	r3, #36	@ 0x24
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ce6:	4b39      	ldr	r3, [pc, #228]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009ce8:	7819      	ldrb	r1, [r3, #0]
 8009cea:	2340      	movs	r3, #64	@ 0x40
 8009cec:	2202      	movs	r2, #2
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f002 fb33 	bl	800c35a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cf4:	4b35      	ldr	r3, [pc, #212]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 020f 	and.w	r2, r3, #15
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d10:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3326      	adds	r3, #38	@ 0x26
 8009d26:	2210      	movs	r2, #16
 8009d28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d2a:	4b29      	ldr	r3, [pc, #164]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d2c:	7819      	ldrb	r1, [r3, #0]
 8009d2e:	2308      	movs	r3, #8
 8009d30:	2203      	movs	r2, #3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f002 fb11 	bl	800c35a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d38:	4b25      	ldr	r3, [pc, #148]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 020f 	and.w	r2, r3, #15
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3324      	adds	r3, #36	@ 0x24
 8009d4e:	2201      	movs	r2, #1
 8009d50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	33b0      	adds	r3, #176	@ 0xb0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e018      	b.n	8009dbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7c1b      	ldrb	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d94:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009d96:	7819      	ldrb	r1, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f002 fbc8 	bl	800c538 <USBD_LL_PrepareReceive>
 8009da8:	e008      	b.n	8009dbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009daa:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009dac:	7819      	ldrb	r1, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009db4:	2340      	movs	r3, #64	@ 0x40
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f002 fbbe 	bl	800c538 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200000ab 	.word	0x200000ab
 8009dcc:	200000ac 	.word	0x200000ac
 8009dd0:	200000ad 	.word	0x200000ad

08009dd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009de0:	4b3a      	ldr	r3, [pc, #232]	@ (8009ecc <USBD_CDC_DeInit+0xf8>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f002 fadd 	bl	800c3a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009dec:	4b37      	ldr	r3, [pc, #220]	@ (8009ecc <USBD_CDC_DeInit+0xf8>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 020f 	and.w	r2, r3, #15
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	3324      	adds	r3, #36	@ 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e06:	4b32      	ldr	r3, [pc, #200]	@ (8009ed0 <USBD_CDC_DeInit+0xfc>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f002 faca 	bl	800c3a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e12:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed0 <USBD_CDC_DeInit+0xfc>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	f003 020f 	and.w	r2, r3, #15
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e2e:	4b29      	ldr	r3, [pc, #164]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 fab6 	bl	800c3a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e3a:	4b26      	ldr	r3, [pc, #152]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 020f 	and.w	r2, r3, #15
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3324      	adds	r3, #36	@ 0x24
 8009e50:	2200      	movs	r2, #0
 8009e52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e54:	4b1f      	ldr	r3, [pc, #124]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 020f 	and.w	r2, r3, #15
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	3326      	adds	r3, #38	@ 0x26
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	32b0      	adds	r2, #176	@ 0xb0
 8009e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01f      	beq.n	8009ec0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	33b0      	adds	r3, #176	@ 0xb0
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32b0      	adds	r2, #176	@ 0xb0
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f002 fbd8 	bl	800c658 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	32b0      	adds	r2, #176	@ 0xb0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200000ab 	.word	0x200000ab
 8009ed0:	200000ac 	.word	0x200000ac
 8009ed4:	200000ad 	.word	0x200000ad

08009ed8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	32b0      	adds	r2, #176	@ 0xb0
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e0bf      	b.n	800a088 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d050      	beq.n	8009fb6 <USBD_CDC_Setup+0xde>
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	f040 80af 	bne.w	800a078 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	88db      	ldrh	r3, [r3, #6]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d03a      	beq.n	8009f98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b25b      	sxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da1b      	bge.n	8009f64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	33b0      	adds	r3, #176	@ 0xb0
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	88d2      	ldrh	r2, [r2, #6]
 8009f48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	88db      	ldrh	r3, [r3, #6]
 8009f4e:	2b07      	cmp	r3, #7
 8009f50:	bf28      	it	cs
 8009f52:	2307      	movcs	r3, #7
 8009f54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	89fa      	ldrh	r2, [r7, #14]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fd6b 	bl	800ba38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f62:	e090      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785a      	ldrb	r2, [r3, #1]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	88db      	ldrh	r3, [r3, #6]
 8009f72:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f74:	d803      	bhi.n	8009f7e <USBD_CDC_Setup+0xa6>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	e000      	b.n	8009f80 <USBD_CDC_Setup+0xa8>
 8009f7e:	2240      	movs	r2, #64	@ 0x40
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f86:	6939      	ldr	r1, [r7, #16]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f8e:	461a      	mov	r2, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fd7d 	bl	800ba90 <USBD_CtlPrepareRx>
      break;
 8009f96:	e076      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	33b0      	adds	r3, #176	@ 0xb0
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7850      	ldrb	r0, [r2, #1]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	4798      	blx	r3
      break;
 8009fb4:	e067      	b.n	800a086 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	2b0b      	cmp	r3, #11
 8009fbc:	d851      	bhi.n	800a062 <USBD_CDC_Setup+0x18a>
 8009fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc4 <USBD_CDC_Setup+0xec>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	0800a063 	.word	0x0800a063
 8009fd0:	0800a063 	.word	0x0800a063
 8009fd4:	0800a063 	.word	0x0800a063
 8009fd8:	0800a063 	.word	0x0800a063
 8009fdc:	0800a063 	.word	0x0800a063
 8009fe0:	0800a063 	.word	0x0800a063
 8009fe4:	0800a063 	.word	0x0800a063
 8009fe8:	0800a063 	.word	0x0800a063
 8009fec:	0800a01f 	.word	0x0800a01f
 8009ff0:	0800a049 	.word	0x0800a049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d107      	bne.n	800a010 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a000:	f107 030a 	add.w	r3, r7, #10
 800a004:	2202      	movs	r2, #2
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fd15 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a00e:	e032      	b.n	800a076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 fc9f 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a018:	2303      	movs	r3, #3
 800a01a:	75fb      	strb	r3, [r7, #23]
          break;
 800a01c:	e02b      	b.n	800a076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b03      	cmp	r3, #3
 800a028:	d107      	bne.n	800a03a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a02a:	f107 030d 	add.w	r3, r7, #13
 800a02e:	2201      	movs	r2, #1
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fd00 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a038:	e01d      	b.n	800a076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 fc8a 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a042:	2303      	movs	r3, #3
 800a044:	75fb      	strb	r3, [r7, #23]
          break;
 800a046:	e016      	b.n	800a076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b03      	cmp	r3, #3
 800a052:	d00f      	beq.n	800a074 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fc7d 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a060:	e008      	b.n	800a074 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fc76 	bl	800b956 <USBD_CtlError>
          ret = USBD_FAIL;
 800a06a:	2303      	movs	r3, #3
 800a06c:	75fb      	strb	r3, [r7, #23]
          break;
 800a06e:	e002      	b.n	800a076 <USBD_CDC_Setup+0x19e>
          break;
 800a070:	bf00      	nop
 800a072:	e008      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
          break;
 800a074:	bf00      	nop
      }
      break;
 800a076:	e006      	b.n	800a086 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fc6b 	bl	800b956 <USBD_CtlError>
      ret = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	bf00      	nop
  }

  return (uint8_t)ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32b0      	adds	r2, #176	@ 0xb0
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e065      	b.n	800a186 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	32b0      	adds	r2, #176	@ 0xb0
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	f003 020f 	and.w	r2, r3, #15
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	3318      	adds	r3, #24
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d02f      	beq.n	800a144 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	f003 020f 	and.w	r2, r3, #15
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3318      	adds	r3, #24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	f003 010f 	and.w	r1, r3, #15
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	460b      	mov	r3, r1
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	440b      	add	r3, r1
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4403      	add	r3, r0
 800a10c:	3348      	adds	r3, #72	@ 0x48
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	fbb2 f1f3 	udiv	r1, r2, r3
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d112      	bne.n	800a144 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	f003 020f 	and.w	r2, r3, #15
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	3318      	adds	r3, #24
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a136:	78f9      	ldrb	r1, [r7, #3]
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f002 f9da 	bl	800c4f6 <USBD_LL_Transmit>
 800a142:	e01f      	b.n	800a184 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	33b0      	adds	r3, #176	@ 0xb0
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	@ 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	32b0      	adds	r2, #176	@ 0xb0
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	32b0      	adds	r2, #176	@ 0xb0
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e01a      	b.n	800a1f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f002 f9d8 	bl	800c57a <USBD_LL_GetRxDataSize>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33b0      	adds	r3, #176	@ 0xb0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	32b0      	adds	r2, #176	@ 0xb0
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e024      	b.n	800a26a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	33b0      	adds	r3, #176	@ 0xb0
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d019      	beq.n	800a268 <USBD_CDC_EP0_RxReady+0x6a>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a23a:	2bff      	cmp	r3, #255	@ 0xff
 800a23c:	d014      	beq.n	800a268 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	33b0      	adds	r3, #176	@ 0xb0
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a256:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a25e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a27c:	2182      	movs	r1, #130	@ 0x82
 800a27e:	4818      	ldr	r0, [pc, #96]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a280:	f000 fd09 	bl	800ac96 <USBD_GetEpDesc>
 800a284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a286:	2101      	movs	r1, #1
 800a288:	4815      	ldr	r0, [pc, #84]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a28a:	f000 fd04 	bl	800ac96 <USBD_GetEpDesc>
 800a28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a290:	2181      	movs	r1, #129	@ 0x81
 800a292:	4813      	ldr	r0, [pc, #76]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a294:	f000 fcff 	bl	800ac96 <USBD_GetEpDesc>
 800a298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2b4:	711a      	strb	r2, [r3, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2c8:	711a      	strb	r2, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2243      	movs	r2, #67	@ 0x43
 800a2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d4:	4b02      	ldr	r3, [pc, #8]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000068 	.word	0x20000068

0800a2e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2ec:	2182      	movs	r1, #130	@ 0x82
 800a2ee:	4818      	ldr	r0, [pc, #96]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2f0:	f000 fcd1 	bl	800ac96 <USBD_GetEpDesc>
 800a2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	4815      	ldr	r0, [pc, #84]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2fa:	f000 fccc 	bl	800ac96 <USBD_GetEpDesc>
 800a2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a300:	2181      	movs	r1, #129	@ 0x81
 800a302:	4813      	ldr	r0, [pc, #76]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a304:	f000 fcc7 	bl	800ac96 <USBD_GetEpDesc>
 800a308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2210      	movs	r2, #16
 800a314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2200      	movs	r2, #0
 800a320:	711a      	strb	r2, [r3, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f042 0202 	orr.w	r2, r2, #2
 800a328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	711a      	strb	r2, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f042 0202 	orr.w	r2, r2, #2
 800a33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2243      	movs	r2, #67	@ 0x43
 800a342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a344:	4b02      	ldr	r3, [pc, #8]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000068 	.word	0x20000068

0800a354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a35c:	2182      	movs	r1, #130	@ 0x82
 800a35e:	4818      	ldr	r0, [pc, #96]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a360:	f000 fc99 	bl	800ac96 <USBD_GetEpDesc>
 800a364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a366:	2101      	movs	r1, #1
 800a368:	4815      	ldr	r0, [pc, #84]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a36a:	f000 fc94 	bl	800ac96 <USBD_GetEpDesc>
 800a36e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a370:	2181      	movs	r1, #129	@ 0x81
 800a372:	4813      	ldr	r0, [pc, #76]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a374:	f000 fc8f 	bl	800ac96 <USBD_GetEpDesc>
 800a378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2210      	movs	r2, #16
 800a384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d006      	beq.n	800a39a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2200      	movs	r2, #0
 800a390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a394:	711a      	strb	r2, [r3, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d006      	beq.n	800a3ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3a8:	711a      	strb	r2, [r3, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2243      	movs	r2, #67	@ 0x43
 800a3b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000068 	.word	0x20000068

0800a3c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	@ (800a3e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	20000024 	.word	0x20000024

0800a3e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e009      	b.n	800a40c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	33b0      	adds	r3, #176	@ 0xb0
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	32b0      	adds	r2, #176	@ 0xb0
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e008      	b.n	800a450 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	32b0      	adds	r2, #176	@ 0xb0
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e004      	b.n	800a48a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
	...

0800a498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32b0      	adds	r2, #176	@ 0xb0
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32b0      	adds	r2, #176	@ 0xb0
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e018      	b.n	800a4f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4d0:	7819      	ldrb	r1, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f002 f82b 	bl	800c538 <USBD_LL_PrepareReceive>
 800a4e2:	e008      	b.n	800a4f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4e4:	4b06      	ldr	r3, [pc, #24]	@ (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4e6:	7819      	ldrb	r1, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4ee:	2340      	movs	r3, #64	@ 0x40
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f002 f821 	bl	800c538 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200000ac 	.word	0x200000ac

0800a504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e01f      	b.n	800a55c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	79fa      	ldrb	r2, [r7, #7]
 800a54e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 fe9b 	bl	800c28c <USBD_LL_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e025      	b.n	800a5c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	@ 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00f      	beq.n	800a5b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	32ae      	adds	r2, #174	@ 0xae
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	f107 020e 	add.w	r2, r7, #14
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 fea3 	bl	800c324 <USBD_LL_Start>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4611      	mov	r1, r2
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a65c:	2303      	movs	r3, #3
 800a65e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f930 	bl	800b8e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d01a      	beq.n	800a6dc <USBD_LL_SetupStage+0x72>
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d822      	bhi.n	800a6f0 <USBD_LL_SetupStage+0x86>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <USBD_LL_SetupStage+0x4a>
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d00a      	beq.n	800a6c8 <USBD_LL_SetupStage+0x5e>
 800a6b2:	e01d      	b.n	800a6f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fb5d 	bl	800ad7c <USBD_StdDevReq>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c6:	e020      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fbc5 	bl	800ae60 <USBD_StdItfReq>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6da:	e016      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc27 	bl	800af38 <USBD_StdEPReq>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ee:	e00c      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fe70 	bl	800c3e4 <USBD_LL_StallEP>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
      break;
 800a708:	bf00      	nop
  }

  return ret;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	460b      	mov	r3, r1
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d16e      	bne.n	800a80a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	f040 8098 	bne.w	800a870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d913      	bls.n	800a774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	4293      	cmp	r3, r2
 800a764:	bf28      	it	cs
 800a766:	4613      	movcs	r3, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 f9ac 	bl	800baca <USBD_CtlContinueRx>
 800a772:	e07d      	b.n	800a870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d014      	beq.n	800a7ac <USBD_LL_DataOutStage+0x98>
 800a782:	2b02      	cmp	r3, #2
 800a784:	d81d      	bhi.n	800a7c2 <USBD_LL_DataOutStage+0xae>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <USBD_LL_DataOutStage+0x7c>
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d003      	beq.n	800a796 <USBD_LL_DataOutStage+0x82>
 800a78e:	e018      	b.n	800a7c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	75bb      	strb	r3, [r7, #22]
            break;
 800a794:	e018      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fa5e 	bl	800ac62 <USBD_CoreFindIF>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7aa:	e00d      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 fa60 	bl	800ac7c <USBD_CoreFindEP>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c0:	e002      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7c8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d119      	bne.n	800a802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d113      	bne.n	800a802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	32ae      	adds	r2, #174	@ 0xae
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7ea:	7dba      	ldrb	r2, [r7, #22]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7f2:	7dba      	ldrb	r2, [r7, #22]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	32ae      	adds	r2, #174	@ 0xae
 800a7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f001 f972 	bl	800baec <USBD_CtlSendStatus>
 800a808:	e032      	b.n	800a870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a810:	b2db      	uxtb	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fa31 	bl	800ac7c <USBD_CoreFindEP>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81e:	7dbb      	ldrb	r3, [r7, #22]
 800a820:	2bff      	cmp	r3, #255	@ 0xff
 800a822:	d025      	beq.n	800a870 <USBD_LL_DataOutStage+0x15c>
 800a824:	7dbb      	ldrb	r3, [r7, #22]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d122      	bne.n	800a870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d117      	bne.n	800a866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a836:	7dba      	ldrb	r2, [r7, #22]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	32ae      	adds	r2, #174	@ 0xae
 800a83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00f      	beq.n	800a866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a846:	7dba      	ldrb	r2, [r7, #22]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a84e:	7dba      	ldrb	r2, [r7, #22]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	32ae      	adds	r2, #174	@ 0xae
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	7afa      	ldrb	r2, [r7, #11]
 800a85c:	4611      	mov	r1, r2
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	4798      	blx	r3
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a866:	7dfb      	ldrb	r3, [r7, #23]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	e000      	b.n	800a872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	460b      	mov	r3, r1
 800a884:	607a      	str	r2, [r7, #4]
 800a886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d16f      	bne.n	800a96e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3314      	adds	r3, #20
 800a892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d15a      	bne.n	800a954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d914      	bls.n	800a8d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	1ad2      	subs	r2, r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f001 f8d4 	bl	800ba6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f001 fe33 	bl	800c538 <USBD_LL_PrepareReceive>
 800a8d2:	e03f      	b.n	800a954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d11c      	bne.n	800a91a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d316      	bcc.n	800a91a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d20f      	bcs.n	800a91a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f001 f8b5 	bl	800ba6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a90c:	2300      	movs	r3, #0
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f001 fe10 	bl	800c538 <USBD_LL_PrepareReceive>
 800a918:	e01c      	b.n	800a954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b03      	cmp	r3, #3
 800a924:	d10f      	bne.n	800a946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a946:	2180      	movs	r1, #128	@ 0x80
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f001 fd4b 	bl	800c3e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 f8df 	bl	800bb12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d03a      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fe42 	bl	800a5e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a96c:	e032      	b.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a96e:	7afb      	ldrb	r3, [r7, #11]
 800a970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a974:	b2db      	uxtb	r3, r3
 800a976:	4619      	mov	r1, r3
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f97f 	bl	800ac7c <USBD_CoreFindEP>
 800a97e:	4603      	mov	r3, r0
 800a980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	2bff      	cmp	r3, #255	@ 0xff
 800a986:	d025      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d122      	bne.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b03      	cmp	r3, #3
 800a998:	d11c      	bne.n	800a9d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a99a:	7dfa      	ldrb	r2, [r7, #23]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	32ae      	adds	r2, #174	@ 0xae
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9aa:	7dfa      	ldrb	r2, [r7, #23]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9b2:	7dfa      	ldrb	r2, [r7, #23]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	32ae      	adds	r2, #174	@ 0xae
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	7afa      	ldrb	r2, [r7, #11]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9ca:	7dbb      	ldrb	r3, [r7, #22]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9d0:	7dbb      	ldrb	r3, [r7, #22]
 800a9d2:	e000      	b.n	800a9d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d014      	beq.n	800aa44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6852      	ldr	r2, [r2, #4]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	4611      	mov	r1, r2
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa44:	2340      	movs	r3, #64	@ 0x40
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fc85 	bl	800c35a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2240      	movs	r2, #64	@ 0x40
 800aa5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa60:	2340      	movs	r3, #64	@ 0x40
 800aa62:	2200      	movs	r2, #0
 800aa64:	2180      	movs	r1, #128	@ 0x80
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fc77 	bl	800c35a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2240      	movs	r2, #64	@ 0x40
 800aa76:	621a      	str	r2, [r3, #32]

  return ret;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2204      	movs	r2, #4
 800aabc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d106      	bne.n	800aaf0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d110      	bne.n	800ab34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	32ae      	adds	r2, #174	@ 0xae
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e01c      	b.n	800ab9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d115      	bne.n	800ab98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	32ae      	adds	r2, #174	@ 0xae
 800ab76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32ae      	adds	r2, #174	@ 0xae
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	4611      	mov	r1, r2
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	32ae      	adds	r2, #174	@ 0xae
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e01c      	b.n	800abfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d115      	bne.n	800abfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	32ae      	adds	r2, #174	@ 0xae
 800abda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	@ 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf4:	78fa      	ldrb	r2, [r7, #3]
 800abf6:	4611      	mov	r1, r2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00e      	beq.n	800ac58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6852      	ldr	r2, [r2, #4]
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	4611      	mov	r1, r2
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	7812      	ldrb	r2, [r2, #0]
 800acb8:	4293      	cmp	r3, r2
 800acba:	d91f      	bls.n	800acfc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acc2:	e013      	b.n	800acec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acc4:	f107 030a 	add.w	r3, r7, #10
 800acc8:	4619      	mov	r1, r3
 800acca:	6978      	ldr	r0, [r7, #20]
 800accc:	f000 f81b 	bl	800ad06 <USBD_GetNextDesc>
 800acd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d108      	bne.n	800acec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	789b      	ldrb	r3, [r3, #2]
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d008      	beq.n	800acfa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ace8:	2300      	movs	r3, #0
 800acea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	885b      	ldrh	r3, [r3, #2]
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	897b      	ldrh	r3, [r7, #10]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d8e5      	bhi.n	800acc4 <USBD_GetEpDesc+0x2e>
 800acf8:	e000      	b.n	800acfc <USBD_GetEpDesc+0x66>
          break;
 800acfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acfc:	693b      	ldr	r3, [r7, #16]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	7812      	ldrb	r2, [r2, #0]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad30:	68fb      	ldr	r3, [r7, #12]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b087      	sub	sp, #28
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	3301      	adds	r3, #1
 800ad54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad5c:	8a3b      	ldrh	r3, [r7, #16]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	b21a      	sxth	r2, r3
 800ad62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	b21b      	sxth	r3, r3
 800ad6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad6c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
	...

0800ad7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad92:	2b40      	cmp	r3, #64	@ 0x40
 800ad94:	d005      	beq.n	800ada2 <USBD_StdDevReq+0x26>
 800ad96:	2b40      	cmp	r3, #64	@ 0x40
 800ad98:	d857      	bhi.n	800ae4a <USBD_StdDevReq+0xce>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00f      	beq.n	800adbe <USBD_StdDevReq+0x42>
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d153      	bne.n	800ae4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	32ae      	adds	r2, #174	@ 0xae
 800adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
      break;
 800adbc:	e04a      	b.n	800ae54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d83b      	bhi.n	800ae3e <USBD_StdDevReq+0xc2>
 800adc6:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <USBD_StdDevReq+0x50>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ae35 	.word	0x0800ae35
 800add4:	0800ae3f 	.word	0x0800ae3f
 800add8:	0800ae2b 	.word	0x0800ae2b
 800addc:	0800ae3f 	.word	0x0800ae3f
 800ade0:	0800adff 	.word	0x0800adff
 800ade4:	0800adf5 	.word	0x0800adf5
 800ade8:	0800ae3f 	.word	0x0800ae3f
 800adec:	0800ae17 	.word	0x0800ae17
 800adf0:	0800ae09 	.word	0x0800ae09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa3c 	bl	800b274 <USBD_GetDescriptor>
          break;
 800adfc:	e024      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fbcb 	bl	800b59c <USBD_SetAddress>
          break;
 800ae06:	e01f      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fc0a 	bl	800b624 <USBD_SetConfig>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
          break;
 800ae14:	e018      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fcad 	bl	800b778 <USBD_GetConfig>
          break;
 800ae1e:	e013      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fcde 	bl	800b7e4 <USBD_GetStatus>
          break;
 800ae28:	e00e      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fd0d 	bl	800b84c <USBD_SetFeature>
          break;
 800ae32:	e009      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fd31 	bl	800b89e <USBD_ClrFeature>
          break;
 800ae3c:	e004      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fd88 	bl	800b956 <USBD_CtlError>
          break;
 800ae46:	bf00      	nop
      }
      break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fd82 	bl	800b956 <USBD_CtlError>
      break;
 800ae52:	bf00      	nop
  }

  return ret;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop

0800ae60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d005      	beq.n	800ae86 <USBD_StdItfReq+0x26>
 800ae7a:	2b40      	cmp	r3, #64	@ 0x40
 800ae7c:	d852      	bhi.n	800af24 <USBD_StdItfReq+0xc4>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <USBD_StdItfReq+0x26>
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d14e      	bne.n	800af24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d840      	bhi.n	800af16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	889b      	ldrh	r3, [r3, #4]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d836      	bhi.n	800af0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	889b      	ldrh	r3, [r3, #4]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fedb 	bl	800ac62 <USBD_CoreFindIF>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2bff      	cmp	r3, #255	@ 0xff
 800aeb4:	d01d      	beq.n	800aef2 <USBD_StdItfReq+0x92>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d11a      	bne.n	800aef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aebc:	7bba      	ldrb	r2, [r7, #14]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	32ae      	adds	r2, #174	@ 0xae
 800aec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00f      	beq.n	800aeec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aecc:	7bba      	ldrb	r2, [r7, #14]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aed4:	7bba      	ldrb	r2, [r7, #14]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32ae      	adds	r2, #174	@ 0xae
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeea:	e004      	b.n	800aef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aeec:	2303      	movs	r3, #3
 800aeee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef0:	e001      	b.n	800aef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aef2:	2303      	movs	r3, #3
 800aef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d110      	bne.n	800af20 <USBD_StdItfReq+0xc0>
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10d      	bne.n	800af20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fdf1 	bl	800baec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af0a:	e009      	b.n	800af20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fd21 	bl	800b956 <USBD_CtlError>
          break;
 800af14:	e004      	b.n	800af20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd1c 	bl	800b956 <USBD_CtlError>
          break;
 800af1e:	e000      	b.n	800af22 <USBD_StdItfReq+0xc2>
          break;
 800af20:	bf00      	nop
      }
      break;
 800af22:	e004      	b.n	800af2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fd15 	bl	800b956 <USBD_CtlError>
      break;
 800af2c:	bf00      	nop
  }

  return ret;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	889b      	ldrh	r3, [r3, #4]
 800af4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af54:	2b40      	cmp	r3, #64	@ 0x40
 800af56:	d007      	beq.n	800af68 <USBD_StdEPReq+0x30>
 800af58:	2b40      	cmp	r3, #64	@ 0x40
 800af5a:	f200 817f 	bhi.w	800b25c <USBD_StdEPReq+0x324>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d02a      	beq.n	800afb8 <USBD_StdEPReq+0x80>
 800af62:	2b20      	cmp	r3, #32
 800af64:	f040 817a 	bne.w	800b25c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff fe85 	bl	800ac7c <USBD_CoreFindEP>
 800af72:	4603      	mov	r3, r0
 800af74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af76:	7b7b      	ldrb	r3, [r7, #13]
 800af78:	2bff      	cmp	r3, #255	@ 0xff
 800af7a:	f000 8174 	beq.w	800b266 <USBD_StdEPReq+0x32e>
 800af7e:	7b7b      	ldrb	r3, [r7, #13]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f040 8170 	bne.w	800b266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af86:	7b7a      	ldrb	r2, [r7, #13]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af8e:	7b7a      	ldrb	r2, [r7, #13]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	32ae      	adds	r2, #174	@ 0xae
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8163 	beq.w	800b266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afa0:	7b7a      	ldrb	r2, [r7, #13]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32ae      	adds	r2, #174	@ 0xae
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afb6:	e156      	b.n	800b266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d008      	beq.n	800afd2 <USBD_StdEPReq+0x9a>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	f300 8145 	bgt.w	800b250 <USBD_StdEPReq+0x318>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 809b 	beq.w	800b102 <USBD_StdEPReq+0x1ca>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d03c      	beq.n	800b04a <USBD_StdEPReq+0x112>
 800afd0:	e13e      	b.n	800b250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <USBD_StdEPReq+0xac>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d016      	beq.n	800b010 <USBD_StdEPReq+0xd8>
 800afe2:	e02c      	b.n	800b03e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <USBD_StdEPReq+0xce>
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b80      	cmp	r3, #128	@ 0x80
 800afee:	d00a      	beq.n	800b006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f9f5 	bl	800c3e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800affa:	2180      	movs	r1, #128	@ 0x80
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f9f1 	bl	800c3e4 <USBD_LL_StallEP>
 800b002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b004:	e020      	b.n	800b048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fca4 	bl	800b956 <USBD_CtlError>
              break;
 800b00e:	e01b      	b.n	800b048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10e      	bne.n	800b036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <USBD_StdEPReq+0xfe>
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b80      	cmp	r3, #128	@ 0x80
 800b022:	d008      	beq.n	800b036 <USBD_StdEPReq+0xfe>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	88db      	ldrh	r3, [r3, #6]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 f9d7 	bl	800c3e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fd58 	bl	800baec <USBD_CtlSendStatus>

              break;
 800b03c:	e004      	b.n	800b048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fc88 	bl	800b956 <USBD_CtlError>
              break;
 800b046:	bf00      	nop
          }
          break;
 800b048:	e107      	b.n	800b25a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	d002      	beq.n	800b05c <USBD_StdEPReq+0x124>
 800b056:	2b03      	cmp	r3, #3
 800b058:	d016      	beq.n	800b088 <USBD_StdEPReq+0x150>
 800b05a:	e04b      	b.n	800b0f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00d      	beq.n	800b07e <USBD_StdEPReq+0x146>
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b80      	cmp	r3, #128	@ 0x80
 800b066:	d00a      	beq.n	800b07e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f9b9 	bl	800c3e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b072:	2180      	movs	r1, #128	@ 0x80
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 f9b5 	bl	800c3e4 <USBD_LL_StallEP>
 800b07a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b07c:	e040      	b.n	800b100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fc68 	bl	800b956 <USBD_CtlError>
              break;
 800b086:	e03b      	b.n	800b100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	885b      	ldrh	r3, [r3, #2]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d136      	bne.n	800b0fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 f9bf 	bl	800c422 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fd21 	bl	800baec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fde4 	bl	800ac7c <USBD_CoreFindEP>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0b8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ba:	2bff      	cmp	r3, #255	@ 0xff
 800b0bc:	d01f      	beq.n	800b0fe <USBD_StdEPReq+0x1c6>
 800b0be:	7b7b      	ldrb	r3, [r7, #13]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11c      	bne.n	800b0fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0c4:	7b7a      	ldrb	r2, [r7, #13]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0cc:	7b7a      	ldrb	r2, [r7, #13]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	32ae      	adds	r2, #174	@ 0xae
 800b0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0dc:	7b7a      	ldrb	r2, [r7, #13]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	32ae      	adds	r2, #174	@ 0xae
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0f2:	e004      	b.n	800b0fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fc2d 	bl	800b956 <USBD_CtlError>
              break;
 800b0fc:	e000      	b.n	800b100 <USBD_StdEPReq+0x1c8>
              break;
 800b0fe:	bf00      	nop
          }
          break;
 800b100:	e0ab      	b.n	800b25a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d002      	beq.n	800b114 <USBD_StdEPReq+0x1dc>
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d032      	beq.n	800b178 <USBD_StdEPReq+0x240>
 800b112:	e097      	b.n	800b244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <USBD_StdEPReq+0x1f2>
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b80      	cmp	r3, #128	@ 0x80
 800b11e:	d004      	beq.n	800b12a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fc17 	bl	800b956 <USBD_CtlError>
                break;
 800b128:	e091      	b.n	800b24e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b12a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	da0b      	bge.n	800b14a <USBD_StdEPReq+0x212>
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	3310      	adds	r3, #16
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	4413      	add	r3, r2
 800b146:	3304      	adds	r3, #4
 800b148:	e00b      	b.n	800b162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	4413      	add	r3, r2
 800b160:	3304      	adds	r3, #4
 800b162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2202      	movs	r2, #2
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fc61 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b176:	e06a      	b.n	800b24e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	da11      	bge.n	800b1a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	f003 020f 	and.w	r2, r3, #15
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	3324      	adds	r3, #36	@ 0x24
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d117      	bne.n	800b1ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fbda 	bl	800b956 <USBD_CtlError>
                  break;
 800b1a2:	e054      	b.n	800b24e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	f003 020f 	and.w	r2, r3, #15
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fbc7 	bl	800b956 <USBD_CtlError>
                  break;
 800b1c8:	e041      	b.n	800b24e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	da0b      	bge.n	800b1ea <USBD_StdEPReq+0x2b2>
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	e00b      	b.n	800b202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	4413      	add	r3, r2
 800b200:	3304      	adds	r3, #4
 800b202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <USBD_StdEPReq+0x2d8>
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	2b80      	cmp	r3, #128	@ 0x80
 800b20e:	d103      	bne.n	800b218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	e00e      	b.n	800b236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f001 f91f 	bl	800c460 <USBD_LL_IsStallEP>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2201      	movs	r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	e002      	b.n	800b236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fbfb 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b242:	e004      	b.n	800b24e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fb85 	bl	800b956 <USBD_CtlError>
              break;
 800b24c:	bf00      	nop
          }
          break;
 800b24e:	e004      	b.n	800b25a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fb7f 	bl	800b956 <USBD_CtlError>
          break;
 800b258:	bf00      	nop
      }
      break;
 800b25a:	e005      	b.n	800b268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fb79 	bl	800b956 <USBD_CtlError>
      break;
 800b264:	e000      	b.n	800b268 <USBD_StdEPReq+0x330>
      break;
 800b266:	bf00      	nop
  }

  return ret;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	2b0e      	cmp	r3, #14
 800b296:	f200 8152 	bhi.w	800b53e <USBD_GetDescriptor+0x2ca>
 800b29a:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a0 <USBD_GetDescriptor+0x2c>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b311 	.word	0x0800b311
 800b2a4:	0800b329 	.word	0x0800b329
 800b2a8:	0800b369 	.word	0x0800b369
 800b2ac:	0800b53f 	.word	0x0800b53f
 800b2b0:	0800b53f 	.word	0x0800b53f
 800b2b4:	0800b4df 	.word	0x0800b4df
 800b2b8:	0800b50b 	.word	0x0800b50b
 800b2bc:	0800b53f 	.word	0x0800b53f
 800b2c0:	0800b53f 	.word	0x0800b53f
 800b2c4:	0800b53f 	.word	0x0800b53f
 800b2c8:	0800b53f 	.word	0x0800b53f
 800b2cc:	0800b53f 	.word	0x0800b53f
 800b2d0:	0800b53f 	.word	0x0800b53f
 800b2d4:	0800b53f 	.word	0x0800b53f
 800b2d8:	0800b2dd 	.word	0x0800b2dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2fe:	e126      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fb27 	bl	800b956 <USBD_CtlError>
        err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
      break;
 800b30e:	e11e      	b.n	800b54e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
      break;
 800b326:	e112      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7c1b      	ldrb	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10d      	bne.n	800b34c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	f107 0208 	add.w	r2, r7, #8
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b34a:	e100      	b.n	800b54e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b354:	f107 0208 	add.w	r2, r7, #8
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	2202      	movs	r2, #2
 800b364:	701a      	strb	r2, [r3, #0]
      break;
 800b366:	e0f2      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	885b      	ldrh	r3, [r3, #2]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b05      	cmp	r3, #5
 800b370:	f200 80ac 	bhi.w	800b4cc <USBD_GetDescriptor+0x258>
 800b374:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <USBD_GetDescriptor+0x108>)
 800b376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37a:	bf00      	nop
 800b37c:	0800b395 	.word	0x0800b395
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3fd 	.word	0x0800b3fd
 800b388:	0800b431 	.word	0x0800b431
 800b38c:	0800b465 	.word	0x0800b465
 800b390:	0800b499 	.word	0x0800b499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e091      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 facb 	bl	800b956 <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e089      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e077      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fab1 	bl	800b956 <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e06f      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e05d      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa97 	bl	800b956 <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e055      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e043      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa7d 	bl	800b956 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e03b      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b486:	e029      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa63 	bl	800b956 <USBD_CtlError>
            err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
          break;
 800b496:	e021      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	f107 0108 	add.w	r1, r7, #8
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ba:	e00f      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa49 	bl	800b956 <USBD_CtlError>
            err++;
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ca:	e007      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa41 	bl	800b956 <USBD_CtlError>
          err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4da:	bf00      	nop
      }
      break;
 800b4dc:	e037      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	7c1b      	ldrb	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ee:	f107 0208 	add.w	r2, r7, #8
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	4798      	blx	r3
 800b4f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f8:	e029      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa2a 	bl	800b956 <USBD_CtlError>
        err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
      break;
 800b508:	e021      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7c1b      	ldrb	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10d      	bne.n	800b52e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51a:	f107 0208 	add.w	r2, r7, #8
 800b51e:	4610      	mov	r0, r2
 800b520:	4798      	blx	r3
 800b522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	2207      	movs	r2, #7
 800b52a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b52c:	e00f      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa10 	bl	800b956 <USBD_CtlError>
        err++;
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	3301      	adds	r3, #1
 800b53a:	72fb      	strb	r3, [r7, #11]
      break;
 800b53c:	e007      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fa08 	bl	800b956 <USBD_CtlError>
      err++;
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	3301      	adds	r3, #1
 800b54a:	72fb      	strb	r3, [r7, #11]
      break;
 800b54c:	bf00      	nop
  }

  if (err != 0U)
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11e      	bne.n	800b592 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	88db      	ldrh	r3, [r3, #6]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d016      	beq.n	800b58a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b55c:	893b      	ldrh	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00e      	beq.n	800b580 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	88da      	ldrh	r2, [r3, #6]
 800b566:	893b      	ldrh	r3, [r7, #8]
 800b568:	4293      	cmp	r3, r2
 800b56a:	bf28      	it	cs
 800b56c:	4613      	movcs	r3, r2
 800b56e:	b29b      	uxth	r3, r3
 800b570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b572:	893b      	ldrh	r3, [r7, #8]
 800b574:	461a      	mov	r2, r3
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fa5d 	bl	800ba38 <USBD_CtlSendData>
 800b57e:	e009      	b.n	800b594 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f9e7 	bl	800b956 <USBD_CtlError>
 800b588:	e004      	b.n	800b594 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 faae 	bl	800baec <USBD_CtlSendStatus>
 800b590:	e000      	b.n	800b594 <USBD_GetDescriptor+0x320>
    return;
 800b592:	bf00      	nop
  }
}
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop

0800b59c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	889b      	ldrh	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d131      	bne.n	800b612 <USBD_SetAddress+0x76>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	88db      	ldrh	r3, [r3, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d12d      	bne.n	800b612 <USBD_SetAddress+0x76>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5bc:	d829      	bhi.n	800b612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	885b      	ldrh	r3, [r3, #2]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d104      	bne.n	800b5e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f9bc 	bl	800b956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	e01d      	b.n	800b61c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7bfa      	ldrb	r2, [r7, #15]
 800b5e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 ff63 	bl	800c4b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa7a 	bl	800baec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2202      	movs	r2, #2
 800b602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b606:	e009      	b.n	800b61c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b610:	e004      	b.n	800b61c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f99e 	bl	800b956 <USBD_CtlError>
  }
}
 800b61a:	bf00      	nop
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	b2da      	uxtb	r2, r3
 800b638:	4b4e      	ldr	r3, [pc, #312]	@ (800b774 <USBD_SetConfig+0x150>)
 800b63a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b63c:	4b4d      	ldr	r3, [pc, #308]	@ (800b774 <USBD_SetConfig+0x150>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d905      	bls.n	800b650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f985 	bl	800b956 <USBD_CtlError>
    return USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e08c      	b.n	800b76a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d002      	beq.n	800b662 <USBD_SetConfig+0x3e>
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d029      	beq.n	800b6b4 <USBD_SetConfig+0x90>
 800b660:	e075      	b.n	800b74e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b662:	4b44      	ldr	r3, [pc, #272]	@ (800b774 <USBD_SetConfig+0x150>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d020      	beq.n	800b6ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b66a:	4b42      	ldr	r3, [pc, #264]	@ (800b774 <USBD_SetConfig+0x150>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b674:	4b3f      	ldr	r3, [pc, #252]	@ (800b774 <USBD_SetConfig+0x150>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7fe ffbf 	bl	800a5fe <USBD_SetClassConfig>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f962 	bl	800b956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b69a:	e065      	b.n	800b768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa25 	bl	800baec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6aa:	e05d      	b.n	800b768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa1d 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b6b2:	e059      	b.n	800b768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b774 <USBD_SetConfig+0x150>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d112      	bne.n	800b6e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b6c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b774 <USBD_SetConfig+0x150>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6ce:	4b29      	ldr	r3, [pc, #164]	@ (800b774 <USBD_SetConfig+0x150>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fe ffae 	bl	800a636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fa06 	bl	800baec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6e0:	e042      	b.n	800b768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6e2:	4b24      	ldr	r3, [pc, #144]	@ (800b774 <USBD_SetConfig+0x150>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d02a      	beq.n	800b746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7fe ff9c 	bl	800a636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b774 <USBD_SetConfig+0x150>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b708:	4b1a      	ldr	r3, [pc, #104]	@ (800b774 <USBD_SetConfig+0x150>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fe ff75 	bl	800a5fe <USBD_SetClassConfig>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00f      	beq.n	800b73e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f918 	bl	800b956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7fe ff81 	bl	800a636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b73c:	e014      	b.n	800b768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9d4 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b744:	e010      	b.n	800b768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f9d0 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b74c:	e00c      	b.n	800b768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f900 	bl	800b956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b756:	4b07      	ldr	r3, [pc, #28]	@ (800b774 <USBD_SetConfig+0x150>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7fe ff6a 	bl	800a636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b762:	2303      	movs	r3, #3
 800b764:	73fb      	strb	r3, [r7, #15]
      break;
 800b766:	bf00      	nop
  }

  return ret;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20000800 	.word	0x20000800

0800b778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d004      	beq.n	800b794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f8e2 	bl	800b956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b792:	e023      	b.n	800b7dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	dc02      	bgt.n	800b7a6 <USBD_GetConfig+0x2e>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc03      	bgt.n	800b7ac <USBD_GetConfig+0x34>
 800b7a4:	e015      	b.n	800b7d2 <USBD_GetConfig+0x5a>
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d00b      	beq.n	800b7c2 <USBD_GetConfig+0x4a>
 800b7aa:	e012      	b.n	800b7d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f93c 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7c0:	e00c      	b.n	800b7dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f934 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7d0:	e004      	b.n	800b7dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8be 	bl	800b956 <USBD_CtlError>
        break;
 800b7da:	bf00      	nop
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d81e      	bhi.n	800b83a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	88db      	ldrh	r3, [r3, #6]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d004      	beq.n	800b80e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f8a5 	bl	800b956 <USBD_CtlError>
        break;
 800b80c:	e01a      	b.n	800b844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f043 0202 	orr.w	r2, r3, #2
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	330c      	adds	r3, #12
 800b82e:	2202      	movs	r2, #2
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f900 	bl	800ba38 <USBD_CtlSendData>
      break;
 800b838:	e004      	b.n	800b844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f88a 	bl	800b956 <USBD_CtlError>
      break;
 800b842:	bf00      	nop
  }
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d107      	bne.n	800b86e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f940 	bl	800baec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b86c:	e013      	b.n	800b896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	2b02      	cmp	r3, #2
 800b874:	d10b      	bne.n	800b88e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	889b      	ldrh	r3, [r3, #4]
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f930 	bl	800baec <USBD_CtlSendStatus>
}
 800b88c:	e003      	b.n	800b896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f860 	bl	800b956 <USBD_CtlError>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d80b      	bhi.n	800b8ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d10c      	bne.n	800b8d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f910 	bl	800baec <USBD_CtlSendStatus>
      }
      break;
 800b8cc:	e004      	b.n	800b8d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f840 	bl	800b956 <USBD_CtlError>
      break;
 800b8d6:	e000      	b.n	800b8da <USBD_ClrFeature+0x3c>
      break;
 800b8d8:	bf00      	nop
  }
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	781a      	ldrb	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	781a      	ldrb	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa16 	bl	800ad3e <SWAPBYTE>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3301      	adds	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f7ff fa09 	bl	800ad3e <SWAPBYTE>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7ff f9fc 	bl	800ad3e <SWAPBYTE>
 800b946:	4603      	mov	r3, r0
 800b948:	461a      	mov	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	80da      	strh	r2, [r3, #6]
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b960:	2180      	movs	r1, #128	@ 0x80
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fd3e 	bl	800c3e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b968:	2100      	movs	r1, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fd3a 	bl	800c3e4 <USBD_LL_StallEP>
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d036      	beq.n	800b9fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b992:	6938      	ldr	r0, [r7, #16]
 800b994:	f000 f836 	bl	800ba04 <USBD_GetLen>
 800b998:	4603      	mov	r3, r0
 800b99a:	3301      	adds	r3, #1
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	2203      	movs	r2, #3
 800b9c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9c8:	e013      	b.n	800b9f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	7812      	ldrb	r2, [r2, #0]
 800b9d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	613b      	str	r3, [r7, #16]
    idx++;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e7      	bne.n	800b9ca <USBD_GetString+0x52>
 800b9fa:	e000      	b.n	800b9fe <USBD_GetString+0x86>
    return;
 800b9fc:	bf00      	nop
  }
}
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba14:	e005      	b.n	800ba22 <USBD_GetLen+0x1e>
  {
    len++;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f5      	bne.n	800ba16 <USBD_GetLen+0x12>
  }

  return len;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f000 fd49 	bl	800c4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	2100      	movs	r1, #0
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 fd38 	bl	800c4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	2100      	movs	r1, #0
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 fd3c 	bl	800c538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	2100      	movs	r1, #0
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 fd2b 	bl	800c538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2204      	movs	r2, #4
 800baf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bafc:	2300      	movs	r3, #0
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fcf7 	bl	800c4f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb22:	2300      	movs	r3, #0
 800bb24:	2200      	movs	r2, #0
 800bb26:	2100      	movs	r1, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fd05 	bl	800c538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb46:	2301      	movs	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb4e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb50:	7a5b      	ldrb	r3, [r3, #9]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d131      	bne.n	800bbbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb58:	4b1c      	ldr	r3, [pc, #112]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb5a:	7a5b      	ldrb	r3, [r3, #9]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4b1a      	ldr	r3, [pc, #104]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb62:	2100      	movs	r1, #0
 800bb64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb66:	4b19      	ldr	r3, [pc, #100]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb68:	7a5b      	ldrb	r3, [r3, #9]
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	4a17      	ldr	r2, [pc, #92]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb76:	4b15      	ldr	r3, [pc, #84]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb78:	7a5b      	ldrb	r3, [r3, #9]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b13      	ldr	r3, [pc, #76]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb80:	4413      	add	r3, r2
 800bb82:	79fa      	ldrb	r2, [r7, #7]
 800bb84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb86:	4b11      	ldr	r3, [pc, #68]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb88:	7a5b      	ldrb	r3, [r3, #9]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	b2d1      	uxtb	r1, r2
 800bb90:	4a0e      	ldr	r2, [pc, #56]	@ (800bbcc <FATFS_LinkDriverEx+0x94>)
 800bb92:	7251      	strb	r1, [r2, #9]
 800bb94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb96:	7dbb      	ldrb	r3, [r7, #22]
 800bb98:	3330      	adds	r3, #48	@ 0x30
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	3301      	adds	r3, #1
 800bba4:	223a      	movs	r2, #58	@ 0x3a
 800bba6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	3302      	adds	r3, #2
 800bbac:	222f      	movs	r2, #47	@ 0x2f
 800bbae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	3303      	adds	r3, #3
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	20000804 	.word	0x20000804

0800bbd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbda:	2200      	movs	r2, #0
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff ffaa 	bl	800bb38 <FATFS_LinkDriverEx>
 800bbe4:	4603      	mov	r3, r0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	4912      	ldr	r1, [pc, #72]	@ (800bc40 <MX_USB_DEVICE_Init+0x50>)
 800bbf8:	4812      	ldr	r0, [pc, #72]	@ (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bbfa:	f7fe fc83 	bl	800a504 <USBD_Init>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc04:	f7f7 fb8e 	bl	8003324 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc08:	490f      	ldr	r1, [pc, #60]	@ (800bc48 <MX_USB_DEVICE_Init+0x58>)
 800bc0a:	480e      	ldr	r0, [pc, #56]	@ (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc0c:	f7fe fcaa 	bl	800a564 <USBD_RegisterClass>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc16:	f7f7 fb85 	bl	8003324 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc1a:	490c      	ldr	r1, [pc, #48]	@ (800bc4c <MX_USB_DEVICE_Init+0x5c>)
 800bc1c:	4809      	ldr	r0, [pc, #36]	@ (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc1e:	f7fe fbe1 	bl	800a3e4 <USBD_CDC_RegisterInterface>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc28:	f7f7 fb7c 	bl	8003324 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc2c:	4805      	ldr	r0, [pc, #20]	@ (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc2e:	f7fe fccf 	bl	800a5d0 <USBD_Start>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc38:	f7f7 fb74 	bl	8003324 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc3c:	bf00      	nop
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	200000c4 	.word	0x200000c4
 800bc44:	20000810 	.word	0x20000810
 800bc48:	20000030 	.word	0x20000030
 800bc4c:	200000b0 	.word	0x200000b0

0800bc50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	4905      	ldr	r1, [pc, #20]	@ (800bc6c <CDC_Init_FS+0x1c>)
 800bc58:	4805      	ldr	r0, [pc, #20]	@ (800bc70 <CDC_Init_FS+0x20>)
 800bc5a:	f7fe fbdd 	bl	800a418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc5e:	4905      	ldr	r1, [pc, #20]	@ (800bc74 <CDC_Init_FS+0x24>)
 800bc60:	4803      	ldr	r0, [pc, #12]	@ (800bc70 <CDC_Init_FS+0x20>)
 800bc62:	f7fe fbfb 	bl	800a45c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20000eec 	.word	0x20000eec
 800bc70:	20000810 	.word	0x20000810
 800bc74:	20000aec 	.word	0x20000aec

0800bc78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
 800bc94:	4613      	mov	r3, r2
 800bc96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b23      	cmp	r3, #35	@ 0x23
 800bc9c:	d84a      	bhi.n	800bd34 <CDC_Control_FS+0xac>
 800bc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bca4 <CDC_Control_FS+0x1c>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd35 	.word	0x0800bd35
 800bca8:	0800bd35 	.word	0x0800bd35
 800bcac:	0800bd35 	.word	0x0800bd35
 800bcb0:	0800bd35 	.word	0x0800bd35
 800bcb4:	0800bd35 	.word	0x0800bd35
 800bcb8:	0800bd35 	.word	0x0800bd35
 800bcbc:	0800bd35 	.word	0x0800bd35
 800bcc0:	0800bd35 	.word	0x0800bd35
 800bcc4:	0800bd35 	.word	0x0800bd35
 800bcc8:	0800bd35 	.word	0x0800bd35
 800bccc:	0800bd35 	.word	0x0800bd35
 800bcd0:	0800bd35 	.word	0x0800bd35
 800bcd4:	0800bd35 	.word	0x0800bd35
 800bcd8:	0800bd35 	.word	0x0800bd35
 800bcdc:	0800bd35 	.word	0x0800bd35
 800bce0:	0800bd35 	.word	0x0800bd35
 800bce4:	0800bd35 	.word	0x0800bd35
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd35 	.word	0x0800bd35
 800bcf0:	0800bd35 	.word	0x0800bd35
 800bcf4:	0800bd35 	.word	0x0800bd35
 800bcf8:	0800bd35 	.word	0x0800bd35
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd35 	.word	0x0800bd35
 800bd04:	0800bd35 	.word	0x0800bd35
 800bd08:	0800bd35 	.word	0x0800bd35
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd35 	.word	0x0800bd35
 800bd1c:	0800bd35 	.word	0x0800bd35
 800bd20:	0800bd35 	.word	0x0800bd35
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bd35 	.word	0x0800bd35
 800bd2c:	0800bd35 	.word	0x0800bd35
 800bd30:	0800bd35 	.word	0x0800bd35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd34:	bf00      	nop
  }

  return (USBD_OK);
 800bd36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	4805      	ldr	r0, [pc, #20]	@ (800bd68 <CDC_Receive_FS+0x24>)
 800bd52:	f7fe fb83 	bl	800a45c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd56:	4804      	ldr	r0, [pc, #16]	@ (800bd68 <CDC_Receive_FS+0x24>)
 800bd58:	f7fe fb9e 	bl	800a498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20000810 	.word	0x20000810

0800bd6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	4613      	mov	r3, r2
 800bd78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
	...

0800bd90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2212      	movs	r2, #18
 800bda0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bda2:	4b03      	ldr	r3, [pc, #12]	@ (800bdb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	200000e4 	.word	0x200000e4

0800bdb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2204      	movs	r2, #4
 800bdc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdc6:	4b03      	ldr	r3, [pc, #12]	@ (800bdd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	20000104 	.word	0x20000104

0800bdd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d105      	bne.n	800bdf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	4907      	ldr	r1, [pc, #28]	@ (800be0c <USBD_FS_ProductStrDescriptor+0x34>)
 800bdee:	4808      	ldr	r0, [pc, #32]	@ (800be10 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdf0:	f7ff fdc2 	bl	800b978 <USBD_GetString>
 800bdf4:	e004      	b.n	800be00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4904      	ldr	r1, [pc, #16]	@ (800be0c <USBD_FS_ProductStrDescriptor+0x34>)
 800bdfa:	4805      	ldr	r0, [pc, #20]	@ (800be10 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdfc:	f7ff fdbc 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be00:	4b02      	ldr	r3, [pc, #8]	@ (800be0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	200012ec 	.word	0x200012ec
 800be10:	08010ebc 	.word	0x08010ebc

0800be14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	4904      	ldr	r1, [pc, #16]	@ (800be34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be24:	4804      	ldr	r0, [pc, #16]	@ (800be38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be26:	f7ff fda7 	bl	800b978 <USBD_GetString>
  return USBD_StrDesc;
 800be2a:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	200012ec 	.word	0x200012ec
 800be38:	08010ed4 	.word	0x08010ed4

0800be3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	221a      	movs	r2, #26
 800be4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be4e:	f000 f855 	bl	800befc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be52:	4b02      	ldr	r3, [pc, #8]	@ (800be5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20000108 	.word	0x20000108

0800be60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	6039      	str	r1, [r7, #0]
 800be6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d105      	bne.n	800be7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	4907      	ldr	r1, [pc, #28]	@ (800be94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be76:	4808      	ldr	r0, [pc, #32]	@ (800be98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be78:	f7ff fd7e 	bl	800b978 <USBD_GetString>
 800be7c:	e004      	b.n	800be88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4904      	ldr	r1, [pc, #16]	@ (800be94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be82:	4805      	ldr	r0, [pc, #20]	@ (800be98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be84:	f7ff fd78 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be88:	4b02      	ldr	r3, [pc, #8]	@ (800be94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	200012ec 	.word	0x200012ec
 800be98:	08010ee8 	.word	0x08010ee8

0800be9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	4907      	ldr	r1, [pc, #28]	@ (800bed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beb2:	4808      	ldr	r0, [pc, #32]	@ (800bed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beb4:	f7ff fd60 	bl	800b978 <USBD_GetString>
 800beb8:	e004      	b.n	800bec4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4904      	ldr	r1, [pc, #16]	@ (800bed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bebe:	4805      	ldr	r0, [pc, #20]	@ (800bed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bec0:	f7ff fd5a 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec4:	4b02      	ldr	r3, [pc, #8]	@ (800bed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	200012ec 	.word	0x200012ec
 800bed4:	08010ef4 	.word	0x08010ef4

0800bed8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	220c      	movs	r2, #12
 800bee8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800beea:	4b03      	ldr	r3, [pc, #12]	@ (800bef8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	200000f8 	.word	0x200000f8

0800befc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf02:	4b0f      	ldr	r3, [pc, #60]	@ (800bf40 <Get_SerialNum+0x44>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf08:	4b0e      	ldr	r3, [pc, #56]	@ (800bf44 <Get_SerialNum+0x48>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf48 <Get_SerialNum+0x4c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4413      	add	r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d009      	beq.n	800bf36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf22:	2208      	movs	r2, #8
 800bf24:	4909      	ldr	r1, [pc, #36]	@ (800bf4c <Get_SerialNum+0x50>)
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f814 	bl	800bf54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf2c:	2204      	movs	r2, #4
 800bf2e:	4908      	ldr	r1, [pc, #32]	@ (800bf50 <Get_SerialNum+0x54>)
 800bf30:	68b8      	ldr	r0, [r7, #8]
 800bf32:	f000 f80f 	bl	800bf54 <IntToUnicode>
  }
}
 800bf36:	bf00      	nop
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	1fff7a10 	.word	0x1fff7a10
 800bf44:	1fff7a14 	.word	0x1fff7a14
 800bf48:	1fff7a18 	.word	0x1fff7a18
 800bf4c:	2000010a 	.word	0x2000010a
 800bf50:	2000011a 	.word	0x2000011a

0800bf54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf66:	2300      	movs	r3, #0
 800bf68:	75fb      	strb	r3, [r7, #23]
 800bf6a:	e027      	b.n	800bfbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	0f1b      	lsrs	r3, r3, #28
 800bf70:	2b09      	cmp	r3, #9
 800bf72:	d80b      	bhi.n	800bf8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	440b      	add	r3, r1
 800bf84:	3230      	adds	r2, #48	@ 0x30
 800bf86:	b2d2      	uxtb	r2, r2
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	e00a      	b.n	800bfa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	0f1b      	lsrs	r3, r3, #28
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4619      	mov	r1, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	440b      	add	r3, r1
 800bf9c:	3237      	adds	r2, #55	@ 0x37
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	3301      	adds	r3, #1
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	75fb      	strb	r3, [r7, #23]
 800bfbc:	7dfa      	ldrb	r2, [r7, #23]
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d3d3      	bcc.n	800bf6c <IntToUnicode+0x18>
  }
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	371c      	adds	r7, #28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b0a0      	sub	sp, #128	@ 0x80
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfdc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	605a      	str	r2, [r3, #4]
 800bfe6:	609a      	str	r2, [r3, #8]
 800bfe8:	60da      	str	r2, [r3, #12]
 800bfea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bfec:	f107 0310 	add.w	r3, r7, #16
 800bff0:	225c      	movs	r2, #92	@ 0x5c
 800bff2:	2100      	movs	r1, #0
 800bff4:	4618      	mov	r0, r3
 800bff6:	f002 f9c2 	bl	800e37e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c002:	d149      	bne.n	800c098 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c008:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c00a:	2300      	movs	r3, #0
 800c00c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c00e:	f107 0310 	add.w	r3, r7, #16
 800c012:	4618      	mov	r0, r3
 800c014:	f7fa f83c 	bl	8006090 <HAL_RCCEx_PeriphCLKConfig>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c01e:	f7f7 f981 	bl	8003324 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	4b1e      	ldr	r3, [pc, #120]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c02a:	4a1d      	ldr	r2, [pc, #116]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c02c:	f043 0301 	orr.w	r3, r3, #1
 800c030:	6313      	str	r3, [r2, #48]	@ 0x30
 800c032:	4b1b      	ldr	r3, [pc, #108]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c03e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c042:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c044:	2302      	movs	r3, #2
 800c046:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c048:	2300      	movs	r3, #0
 800c04a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c04c:	2303      	movs	r3, #3
 800c04e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c050:	230a      	movs	r3, #10
 800c052:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c054:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c058:	4619      	mov	r1, r3
 800c05a:	4812      	ldr	r0, [pc, #72]	@ (800c0a4 <HAL_PCD_MspInit+0xd0>)
 800c05c:	f7f8 f942 	bl	80042e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c060:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c064:	4a0e      	ldr	r2, [pc, #56]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06a:	6353      	str	r3, [r2, #52]	@ 0x34
 800c06c:	2300      	movs	r3, #0
 800c06e:	60bb      	str	r3, [r7, #8]
 800c070:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c074:	4a0a      	ldr	r2, [pc, #40]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c07a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c07c:	4b08      	ldr	r3, [pc, #32]	@ (800c0a0 <HAL_PCD_MspInit+0xcc>)
 800c07e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c084:	60bb      	str	r3, [r7, #8]
 800c086:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c088:	2200      	movs	r2, #0
 800c08a:	2100      	movs	r1, #0
 800c08c:	2043      	movs	r0, #67	@ 0x43
 800c08e:	f7f8 f860 	bl	8004152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c092:	2043      	movs	r0, #67	@ 0x43
 800c094:	f7f8 f879 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c098:	bf00      	nop
 800c09a:	3780      	adds	r7, #128	@ 0x80
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	40023800 	.word	0x40023800
 800c0a4:	40020000 	.word	0x40020000

0800c0a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f7fe fad3 	bl	800a66a <USBD_LL_SetupStage>
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	78fb      	ldrb	r3, [r7, #3]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7fe fb0d 	bl	800a714 <USBD_LL_DataOutStage>
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c114:	78fa      	ldrb	r2, [r7, #3]
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	4613      	mov	r3, r2
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	440b      	add	r3, r1
 800c122:	334c      	adds	r3, #76	@ 0x4c
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	78fb      	ldrb	r3, [r7, #3]
 800c128:	4619      	mov	r1, r3
 800c12a:	f7fe fba6 	bl	800a87a <USBD_LL_DataInStage>
}
 800c12e:	bf00      	nop
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe fcda 	bl	800aafe <USBD_LL_SOF>
}
 800c14a:	bf00      	nop
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c15a:	2301      	movs	r3, #1
 800c15c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
 800c16a:	e008      	b.n	800c17e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d102      	bne.n	800c17a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c174:	2301      	movs	r3, #1
 800c176:	73fb      	strb	r3, [r7, #15]
 800c178:	e001      	b.n	800c17e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c17a:	f7f7 f8d3 	bl	8003324 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c184:	7bfa      	ldrb	r2, [r7, #15]
 800c186:	4611      	mov	r1, r2
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fc7a 	bl	800aa82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c194:	4618      	mov	r0, r3
 800c196:	f7fe fc22 	bl	800a9de <USBD_LL_Reset>
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fc75 	bl	800aaa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a1b      	ldr	r3, [r3, #32]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d005      	beq.n	800c1e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1d8:	4b04      	ldr	r3, [pc, #16]	@ (800c1ec <HAL_PCD_SuspendCallback+0x48>)
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	4a03      	ldr	r2, [pc, #12]	@ (800c1ec <HAL_PCD_SuspendCallback+0x48>)
 800c1de:	f043 0306 	orr.w	r3, r3, #6
 800c1e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	e000ed00 	.word	0xe000ed00

0800c1f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fc65 	bl	800aace <USBD_LL_Resume>
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c21e:	78fa      	ldrb	r2, [r7, #3]
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fcbd 	bl	800aba2 <USBD_LL_IsoOUTIncomplete>
}
 800c228:	bf00      	nop
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c242:	78fa      	ldrb	r2, [r7, #3]
 800c244:	4611      	mov	r1, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fc79 	bl	800ab3e <USBD_LL_IsoINIncomplete>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fccf 	bl	800ac06 <USBD_LL_DevConnected>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe fccc 	bl	800ac1c <USBD_LL_DevDisconnected>
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d13c      	bne.n	800c316 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c29c:	4a20      	ldr	r2, [pc, #128]	@ (800c320 <USBD_LL_Init+0x94>)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c2b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2b6:	2206      	movs	r2, #6
 800c2b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2ba:	4b19      	ldr	r3, [pc, #100]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2bc:	2202      	movs	r2, #2
 800c2be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2c0:	4b17      	ldr	r3, [pc, #92]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2c6:	4b16      	ldr	r3, [pc, #88]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2cc:	4b14      	ldr	r3, [pc, #80]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2d2:	4b13      	ldr	r3, [pc, #76]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2d8:	4b11      	ldr	r3, [pc, #68]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2de:	4b10      	ldr	r3, [pc, #64]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2ea:	480d      	ldr	r0, [pc, #52]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2ec:	f7f8 faec 	bl	80048c8 <HAL_PCD_Init>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2f6:	f7f7 f815 	bl	8003324 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2fa:	2180      	movs	r1, #128	@ 0x80
 800c2fc:	4808      	ldr	r0, [pc, #32]	@ (800c320 <USBD_LL_Init+0x94>)
 800c2fe:	f7f9 fd78 	bl	8005df2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c302:	2240      	movs	r2, #64	@ 0x40
 800c304:	2100      	movs	r1, #0
 800c306:	4806      	ldr	r0, [pc, #24]	@ (800c320 <USBD_LL_Init+0x94>)
 800c308:	f7f9 fd2c 	bl	8005d64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c30c:	2280      	movs	r2, #128	@ 0x80
 800c30e:	2101      	movs	r1, #1
 800c310:	4803      	ldr	r0, [pc, #12]	@ (800c320 <USBD_LL_Init+0x94>)
 800c312:	f7f9 fd27 	bl	8005d64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	200014ec 	.word	0x200014ec

0800c324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f8 fbe8 	bl	8004b10 <HAL_PCD_Start>
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f990 	bl	800c66c <USBD_Get_USB_Status>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c350:	7bbb      	ldrb	r3, [r7, #14]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	4608      	mov	r0, r1
 800c364:	4611      	mov	r1, r2
 800c366:	461a      	mov	r2, r3
 800c368:	4603      	mov	r3, r0
 800c36a:	70fb      	strb	r3, [r7, #3]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70bb      	strb	r3, [r7, #2]
 800c370:	4613      	mov	r3, r2
 800c372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c382:	78bb      	ldrb	r3, [r7, #2]
 800c384:	883a      	ldrh	r2, [r7, #0]
 800c386:	78f9      	ldrb	r1, [r7, #3]
 800c388:	f7f9 f8e6 	bl	8005558 <HAL_PCD_EP_Open>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f96a 	bl	800c66c <USBD_Get_USB_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3c0:	78fa      	ldrb	r2, [r7, #3]
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f9 f92f 	bl	8005628 <HAL_PCD_EP_Close>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 f94b 	bl	800c66c <USBD_Get_USB_Status>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3fe:	78fa      	ldrb	r2, [r7, #3]
 800c400:	4611      	mov	r1, r2
 800c402:	4618      	mov	r0, r3
 800c404:	f7f9 fa07 	bl	8005816 <HAL_PCD_EP_SetStall>
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f92c 	bl	800c66c <USBD_Get_USB_Status>
 800c414:	4603      	mov	r3, r0
 800c416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c418:	7bbb      	ldrb	r3, [r7, #14]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c43c:	78fa      	ldrb	r2, [r7, #3]
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f7f9 fa4c 	bl	80058de <HAL_PCD_EP_ClrStall>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 f90d 	bl	800c66c <USBD_Get_USB_Status>
 800c452:	4603      	mov	r3, r0
 800c454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c456:	7bbb      	ldrb	r3, [r7, #14]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	da0b      	bge.n	800c494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c47c:	78fb      	ldrb	r3, [r7, #3]
 800c47e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	4613      	mov	r3, r2
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	4413      	add	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	333e      	adds	r3, #62	@ 0x3e
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	e00b      	b.n	800c4ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	4613      	mov	r3, r2
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	440b      	add	r3, r1
 800c4a6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c4aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4d2:	78fa      	ldrb	r2, [r7, #3]
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f9 f819 	bl	800550e <HAL_PCD_SetAddress>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 f8c2 	bl	800c66c <USBD_Get_USB_Status>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b086      	sub	sp, #24
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
 800c502:	460b      	mov	r3, r1
 800c504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c514:	7af9      	ldrb	r1, [r7, #11]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	f7f9 f932 	bl	8005782 <HAL_PCD_EP_Transmit>
 800c51e:	4603      	mov	r3, r0
 800c520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	4618      	mov	r0, r3
 800c526:	f000 f8a1 	bl	800c66c <USBD_Get_USB_Status>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c52e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	607a      	str	r2, [r7, #4]
 800c542:	603b      	str	r3, [r7, #0]
 800c544:	460b      	mov	r3, r1
 800c546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54c:	2300      	movs	r3, #0
 800c54e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c556:	7af9      	ldrb	r1, [r7, #11]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	f7f9 f8ae 	bl	80056bc <HAL_PCD_EP_Receive>
 800c560:	4603      	mov	r3, r0
 800c562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f880 	bl	800c66c <USBD_Get_USB_Status>
 800c56c:	4603      	mov	r3, r0
 800c56e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c570:	7dbb      	ldrb	r3, [r7, #22]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b082      	sub	sp, #8
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c58c:	78fa      	ldrb	r2, [r7, #3]
 800c58e:	4611      	mov	r1, r2
 800c590:	4618      	mov	r0, r3
 800c592:	f7f9 f8de 	bl	8005752 <HAL_PCD_EP_GetRxCount>
 800c596:	4603      	mov	r3, r0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c5ac:	78fb      	ldrb	r3, [r7, #3]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d002      	beq.n	800c5b8 <HAL_PCDEx_LPM_Callback+0x18>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d01f      	beq.n	800c5f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c5b6:	e03b      	b.n	800c630 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d007      	beq.n	800c5d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c5c0:	f7f6 f8a2 	bl	8002708 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c638 <HAL_PCDEx_LPM_Callback+0x98>)
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c638 <HAL_PCDEx_LPM_Callback+0x98>)
 800c5ca:	f023 0306 	bic.w	r3, r3, #6
 800c5ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fa6d 	bl	800aace <USBD_LL_Resume>
    break;
 800c5f4:	e01c      	b.n	800c630 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	6812      	ldr	r2, [r2, #0]
 800c604:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fa44 	bl	800aaa2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c622:	4b05      	ldr	r3, [pc, #20]	@ (800c638 <HAL_PCDEx_LPM_Callback+0x98>)
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	4a04      	ldr	r2, [pc, #16]	@ (800c638 <HAL_PCDEx_LPM_Callback+0x98>)
 800c628:	f043 0306 	orr.w	r3, r3, #6
 800c62c:	6113      	str	r3, [r2, #16]
    break;
 800c62e:	bf00      	nop
}
 800c630:	bf00      	nop
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	e000ed00 	.word	0xe000ed00

0800c63c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c644:	4b03      	ldr	r3, [pc, #12]	@ (800c654 <USBD_static_malloc+0x18>)
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	200019f8 	.word	0x200019f8

0800c658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]

}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d817      	bhi.n	800c6b0 <USBD_Get_USB_Status+0x44>
 800c680:	a201      	add	r2, pc, #4	@ (adr r2, 800c688 <USBD_Get_USB_Status+0x1c>)
 800c682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c686:	bf00      	nop
 800c688:	0800c699 	.word	0x0800c699
 800c68c:	0800c69f 	.word	0x0800c69f
 800c690:	0800c6a5 	.word	0x0800c6a5
 800c694:	0800c6ab 	.word	0x0800c6ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73fb      	strb	r3, [r7, #15]
    break;
 800c69c:	e00b      	b.n	800c6b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a2:	e008      	b.n	800c6b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a8:	e005      	b.n	800c6b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ae:	e002      	b.n	800c6b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b4:	bf00      	nop
  }
  return usb_status;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <malloc>:
 800c6c4:	4b02      	ldr	r3, [pc, #8]	@ (800c6d0 <malloc+0xc>)
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	f000 b825 	b.w	800c718 <_malloc_r>
 800c6ce:	bf00      	nop
 800c6d0:	2000029c 	.word	0x2000029c

0800c6d4 <sbrk_aligned>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4e0f      	ldr	r6, [pc, #60]	@ (800c714 <sbrk_aligned+0x40>)
 800c6d8:	460c      	mov	r4, r1
 800c6da:	6831      	ldr	r1, [r6, #0]
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b911      	cbnz	r1, 800c6e6 <sbrk_aligned+0x12>
 800c6e0:	f001 fea0 	bl	800e424 <_sbrk_r>
 800c6e4:	6030      	str	r0, [r6, #0]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f001 fe9b 	bl	800e424 <_sbrk_r>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d103      	bne.n	800c6fa <sbrk_aligned+0x26>
 800c6f2:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	1cc4      	adds	r4, r0, #3
 800c6fc:	f024 0403 	bic.w	r4, r4, #3
 800c700:	42a0      	cmp	r0, r4
 800c702:	d0f8      	beq.n	800c6f6 <sbrk_aligned+0x22>
 800c704:	1a21      	subs	r1, r4, r0
 800c706:	4628      	mov	r0, r5
 800c708:	f001 fe8c 	bl	800e424 <_sbrk_r>
 800c70c:	3001      	adds	r0, #1
 800c70e:	d1f2      	bne.n	800c6f6 <sbrk_aligned+0x22>
 800c710:	e7ef      	b.n	800c6f2 <sbrk_aligned+0x1e>
 800c712:	bf00      	nop
 800c714:	20001c18 	.word	0x20001c18

0800c718 <_malloc_r>:
 800c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c71c:	1ccd      	adds	r5, r1, #3
 800c71e:	f025 0503 	bic.w	r5, r5, #3
 800c722:	3508      	adds	r5, #8
 800c724:	2d0c      	cmp	r5, #12
 800c726:	bf38      	it	cc
 800c728:	250c      	movcc	r5, #12
 800c72a:	2d00      	cmp	r5, #0
 800c72c:	4606      	mov	r6, r0
 800c72e:	db01      	blt.n	800c734 <_malloc_r+0x1c>
 800c730:	42a9      	cmp	r1, r5
 800c732:	d904      	bls.n	800c73e <_malloc_r+0x26>
 800c734:	230c      	movs	r3, #12
 800c736:	6033      	str	r3, [r6, #0]
 800c738:	2000      	movs	r0, #0
 800c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c814 <_malloc_r+0xfc>
 800c742:	f000 f869 	bl	800c818 <__malloc_lock>
 800c746:	f8d8 3000 	ldr.w	r3, [r8]
 800c74a:	461c      	mov	r4, r3
 800c74c:	bb44      	cbnz	r4, 800c7a0 <_malloc_r+0x88>
 800c74e:	4629      	mov	r1, r5
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff ffbf 	bl	800c6d4 <sbrk_aligned>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	4604      	mov	r4, r0
 800c75a:	d158      	bne.n	800c80e <_malloc_r+0xf6>
 800c75c:	f8d8 4000 	ldr.w	r4, [r8]
 800c760:	4627      	mov	r7, r4
 800c762:	2f00      	cmp	r7, #0
 800c764:	d143      	bne.n	800c7ee <_malloc_r+0xd6>
 800c766:	2c00      	cmp	r4, #0
 800c768:	d04b      	beq.n	800c802 <_malloc_r+0xea>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	4639      	mov	r1, r7
 800c76e:	4630      	mov	r0, r6
 800c770:	eb04 0903 	add.w	r9, r4, r3
 800c774:	f001 fe56 	bl	800e424 <_sbrk_r>
 800c778:	4581      	cmp	r9, r0
 800c77a:	d142      	bne.n	800c802 <_malloc_r+0xea>
 800c77c:	6821      	ldr	r1, [r4, #0]
 800c77e:	1a6d      	subs	r5, r5, r1
 800c780:	4629      	mov	r1, r5
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ffa6 	bl	800c6d4 <sbrk_aligned>
 800c788:	3001      	adds	r0, #1
 800c78a:	d03a      	beq.n	800c802 <_malloc_r+0xea>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	442b      	add	r3, r5
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	f8d8 3000 	ldr.w	r3, [r8]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	bb62      	cbnz	r2, 800c7f4 <_malloc_r+0xdc>
 800c79a:	f8c8 7000 	str.w	r7, [r8]
 800c79e:	e00f      	b.n	800c7c0 <_malloc_r+0xa8>
 800c7a0:	6822      	ldr	r2, [r4, #0]
 800c7a2:	1b52      	subs	r2, r2, r5
 800c7a4:	d420      	bmi.n	800c7e8 <_malloc_r+0xd0>
 800c7a6:	2a0b      	cmp	r2, #11
 800c7a8:	d917      	bls.n	800c7da <_malloc_r+0xc2>
 800c7aa:	1961      	adds	r1, r4, r5
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	6025      	str	r5, [r4, #0]
 800c7b0:	bf18      	it	ne
 800c7b2:	6059      	strne	r1, [r3, #4]
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	bf08      	it	eq
 800c7b8:	f8c8 1000 	streq.w	r1, [r8]
 800c7bc:	5162      	str	r2, [r4, r5]
 800c7be:	604b      	str	r3, [r1, #4]
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f000 f82f 	bl	800c824 <__malloc_unlock>
 800c7c6:	f104 000b 	add.w	r0, r4, #11
 800c7ca:	1d23      	adds	r3, r4, #4
 800c7cc:	f020 0007 	bic.w	r0, r0, #7
 800c7d0:	1ac2      	subs	r2, r0, r3
 800c7d2:	bf1c      	itt	ne
 800c7d4:	1a1b      	subne	r3, r3, r0
 800c7d6:	50a3      	strne	r3, [r4, r2]
 800c7d8:	e7af      	b.n	800c73a <_malloc_r+0x22>
 800c7da:	6862      	ldr	r2, [r4, #4]
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	bf0c      	ite	eq
 800c7e0:	f8c8 2000 	streq.w	r2, [r8]
 800c7e4:	605a      	strne	r2, [r3, #4]
 800c7e6:	e7eb      	b.n	800c7c0 <_malloc_r+0xa8>
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	6864      	ldr	r4, [r4, #4]
 800c7ec:	e7ae      	b.n	800c74c <_malloc_r+0x34>
 800c7ee:	463c      	mov	r4, r7
 800c7f0:	687f      	ldr	r7, [r7, #4]
 800c7f2:	e7b6      	b.n	800c762 <_malloc_r+0x4a>
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	d1fb      	bne.n	800c7f4 <_malloc_r+0xdc>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6053      	str	r3, [r2, #4]
 800c800:	e7de      	b.n	800c7c0 <_malloc_r+0xa8>
 800c802:	230c      	movs	r3, #12
 800c804:	6033      	str	r3, [r6, #0]
 800c806:	4630      	mov	r0, r6
 800c808:	f000 f80c 	bl	800c824 <__malloc_unlock>
 800c80c:	e794      	b.n	800c738 <_malloc_r+0x20>
 800c80e:	6005      	str	r5, [r0, #0]
 800c810:	e7d6      	b.n	800c7c0 <_malloc_r+0xa8>
 800c812:	bf00      	nop
 800c814:	20001c1c 	.word	0x20001c1c

0800c818 <__malloc_lock>:
 800c818:	4801      	ldr	r0, [pc, #4]	@ (800c820 <__malloc_lock+0x8>)
 800c81a:	f001 be50 	b.w	800e4be <__retarget_lock_acquire_recursive>
 800c81e:	bf00      	nop
 800c820:	20001d60 	.word	0x20001d60

0800c824 <__malloc_unlock>:
 800c824:	4801      	ldr	r0, [pc, #4]	@ (800c82c <__malloc_unlock+0x8>)
 800c826:	f001 be4b 	b.w	800e4c0 <__retarget_lock_release_recursive>
 800c82a:	bf00      	nop
 800c82c:	20001d60 	.word	0x20001d60

0800c830 <sulp>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	460d      	mov	r5, r1
 800c836:	ec45 4b10 	vmov	d0, r4, r5
 800c83a:	4616      	mov	r6, r2
 800c83c:	f003 fbb6 	bl	800ffac <__ulp>
 800c840:	ec51 0b10 	vmov	r0, r1, d0
 800c844:	b17e      	cbz	r6, 800c866 <sulp+0x36>
 800c846:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c84a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd09      	ble.n	800c866 <sulp+0x36>
 800c852:	051b      	lsls	r3, r3, #20
 800c854:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c858:	2400      	movs	r4, #0
 800c85a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c85e:	4622      	mov	r2, r4
 800c860:	462b      	mov	r3, r5
 800c862:	f7f3 fee9 	bl	8000638 <__aeabi_dmul>
 800c866:	ec41 0b10 	vmov	d0, r0, r1
 800c86a:	bd70      	pop	{r4, r5, r6, pc}
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <_strtod_l>:
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	b09f      	sub	sp, #124	@ 0x7c
 800c876:	460c      	mov	r4, r1
 800c878:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c87a:	2200      	movs	r2, #0
 800c87c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c87e:	9005      	str	r0, [sp, #20]
 800c880:	f04f 0a00 	mov.w	sl, #0
 800c884:	f04f 0b00 	mov.w	fp, #0
 800c888:	460a      	mov	r2, r1
 800c88a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c88c:	7811      	ldrb	r1, [r2, #0]
 800c88e:	292b      	cmp	r1, #43	@ 0x2b
 800c890:	d04a      	beq.n	800c928 <_strtod_l+0xb8>
 800c892:	d838      	bhi.n	800c906 <_strtod_l+0x96>
 800c894:	290d      	cmp	r1, #13
 800c896:	d832      	bhi.n	800c8fe <_strtod_l+0x8e>
 800c898:	2908      	cmp	r1, #8
 800c89a:	d832      	bhi.n	800c902 <_strtod_l+0x92>
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d03b      	beq.n	800c918 <_strtod_l+0xa8>
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c8a6:	782a      	ldrb	r2, [r5, #0]
 800c8a8:	2a30      	cmp	r2, #48	@ 0x30
 800c8aa:	f040 80b3 	bne.w	800ca14 <_strtod_l+0x1a4>
 800c8ae:	786a      	ldrb	r2, [r5, #1]
 800c8b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8b4:	2a58      	cmp	r2, #88	@ 0x58
 800c8b6:	d16e      	bne.n	800c996 <_strtod_l+0x126>
 800c8b8:	9302      	str	r3, [sp, #8]
 800c8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	ab1a      	add	r3, sp, #104	@ 0x68
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	4a8e      	ldr	r2, [pc, #568]	@ (800cafc <_strtod_l+0x28c>)
 800c8c4:	9805      	ldr	r0, [sp, #20]
 800c8c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c8c8:	a919      	add	r1, sp, #100	@ 0x64
 800c8ca:	f002 fd17 	bl	800f2fc <__gethex>
 800c8ce:	f010 060f 	ands.w	r6, r0, #15
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	d005      	beq.n	800c8e2 <_strtod_l+0x72>
 800c8d6:	2e06      	cmp	r6, #6
 800c8d8:	d128      	bne.n	800c92c <_strtod_l+0xbc>
 800c8da:	3501      	adds	r5, #1
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9519      	str	r5, [sp, #100]	@ 0x64
 800c8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f040 858e 	bne.w	800d406 <_strtod_l+0xb96>
 800c8ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8ec:	b1cb      	cbz	r3, 800c922 <_strtod_l+0xb2>
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8f4:	ec43 2b10 	vmov	d0, r2, r3
 800c8f8:	b01f      	add	sp, #124	@ 0x7c
 800c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fe:	2920      	cmp	r1, #32
 800c900:	d1ce      	bne.n	800c8a0 <_strtod_l+0x30>
 800c902:	3201      	adds	r2, #1
 800c904:	e7c1      	b.n	800c88a <_strtod_l+0x1a>
 800c906:	292d      	cmp	r1, #45	@ 0x2d
 800c908:	d1ca      	bne.n	800c8a0 <_strtod_l+0x30>
 800c90a:	2101      	movs	r1, #1
 800c90c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c90e:	1c51      	adds	r1, r2, #1
 800c910:	9119      	str	r1, [sp, #100]	@ 0x64
 800c912:	7852      	ldrb	r2, [r2, #1]
 800c914:	2a00      	cmp	r2, #0
 800c916:	d1c5      	bne.n	800c8a4 <_strtod_l+0x34>
 800c918:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c91a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f040 8570 	bne.w	800d402 <_strtod_l+0xb92>
 800c922:	4652      	mov	r2, sl
 800c924:	465b      	mov	r3, fp
 800c926:	e7e5      	b.n	800c8f4 <_strtod_l+0x84>
 800c928:	2100      	movs	r1, #0
 800c92a:	e7ef      	b.n	800c90c <_strtod_l+0x9c>
 800c92c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c92e:	b13a      	cbz	r2, 800c940 <_strtod_l+0xd0>
 800c930:	2135      	movs	r1, #53	@ 0x35
 800c932:	a81c      	add	r0, sp, #112	@ 0x70
 800c934:	f003 fc34 	bl	80101a0 <__copybits>
 800c938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c93a:	9805      	ldr	r0, [sp, #20]
 800c93c:	f003 f802 	bl	800f944 <_Bfree>
 800c940:	3e01      	subs	r6, #1
 800c942:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c944:	2e04      	cmp	r6, #4
 800c946:	d806      	bhi.n	800c956 <_strtod_l+0xe6>
 800c948:	e8df f006 	tbb	[pc, r6]
 800c94c:	201d0314 	.word	0x201d0314
 800c950:	14          	.byte	0x14
 800c951:	00          	.byte	0x00
 800c952:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c956:	05e1      	lsls	r1, r4, #23
 800c958:	bf48      	it	mi
 800c95a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c95e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c962:	0d1b      	lsrs	r3, r3, #20
 800c964:	051b      	lsls	r3, r3, #20
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1bb      	bne.n	800c8e2 <_strtod_l+0x72>
 800c96a:	f001 fd7d 	bl	800e468 <__errno>
 800c96e:	2322      	movs	r3, #34	@ 0x22
 800c970:	6003      	str	r3, [r0, #0]
 800c972:	e7b6      	b.n	800c8e2 <_strtod_l+0x72>
 800c974:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c97c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c984:	e7e7      	b.n	800c956 <_strtod_l+0xe6>
 800c986:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cb04 <_strtod_l+0x294>
 800c98a:	e7e4      	b.n	800c956 <_strtod_l+0xe6>
 800c98c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c990:	f04f 3aff 	mov.w	sl, #4294967295
 800c994:	e7df      	b.n	800c956 <_strtod_l+0xe6>
 800c996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c998:	1c5a      	adds	r2, r3, #1
 800c99a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c99c:	785b      	ldrb	r3, [r3, #1]
 800c99e:	2b30      	cmp	r3, #48	@ 0x30
 800c9a0:	d0f9      	beq.n	800c996 <_strtod_l+0x126>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d09d      	beq.n	800c8e2 <_strtod_l+0x72>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	9308      	str	r3, [sp, #32]
 800c9b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9b4:	461f      	mov	r7, r3
 800c9b6:	220a      	movs	r2, #10
 800c9b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c9ba:	7805      	ldrb	r5, [r0, #0]
 800c9bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c9c0:	b2d9      	uxtb	r1, r3
 800c9c2:	2909      	cmp	r1, #9
 800c9c4:	d928      	bls.n	800ca18 <_strtod_l+0x1a8>
 800c9c6:	494e      	ldr	r1, [pc, #312]	@ (800cb00 <_strtod_l+0x290>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f001 fce0 	bl	800e38e <strncmp>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d032      	beq.n	800ca38 <_strtod_l+0x1c8>
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	4681      	mov	r9, r0
 800c9d8:	463d      	mov	r5, r7
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2a65      	cmp	r2, #101	@ 0x65
 800c9de:	d001      	beq.n	800c9e4 <_strtod_l+0x174>
 800c9e0:	2a45      	cmp	r2, #69	@ 0x45
 800c9e2:	d114      	bne.n	800ca0e <_strtod_l+0x19e>
 800c9e4:	b91d      	cbnz	r5, 800c9ee <_strtod_l+0x17e>
 800c9e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e8:	4302      	orrs	r2, r0
 800c9ea:	d095      	beq.n	800c918 <_strtod_l+0xa8>
 800c9ec:	2500      	movs	r5, #0
 800c9ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c9f0:	1c62      	adds	r2, r4, #1
 800c9f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9f4:	7862      	ldrb	r2, [r4, #1]
 800c9f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c9f8:	d077      	beq.n	800caea <_strtod_l+0x27a>
 800c9fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800c9fc:	d07b      	beq.n	800caf6 <_strtod_l+0x286>
 800c9fe:	f04f 0c00 	mov.w	ip, #0
 800ca02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca06:	2909      	cmp	r1, #9
 800ca08:	f240 8082 	bls.w	800cb10 <_strtod_l+0x2a0>
 800ca0c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	e0a2      	b.n	800cb5a <_strtod_l+0x2ea>
 800ca14:	2300      	movs	r3, #0
 800ca16:	e7c7      	b.n	800c9a8 <_strtod_l+0x138>
 800ca18:	2f08      	cmp	r7, #8
 800ca1a:	bfd5      	itete	le
 800ca1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca1e:	9908      	ldrgt	r1, [sp, #32]
 800ca20:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ca28:	f100 0001 	add.w	r0, r0, #1
 800ca2c:	bfd4      	ite	le
 800ca2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ca30:	9308      	strgt	r3, [sp, #32]
 800ca32:	3701      	adds	r7, #1
 800ca34:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca36:	e7bf      	b.n	800c9b8 <_strtod_l+0x148>
 800ca38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca3e:	785a      	ldrb	r2, [r3, #1]
 800ca40:	b37f      	cbz	r7, 800caa2 <_strtod_l+0x232>
 800ca42:	4681      	mov	r9, r0
 800ca44:	463d      	mov	r5, r7
 800ca46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca4a:	2b09      	cmp	r3, #9
 800ca4c:	d912      	bls.n	800ca74 <_strtod_l+0x204>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e7c4      	b.n	800c9dc <_strtod_l+0x16c>
 800ca52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca58:	785a      	ldrb	r2, [r3, #1]
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	2a30      	cmp	r2, #48	@ 0x30
 800ca5e:	d0f8      	beq.n	800ca52 <_strtod_l+0x1e2>
 800ca60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca64:	2b08      	cmp	r3, #8
 800ca66:	f200 84d3 	bhi.w	800d410 <_strtod_l+0xba0>
 800ca6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca6e:	4681      	mov	r9, r0
 800ca70:	2000      	movs	r0, #0
 800ca72:	4605      	mov	r5, r0
 800ca74:	3a30      	subs	r2, #48	@ 0x30
 800ca76:	f100 0301 	add.w	r3, r0, #1
 800ca7a:	d02a      	beq.n	800cad2 <_strtod_l+0x262>
 800ca7c:	4499      	add	r9, r3
 800ca7e:	eb00 0c05 	add.w	ip, r0, r5
 800ca82:	462b      	mov	r3, r5
 800ca84:	210a      	movs	r1, #10
 800ca86:	4563      	cmp	r3, ip
 800ca88:	d10d      	bne.n	800caa6 <_strtod_l+0x236>
 800ca8a:	1c69      	adds	r1, r5, #1
 800ca8c:	4401      	add	r1, r0
 800ca8e:	4428      	add	r0, r5
 800ca90:	2808      	cmp	r0, #8
 800ca92:	dc16      	bgt.n	800cac2 <_strtod_l+0x252>
 800ca94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca96:	230a      	movs	r3, #10
 800ca98:	fb03 2300 	mla	r3, r3, r0, r2
 800ca9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e018      	b.n	800cad4 <_strtod_l+0x264>
 800caa2:	4638      	mov	r0, r7
 800caa4:	e7da      	b.n	800ca5c <_strtod_l+0x1ec>
 800caa6:	2b08      	cmp	r3, #8
 800caa8:	f103 0301 	add.w	r3, r3, #1
 800caac:	dc03      	bgt.n	800cab6 <_strtod_l+0x246>
 800caae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cab0:	434e      	muls	r6, r1
 800cab2:	960a      	str	r6, [sp, #40]	@ 0x28
 800cab4:	e7e7      	b.n	800ca86 <_strtod_l+0x216>
 800cab6:	2b10      	cmp	r3, #16
 800cab8:	bfde      	ittt	le
 800caba:	9e08      	ldrle	r6, [sp, #32]
 800cabc:	434e      	mulle	r6, r1
 800cabe:	9608      	strle	r6, [sp, #32]
 800cac0:	e7e1      	b.n	800ca86 <_strtod_l+0x216>
 800cac2:	280f      	cmp	r0, #15
 800cac4:	dceb      	bgt.n	800ca9e <_strtod_l+0x22e>
 800cac6:	9808      	ldr	r0, [sp, #32]
 800cac8:	230a      	movs	r3, #10
 800caca:	fb03 2300 	mla	r3, r3, r0, r2
 800cace:	9308      	str	r3, [sp, #32]
 800cad0:	e7e5      	b.n	800ca9e <_strtod_l+0x22e>
 800cad2:	4629      	mov	r1, r5
 800cad4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cad6:	1c50      	adds	r0, r2, #1
 800cad8:	9019      	str	r0, [sp, #100]	@ 0x64
 800cada:	7852      	ldrb	r2, [r2, #1]
 800cadc:	4618      	mov	r0, r3
 800cade:	460d      	mov	r5, r1
 800cae0:	e7b1      	b.n	800ca46 <_strtod_l+0x1d6>
 800cae2:	f04f 0900 	mov.w	r9, #0
 800cae6:	2301      	movs	r3, #1
 800cae8:	e77d      	b.n	800c9e6 <_strtod_l+0x176>
 800caea:	f04f 0c00 	mov.w	ip, #0
 800caee:	1ca2      	adds	r2, r4, #2
 800caf0:	9219      	str	r2, [sp, #100]	@ 0x64
 800caf2:	78a2      	ldrb	r2, [r4, #2]
 800caf4:	e785      	b.n	800ca02 <_strtod_l+0x192>
 800caf6:	f04f 0c01 	mov.w	ip, #1
 800cafa:	e7f8      	b.n	800caee <_strtod_l+0x27e>
 800cafc:	08010f34 	.word	0x08010f34
 800cb00:	08010f1c 	.word	0x08010f1c
 800cb04:	7ff00000 	.word	0x7ff00000
 800cb08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb0a:	1c51      	adds	r1, r2, #1
 800cb0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb0e:	7852      	ldrb	r2, [r2, #1]
 800cb10:	2a30      	cmp	r2, #48	@ 0x30
 800cb12:	d0f9      	beq.n	800cb08 <_strtod_l+0x298>
 800cb14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb18:	2908      	cmp	r1, #8
 800cb1a:	f63f af78 	bhi.w	800ca0e <_strtod_l+0x19e>
 800cb1e:	3a30      	subs	r2, #48	@ 0x30
 800cb20:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb24:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb26:	f04f 080a 	mov.w	r8, #10
 800cb2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb2c:	1c56      	adds	r6, r2, #1
 800cb2e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cb30:	7852      	ldrb	r2, [r2, #1]
 800cb32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cb36:	f1be 0f09 	cmp.w	lr, #9
 800cb3a:	d939      	bls.n	800cbb0 <_strtod_l+0x340>
 800cb3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb3e:	1a76      	subs	r6, r6, r1
 800cb40:	2e08      	cmp	r6, #8
 800cb42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb46:	dc03      	bgt.n	800cb50 <_strtod_l+0x2e0>
 800cb48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb4a:	4588      	cmp	r8, r1
 800cb4c:	bfa8      	it	ge
 800cb4e:	4688      	movge	r8, r1
 800cb50:	f1bc 0f00 	cmp.w	ip, #0
 800cb54:	d001      	beq.n	800cb5a <_strtod_l+0x2ea>
 800cb56:	f1c8 0800 	rsb	r8, r8, #0
 800cb5a:	2d00      	cmp	r5, #0
 800cb5c:	d14e      	bne.n	800cbfc <_strtod_l+0x38c>
 800cb5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb60:	4308      	orrs	r0, r1
 800cb62:	f47f aebe 	bne.w	800c8e2 <_strtod_l+0x72>
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f47f aed6 	bne.w	800c918 <_strtod_l+0xa8>
 800cb6c:	2a69      	cmp	r2, #105	@ 0x69
 800cb6e:	d028      	beq.n	800cbc2 <_strtod_l+0x352>
 800cb70:	dc25      	bgt.n	800cbbe <_strtod_l+0x34e>
 800cb72:	2a49      	cmp	r2, #73	@ 0x49
 800cb74:	d025      	beq.n	800cbc2 <_strtod_l+0x352>
 800cb76:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb78:	f47f aece 	bne.w	800c918 <_strtod_l+0xa8>
 800cb7c:	499b      	ldr	r1, [pc, #620]	@ (800cdec <_strtod_l+0x57c>)
 800cb7e:	a819      	add	r0, sp, #100	@ 0x64
 800cb80:	f002 fdde 	bl	800f740 <__match>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f43f aec7 	beq.w	800c918 <_strtod_l+0xa8>
 800cb8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b28      	cmp	r3, #40	@ 0x28
 800cb90:	d12e      	bne.n	800cbf0 <_strtod_l+0x380>
 800cb92:	4997      	ldr	r1, [pc, #604]	@ (800cdf0 <_strtod_l+0x580>)
 800cb94:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb96:	a819      	add	r0, sp, #100	@ 0x64
 800cb98:	f002 fde6 	bl	800f768 <__hexnan>
 800cb9c:	2805      	cmp	r0, #5
 800cb9e:	d127      	bne.n	800cbf0 <_strtod_l+0x380>
 800cba0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cba2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cba6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cbaa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cbae:	e698      	b.n	800c8e2 <_strtod_l+0x72>
 800cbb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbb2:	fb08 2101 	mla	r1, r8, r1, r2
 800cbb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cbba:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbbc:	e7b5      	b.n	800cb2a <_strtod_l+0x2ba>
 800cbbe:	2a6e      	cmp	r2, #110	@ 0x6e
 800cbc0:	e7da      	b.n	800cb78 <_strtod_l+0x308>
 800cbc2:	498c      	ldr	r1, [pc, #560]	@ (800cdf4 <_strtod_l+0x584>)
 800cbc4:	a819      	add	r0, sp, #100	@ 0x64
 800cbc6:	f002 fdbb 	bl	800f740 <__match>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	f43f aea4 	beq.w	800c918 <_strtod_l+0xa8>
 800cbd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd2:	4989      	ldr	r1, [pc, #548]	@ (800cdf8 <_strtod_l+0x588>)
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	a819      	add	r0, sp, #100	@ 0x64
 800cbd8:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbda:	f002 fdb1 	bl	800f740 <__match>
 800cbde:	b910      	cbnz	r0, 800cbe6 <_strtod_l+0x376>
 800cbe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbe6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ce08 <_strtod_l+0x598>
 800cbea:	f04f 0a00 	mov.w	sl, #0
 800cbee:	e678      	b.n	800c8e2 <_strtod_l+0x72>
 800cbf0:	4882      	ldr	r0, [pc, #520]	@ (800cdfc <_strtod_l+0x58c>)
 800cbf2:	f001 fc75 	bl	800e4e0 <nan>
 800cbf6:	ec5b ab10 	vmov	sl, fp, d0
 800cbfa:	e672      	b.n	800c8e2 <_strtod_l+0x72>
 800cbfc:	eba8 0309 	sub.w	r3, r8, r9
 800cc00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	bf08      	it	eq
 800cc08:	462f      	moveq	r7, r5
 800cc0a:	2d10      	cmp	r5, #16
 800cc0c:	462c      	mov	r4, r5
 800cc0e:	bfa8      	it	ge
 800cc10:	2410      	movge	r4, #16
 800cc12:	f7f3 fc97 	bl	8000544 <__aeabi_ui2d>
 800cc16:	2d09      	cmp	r5, #9
 800cc18:	4682      	mov	sl, r0
 800cc1a:	468b      	mov	fp, r1
 800cc1c:	dc13      	bgt.n	800cc46 <_strtod_l+0x3d6>
 800cc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f43f ae5e 	beq.w	800c8e2 <_strtod_l+0x72>
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	dd78      	ble.n	800cd1c <_strtod_l+0x4ac>
 800cc2a:	2b16      	cmp	r3, #22
 800cc2c:	dc5f      	bgt.n	800ccee <_strtod_l+0x47e>
 800cc2e:	4974      	ldr	r1, [pc, #464]	@ (800ce00 <_strtod_l+0x590>)
 800cc30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc38:	4652      	mov	r2, sl
 800cc3a:	465b      	mov	r3, fp
 800cc3c:	f7f3 fcfc 	bl	8000638 <__aeabi_dmul>
 800cc40:	4682      	mov	sl, r0
 800cc42:	468b      	mov	fp, r1
 800cc44:	e64d      	b.n	800c8e2 <_strtod_l+0x72>
 800cc46:	4b6e      	ldr	r3, [pc, #440]	@ (800ce00 <_strtod_l+0x590>)
 800cc48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc50:	f7f3 fcf2 	bl	8000638 <__aeabi_dmul>
 800cc54:	4682      	mov	sl, r0
 800cc56:	9808      	ldr	r0, [sp, #32]
 800cc58:	468b      	mov	fp, r1
 800cc5a:	f7f3 fc73 	bl	8000544 <__aeabi_ui2d>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4650      	mov	r0, sl
 800cc64:	4659      	mov	r1, fp
 800cc66:	f7f3 fb31 	bl	80002cc <__adddf3>
 800cc6a:	2d0f      	cmp	r5, #15
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	468b      	mov	fp, r1
 800cc70:	ddd5      	ble.n	800cc1e <_strtod_l+0x3ae>
 800cc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc74:	1b2c      	subs	r4, r5, r4
 800cc76:	441c      	add	r4, r3
 800cc78:	2c00      	cmp	r4, #0
 800cc7a:	f340 8096 	ble.w	800cdaa <_strtod_l+0x53a>
 800cc7e:	f014 030f 	ands.w	r3, r4, #15
 800cc82:	d00a      	beq.n	800cc9a <_strtod_l+0x42a>
 800cc84:	495e      	ldr	r1, [pc, #376]	@ (800ce00 <_strtod_l+0x590>)
 800cc86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	465b      	mov	r3, fp
 800cc8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc92:	f7f3 fcd1 	bl	8000638 <__aeabi_dmul>
 800cc96:	4682      	mov	sl, r0
 800cc98:	468b      	mov	fp, r1
 800cc9a:	f034 040f 	bics.w	r4, r4, #15
 800cc9e:	d073      	beq.n	800cd88 <_strtod_l+0x518>
 800cca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cca4:	dd48      	ble.n	800cd38 <_strtod_l+0x4c8>
 800cca6:	2400      	movs	r4, #0
 800cca8:	46a0      	mov	r8, r4
 800ccaa:	940a      	str	r4, [sp, #40]	@ 0x28
 800ccac:	46a1      	mov	r9, r4
 800ccae:	9a05      	ldr	r2, [sp, #20]
 800ccb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ce08 <_strtod_l+0x598>
 800ccb4:	2322      	movs	r3, #34	@ 0x22
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	f04f 0a00 	mov.w	sl, #0
 800ccbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f43f ae0f 	beq.w	800c8e2 <_strtod_l+0x72>
 800ccc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccc6:	9805      	ldr	r0, [sp, #20]
 800ccc8:	f002 fe3c 	bl	800f944 <_Bfree>
 800cccc:	9805      	ldr	r0, [sp, #20]
 800ccce:	4649      	mov	r1, r9
 800ccd0:	f002 fe38 	bl	800f944 <_Bfree>
 800ccd4:	9805      	ldr	r0, [sp, #20]
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	f002 fe34 	bl	800f944 <_Bfree>
 800ccdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccde:	9805      	ldr	r0, [sp, #20]
 800cce0:	f002 fe30 	bl	800f944 <_Bfree>
 800cce4:	9805      	ldr	r0, [sp, #20]
 800cce6:	4621      	mov	r1, r4
 800cce8:	f002 fe2c 	bl	800f944 <_Bfree>
 800ccec:	e5f9      	b.n	800c8e2 <_strtod_l+0x72>
 800ccee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	dbbc      	blt.n	800cc72 <_strtod_l+0x402>
 800ccf8:	4c41      	ldr	r4, [pc, #260]	@ (800ce00 <_strtod_l+0x590>)
 800ccfa:	f1c5 050f 	rsb	r5, r5, #15
 800ccfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd02:	4652      	mov	r2, sl
 800cd04:	465b      	mov	r3, fp
 800cd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0a:	f7f3 fc95 	bl	8000638 <__aeabi_dmul>
 800cd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd10:	1b5d      	subs	r5, r3, r5
 800cd12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd1a:	e78f      	b.n	800cc3c <_strtod_l+0x3cc>
 800cd1c:	3316      	adds	r3, #22
 800cd1e:	dba8      	blt.n	800cc72 <_strtod_l+0x402>
 800cd20:	4b37      	ldr	r3, [pc, #220]	@ (800ce00 <_strtod_l+0x590>)
 800cd22:	eba9 0808 	sub.w	r8, r9, r8
 800cd26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd2e:	4650      	mov	r0, sl
 800cd30:	4659      	mov	r1, fp
 800cd32:	f7f3 fdab 	bl	800088c <__aeabi_ddiv>
 800cd36:	e783      	b.n	800cc40 <_strtod_l+0x3d0>
 800cd38:	4b32      	ldr	r3, [pc, #200]	@ (800ce04 <_strtod_l+0x594>)
 800cd3a:	9308      	str	r3, [sp, #32]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	1124      	asrs	r4, r4, #4
 800cd40:	4650      	mov	r0, sl
 800cd42:	4659      	mov	r1, fp
 800cd44:	461e      	mov	r6, r3
 800cd46:	2c01      	cmp	r4, #1
 800cd48:	dc21      	bgt.n	800cd8e <_strtod_l+0x51e>
 800cd4a:	b10b      	cbz	r3, 800cd50 <_strtod_l+0x4e0>
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	468b      	mov	fp, r1
 800cd50:	492c      	ldr	r1, [pc, #176]	@ (800ce04 <_strtod_l+0x594>)
 800cd52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd5a:	4652      	mov	r2, sl
 800cd5c:	465b      	mov	r3, fp
 800cd5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd62:	f7f3 fc69 	bl	8000638 <__aeabi_dmul>
 800cd66:	4b28      	ldr	r3, [pc, #160]	@ (800ce08 <_strtod_l+0x598>)
 800cd68:	460a      	mov	r2, r1
 800cd6a:	400b      	ands	r3, r1
 800cd6c:	4927      	ldr	r1, [pc, #156]	@ (800ce0c <_strtod_l+0x59c>)
 800cd6e:	428b      	cmp	r3, r1
 800cd70:	4682      	mov	sl, r0
 800cd72:	d898      	bhi.n	800cca6 <_strtod_l+0x436>
 800cd74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf86      	itte	hi
 800cd7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ce10 <_strtod_l+0x5a0>
 800cd80:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	e07a      	b.n	800ce84 <_strtod_l+0x614>
 800cd8e:	07e2      	lsls	r2, r4, #31
 800cd90:	d505      	bpl.n	800cd9e <_strtod_l+0x52e>
 800cd92:	9b08      	ldr	r3, [sp, #32]
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	f7f3 fc4e 	bl	8000638 <__aeabi_dmul>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	9a08      	ldr	r2, [sp, #32]
 800cda0:	3208      	adds	r2, #8
 800cda2:	3601      	adds	r6, #1
 800cda4:	1064      	asrs	r4, r4, #1
 800cda6:	9208      	str	r2, [sp, #32]
 800cda8:	e7cd      	b.n	800cd46 <_strtod_l+0x4d6>
 800cdaa:	d0ed      	beq.n	800cd88 <_strtod_l+0x518>
 800cdac:	4264      	negs	r4, r4
 800cdae:	f014 020f 	ands.w	r2, r4, #15
 800cdb2:	d00a      	beq.n	800cdca <_strtod_l+0x55a>
 800cdb4:	4b12      	ldr	r3, [pc, #72]	@ (800ce00 <_strtod_l+0x590>)
 800cdb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdba:	4650      	mov	r0, sl
 800cdbc:	4659      	mov	r1, fp
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	f7f3 fd63 	bl	800088c <__aeabi_ddiv>
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	468b      	mov	fp, r1
 800cdca:	1124      	asrs	r4, r4, #4
 800cdcc:	d0dc      	beq.n	800cd88 <_strtod_l+0x518>
 800cdce:	2c1f      	cmp	r4, #31
 800cdd0:	dd20      	ble.n	800ce14 <_strtod_l+0x5a4>
 800cdd2:	2400      	movs	r4, #0
 800cdd4:	46a0      	mov	r8, r4
 800cdd6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdd8:	46a1      	mov	r9, r4
 800cdda:	9a05      	ldr	r2, [sp, #20]
 800cddc:	2322      	movs	r3, #34	@ 0x22
 800cdde:	f04f 0a00 	mov.w	sl, #0
 800cde2:	f04f 0b00 	mov.w	fp, #0
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	e768      	b.n	800ccbc <_strtod_l+0x44c>
 800cdea:	bf00      	nop
 800cdec:	08010f7d 	.word	0x08010f7d
 800cdf0:	08010f20 	.word	0x08010f20
 800cdf4:	08010f75 	.word	0x08010f75
 800cdf8:	08010fb4 	.word	0x08010fb4
 800cdfc:	08011345 	.word	0x08011345
 800ce00:	08011130 	.word	0x08011130
 800ce04:	08011108 	.word	0x08011108
 800ce08:	7ff00000 	.word	0x7ff00000
 800ce0c:	7ca00000 	.word	0x7ca00000
 800ce10:	7fefffff 	.word	0x7fefffff
 800ce14:	f014 0310 	ands.w	r3, r4, #16
 800ce18:	bf18      	it	ne
 800ce1a:	236a      	movne	r3, #106	@ 0x6a
 800ce1c:	4ea9      	ldr	r6, [pc, #676]	@ (800d0c4 <_strtod_l+0x854>)
 800ce1e:	9308      	str	r3, [sp, #32]
 800ce20:	4650      	mov	r0, sl
 800ce22:	4659      	mov	r1, fp
 800ce24:	2300      	movs	r3, #0
 800ce26:	07e2      	lsls	r2, r4, #31
 800ce28:	d504      	bpl.n	800ce34 <_strtod_l+0x5c4>
 800ce2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce2e:	f7f3 fc03 	bl	8000638 <__aeabi_dmul>
 800ce32:	2301      	movs	r3, #1
 800ce34:	1064      	asrs	r4, r4, #1
 800ce36:	f106 0608 	add.w	r6, r6, #8
 800ce3a:	d1f4      	bne.n	800ce26 <_strtod_l+0x5b6>
 800ce3c:	b10b      	cbz	r3, 800ce42 <_strtod_l+0x5d2>
 800ce3e:	4682      	mov	sl, r0
 800ce40:	468b      	mov	fp, r1
 800ce42:	9b08      	ldr	r3, [sp, #32]
 800ce44:	b1b3      	cbz	r3, 800ce74 <_strtod_l+0x604>
 800ce46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	4659      	mov	r1, fp
 800ce52:	dd0f      	ble.n	800ce74 <_strtod_l+0x604>
 800ce54:	2b1f      	cmp	r3, #31
 800ce56:	dd55      	ble.n	800cf04 <_strtod_l+0x694>
 800ce58:	2b34      	cmp	r3, #52	@ 0x34
 800ce5a:	bfde      	ittt	le
 800ce5c:	f04f 33ff 	movle.w	r3, #4294967295
 800ce60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce64:	4093      	lslle	r3, r2
 800ce66:	f04f 0a00 	mov.w	sl, #0
 800ce6a:	bfcc      	ite	gt
 800ce6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce70:	ea03 0b01 	andle.w	fp, r3, r1
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f7f3 fe44 	bl	8000b08 <__aeabi_dcmpeq>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d1a6      	bne.n	800cdd2 <_strtod_l+0x562>
 800ce84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce8a:	9805      	ldr	r0, [sp, #20]
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	463a      	mov	r2, r7
 800ce90:	f002 fdc0 	bl	800fa14 <__s2b>
 800ce94:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f af05 	beq.w	800cca6 <_strtod_l+0x436>
 800ce9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce9e:	2a00      	cmp	r2, #0
 800cea0:	eba9 0308 	sub.w	r3, r9, r8
 800cea4:	bfa8      	it	ge
 800cea6:	2300      	movge	r3, #0
 800cea8:	9312      	str	r3, [sp, #72]	@ 0x48
 800ceaa:	2400      	movs	r4, #0
 800ceac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ceb0:	9316      	str	r3, [sp, #88]	@ 0x58
 800ceb2:	46a0      	mov	r8, r4
 800ceb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceb6:	9805      	ldr	r0, [sp, #20]
 800ceb8:	6859      	ldr	r1, [r3, #4]
 800ceba:	f002 fd03 	bl	800f8c4 <_Balloc>
 800cebe:	4681      	mov	r9, r0
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f43f aef4 	beq.w	800ccae <_strtod_l+0x43e>
 800cec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cec8:	691a      	ldr	r2, [r3, #16]
 800ceca:	3202      	adds	r2, #2
 800cecc:	f103 010c 	add.w	r1, r3, #12
 800ced0:	0092      	lsls	r2, r2, #2
 800ced2:	300c      	adds	r0, #12
 800ced4:	f001 faf5 	bl	800e4c2 <memcpy>
 800ced8:	ec4b ab10 	vmov	d0, sl, fp
 800cedc:	9805      	ldr	r0, [sp, #20]
 800cede:	aa1c      	add	r2, sp, #112	@ 0x70
 800cee0:	a91b      	add	r1, sp, #108	@ 0x6c
 800cee2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cee6:	f003 f8d1 	bl	801008c <__d2b>
 800ceea:	901a      	str	r0, [sp, #104]	@ 0x68
 800ceec:	2800      	cmp	r0, #0
 800ceee:	f43f aede 	beq.w	800ccae <_strtod_l+0x43e>
 800cef2:	9805      	ldr	r0, [sp, #20]
 800cef4:	2101      	movs	r1, #1
 800cef6:	f002 fe23 	bl	800fb40 <__i2b>
 800cefa:	4680      	mov	r8, r0
 800cefc:	b948      	cbnz	r0, 800cf12 <_strtod_l+0x6a2>
 800cefe:	f04f 0800 	mov.w	r8, #0
 800cf02:	e6d4      	b.n	800ccae <_strtod_l+0x43e>
 800cf04:	f04f 32ff 	mov.w	r2, #4294967295
 800cf08:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf10:	e7b0      	b.n	800ce74 <_strtod_l+0x604>
 800cf12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	bfab      	itete	ge
 800cf1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf22:	bfac      	ite	ge
 800cf24:	18ef      	addge	r7, r5, r3
 800cf26:	1b5e      	sublt	r6, r3, r5
 800cf28:	9b08      	ldr	r3, [sp, #32]
 800cf2a:	1aed      	subs	r5, r5, r3
 800cf2c:	4415      	add	r5, r2
 800cf2e:	4b66      	ldr	r3, [pc, #408]	@ (800d0c8 <_strtod_l+0x858>)
 800cf30:	3d01      	subs	r5, #1
 800cf32:	429d      	cmp	r5, r3
 800cf34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf38:	da50      	bge.n	800cfdc <_strtod_l+0x76c>
 800cf3a:	1b5b      	subs	r3, r3, r5
 800cf3c:	2b1f      	cmp	r3, #31
 800cf3e:	eba2 0203 	sub.w	r2, r2, r3
 800cf42:	f04f 0101 	mov.w	r1, #1
 800cf46:	dc3d      	bgt.n	800cfc4 <_strtod_l+0x754>
 800cf48:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf52:	18bd      	adds	r5, r7, r2
 800cf54:	9b08      	ldr	r3, [sp, #32]
 800cf56:	42af      	cmp	r7, r5
 800cf58:	4416      	add	r6, r2
 800cf5a:	441e      	add	r6, r3
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	bfa8      	it	ge
 800cf60:	462b      	movge	r3, r5
 800cf62:	42b3      	cmp	r3, r6
 800cf64:	bfa8      	it	ge
 800cf66:	4633      	movge	r3, r6
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfc2      	ittt	gt
 800cf6c:	1aed      	subgt	r5, r5, r3
 800cf6e:	1af6      	subgt	r6, r6, r3
 800cf70:	1aff      	subgt	r7, r7, r3
 800cf72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dd16      	ble.n	800cfa6 <_strtod_l+0x736>
 800cf78:	4641      	mov	r1, r8
 800cf7a:	9805      	ldr	r0, [sp, #20]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	f002 fe9f 	bl	800fcc0 <__pow5mult>
 800cf82:	4680      	mov	r8, r0
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d0ba      	beq.n	800cefe <_strtod_l+0x68e>
 800cf88:	4601      	mov	r1, r0
 800cf8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf8c:	9805      	ldr	r0, [sp, #20]
 800cf8e:	f002 fded 	bl	800fb6c <__multiply>
 800cf92:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf94:	2800      	cmp	r0, #0
 800cf96:	f43f ae8a 	beq.w	800ccae <_strtod_l+0x43e>
 800cf9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf9c:	9805      	ldr	r0, [sp, #20]
 800cf9e:	f002 fcd1 	bl	800f944 <_Bfree>
 800cfa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	dc1d      	bgt.n	800cfe6 <_strtod_l+0x776>
 800cfaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dd23      	ble.n	800cff8 <_strtod_l+0x788>
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cfb4:	9805      	ldr	r0, [sp, #20]
 800cfb6:	f002 fe83 	bl	800fcc0 <__pow5mult>
 800cfba:	4681      	mov	r9, r0
 800cfbc:	b9e0      	cbnz	r0, 800cff8 <_strtod_l+0x788>
 800cfbe:	f04f 0900 	mov.w	r9, #0
 800cfc2:	e674      	b.n	800ccae <_strtod_l+0x43e>
 800cfc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cfc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cfcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cfd0:	35e2      	adds	r5, #226	@ 0xe2
 800cfd2:	fa01 f305 	lsl.w	r3, r1, r5
 800cfd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cfda:	e7ba      	b.n	800cf52 <_strtod_l+0x6e2>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfe4:	e7b5      	b.n	800cf52 <_strtod_l+0x6e2>
 800cfe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfe8:	9805      	ldr	r0, [sp, #20]
 800cfea:	462a      	mov	r2, r5
 800cfec:	f002 fec2 	bl	800fd74 <__lshift>
 800cff0:	901a      	str	r0, [sp, #104]	@ 0x68
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d1d9      	bne.n	800cfaa <_strtod_l+0x73a>
 800cff6:	e65a      	b.n	800ccae <_strtod_l+0x43e>
 800cff8:	2e00      	cmp	r6, #0
 800cffa:	dd07      	ble.n	800d00c <_strtod_l+0x79c>
 800cffc:	4649      	mov	r1, r9
 800cffe:	9805      	ldr	r0, [sp, #20]
 800d000:	4632      	mov	r2, r6
 800d002:	f002 feb7 	bl	800fd74 <__lshift>
 800d006:	4681      	mov	r9, r0
 800d008:	2800      	cmp	r0, #0
 800d00a:	d0d8      	beq.n	800cfbe <_strtod_l+0x74e>
 800d00c:	2f00      	cmp	r7, #0
 800d00e:	dd08      	ble.n	800d022 <_strtod_l+0x7b2>
 800d010:	4641      	mov	r1, r8
 800d012:	9805      	ldr	r0, [sp, #20]
 800d014:	463a      	mov	r2, r7
 800d016:	f002 fead 	bl	800fd74 <__lshift>
 800d01a:	4680      	mov	r8, r0
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f43f ae46 	beq.w	800ccae <_strtod_l+0x43e>
 800d022:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d024:	9805      	ldr	r0, [sp, #20]
 800d026:	464a      	mov	r2, r9
 800d028:	f002 ff2c 	bl	800fe84 <__mdiff>
 800d02c:	4604      	mov	r4, r0
 800d02e:	2800      	cmp	r0, #0
 800d030:	f43f ae3d 	beq.w	800ccae <_strtod_l+0x43e>
 800d034:	68c3      	ldr	r3, [r0, #12]
 800d036:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d038:	2300      	movs	r3, #0
 800d03a:	60c3      	str	r3, [r0, #12]
 800d03c:	4641      	mov	r1, r8
 800d03e:	f002 ff05 	bl	800fe4c <__mcmp>
 800d042:	2800      	cmp	r0, #0
 800d044:	da46      	bge.n	800d0d4 <_strtod_l+0x864>
 800d046:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d048:	ea53 030a 	orrs.w	r3, r3, sl
 800d04c:	d16c      	bne.n	800d128 <_strtod_l+0x8b8>
 800d04e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d052:	2b00      	cmp	r3, #0
 800d054:	d168      	bne.n	800d128 <_strtod_l+0x8b8>
 800d056:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d05a:	0d1b      	lsrs	r3, r3, #20
 800d05c:	051b      	lsls	r3, r3, #20
 800d05e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d062:	d961      	bls.n	800d128 <_strtod_l+0x8b8>
 800d064:	6963      	ldr	r3, [r4, #20]
 800d066:	b913      	cbnz	r3, 800d06e <_strtod_l+0x7fe>
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	dd5c      	ble.n	800d128 <_strtod_l+0x8b8>
 800d06e:	4621      	mov	r1, r4
 800d070:	2201      	movs	r2, #1
 800d072:	9805      	ldr	r0, [sp, #20]
 800d074:	f002 fe7e 	bl	800fd74 <__lshift>
 800d078:	4641      	mov	r1, r8
 800d07a:	4604      	mov	r4, r0
 800d07c:	f002 fee6 	bl	800fe4c <__mcmp>
 800d080:	2800      	cmp	r0, #0
 800d082:	dd51      	ble.n	800d128 <_strtod_l+0x8b8>
 800d084:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d088:	9a08      	ldr	r2, [sp, #32]
 800d08a:	0d1b      	lsrs	r3, r3, #20
 800d08c:	051b      	lsls	r3, r3, #20
 800d08e:	2a00      	cmp	r2, #0
 800d090:	d06b      	beq.n	800d16a <_strtod_l+0x8fa>
 800d092:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d096:	d868      	bhi.n	800d16a <_strtod_l+0x8fa>
 800d098:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d09c:	f67f ae9d 	bls.w	800cdda <_strtod_l+0x56a>
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0cc <_strtod_l+0x85c>)
 800d0a2:	4650      	mov	r0, sl
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f7f3 fac6 	bl	8000638 <__aeabi_dmul>
 800d0ac:	4b08      	ldr	r3, [pc, #32]	@ (800d0d0 <_strtod_l+0x860>)
 800d0ae:	400b      	ands	r3, r1
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f47f ae05 	bne.w	800ccc4 <_strtod_l+0x454>
 800d0ba:	9a05      	ldr	r2, [sp, #20]
 800d0bc:	2322      	movs	r3, #34	@ 0x22
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	e600      	b.n	800ccc4 <_strtod_l+0x454>
 800d0c2:	bf00      	nop
 800d0c4:	08010f48 	.word	0x08010f48
 800d0c8:	fffffc02 	.word	0xfffffc02
 800d0cc:	39500000 	.word	0x39500000
 800d0d0:	7ff00000 	.word	0x7ff00000
 800d0d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0d8:	d165      	bne.n	800d1a6 <_strtod_l+0x936>
 800d0da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0e0:	b35a      	cbz	r2, 800d13a <_strtod_l+0x8ca>
 800d0e2:	4a9f      	ldr	r2, [pc, #636]	@ (800d360 <_strtod_l+0xaf0>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d12b      	bne.n	800d140 <_strtod_l+0x8d0>
 800d0e8:	9b08      	ldr	r3, [sp, #32]
 800d0ea:	4651      	mov	r1, sl
 800d0ec:	b303      	cbz	r3, 800d130 <_strtod_l+0x8c0>
 800d0ee:	4b9d      	ldr	r3, [pc, #628]	@ (800d364 <_strtod_l+0xaf4>)
 800d0f0:	465a      	mov	r2, fp
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fc:	d81b      	bhi.n	800d136 <_strtod_l+0x8c6>
 800d0fe:	0d1b      	lsrs	r3, r3, #20
 800d100:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d104:	fa02 f303 	lsl.w	r3, r2, r3
 800d108:	4299      	cmp	r1, r3
 800d10a:	d119      	bne.n	800d140 <_strtod_l+0x8d0>
 800d10c:	4b96      	ldr	r3, [pc, #600]	@ (800d368 <_strtod_l+0xaf8>)
 800d10e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d110:	429a      	cmp	r2, r3
 800d112:	d102      	bne.n	800d11a <_strtod_l+0x8aa>
 800d114:	3101      	adds	r1, #1
 800d116:	f43f adca 	beq.w	800ccae <_strtod_l+0x43e>
 800d11a:	4b92      	ldr	r3, [pc, #584]	@ (800d364 <_strtod_l+0xaf4>)
 800d11c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d11e:	401a      	ands	r2, r3
 800d120:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	9b08      	ldr	r3, [sp, #32]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1b8      	bne.n	800d0a0 <_strtod_l+0x830>
 800d12e:	e5c9      	b.n	800ccc4 <_strtod_l+0x454>
 800d130:	f04f 33ff 	mov.w	r3, #4294967295
 800d134:	e7e8      	b.n	800d108 <_strtod_l+0x898>
 800d136:	4613      	mov	r3, r2
 800d138:	e7e6      	b.n	800d108 <_strtod_l+0x898>
 800d13a:	ea53 030a 	orrs.w	r3, r3, sl
 800d13e:	d0a1      	beq.n	800d084 <_strtod_l+0x814>
 800d140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d142:	b1db      	cbz	r3, 800d17c <_strtod_l+0x90c>
 800d144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d146:	4213      	tst	r3, r2
 800d148:	d0ee      	beq.n	800d128 <_strtod_l+0x8b8>
 800d14a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d14c:	9a08      	ldr	r2, [sp, #32]
 800d14e:	4650      	mov	r0, sl
 800d150:	4659      	mov	r1, fp
 800d152:	b1bb      	cbz	r3, 800d184 <_strtod_l+0x914>
 800d154:	f7ff fb6c 	bl	800c830 <sulp>
 800d158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d15c:	ec53 2b10 	vmov	r2, r3, d0
 800d160:	f7f3 f8b4 	bl	80002cc <__adddf3>
 800d164:	4682      	mov	sl, r0
 800d166:	468b      	mov	fp, r1
 800d168:	e7de      	b.n	800d128 <_strtod_l+0x8b8>
 800d16a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d16e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d172:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d176:	f04f 3aff 	mov.w	sl, #4294967295
 800d17a:	e7d5      	b.n	800d128 <_strtod_l+0x8b8>
 800d17c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d17e:	ea13 0f0a 	tst.w	r3, sl
 800d182:	e7e1      	b.n	800d148 <_strtod_l+0x8d8>
 800d184:	f7ff fb54 	bl	800c830 <sulp>
 800d188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d18c:	ec53 2b10 	vmov	r2, r3, d0
 800d190:	f7f3 f89a 	bl	80002c8 <__aeabi_dsub>
 800d194:	2200      	movs	r2, #0
 800d196:	2300      	movs	r3, #0
 800d198:	4682      	mov	sl, r0
 800d19a:	468b      	mov	fp, r1
 800d19c:	f7f3 fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d0c1      	beq.n	800d128 <_strtod_l+0x8b8>
 800d1a4:	e619      	b.n	800cdda <_strtod_l+0x56a>
 800d1a6:	4641      	mov	r1, r8
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f002 ffc7 	bl	801013c <__ratio>
 800d1ae:	ec57 6b10 	vmov	r6, r7, d0
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fcb8 	bl	8000b30 <__aeabi_dcmple>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d06f      	beq.n	800d2a4 <_strtod_l+0xa34>
 800d1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d17a      	bne.n	800d2c0 <_strtod_l+0xa50>
 800d1ca:	f1ba 0f00 	cmp.w	sl, #0
 800d1ce:	d158      	bne.n	800d282 <_strtod_l+0xa12>
 800d1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d15a      	bne.n	800d290 <_strtod_l+0xa20>
 800d1da:	4b64      	ldr	r3, [pc, #400]	@ (800d36c <_strtod_l+0xafc>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4630      	mov	r0, r6
 800d1e0:	4639      	mov	r1, r7
 800d1e2:	f7f3 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d159      	bne.n	800d29e <_strtod_l+0xa2e>
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	4b60      	ldr	r3, [pc, #384]	@ (800d370 <_strtod_l+0xb00>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f7f3 fa21 	bl	8000638 <__aeabi_dmul>
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d1fe:	9606      	str	r6, [sp, #24]
 800d200:	9307      	str	r3, [sp, #28]
 800d202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d206:	4d57      	ldr	r5, [pc, #348]	@ (800d364 <_strtod_l+0xaf4>)
 800d208:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d20e:	401d      	ands	r5, r3
 800d210:	4b58      	ldr	r3, [pc, #352]	@ (800d374 <_strtod_l+0xb04>)
 800d212:	429d      	cmp	r5, r3
 800d214:	f040 80b2 	bne.w	800d37c <_strtod_l+0xb0c>
 800d218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d21a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d21e:	ec4b ab10 	vmov	d0, sl, fp
 800d222:	f002 fec3 	bl	800ffac <__ulp>
 800d226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d22a:	ec51 0b10 	vmov	r0, r1, d0
 800d22e:	f7f3 fa03 	bl	8000638 <__aeabi_dmul>
 800d232:	4652      	mov	r2, sl
 800d234:	465b      	mov	r3, fp
 800d236:	f7f3 f849 	bl	80002cc <__adddf3>
 800d23a:	460b      	mov	r3, r1
 800d23c:	4949      	ldr	r1, [pc, #292]	@ (800d364 <_strtod_l+0xaf4>)
 800d23e:	4a4e      	ldr	r2, [pc, #312]	@ (800d378 <_strtod_l+0xb08>)
 800d240:	4019      	ands	r1, r3
 800d242:	4291      	cmp	r1, r2
 800d244:	4682      	mov	sl, r0
 800d246:	d942      	bls.n	800d2ce <_strtod_l+0xa5e>
 800d248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d24a:	4b47      	ldr	r3, [pc, #284]	@ (800d368 <_strtod_l+0xaf8>)
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d103      	bne.n	800d258 <_strtod_l+0x9e8>
 800d250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d252:	3301      	adds	r3, #1
 800d254:	f43f ad2b 	beq.w	800ccae <_strtod_l+0x43e>
 800d258:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d368 <_strtod_l+0xaf8>
 800d25c:	f04f 3aff 	mov.w	sl, #4294967295
 800d260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d262:	9805      	ldr	r0, [sp, #20]
 800d264:	f002 fb6e 	bl	800f944 <_Bfree>
 800d268:	9805      	ldr	r0, [sp, #20]
 800d26a:	4649      	mov	r1, r9
 800d26c:	f002 fb6a 	bl	800f944 <_Bfree>
 800d270:	9805      	ldr	r0, [sp, #20]
 800d272:	4641      	mov	r1, r8
 800d274:	f002 fb66 	bl	800f944 <_Bfree>
 800d278:	9805      	ldr	r0, [sp, #20]
 800d27a:	4621      	mov	r1, r4
 800d27c:	f002 fb62 	bl	800f944 <_Bfree>
 800d280:	e618      	b.n	800ceb4 <_strtod_l+0x644>
 800d282:	f1ba 0f01 	cmp.w	sl, #1
 800d286:	d103      	bne.n	800d290 <_strtod_l+0xa20>
 800d288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f43f ada5 	beq.w	800cdda <_strtod_l+0x56a>
 800d290:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d340 <_strtod_l+0xad0>
 800d294:	4f35      	ldr	r7, [pc, #212]	@ (800d36c <_strtod_l+0xafc>)
 800d296:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d29a:	2600      	movs	r6, #0
 800d29c:	e7b1      	b.n	800d202 <_strtod_l+0x992>
 800d29e:	4f34      	ldr	r7, [pc, #208]	@ (800d370 <_strtod_l+0xb00>)
 800d2a0:	2600      	movs	r6, #0
 800d2a2:	e7aa      	b.n	800d1fa <_strtod_l+0x98a>
 800d2a4:	4b32      	ldr	r3, [pc, #200]	@ (800d370 <_strtod_l+0xb00>)
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f7f3 f9c4 	bl	8000638 <__aeabi_dmul>
 800d2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d09f      	beq.n	800d1fa <_strtod_l+0x98a>
 800d2ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d2be:	e7a0      	b.n	800d202 <_strtod_l+0x992>
 800d2c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d348 <_strtod_l+0xad8>
 800d2c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2c8:	ec57 6b17 	vmov	r6, r7, d7
 800d2cc:	e799      	b.n	800d202 <_strtod_l+0x992>
 800d2ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1c1      	bne.n	800d260 <_strtod_l+0x9f0>
 800d2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2e0:	0d1b      	lsrs	r3, r3, #20
 800d2e2:	051b      	lsls	r3, r3, #20
 800d2e4:	429d      	cmp	r5, r3
 800d2e6:	d1bb      	bne.n	800d260 <_strtod_l+0x9f0>
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f7f3 fd04 	bl	8000cf8 <__aeabi_d2lz>
 800d2f0:	f7f3 f974 	bl	80005dc <__aeabi_l2d>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f2 ffe4 	bl	80002c8 <__aeabi_dsub>
 800d300:	460b      	mov	r3, r1
 800d302:	4602      	mov	r2, r0
 800d304:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d308:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d30e:	ea46 060a 	orr.w	r6, r6, sl
 800d312:	431e      	orrs	r6, r3
 800d314:	d06f      	beq.n	800d3f6 <_strtod_l+0xb86>
 800d316:	a30e      	add	r3, pc, #56	@ (adr r3, 800d350 <_strtod_l+0xae0>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	f7f3 fbfe 	bl	8000b1c <__aeabi_dcmplt>
 800d320:	2800      	cmp	r0, #0
 800d322:	f47f accf 	bne.w	800ccc4 <_strtod_l+0x454>
 800d326:	a30c      	add	r3, pc, #48	@ (adr r3, 800d358 <_strtod_l+0xae8>)
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d330:	f7f3 fc12 	bl	8000b58 <__aeabi_dcmpgt>
 800d334:	2800      	cmp	r0, #0
 800d336:	d093      	beq.n	800d260 <_strtod_l+0x9f0>
 800d338:	e4c4      	b.n	800ccc4 <_strtod_l+0x454>
 800d33a:	bf00      	nop
 800d33c:	f3af 8000 	nop.w
 800d340:	00000000 	.word	0x00000000
 800d344:	bff00000 	.word	0xbff00000
 800d348:	00000000 	.word	0x00000000
 800d34c:	3ff00000 	.word	0x3ff00000
 800d350:	94a03595 	.word	0x94a03595
 800d354:	3fdfffff 	.word	0x3fdfffff
 800d358:	35afe535 	.word	0x35afe535
 800d35c:	3fe00000 	.word	0x3fe00000
 800d360:	000fffff 	.word	0x000fffff
 800d364:	7ff00000 	.word	0x7ff00000
 800d368:	7fefffff 	.word	0x7fefffff
 800d36c:	3ff00000 	.word	0x3ff00000
 800d370:	3fe00000 	.word	0x3fe00000
 800d374:	7fe00000 	.word	0x7fe00000
 800d378:	7c9fffff 	.word	0x7c9fffff
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	b323      	cbz	r3, 800d3ca <_strtod_l+0xb5a>
 800d380:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d384:	d821      	bhi.n	800d3ca <_strtod_l+0xb5a>
 800d386:	a328      	add	r3, pc, #160	@ (adr r3, 800d428 <_strtod_l+0xbb8>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f3 fbce 	bl	8000b30 <__aeabi_dcmple>
 800d394:	b1a0      	cbz	r0, 800d3c0 <_strtod_l+0xb50>
 800d396:	4639      	mov	r1, r7
 800d398:	4630      	mov	r0, r6
 800d39a:	f7f3 fc25 	bl	8000be8 <__aeabi_d2uiz>
 800d39e:	2801      	cmp	r0, #1
 800d3a0:	bf38      	it	cc
 800d3a2:	2001      	movcc	r0, #1
 800d3a4:	f7f3 f8ce 	bl	8000544 <__aeabi_ui2d>
 800d3a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	b9fb      	cbnz	r3, 800d3f0 <_strtod_l+0xb80>
 800d3b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d3b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d3bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d3c6:	1b5b      	subs	r3, r3, r5
 800d3c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d3ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d3d2:	f002 fdeb 	bl	800ffac <__ulp>
 800d3d6:	4650      	mov	r0, sl
 800d3d8:	ec53 2b10 	vmov	r2, r3, d0
 800d3dc:	4659      	mov	r1, fp
 800d3de:	f7f3 f92b 	bl	8000638 <__aeabi_dmul>
 800d3e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d3e6:	f7f2 ff71 	bl	80002cc <__adddf3>
 800d3ea:	4682      	mov	sl, r0
 800d3ec:	468b      	mov	fp, r1
 800d3ee:	e770      	b.n	800d2d2 <_strtod_l+0xa62>
 800d3f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d3f4:	e7e0      	b.n	800d3b8 <_strtod_l+0xb48>
 800d3f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d430 <_strtod_l+0xbc0>)
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	f7f3 fb8e 	bl	8000b1c <__aeabi_dcmplt>
 800d400:	e798      	b.n	800d334 <_strtod_l+0xac4>
 800d402:	2300      	movs	r3, #0
 800d404:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d406:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d40a:	6013      	str	r3, [r2, #0]
 800d40c:	f7ff ba6d 	b.w	800c8ea <_strtod_l+0x7a>
 800d410:	2a65      	cmp	r2, #101	@ 0x65
 800d412:	f43f ab66 	beq.w	800cae2 <_strtod_l+0x272>
 800d416:	2a45      	cmp	r2, #69	@ 0x45
 800d418:	f43f ab63 	beq.w	800cae2 <_strtod_l+0x272>
 800d41c:	2301      	movs	r3, #1
 800d41e:	f7ff bb9e 	b.w	800cb5e <_strtod_l+0x2ee>
 800d422:	bf00      	nop
 800d424:	f3af 8000 	nop.w
 800d428:	ffc00000 	.word	0xffc00000
 800d42c:	41dfffff 	.word	0x41dfffff
 800d430:	94a03595 	.word	0x94a03595
 800d434:	3fcfffff 	.word	0x3fcfffff

0800d438 <_strtod_r>:
 800d438:	4b01      	ldr	r3, [pc, #4]	@ (800d440 <_strtod_r+0x8>)
 800d43a:	f7ff ba19 	b.w	800c870 <_strtod_l>
 800d43e:	bf00      	nop
 800d440:	20000130 	.word	0x20000130

0800d444 <strtod>:
 800d444:	460a      	mov	r2, r1
 800d446:	4601      	mov	r1, r0
 800d448:	4802      	ldr	r0, [pc, #8]	@ (800d454 <strtod+0x10>)
 800d44a:	4b03      	ldr	r3, [pc, #12]	@ (800d458 <strtod+0x14>)
 800d44c:	6800      	ldr	r0, [r0, #0]
 800d44e:	f7ff ba0f 	b.w	800c870 <_strtod_l>
 800d452:	bf00      	nop
 800d454:	2000029c 	.word	0x2000029c
 800d458:	20000130 	.word	0x20000130

0800d45c <__cvt>:
 800d45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d460:	ec57 6b10 	vmov	r6, r7, d0
 800d464:	2f00      	cmp	r7, #0
 800d466:	460c      	mov	r4, r1
 800d468:	4619      	mov	r1, r3
 800d46a:	463b      	mov	r3, r7
 800d46c:	bfbb      	ittet	lt
 800d46e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d472:	461f      	movlt	r7, r3
 800d474:	2300      	movge	r3, #0
 800d476:	232d      	movlt	r3, #45	@ 0x2d
 800d478:	700b      	strb	r3, [r1, #0]
 800d47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d47c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d480:	4691      	mov	r9, r2
 800d482:	f023 0820 	bic.w	r8, r3, #32
 800d486:	bfbc      	itt	lt
 800d488:	4632      	movlt	r2, r6
 800d48a:	4616      	movlt	r6, r2
 800d48c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d490:	d005      	beq.n	800d49e <__cvt+0x42>
 800d492:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d496:	d100      	bne.n	800d49a <__cvt+0x3e>
 800d498:	3401      	adds	r4, #1
 800d49a:	2102      	movs	r1, #2
 800d49c:	e000      	b.n	800d4a0 <__cvt+0x44>
 800d49e:	2103      	movs	r1, #3
 800d4a0:	ab03      	add	r3, sp, #12
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	ab02      	add	r3, sp, #8
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	ec47 6b10 	vmov	d0, r6, r7
 800d4ac:	4653      	mov	r3, sl
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	f001 f8ae 	bl	800e610 <_dtoa_r>
 800d4b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	d119      	bne.n	800d4f0 <__cvt+0x94>
 800d4bc:	f019 0f01 	tst.w	r9, #1
 800d4c0:	d00e      	beq.n	800d4e0 <__cvt+0x84>
 800d4c2:	eb00 0904 	add.w	r9, r0, r4
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	f7f3 fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 800d4d2:	b108      	cbz	r0, 800d4d8 <__cvt+0x7c>
 800d4d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d4d8:	2230      	movs	r2, #48	@ 0x30
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	454b      	cmp	r3, r9
 800d4de:	d31e      	bcc.n	800d51e <__cvt+0xc2>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4e4:	1b5b      	subs	r3, r3, r5
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	b004      	add	sp, #16
 800d4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4f4:	eb00 0904 	add.w	r9, r0, r4
 800d4f8:	d1e5      	bne.n	800d4c6 <__cvt+0x6a>
 800d4fa:	7803      	ldrb	r3, [r0, #0]
 800d4fc:	2b30      	cmp	r3, #48	@ 0x30
 800d4fe:	d10a      	bne.n	800d516 <__cvt+0xba>
 800d500:	2200      	movs	r2, #0
 800d502:	2300      	movs	r3, #0
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800d50c:	b918      	cbnz	r0, 800d516 <__cvt+0xba>
 800d50e:	f1c4 0401 	rsb	r4, r4, #1
 800d512:	f8ca 4000 	str.w	r4, [sl]
 800d516:	f8da 3000 	ldr.w	r3, [sl]
 800d51a:	4499      	add	r9, r3
 800d51c:	e7d3      	b.n	800d4c6 <__cvt+0x6a>
 800d51e:	1c59      	adds	r1, r3, #1
 800d520:	9103      	str	r1, [sp, #12]
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e7d9      	b.n	800d4da <__cvt+0x7e>

0800d526 <__exponent>:
 800d526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d528:	2900      	cmp	r1, #0
 800d52a:	bfba      	itte	lt
 800d52c:	4249      	neglt	r1, r1
 800d52e:	232d      	movlt	r3, #45	@ 0x2d
 800d530:	232b      	movge	r3, #43	@ 0x2b
 800d532:	2909      	cmp	r1, #9
 800d534:	7002      	strb	r2, [r0, #0]
 800d536:	7043      	strb	r3, [r0, #1]
 800d538:	dd29      	ble.n	800d58e <__exponent+0x68>
 800d53a:	f10d 0307 	add.w	r3, sp, #7
 800d53e:	461d      	mov	r5, r3
 800d540:	270a      	movs	r7, #10
 800d542:	461a      	mov	r2, r3
 800d544:	fbb1 f6f7 	udiv	r6, r1, r7
 800d548:	fb07 1416 	mls	r4, r7, r6, r1
 800d54c:	3430      	adds	r4, #48	@ 0x30
 800d54e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d552:	460c      	mov	r4, r1
 800d554:	2c63      	cmp	r4, #99	@ 0x63
 800d556:	f103 33ff 	add.w	r3, r3, #4294967295
 800d55a:	4631      	mov	r1, r6
 800d55c:	dcf1      	bgt.n	800d542 <__exponent+0x1c>
 800d55e:	3130      	adds	r1, #48	@ 0x30
 800d560:	1e94      	subs	r4, r2, #2
 800d562:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d566:	1c41      	adds	r1, r0, #1
 800d568:	4623      	mov	r3, r4
 800d56a:	42ab      	cmp	r3, r5
 800d56c:	d30a      	bcc.n	800d584 <__exponent+0x5e>
 800d56e:	f10d 0309 	add.w	r3, sp, #9
 800d572:	1a9b      	subs	r3, r3, r2
 800d574:	42ac      	cmp	r4, r5
 800d576:	bf88      	it	hi
 800d578:	2300      	movhi	r3, #0
 800d57a:	3302      	adds	r3, #2
 800d57c:	4403      	add	r3, r0
 800d57e:	1a18      	subs	r0, r3, r0
 800d580:	b003      	add	sp, #12
 800d582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d584:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d588:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d58c:	e7ed      	b.n	800d56a <__exponent+0x44>
 800d58e:	2330      	movs	r3, #48	@ 0x30
 800d590:	3130      	adds	r1, #48	@ 0x30
 800d592:	7083      	strb	r3, [r0, #2]
 800d594:	70c1      	strb	r1, [r0, #3]
 800d596:	1d03      	adds	r3, r0, #4
 800d598:	e7f1      	b.n	800d57e <__exponent+0x58>
	...

0800d59c <_printf_float>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	b08d      	sub	sp, #52	@ 0x34
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d5a8:	4616      	mov	r6, r2
 800d5aa:	461f      	mov	r7, r3
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	f000 ff01 	bl	800e3b4 <_localeconv_r>
 800d5b2:	6803      	ldr	r3, [r0, #0]
 800d5b4:	9304      	str	r3, [sp, #16]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7f2 fe7a 	bl	80002b0 <strlen>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c0:	f8d8 3000 	ldr.w	r3, [r8]
 800d5c4:	9005      	str	r0, [sp, #20]
 800d5c6:	3307      	adds	r3, #7
 800d5c8:	f023 0307 	bic.w	r3, r3, #7
 800d5cc:	f103 0208 	add.w	r2, r3, #8
 800d5d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d5d4:	f8d4 b000 	ldr.w	fp, [r4]
 800d5d8:	f8c8 2000 	str.w	r2, [r8]
 800d5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d5e4:	9307      	str	r3, [sp, #28]
 800d5e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d5ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5f2:	4b9c      	ldr	r3, [pc, #624]	@ (800d864 <_printf_float+0x2c8>)
 800d5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f8:	f7f3 fab8 	bl	8000b6c <__aeabi_dcmpun>
 800d5fc:	bb70      	cbnz	r0, 800d65c <_printf_float+0xc0>
 800d5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d602:	4b98      	ldr	r3, [pc, #608]	@ (800d864 <_printf_float+0x2c8>)
 800d604:	f04f 32ff 	mov.w	r2, #4294967295
 800d608:	f7f3 fa92 	bl	8000b30 <__aeabi_dcmple>
 800d60c:	bb30      	cbnz	r0, 800d65c <_printf_float+0xc0>
 800d60e:	2200      	movs	r2, #0
 800d610:	2300      	movs	r3, #0
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f3 fa81 	bl	8000b1c <__aeabi_dcmplt>
 800d61a:	b110      	cbz	r0, 800d622 <_printf_float+0x86>
 800d61c:	232d      	movs	r3, #45	@ 0x2d
 800d61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d622:	4a91      	ldr	r2, [pc, #580]	@ (800d868 <_printf_float+0x2cc>)
 800d624:	4b91      	ldr	r3, [pc, #580]	@ (800d86c <_printf_float+0x2d0>)
 800d626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d62a:	bf94      	ite	ls
 800d62c:	4690      	movls	r8, r2
 800d62e:	4698      	movhi	r8, r3
 800d630:	2303      	movs	r3, #3
 800d632:	6123      	str	r3, [r4, #16]
 800d634:	f02b 0304 	bic.w	r3, fp, #4
 800d638:	6023      	str	r3, [r4, #0]
 800d63a:	f04f 0900 	mov.w	r9, #0
 800d63e:	9700      	str	r7, [sp, #0]
 800d640:	4633      	mov	r3, r6
 800d642:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d644:	4621      	mov	r1, r4
 800d646:	4628      	mov	r0, r5
 800d648:	f000 f9d2 	bl	800d9f0 <_printf_common>
 800d64c:	3001      	adds	r0, #1
 800d64e:	f040 808d 	bne.w	800d76c <_printf_float+0x1d0>
 800d652:	f04f 30ff 	mov.w	r0, #4294967295
 800d656:	b00d      	add	sp, #52	@ 0x34
 800d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	4642      	mov	r2, r8
 800d65e:	464b      	mov	r3, r9
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	f7f3 fa82 	bl	8000b6c <__aeabi_dcmpun>
 800d668:	b140      	cbz	r0, 800d67c <_printf_float+0xe0>
 800d66a:	464b      	mov	r3, r9
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	bfbc      	itt	lt
 800d670:	232d      	movlt	r3, #45	@ 0x2d
 800d672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d676:	4a7e      	ldr	r2, [pc, #504]	@ (800d870 <_printf_float+0x2d4>)
 800d678:	4b7e      	ldr	r3, [pc, #504]	@ (800d874 <_printf_float+0x2d8>)
 800d67a:	e7d4      	b.n	800d626 <_printf_float+0x8a>
 800d67c:	6863      	ldr	r3, [r4, #4]
 800d67e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d682:	9206      	str	r2, [sp, #24]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	d13b      	bne.n	800d700 <_printf_float+0x164>
 800d688:	2306      	movs	r3, #6
 800d68a:	6063      	str	r3, [r4, #4]
 800d68c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d690:	2300      	movs	r3, #0
 800d692:	6022      	str	r2, [r4, #0]
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	ab0a      	add	r3, sp, #40	@ 0x28
 800d698:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d69c:	ab09      	add	r3, sp, #36	@ 0x24
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	6861      	ldr	r1, [r4, #4]
 800d6a2:	ec49 8b10 	vmov	d0, r8, r9
 800d6a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f7ff fed6 	bl	800d45c <__cvt>
 800d6b0:	9b06      	ldr	r3, [sp, #24]
 800d6b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6b4:	2b47      	cmp	r3, #71	@ 0x47
 800d6b6:	4680      	mov	r8, r0
 800d6b8:	d129      	bne.n	800d70e <_printf_float+0x172>
 800d6ba:	1cc8      	adds	r0, r1, #3
 800d6bc:	db02      	blt.n	800d6c4 <_printf_float+0x128>
 800d6be:	6863      	ldr	r3, [r4, #4]
 800d6c0:	4299      	cmp	r1, r3
 800d6c2:	dd41      	ble.n	800d748 <_printf_float+0x1ac>
 800d6c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d6c8:	fa5f fa8a 	uxtb.w	sl, sl
 800d6cc:	3901      	subs	r1, #1
 800d6ce:	4652      	mov	r2, sl
 800d6d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d6d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d6d6:	f7ff ff26 	bl	800d526 <__exponent>
 800d6da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6dc:	1813      	adds	r3, r2, r0
 800d6de:	2a01      	cmp	r2, #1
 800d6e0:	4681      	mov	r9, r0
 800d6e2:	6123      	str	r3, [r4, #16]
 800d6e4:	dc02      	bgt.n	800d6ec <_printf_float+0x150>
 800d6e6:	6822      	ldr	r2, [r4, #0]
 800d6e8:	07d2      	lsls	r2, r2, #31
 800d6ea:	d501      	bpl.n	800d6f0 <_printf_float+0x154>
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	6123      	str	r3, [r4, #16]
 800d6f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0a2      	beq.n	800d63e <_printf_float+0xa2>
 800d6f8:	232d      	movs	r3, #45	@ 0x2d
 800d6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6fe:	e79e      	b.n	800d63e <_printf_float+0xa2>
 800d700:	9a06      	ldr	r2, [sp, #24]
 800d702:	2a47      	cmp	r2, #71	@ 0x47
 800d704:	d1c2      	bne.n	800d68c <_printf_float+0xf0>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1c0      	bne.n	800d68c <_printf_float+0xf0>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e7bd      	b.n	800d68a <_printf_float+0xee>
 800d70e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d712:	d9db      	bls.n	800d6cc <_printf_float+0x130>
 800d714:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d718:	d118      	bne.n	800d74c <_printf_float+0x1b0>
 800d71a:	2900      	cmp	r1, #0
 800d71c:	6863      	ldr	r3, [r4, #4]
 800d71e:	dd0b      	ble.n	800d738 <_printf_float+0x19c>
 800d720:	6121      	str	r1, [r4, #16]
 800d722:	b913      	cbnz	r3, 800d72a <_printf_float+0x18e>
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	07d0      	lsls	r0, r2, #31
 800d728:	d502      	bpl.n	800d730 <_printf_float+0x194>
 800d72a:	3301      	adds	r3, #1
 800d72c:	440b      	add	r3, r1
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d732:	f04f 0900 	mov.w	r9, #0
 800d736:	e7db      	b.n	800d6f0 <_printf_float+0x154>
 800d738:	b913      	cbnz	r3, 800d740 <_printf_float+0x1a4>
 800d73a:	6822      	ldr	r2, [r4, #0]
 800d73c:	07d2      	lsls	r2, r2, #31
 800d73e:	d501      	bpl.n	800d744 <_printf_float+0x1a8>
 800d740:	3302      	adds	r3, #2
 800d742:	e7f4      	b.n	800d72e <_printf_float+0x192>
 800d744:	2301      	movs	r3, #1
 800d746:	e7f2      	b.n	800d72e <_printf_float+0x192>
 800d748:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d74e:	4299      	cmp	r1, r3
 800d750:	db05      	blt.n	800d75e <_printf_float+0x1c2>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	6121      	str	r1, [r4, #16]
 800d756:	07d8      	lsls	r0, r3, #31
 800d758:	d5ea      	bpl.n	800d730 <_printf_float+0x194>
 800d75a:	1c4b      	adds	r3, r1, #1
 800d75c:	e7e7      	b.n	800d72e <_printf_float+0x192>
 800d75e:	2900      	cmp	r1, #0
 800d760:	bfd4      	ite	le
 800d762:	f1c1 0202 	rsble	r2, r1, #2
 800d766:	2201      	movgt	r2, #1
 800d768:	4413      	add	r3, r2
 800d76a:	e7e0      	b.n	800d72e <_printf_float+0x192>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	055a      	lsls	r2, r3, #21
 800d770:	d407      	bmi.n	800d782 <_printf_float+0x1e6>
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	4642      	mov	r2, r8
 800d776:	4631      	mov	r1, r6
 800d778:	4628      	mov	r0, r5
 800d77a:	47b8      	blx	r7
 800d77c:	3001      	adds	r0, #1
 800d77e:	d12b      	bne.n	800d7d8 <_printf_float+0x23c>
 800d780:	e767      	b.n	800d652 <_printf_float+0xb6>
 800d782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d786:	f240 80dd 	bls.w	800d944 <_printf_float+0x3a8>
 800d78a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d78e:	2200      	movs	r2, #0
 800d790:	2300      	movs	r3, #0
 800d792:	f7f3 f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 800d796:	2800      	cmp	r0, #0
 800d798:	d033      	beq.n	800d802 <_printf_float+0x266>
 800d79a:	4a37      	ldr	r2, [pc, #220]	@ (800d878 <_printf_float+0x2dc>)
 800d79c:	2301      	movs	r3, #1
 800d79e:	4631      	mov	r1, r6
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b8      	blx	r7
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	f43f af54 	beq.w	800d652 <_printf_float+0xb6>
 800d7aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d7ae:	4543      	cmp	r3, r8
 800d7b0:	db02      	blt.n	800d7b8 <_printf_float+0x21c>
 800d7b2:	6823      	ldr	r3, [r4, #0]
 800d7b4:	07d8      	lsls	r0, r3, #31
 800d7b6:	d50f      	bpl.n	800d7d8 <_printf_float+0x23c>
 800d7b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7bc:	4631      	mov	r1, r6
 800d7be:	4628      	mov	r0, r5
 800d7c0:	47b8      	blx	r7
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	f43f af45 	beq.w	800d652 <_printf_float+0xb6>
 800d7c8:	f04f 0900 	mov.w	r9, #0
 800d7cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7d0:	f104 0a1a 	add.w	sl, r4, #26
 800d7d4:	45c8      	cmp	r8, r9
 800d7d6:	dc09      	bgt.n	800d7ec <_printf_float+0x250>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	079b      	lsls	r3, r3, #30
 800d7dc:	f100 8103 	bmi.w	800d9e6 <_printf_float+0x44a>
 800d7e0:	68e0      	ldr	r0, [r4, #12]
 800d7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7e4:	4298      	cmp	r0, r3
 800d7e6:	bfb8      	it	lt
 800d7e8:	4618      	movlt	r0, r3
 800d7ea:	e734      	b.n	800d656 <_printf_float+0xba>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	4652      	mov	r2, sl
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af2b 	beq.w	800d652 <_printf_float+0xb6>
 800d7fc:	f109 0901 	add.w	r9, r9, #1
 800d800:	e7e8      	b.n	800d7d4 <_printf_float+0x238>
 800d802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc39      	bgt.n	800d87c <_printf_float+0x2e0>
 800d808:	4a1b      	ldr	r2, [pc, #108]	@ (800d878 <_printf_float+0x2dc>)
 800d80a:	2301      	movs	r3, #1
 800d80c:	4631      	mov	r1, r6
 800d80e:	4628      	mov	r0, r5
 800d810:	47b8      	blx	r7
 800d812:	3001      	adds	r0, #1
 800d814:	f43f af1d 	beq.w	800d652 <_printf_float+0xb6>
 800d818:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d81c:	ea59 0303 	orrs.w	r3, r9, r3
 800d820:	d102      	bne.n	800d828 <_printf_float+0x28c>
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	07d9      	lsls	r1, r3, #31
 800d826:	d5d7      	bpl.n	800d7d8 <_printf_float+0x23c>
 800d828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	47b8      	blx	r7
 800d832:	3001      	adds	r0, #1
 800d834:	f43f af0d 	beq.w	800d652 <_printf_float+0xb6>
 800d838:	f04f 0a00 	mov.w	sl, #0
 800d83c:	f104 0b1a 	add.w	fp, r4, #26
 800d840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d842:	425b      	negs	r3, r3
 800d844:	4553      	cmp	r3, sl
 800d846:	dc01      	bgt.n	800d84c <_printf_float+0x2b0>
 800d848:	464b      	mov	r3, r9
 800d84a:	e793      	b.n	800d774 <_printf_float+0x1d8>
 800d84c:	2301      	movs	r3, #1
 800d84e:	465a      	mov	r2, fp
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	f43f aefb 	beq.w	800d652 <_printf_float+0xb6>
 800d85c:	f10a 0a01 	add.w	sl, sl, #1
 800d860:	e7ee      	b.n	800d840 <_printf_float+0x2a4>
 800d862:	bf00      	nop
 800d864:	7fefffff 	.word	0x7fefffff
 800d868:	08010f70 	.word	0x08010f70
 800d86c:	08010f74 	.word	0x08010f74
 800d870:	08010f78 	.word	0x08010f78
 800d874:	08010f7c 	.word	0x08010f7c
 800d878:	08010f80 	.word	0x08010f80
 800d87c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d87e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d882:	4553      	cmp	r3, sl
 800d884:	bfa8      	it	ge
 800d886:	4653      	movge	r3, sl
 800d888:	2b00      	cmp	r3, #0
 800d88a:	4699      	mov	r9, r3
 800d88c:	dc36      	bgt.n	800d8fc <_printf_float+0x360>
 800d88e:	f04f 0b00 	mov.w	fp, #0
 800d892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d896:	f104 021a 	add.w	r2, r4, #26
 800d89a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d89c:	9306      	str	r3, [sp, #24]
 800d89e:	eba3 0309 	sub.w	r3, r3, r9
 800d8a2:	455b      	cmp	r3, fp
 800d8a4:	dc31      	bgt.n	800d90a <_printf_float+0x36e>
 800d8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a8:	459a      	cmp	sl, r3
 800d8aa:	dc3a      	bgt.n	800d922 <_printf_float+0x386>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	07da      	lsls	r2, r3, #31
 800d8b0:	d437      	bmi.n	800d922 <_printf_float+0x386>
 800d8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b4:	ebaa 0903 	sub.w	r9, sl, r3
 800d8b8:	9b06      	ldr	r3, [sp, #24]
 800d8ba:	ebaa 0303 	sub.w	r3, sl, r3
 800d8be:	4599      	cmp	r9, r3
 800d8c0:	bfa8      	it	ge
 800d8c2:	4699      	movge	r9, r3
 800d8c4:	f1b9 0f00 	cmp.w	r9, #0
 800d8c8:	dc33      	bgt.n	800d932 <_printf_float+0x396>
 800d8ca:	f04f 0800 	mov.w	r8, #0
 800d8ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8d2:	f104 0b1a 	add.w	fp, r4, #26
 800d8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d8:	ebaa 0303 	sub.w	r3, sl, r3
 800d8dc:	eba3 0309 	sub.w	r3, r3, r9
 800d8e0:	4543      	cmp	r3, r8
 800d8e2:	f77f af79 	ble.w	800d7d8 <_printf_float+0x23c>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	465a      	mov	r2, fp
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b8      	blx	r7
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f43f aeae 	beq.w	800d652 <_printf_float+0xb6>
 800d8f6:	f108 0801 	add.w	r8, r8, #1
 800d8fa:	e7ec      	b.n	800d8d6 <_printf_float+0x33a>
 800d8fc:	4642      	mov	r2, r8
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	d1c2      	bne.n	800d88e <_printf_float+0x2f2>
 800d908:	e6a3      	b.n	800d652 <_printf_float+0xb6>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4631      	mov	r1, r6
 800d90e:	4628      	mov	r0, r5
 800d910:	9206      	str	r2, [sp, #24]
 800d912:	47b8      	blx	r7
 800d914:	3001      	adds	r0, #1
 800d916:	f43f ae9c 	beq.w	800d652 <_printf_float+0xb6>
 800d91a:	9a06      	ldr	r2, [sp, #24]
 800d91c:	f10b 0b01 	add.w	fp, fp, #1
 800d920:	e7bb      	b.n	800d89a <_printf_float+0x2fe>
 800d922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d926:	4631      	mov	r1, r6
 800d928:	4628      	mov	r0, r5
 800d92a:	47b8      	blx	r7
 800d92c:	3001      	adds	r0, #1
 800d92e:	d1c0      	bne.n	800d8b2 <_printf_float+0x316>
 800d930:	e68f      	b.n	800d652 <_printf_float+0xb6>
 800d932:	9a06      	ldr	r2, [sp, #24]
 800d934:	464b      	mov	r3, r9
 800d936:	4442      	add	r2, r8
 800d938:	4631      	mov	r1, r6
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b8      	blx	r7
 800d93e:	3001      	adds	r0, #1
 800d940:	d1c3      	bne.n	800d8ca <_printf_float+0x32e>
 800d942:	e686      	b.n	800d652 <_printf_float+0xb6>
 800d944:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d948:	f1ba 0f01 	cmp.w	sl, #1
 800d94c:	dc01      	bgt.n	800d952 <_printf_float+0x3b6>
 800d94e:	07db      	lsls	r3, r3, #31
 800d950:	d536      	bpl.n	800d9c0 <_printf_float+0x424>
 800d952:	2301      	movs	r3, #1
 800d954:	4642      	mov	r2, r8
 800d956:	4631      	mov	r1, r6
 800d958:	4628      	mov	r0, r5
 800d95a:	47b8      	blx	r7
 800d95c:	3001      	adds	r0, #1
 800d95e:	f43f ae78 	beq.w	800d652 <_printf_float+0xb6>
 800d962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d966:	4631      	mov	r1, r6
 800d968:	4628      	mov	r0, r5
 800d96a:	47b8      	blx	r7
 800d96c:	3001      	adds	r0, #1
 800d96e:	f43f ae70 	beq.w	800d652 <_printf_float+0xb6>
 800d972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d976:	2200      	movs	r2, #0
 800d978:	2300      	movs	r3, #0
 800d97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d97e:	f7f3 f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 800d982:	b9c0      	cbnz	r0, 800d9b6 <_printf_float+0x41a>
 800d984:	4653      	mov	r3, sl
 800d986:	f108 0201 	add.w	r2, r8, #1
 800d98a:	4631      	mov	r1, r6
 800d98c:	4628      	mov	r0, r5
 800d98e:	47b8      	blx	r7
 800d990:	3001      	adds	r0, #1
 800d992:	d10c      	bne.n	800d9ae <_printf_float+0x412>
 800d994:	e65d      	b.n	800d652 <_printf_float+0xb6>
 800d996:	2301      	movs	r3, #1
 800d998:	465a      	mov	r2, fp
 800d99a:	4631      	mov	r1, r6
 800d99c:	4628      	mov	r0, r5
 800d99e:	47b8      	blx	r7
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	f43f ae56 	beq.w	800d652 <_printf_float+0xb6>
 800d9a6:	f108 0801 	add.w	r8, r8, #1
 800d9aa:	45d0      	cmp	r8, sl
 800d9ac:	dbf3      	blt.n	800d996 <_printf_float+0x3fa>
 800d9ae:	464b      	mov	r3, r9
 800d9b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d9b4:	e6df      	b.n	800d776 <_printf_float+0x1da>
 800d9b6:	f04f 0800 	mov.w	r8, #0
 800d9ba:	f104 0b1a 	add.w	fp, r4, #26
 800d9be:	e7f4      	b.n	800d9aa <_printf_float+0x40e>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	4642      	mov	r2, r8
 800d9c4:	e7e1      	b.n	800d98a <_printf_float+0x3ee>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	464a      	mov	r2, r9
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	f43f ae3e 	beq.w	800d652 <_printf_float+0xb6>
 800d9d6:	f108 0801 	add.w	r8, r8, #1
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9de:	1a5b      	subs	r3, r3, r1
 800d9e0:	4543      	cmp	r3, r8
 800d9e2:	dcf0      	bgt.n	800d9c6 <_printf_float+0x42a>
 800d9e4:	e6fc      	b.n	800d7e0 <_printf_float+0x244>
 800d9e6:	f04f 0800 	mov.w	r8, #0
 800d9ea:	f104 0919 	add.w	r9, r4, #25
 800d9ee:	e7f4      	b.n	800d9da <_printf_float+0x43e>

0800d9f0 <_printf_common>:
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	4698      	mov	r8, r3
 800d9f8:	688a      	ldr	r2, [r1, #8]
 800d9fa:	690b      	ldr	r3, [r1, #16]
 800d9fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da00:	4293      	cmp	r3, r2
 800da02:	bfb8      	it	lt
 800da04:	4613      	movlt	r3, r2
 800da06:	6033      	str	r3, [r6, #0]
 800da08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da0c:	4607      	mov	r7, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	b10a      	cbz	r2, 800da16 <_printf_common+0x26>
 800da12:	3301      	adds	r3, #1
 800da14:	6033      	str	r3, [r6, #0]
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	0699      	lsls	r1, r3, #26
 800da1a:	bf42      	ittt	mi
 800da1c:	6833      	ldrmi	r3, [r6, #0]
 800da1e:	3302      	addmi	r3, #2
 800da20:	6033      	strmi	r3, [r6, #0]
 800da22:	6825      	ldr	r5, [r4, #0]
 800da24:	f015 0506 	ands.w	r5, r5, #6
 800da28:	d106      	bne.n	800da38 <_printf_common+0x48>
 800da2a:	f104 0a19 	add.w	sl, r4, #25
 800da2e:	68e3      	ldr	r3, [r4, #12]
 800da30:	6832      	ldr	r2, [r6, #0]
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	42ab      	cmp	r3, r5
 800da36:	dc26      	bgt.n	800da86 <_printf_common+0x96>
 800da38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da3c:	6822      	ldr	r2, [r4, #0]
 800da3e:	3b00      	subs	r3, #0
 800da40:	bf18      	it	ne
 800da42:	2301      	movne	r3, #1
 800da44:	0692      	lsls	r2, r2, #26
 800da46:	d42b      	bmi.n	800daa0 <_printf_common+0xb0>
 800da48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da4c:	4641      	mov	r1, r8
 800da4e:	4638      	mov	r0, r7
 800da50:	47c8      	blx	r9
 800da52:	3001      	adds	r0, #1
 800da54:	d01e      	beq.n	800da94 <_printf_common+0xa4>
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	6922      	ldr	r2, [r4, #16]
 800da5a:	f003 0306 	and.w	r3, r3, #6
 800da5e:	2b04      	cmp	r3, #4
 800da60:	bf02      	ittt	eq
 800da62:	68e5      	ldreq	r5, [r4, #12]
 800da64:	6833      	ldreq	r3, [r6, #0]
 800da66:	1aed      	subeq	r5, r5, r3
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	bf0c      	ite	eq
 800da6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da70:	2500      	movne	r5, #0
 800da72:	4293      	cmp	r3, r2
 800da74:	bfc4      	itt	gt
 800da76:	1a9b      	subgt	r3, r3, r2
 800da78:	18ed      	addgt	r5, r5, r3
 800da7a:	2600      	movs	r6, #0
 800da7c:	341a      	adds	r4, #26
 800da7e:	42b5      	cmp	r5, r6
 800da80:	d11a      	bne.n	800dab8 <_printf_common+0xc8>
 800da82:	2000      	movs	r0, #0
 800da84:	e008      	b.n	800da98 <_printf_common+0xa8>
 800da86:	2301      	movs	r3, #1
 800da88:	4652      	mov	r2, sl
 800da8a:	4641      	mov	r1, r8
 800da8c:	4638      	mov	r0, r7
 800da8e:	47c8      	blx	r9
 800da90:	3001      	adds	r0, #1
 800da92:	d103      	bne.n	800da9c <_printf_common+0xac>
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9c:	3501      	adds	r5, #1
 800da9e:	e7c6      	b.n	800da2e <_printf_common+0x3e>
 800daa0:	18e1      	adds	r1, r4, r3
 800daa2:	1c5a      	adds	r2, r3, #1
 800daa4:	2030      	movs	r0, #48	@ 0x30
 800daa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800daaa:	4422      	add	r2, r4
 800daac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dab4:	3302      	adds	r3, #2
 800dab6:	e7c7      	b.n	800da48 <_printf_common+0x58>
 800dab8:	2301      	movs	r3, #1
 800daba:	4622      	mov	r2, r4
 800dabc:	4641      	mov	r1, r8
 800dabe:	4638      	mov	r0, r7
 800dac0:	47c8      	blx	r9
 800dac2:	3001      	adds	r0, #1
 800dac4:	d0e6      	beq.n	800da94 <_printf_common+0xa4>
 800dac6:	3601      	adds	r6, #1
 800dac8:	e7d9      	b.n	800da7e <_printf_common+0x8e>
	...

0800dacc <_printf_i>:
 800dacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	7e0f      	ldrb	r7, [r1, #24]
 800dad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dad4:	2f78      	cmp	r7, #120	@ 0x78
 800dad6:	4691      	mov	r9, r2
 800dad8:	4680      	mov	r8, r0
 800dada:	460c      	mov	r4, r1
 800dadc:	469a      	mov	sl, r3
 800dade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dae2:	d807      	bhi.n	800daf4 <_printf_i+0x28>
 800dae4:	2f62      	cmp	r7, #98	@ 0x62
 800dae6:	d80a      	bhi.n	800dafe <_printf_i+0x32>
 800dae8:	2f00      	cmp	r7, #0
 800daea:	f000 80d2 	beq.w	800dc92 <_printf_i+0x1c6>
 800daee:	2f58      	cmp	r7, #88	@ 0x58
 800daf0:	f000 80b9 	beq.w	800dc66 <_printf_i+0x19a>
 800daf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dafc:	e03a      	b.n	800db74 <_printf_i+0xa8>
 800dafe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db02:	2b15      	cmp	r3, #21
 800db04:	d8f6      	bhi.n	800daf4 <_printf_i+0x28>
 800db06:	a101      	add	r1, pc, #4	@ (adr r1, 800db0c <_printf_i+0x40>)
 800db08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db0c:	0800db65 	.word	0x0800db65
 800db10:	0800db79 	.word	0x0800db79
 800db14:	0800daf5 	.word	0x0800daf5
 800db18:	0800daf5 	.word	0x0800daf5
 800db1c:	0800daf5 	.word	0x0800daf5
 800db20:	0800daf5 	.word	0x0800daf5
 800db24:	0800db79 	.word	0x0800db79
 800db28:	0800daf5 	.word	0x0800daf5
 800db2c:	0800daf5 	.word	0x0800daf5
 800db30:	0800daf5 	.word	0x0800daf5
 800db34:	0800daf5 	.word	0x0800daf5
 800db38:	0800dc79 	.word	0x0800dc79
 800db3c:	0800dba3 	.word	0x0800dba3
 800db40:	0800dc33 	.word	0x0800dc33
 800db44:	0800daf5 	.word	0x0800daf5
 800db48:	0800daf5 	.word	0x0800daf5
 800db4c:	0800dc9b 	.word	0x0800dc9b
 800db50:	0800daf5 	.word	0x0800daf5
 800db54:	0800dba3 	.word	0x0800dba3
 800db58:	0800daf5 	.word	0x0800daf5
 800db5c:	0800daf5 	.word	0x0800daf5
 800db60:	0800dc3b 	.word	0x0800dc3b
 800db64:	6833      	ldr	r3, [r6, #0]
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6032      	str	r2, [r6, #0]
 800db6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db74:	2301      	movs	r3, #1
 800db76:	e09d      	b.n	800dcb4 <_printf_i+0x1e8>
 800db78:	6833      	ldr	r3, [r6, #0]
 800db7a:	6820      	ldr	r0, [r4, #0]
 800db7c:	1d19      	adds	r1, r3, #4
 800db7e:	6031      	str	r1, [r6, #0]
 800db80:	0606      	lsls	r6, r0, #24
 800db82:	d501      	bpl.n	800db88 <_printf_i+0xbc>
 800db84:	681d      	ldr	r5, [r3, #0]
 800db86:	e003      	b.n	800db90 <_printf_i+0xc4>
 800db88:	0645      	lsls	r5, r0, #25
 800db8a:	d5fb      	bpl.n	800db84 <_printf_i+0xb8>
 800db8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db90:	2d00      	cmp	r5, #0
 800db92:	da03      	bge.n	800db9c <_printf_i+0xd0>
 800db94:	232d      	movs	r3, #45	@ 0x2d
 800db96:	426d      	negs	r5, r5
 800db98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db9c:	4859      	ldr	r0, [pc, #356]	@ (800dd04 <_printf_i+0x238>)
 800db9e:	230a      	movs	r3, #10
 800dba0:	e011      	b.n	800dbc6 <_printf_i+0xfa>
 800dba2:	6821      	ldr	r1, [r4, #0]
 800dba4:	6833      	ldr	r3, [r6, #0]
 800dba6:	0608      	lsls	r0, r1, #24
 800dba8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbac:	d402      	bmi.n	800dbb4 <_printf_i+0xe8>
 800dbae:	0649      	lsls	r1, r1, #25
 800dbb0:	bf48      	it	mi
 800dbb2:	b2ad      	uxthmi	r5, r5
 800dbb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dbb6:	4853      	ldr	r0, [pc, #332]	@ (800dd04 <_printf_i+0x238>)
 800dbb8:	6033      	str	r3, [r6, #0]
 800dbba:	bf14      	ite	ne
 800dbbc:	230a      	movne	r3, #10
 800dbbe:	2308      	moveq	r3, #8
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dbc6:	6866      	ldr	r6, [r4, #4]
 800dbc8:	60a6      	str	r6, [r4, #8]
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	bfa2      	ittt	ge
 800dbce:	6821      	ldrge	r1, [r4, #0]
 800dbd0:	f021 0104 	bicge.w	r1, r1, #4
 800dbd4:	6021      	strge	r1, [r4, #0]
 800dbd6:	b90d      	cbnz	r5, 800dbdc <_printf_i+0x110>
 800dbd8:	2e00      	cmp	r6, #0
 800dbda:	d04b      	beq.n	800dc74 <_printf_i+0x1a8>
 800dbdc:	4616      	mov	r6, r2
 800dbde:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbe2:	fb03 5711 	mls	r7, r3, r1, r5
 800dbe6:	5dc7      	ldrb	r7, [r0, r7]
 800dbe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbec:	462f      	mov	r7, r5
 800dbee:	42bb      	cmp	r3, r7
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	d9f4      	bls.n	800dbde <_printf_i+0x112>
 800dbf4:	2b08      	cmp	r3, #8
 800dbf6:	d10b      	bne.n	800dc10 <_printf_i+0x144>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	07df      	lsls	r7, r3, #31
 800dbfc:	d508      	bpl.n	800dc10 <_printf_i+0x144>
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	6861      	ldr	r1, [r4, #4]
 800dc02:	4299      	cmp	r1, r3
 800dc04:	bfde      	ittt	le
 800dc06:	2330      	movle	r3, #48	@ 0x30
 800dc08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc10:	1b92      	subs	r2, r2, r6
 800dc12:	6122      	str	r2, [r4, #16]
 800dc14:	f8cd a000 	str.w	sl, [sp]
 800dc18:	464b      	mov	r3, r9
 800dc1a:	aa03      	add	r2, sp, #12
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4640      	mov	r0, r8
 800dc20:	f7ff fee6 	bl	800d9f0 <_printf_common>
 800dc24:	3001      	adds	r0, #1
 800dc26:	d14a      	bne.n	800dcbe <_printf_i+0x1f2>
 800dc28:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2c:	b004      	add	sp, #16
 800dc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	f043 0320 	orr.w	r3, r3, #32
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	4833      	ldr	r0, [pc, #204]	@ (800dd08 <_printf_i+0x23c>)
 800dc3c:	2778      	movs	r7, #120	@ 0x78
 800dc3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	6831      	ldr	r1, [r6, #0]
 800dc46:	061f      	lsls	r7, r3, #24
 800dc48:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc4c:	d402      	bmi.n	800dc54 <_printf_i+0x188>
 800dc4e:	065f      	lsls	r7, r3, #25
 800dc50:	bf48      	it	mi
 800dc52:	b2ad      	uxthmi	r5, r5
 800dc54:	6031      	str	r1, [r6, #0]
 800dc56:	07d9      	lsls	r1, r3, #31
 800dc58:	bf44      	itt	mi
 800dc5a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc5e:	6023      	strmi	r3, [r4, #0]
 800dc60:	b11d      	cbz	r5, 800dc6a <_printf_i+0x19e>
 800dc62:	2310      	movs	r3, #16
 800dc64:	e7ac      	b.n	800dbc0 <_printf_i+0xf4>
 800dc66:	4827      	ldr	r0, [pc, #156]	@ (800dd04 <_printf_i+0x238>)
 800dc68:	e7e9      	b.n	800dc3e <_printf_i+0x172>
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	f023 0320 	bic.w	r3, r3, #32
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	e7f6      	b.n	800dc62 <_printf_i+0x196>
 800dc74:	4616      	mov	r6, r2
 800dc76:	e7bd      	b.n	800dbf4 <_printf_i+0x128>
 800dc78:	6833      	ldr	r3, [r6, #0]
 800dc7a:	6825      	ldr	r5, [r4, #0]
 800dc7c:	6961      	ldr	r1, [r4, #20]
 800dc7e:	1d18      	adds	r0, r3, #4
 800dc80:	6030      	str	r0, [r6, #0]
 800dc82:	062e      	lsls	r6, r5, #24
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	d501      	bpl.n	800dc8c <_printf_i+0x1c0>
 800dc88:	6019      	str	r1, [r3, #0]
 800dc8a:	e002      	b.n	800dc92 <_printf_i+0x1c6>
 800dc8c:	0668      	lsls	r0, r5, #25
 800dc8e:	d5fb      	bpl.n	800dc88 <_printf_i+0x1bc>
 800dc90:	8019      	strh	r1, [r3, #0]
 800dc92:	2300      	movs	r3, #0
 800dc94:	6123      	str	r3, [r4, #16]
 800dc96:	4616      	mov	r6, r2
 800dc98:	e7bc      	b.n	800dc14 <_printf_i+0x148>
 800dc9a:	6833      	ldr	r3, [r6, #0]
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	6032      	str	r2, [r6, #0]
 800dca0:	681e      	ldr	r6, [r3, #0]
 800dca2:	6862      	ldr	r2, [r4, #4]
 800dca4:	2100      	movs	r1, #0
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7f2 fab2 	bl	8000210 <memchr>
 800dcac:	b108      	cbz	r0, 800dcb2 <_printf_i+0x1e6>
 800dcae:	1b80      	subs	r0, r0, r6
 800dcb0:	6060      	str	r0, [r4, #4]
 800dcb2:	6863      	ldr	r3, [r4, #4]
 800dcb4:	6123      	str	r3, [r4, #16]
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcbc:	e7aa      	b.n	800dc14 <_printf_i+0x148>
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	4632      	mov	r2, r6
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	4640      	mov	r0, r8
 800dcc6:	47d0      	blx	sl
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d0ad      	beq.n	800dc28 <_printf_i+0x15c>
 800dccc:	6823      	ldr	r3, [r4, #0]
 800dcce:	079b      	lsls	r3, r3, #30
 800dcd0:	d413      	bmi.n	800dcfa <_printf_i+0x22e>
 800dcd2:	68e0      	ldr	r0, [r4, #12]
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	4298      	cmp	r0, r3
 800dcd8:	bfb8      	it	lt
 800dcda:	4618      	movlt	r0, r3
 800dcdc:	e7a6      	b.n	800dc2c <_printf_i+0x160>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4632      	mov	r2, r6
 800dce2:	4649      	mov	r1, r9
 800dce4:	4640      	mov	r0, r8
 800dce6:	47d0      	blx	sl
 800dce8:	3001      	adds	r0, #1
 800dcea:	d09d      	beq.n	800dc28 <_printf_i+0x15c>
 800dcec:	3501      	adds	r5, #1
 800dcee:	68e3      	ldr	r3, [r4, #12]
 800dcf0:	9903      	ldr	r1, [sp, #12]
 800dcf2:	1a5b      	subs	r3, r3, r1
 800dcf4:	42ab      	cmp	r3, r5
 800dcf6:	dcf2      	bgt.n	800dcde <_printf_i+0x212>
 800dcf8:	e7eb      	b.n	800dcd2 <_printf_i+0x206>
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	f104 0619 	add.w	r6, r4, #25
 800dd00:	e7f5      	b.n	800dcee <_printf_i+0x222>
 800dd02:	bf00      	nop
 800dd04:	08010f82 	.word	0x08010f82
 800dd08:	08010f93 	.word	0x08010f93

0800dd0c <_scanf_float>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	b087      	sub	sp, #28
 800dd12:	4617      	mov	r7, r2
 800dd14:	9303      	str	r3, [sp, #12]
 800dd16:	688b      	ldr	r3, [r1, #8]
 800dd18:	1e5a      	subs	r2, r3, #1
 800dd1a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dd1e:	bf81      	itttt	hi
 800dd20:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dd24:	eb03 0b05 	addhi.w	fp, r3, r5
 800dd28:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dd2c:	608b      	strhi	r3, [r1, #8]
 800dd2e:	680b      	ldr	r3, [r1, #0]
 800dd30:	460a      	mov	r2, r1
 800dd32:	f04f 0500 	mov.w	r5, #0
 800dd36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800dd3a:	f842 3b1c 	str.w	r3, [r2], #28
 800dd3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd42:	4680      	mov	r8, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	bf98      	it	ls
 800dd48:	f04f 0b00 	movls.w	fp, #0
 800dd4c:	9201      	str	r2, [sp, #4]
 800dd4e:	4616      	mov	r6, r2
 800dd50:	46aa      	mov	sl, r5
 800dd52:	46a9      	mov	r9, r5
 800dd54:	9502      	str	r5, [sp, #8]
 800dd56:	68a2      	ldr	r2, [r4, #8]
 800dd58:	b152      	cbz	r2, 800dd70 <_scanf_float+0x64>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b4e      	cmp	r3, #78	@ 0x4e
 800dd60:	d864      	bhi.n	800de2c <_scanf_float+0x120>
 800dd62:	2b40      	cmp	r3, #64	@ 0x40
 800dd64:	d83c      	bhi.n	800dde0 <_scanf_float+0xd4>
 800dd66:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800dd6a:	b2c8      	uxtb	r0, r1
 800dd6c:	280e      	cmp	r0, #14
 800dd6e:	d93a      	bls.n	800dde6 <_scanf_float+0xda>
 800dd70:	f1b9 0f00 	cmp.w	r9, #0
 800dd74:	d003      	beq.n	800dd7e <_scanf_float+0x72>
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd82:	f1ba 0f01 	cmp.w	sl, #1
 800dd86:	f200 8117 	bhi.w	800dfb8 <_scanf_float+0x2ac>
 800dd8a:	9b01      	ldr	r3, [sp, #4]
 800dd8c:	429e      	cmp	r6, r3
 800dd8e:	f200 8108 	bhi.w	800dfa2 <_scanf_float+0x296>
 800dd92:	2001      	movs	r0, #1
 800dd94:	b007      	add	sp, #28
 800dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dd9e:	2a0d      	cmp	r2, #13
 800dda0:	d8e6      	bhi.n	800dd70 <_scanf_float+0x64>
 800dda2:	a101      	add	r1, pc, #4	@ (adr r1, 800dda8 <_scanf_float+0x9c>)
 800dda4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dda8:	0800deef 	.word	0x0800deef
 800ddac:	0800dd71 	.word	0x0800dd71
 800ddb0:	0800dd71 	.word	0x0800dd71
 800ddb4:	0800dd71 	.word	0x0800dd71
 800ddb8:	0800df4f 	.word	0x0800df4f
 800ddbc:	0800df27 	.word	0x0800df27
 800ddc0:	0800dd71 	.word	0x0800dd71
 800ddc4:	0800dd71 	.word	0x0800dd71
 800ddc8:	0800defd 	.word	0x0800defd
 800ddcc:	0800dd71 	.word	0x0800dd71
 800ddd0:	0800dd71 	.word	0x0800dd71
 800ddd4:	0800dd71 	.word	0x0800dd71
 800ddd8:	0800dd71 	.word	0x0800dd71
 800dddc:	0800deb5 	.word	0x0800deb5
 800dde0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dde4:	e7db      	b.n	800dd9e <_scanf_float+0x92>
 800dde6:	290e      	cmp	r1, #14
 800dde8:	d8c2      	bhi.n	800dd70 <_scanf_float+0x64>
 800ddea:	a001      	add	r0, pc, #4	@ (adr r0, 800ddf0 <_scanf_float+0xe4>)
 800ddec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ddf0:	0800dea5 	.word	0x0800dea5
 800ddf4:	0800dd71 	.word	0x0800dd71
 800ddf8:	0800dea5 	.word	0x0800dea5
 800ddfc:	0800df3b 	.word	0x0800df3b
 800de00:	0800dd71 	.word	0x0800dd71
 800de04:	0800de4d 	.word	0x0800de4d
 800de08:	0800de8b 	.word	0x0800de8b
 800de0c:	0800de8b 	.word	0x0800de8b
 800de10:	0800de8b 	.word	0x0800de8b
 800de14:	0800de8b 	.word	0x0800de8b
 800de18:	0800de8b 	.word	0x0800de8b
 800de1c:	0800de8b 	.word	0x0800de8b
 800de20:	0800de8b 	.word	0x0800de8b
 800de24:	0800de8b 	.word	0x0800de8b
 800de28:	0800de8b 	.word	0x0800de8b
 800de2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800de2e:	d809      	bhi.n	800de44 <_scanf_float+0x138>
 800de30:	2b60      	cmp	r3, #96	@ 0x60
 800de32:	d8b2      	bhi.n	800dd9a <_scanf_float+0x8e>
 800de34:	2b54      	cmp	r3, #84	@ 0x54
 800de36:	d07b      	beq.n	800df30 <_scanf_float+0x224>
 800de38:	2b59      	cmp	r3, #89	@ 0x59
 800de3a:	d199      	bne.n	800dd70 <_scanf_float+0x64>
 800de3c:	2d07      	cmp	r5, #7
 800de3e:	d197      	bne.n	800dd70 <_scanf_float+0x64>
 800de40:	2508      	movs	r5, #8
 800de42:	e02c      	b.n	800de9e <_scanf_float+0x192>
 800de44:	2b74      	cmp	r3, #116	@ 0x74
 800de46:	d073      	beq.n	800df30 <_scanf_float+0x224>
 800de48:	2b79      	cmp	r3, #121	@ 0x79
 800de4a:	e7f6      	b.n	800de3a <_scanf_float+0x12e>
 800de4c:	6821      	ldr	r1, [r4, #0]
 800de4e:	05c8      	lsls	r0, r1, #23
 800de50:	d51b      	bpl.n	800de8a <_scanf_float+0x17e>
 800de52:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800de56:	6021      	str	r1, [r4, #0]
 800de58:	f109 0901 	add.w	r9, r9, #1
 800de5c:	f1bb 0f00 	cmp.w	fp, #0
 800de60:	d003      	beq.n	800de6a <_scanf_float+0x15e>
 800de62:	3201      	adds	r2, #1
 800de64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de68:	60a2      	str	r2, [r4, #8]
 800de6a:	68a3      	ldr	r3, [r4, #8]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	60a3      	str	r3, [r4, #8]
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	3301      	adds	r3, #1
 800de74:	6123      	str	r3, [r4, #16]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	3b01      	subs	r3, #1
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	f340 8087 	ble.w	800df90 <_scanf_float+0x284>
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	3301      	adds	r3, #1
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	e765      	b.n	800dd56 <_scanf_float+0x4a>
 800de8a:	eb1a 0105 	adds.w	r1, sl, r5
 800de8e:	f47f af6f 	bne.w	800dd70 <_scanf_float+0x64>
 800de92:	6822      	ldr	r2, [r4, #0]
 800de94:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800de98:	6022      	str	r2, [r4, #0]
 800de9a:	460d      	mov	r5, r1
 800de9c:	468a      	mov	sl, r1
 800de9e:	f806 3b01 	strb.w	r3, [r6], #1
 800dea2:	e7e2      	b.n	800de6a <_scanf_float+0x15e>
 800dea4:	6822      	ldr	r2, [r4, #0]
 800dea6:	0610      	lsls	r0, r2, #24
 800dea8:	f57f af62 	bpl.w	800dd70 <_scanf_float+0x64>
 800deac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800deb0:	6022      	str	r2, [r4, #0]
 800deb2:	e7f4      	b.n	800de9e <_scanf_float+0x192>
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	d10e      	bne.n	800ded8 <_scanf_float+0x1cc>
 800deba:	f1b9 0f00 	cmp.w	r9, #0
 800debe:	d10e      	bne.n	800dede <_scanf_float+0x1d2>
 800dec0:	6822      	ldr	r2, [r4, #0]
 800dec2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dec6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800deca:	d108      	bne.n	800dede <_scanf_float+0x1d2>
 800decc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ded0:	6022      	str	r2, [r4, #0]
 800ded2:	f04f 0a01 	mov.w	sl, #1
 800ded6:	e7e2      	b.n	800de9e <_scanf_float+0x192>
 800ded8:	f1ba 0f02 	cmp.w	sl, #2
 800dedc:	d055      	beq.n	800df8a <_scanf_float+0x27e>
 800dede:	2d01      	cmp	r5, #1
 800dee0:	d002      	beq.n	800dee8 <_scanf_float+0x1dc>
 800dee2:	2d04      	cmp	r5, #4
 800dee4:	f47f af44 	bne.w	800dd70 <_scanf_float+0x64>
 800dee8:	3501      	adds	r5, #1
 800deea:	b2ed      	uxtb	r5, r5
 800deec:	e7d7      	b.n	800de9e <_scanf_float+0x192>
 800deee:	f1ba 0f01 	cmp.w	sl, #1
 800def2:	f47f af3d 	bne.w	800dd70 <_scanf_float+0x64>
 800def6:	f04f 0a02 	mov.w	sl, #2
 800defa:	e7d0      	b.n	800de9e <_scanf_float+0x192>
 800defc:	b97d      	cbnz	r5, 800df1e <_scanf_float+0x212>
 800defe:	f1b9 0f00 	cmp.w	r9, #0
 800df02:	f47f af38 	bne.w	800dd76 <_scanf_float+0x6a>
 800df06:	6822      	ldr	r2, [r4, #0]
 800df08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800df0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800df10:	f040 8108 	bne.w	800e124 <_scanf_float+0x418>
 800df14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df18:	6022      	str	r2, [r4, #0]
 800df1a:	2501      	movs	r5, #1
 800df1c:	e7bf      	b.n	800de9e <_scanf_float+0x192>
 800df1e:	2d03      	cmp	r5, #3
 800df20:	d0e2      	beq.n	800dee8 <_scanf_float+0x1dc>
 800df22:	2d05      	cmp	r5, #5
 800df24:	e7de      	b.n	800dee4 <_scanf_float+0x1d8>
 800df26:	2d02      	cmp	r5, #2
 800df28:	f47f af22 	bne.w	800dd70 <_scanf_float+0x64>
 800df2c:	2503      	movs	r5, #3
 800df2e:	e7b6      	b.n	800de9e <_scanf_float+0x192>
 800df30:	2d06      	cmp	r5, #6
 800df32:	f47f af1d 	bne.w	800dd70 <_scanf_float+0x64>
 800df36:	2507      	movs	r5, #7
 800df38:	e7b1      	b.n	800de9e <_scanf_float+0x192>
 800df3a:	6822      	ldr	r2, [r4, #0]
 800df3c:	0591      	lsls	r1, r2, #22
 800df3e:	f57f af17 	bpl.w	800dd70 <_scanf_float+0x64>
 800df42:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800df46:	6022      	str	r2, [r4, #0]
 800df48:	f8cd 9008 	str.w	r9, [sp, #8]
 800df4c:	e7a7      	b.n	800de9e <_scanf_float+0x192>
 800df4e:	6822      	ldr	r2, [r4, #0]
 800df50:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800df54:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800df58:	d006      	beq.n	800df68 <_scanf_float+0x25c>
 800df5a:	0550      	lsls	r0, r2, #21
 800df5c:	f57f af08 	bpl.w	800dd70 <_scanf_float+0x64>
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	f000 80de 	beq.w	800e124 <_scanf_float+0x418>
 800df68:	0591      	lsls	r1, r2, #22
 800df6a:	bf58      	it	pl
 800df6c:	9902      	ldrpl	r1, [sp, #8]
 800df6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df72:	bf58      	it	pl
 800df74:	eba9 0101 	subpl.w	r1, r9, r1
 800df78:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800df7c:	bf58      	it	pl
 800df7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df82:	6022      	str	r2, [r4, #0]
 800df84:	f04f 0900 	mov.w	r9, #0
 800df88:	e789      	b.n	800de9e <_scanf_float+0x192>
 800df8a:	f04f 0a03 	mov.w	sl, #3
 800df8e:	e786      	b.n	800de9e <_scanf_float+0x192>
 800df90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df94:	4639      	mov	r1, r7
 800df96:	4640      	mov	r0, r8
 800df98:	4798      	blx	r3
 800df9a:	2800      	cmp	r0, #0
 800df9c:	f43f aedb 	beq.w	800dd56 <_scanf_float+0x4a>
 800dfa0:	e6e6      	b.n	800dd70 <_scanf_float+0x64>
 800dfa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfaa:	463a      	mov	r2, r7
 800dfac:	4640      	mov	r0, r8
 800dfae:	4798      	blx	r3
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	6123      	str	r3, [r4, #16]
 800dfb6:	e6e8      	b.n	800dd8a <_scanf_float+0x7e>
 800dfb8:	1e6b      	subs	r3, r5, #1
 800dfba:	2b06      	cmp	r3, #6
 800dfbc:	d824      	bhi.n	800e008 <_scanf_float+0x2fc>
 800dfbe:	2d02      	cmp	r5, #2
 800dfc0:	d836      	bhi.n	800e030 <_scanf_float+0x324>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	429e      	cmp	r6, r3
 800dfc6:	f67f aee4 	bls.w	800dd92 <_scanf_float+0x86>
 800dfca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfd2:	463a      	mov	r2, r7
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	4798      	blx	r3
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	e7f0      	b.n	800dfc2 <_scanf_float+0x2b6>
 800dfe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dfe4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dfe8:	463a      	mov	r2, r7
 800dfea:	4640      	mov	r0, r8
 800dfec:	4798      	blx	r3
 800dfee:	6923      	ldr	r3, [r4, #16]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	6123      	str	r3, [r4, #16]
 800dff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dff8:	fa5f fa8a 	uxtb.w	sl, sl
 800dffc:	f1ba 0f02 	cmp.w	sl, #2
 800e000:	d1ee      	bne.n	800dfe0 <_scanf_float+0x2d4>
 800e002:	3d03      	subs	r5, #3
 800e004:	b2ed      	uxtb	r5, r5
 800e006:	1b76      	subs	r6, r6, r5
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	05da      	lsls	r2, r3, #23
 800e00c:	d530      	bpl.n	800e070 <_scanf_float+0x364>
 800e00e:	055b      	lsls	r3, r3, #21
 800e010:	d511      	bpl.n	800e036 <_scanf_float+0x32a>
 800e012:	9b01      	ldr	r3, [sp, #4]
 800e014:	429e      	cmp	r6, r3
 800e016:	f67f aebc 	bls.w	800dd92 <_scanf_float+0x86>
 800e01a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e01e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e022:	463a      	mov	r2, r7
 800e024:	4640      	mov	r0, r8
 800e026:	4798      	blx	r3
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	e7f0      	b.n	800e012 <_scanf_float+0x306>
 800e030:	46aa      	mov	sl, r5
 800e032:	46b3      	mov	fp, r6
 800e034:	e7de      	b.n	800dff4 <_scanf_float+0x2e8>
 800e036:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	2965      	cmp	r1, #101	@ 0x65
 800e03e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e042:	f106 35ff 	add.w	r5, r6, #4294967295
 800e046:	6123      	str	r3, [r4, #16]
 800e048:	d00c      	beq.n	800e064 <_scanf_float+0x358>
 800e04a:	2945      	cmp	r1, #69	@ 0x45
 800e04c:	d00a      	beq.n	800e064 <_scanf_float+0x358>
 800e04e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e052:	463a      	mov	r2, r7
 800e054:	4640      	mov	r0, r8
 800e056:	4798      	blx	r3
 800e058:	6923      	ldr	r3, [r4, #16]
 800e05a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e05e:	3b01      	subs	r3, #1
 800e060:	1eb5      	subs	r5, r6, #2
 800e062:	6123      	str	r3, [r4, #16]
 800e064:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e068:	463a      	mov	r2, r7
 800e06a:	4640      	mov	r0, r8
 800e06c:	4798      	blx	r3
 800e06e:	462e      	mov	r6, r5
 800e070:	6822      	ldr	r2, [r4, #0]
 800e072:	f012 0210 	ands.w	r2, r2, #16
 800e076:	d001      	beq.n	800e07c <_scanf_float+0x370>
 800e078:	2000      	movs	r0, #0
 800e07a:	e68b      	b.n	800dd94 <_scanf_float+0x88>
 800e07c:	7032      	strb	r2, [r6, #0]
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e088:	d11c      	bne.n	800e0c4 <_scanf_float+0x3b8>
 800e08a:	9b02      	ldr	r3, [sp, #8]
 800e08c:	454b      	cmp	r3, r9
 800e08e:	eba3 0209 	sub.w	r2, r3, r9
 800e092:	d123      	bne.n	800e0dc <_scanf_float+0x3d0>
 800e094:	9901      	ldr	r1, [sp, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	4640      	mov	r0, r8
 800e09a:	f7ff f9cd 	bl	800d438 <_strtod_r>
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	6821      	ldr	r1, [r4, #0]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f011 0f02 	tst.w	r1, #2
 800e0a8:	ec57 6b10 	vmov	r6, r7, d0
 800e0ac:	f103 0204 	add.w	r2, r3, #4
 800e0b0:	d01f      	beq.n	800e0f2 <_scanf_float+0x3e6>
 800e0b2:	9903      	ldr	r1, [sp, #12]
 800e0b4:	600a      	str	r2, [r1, #0]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	e9c3 6700 	strd	r6, r7, [r3]
 800e0bc:	68e3      	ldr	r3, [r4, #12]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	60e3      	str	r3, [r4, #12]
 800e0c2:	e7d9      	b.n	800e078 <_scanf_float+0x36c>
 800e0c4:	9b04      	ldr	r3, [sp, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0e4      	beq.n	800e094 <_scanf_float+0x388>
 800e0ca:	9905      	ldr	r1, [sp, #20]
 800e0cc:	230a      	movs	r3, #10
 800e0ce:	3101      	adds	r1, #1
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	f002 f923 	bl	801031c <_strtol_r>
 800e0d6:	9b04      	ldr	r3, [sp, #16]
 800e0d8:	9e05      	ldr	r6, [sp, #20]
 800e0da:	1ac2      	subs	r2, r0, r3
 800e0dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e0e0:	429e      	cmp	r6, r3
 800e0e2:	bf28      	it	cs
 800e0e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e0e8:	4910      	ldr	r1, [pc, #64]	@ (800e12c <_scanf_float+0x420>)
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f000 f8e4 	bl	800e2b8 <siprintf>
 800e0f0:	e7d0      	b.n	800e094 <_scanf_float+0x388>
 800e0f2:	f011 0f04 	tst.w	r1, #4
 800e0f6:	9903      	ldr	r1, [sp, #12]
 800e0f8:	600a      	str	r2, [r1, #0]
 800e0fa:	d1dc      	bne.n	800e0b6 <_scanf_float+0x3aa>
 800e0fc:	681d      	ldr	r5, [r3, #0]
 800e0fe:	4632      	mov	r2, r6
 800e100:	463b      	mov	r3, r7
 800e102:	4630      	mov	r0, r6
 800e104:	4639      	mov	r1, r7
 800e106:	f7f2 fd31 	bl	8000b6c <__aeabi_dcmpun>
 800e10a:	b128      	cbz	r0, 800e118 <_scanf_float+0x40c>
 800e10c:	4808      	ldr	r0, [pc, #32]	@ (800e130 <_scanf_float+0x424>)
 800e10e:	f000 f9ef 	bl	800e4f0 <nanf>
 800e112:	ed85 0a00 	vstr	s0, [r5]
 800e116:	e7d1      	b.n	800e0bc <_scanf_float+0x3b0>
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 fd84 	bl	8000c28 <__aeabi_d2f>
 800e120:	6028      	str	r0, [r5, #0]
 800e122:	e7cb      	b.n	800e0bc <_scanf_float+0x3b0>
 800e124:	f04f 0900 	mov.w	r9, #0
 800e128:	e629      	b.n	800dd7e <_scanf_float+0x72>
 800e12a:	bf00      	nop
 800e12c:	08010fa4 	.word	0x08010fa4
 800e130:	08011345 	.word	0x08011345

0800e134 <std>:
 800e134:	2300      	movs	r3, #0
 800e136:	b510      	push	{r4, lr}
 800e138:	4604      	mov	r4, r0
 800e13a:	e9c0 3300 	strd	r3, r3, [r0]
 800e13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e142:	6083      	str	r3, [r0, #8]
 800e144:	8181      	strh	r1, [r0, #12]
 800e146:	6643      	str	r3, [r0, #100]	@ 0x64
 800e148:	81c2      	strh	r2, [r0, #14]
 800e14a:	6183      	str	r3, [r0, #24]
 800e14c:	4619      	mov	r1, r3
 800e14e:	2208      	movs	r2, #8
 800e150:	305c      	adds	r0, #92	@ 0x5c
 800e152:	f000 f914 	bl	800e37e <memset>
 800e156:	4b0d      	ldr	r3, [pc, #52]	@ (800e18c <std+0x58>)
 800e158:	6263      	str	r3, [r4, #36]	@ 0x24
 800e15a:	4b0d      	ldr	r3, [pc, #52]	@ (800e190 <std+0x5c>)
 800e15c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e15e:	4b0d      	ldr	r3, [pc, #52]	@ (800e194 <std+0x60>)
 800e160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e162:	4b0d      	ldr	r3, [pc, #52]	@ (800e198 <std+0x64>)
 800e164:	6323      	str	r3, [r4, #48]	@ 0x30
 800e166:	4b0d      	ldr	r3, [pc, #52]	@ (800e19c <std+0x68>)
 800e168:	6224      	str	r4, [r4, #32]
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d006      	beq.n	800e17c <std+0x48>
 800e16e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e172:	4294      	cmp	r4, r2
 800e174:	d002      	beq.n	800e17c <std+0x48>
 800e176:	33d0      	adds	r3, #208	@ 0xd0
 800e178:	429c      	cmp	r4, r3
 800e17a:	d105      	bne.n	800e188 <std+0x54>
 800e17c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e184:	f000 b99a 	b.w	800e4bc <__retarget_lock_init_recursive>
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	bf00      	nop
 800e18c:	0800e2f9 	.word	0x0800e2f9
 800e190:	0800e31b 	.word	0x0800e31b
 800e194:	0800e353 	.word	0x0800e353
 800e198:	0800e377 	.word	0x0800e377
 800e19c:	20001c20 	.word	0x20001c20

0800e1a0 <stdio_exit_handler>:
 800e1a0:	4a02      	ldr	r2, [pc, #8]	@ (800e1ac <stdio_exit_handler+0xc>)
 800e1a2:	4903      	ldr	r1, [pc, #12]	@ (800e1b0 <stdio_exit_handler+0x10>)
 800e1a4:	4803      	ldr	r0, [pc, #12]	@ (800e1b4 <stdio_exit_handler+0x14>)
 800e1a6:	f000 b869 	b.w	800e27c <_fwalk_sglue>
 800e1aa:	bf00      	nop
 800e1ac:	20000124 	.word	0x20000124
 800e1b0:	080106f1 	.word	0x080106f1
 800e1b4:	200002a0 	.word	0x200002a0

0800e1b8 <cleanup_stdio>:
 800e1b8:	6841      	ldr	r1, [r0, #4]
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e1ec <cleanup_stdio+0x34>)
 800e1bc:	4299      	cmp	r1, r3
 800e1be:	b510      	push	{r4, lr}
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	d001      	beq.n	800e1c8 <cleanup_stdio+0x10>
 800e1c4:	f002 fa94 	bl	80106f0 <_fflush_r>
 800e1c8:	68a1      	ldr	r1, [r4, #8]
 800e1ca:	4b09      	ldr	r3, [pc, #36]	@ (800e1f0 <cleanup_stdio+0x38>)
 800e1cc:	4299      	cmp	r1, r3
 800e1ce:	d002      	beq.n	800e1d6 <cleanup_stdio+0x1e>
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f002 fa8d 	bl	80106f0 <_fflush_r>
 800e1d6:	68e1      	ldr	r1, [r4, #12]
 800e1d8:	4b06      	ldr	r3, [pc, #24]	@ (800e1f4 <cleanup_stdio+0x3c>)
 800e1da:	4299      	cmp	r1, r3
 800e1dc:	d004      	beq.n	800e1e8 <cleanup_stdio+0x30>
 800e1de:	4620      	mov	r0, r4
 800e1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e4:	f002 ba84 	b.w	80106f0 <_fflush_r>
 800e1e8:	bd10      	pop	{r4, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20001c20 	.word	0x20001c20
 800e1f0:	20001c88 	.word	0x20001c88
 800e1f4:	20001cf0 	.word	0x20001cf0

0800e1f8 <global_stdio_init.part.0>:
 800e1f8:	b510      	push	{r4, lr}
 800e1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e228 <global_stdio_init.part.0+0x30>)
 800e1fc:	4c0b      	ldr	r4, [pc, #44]	@ (800e22c <global_stdio_init.part.0+0x34>)
 800e1fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e230 <global_stdio_init.part.0+0x38>)
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	4620      	mov	r0, r4
 800e204:	2200      	movs	r2, #0
 800e206:	2104      	movs	r1, #4
 800e208:	f7ff ff94 	bl	800e134 <std>
 800e20c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e210:	2201      	movs	r2, #1
 800e212:	2109      	movs	r1, #9
 800e214:	f7ff ff8e 	bl	800e134 <std>
 800e218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e21c:	2202      	movs	r2, #2
 800e21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e222:	2112      	movs	r1, #18
 800e224:	f7ff bf86 	b.w	800e134 <std>
 800e228:	20001d58 	.word	0x20001d58
 800e22c:	20001c20 	.word	0x20001c20
 800e230:	0800e1a1 	.word	0x0800e1a1

0800e234 <__sfp_lock_acquire>:
 800e234:	4801      	ldr	r0, [pc, #4]	@ (800e23c <__sfp_lock_acquire+0x8>)
 800e236:	f000 b942 	b.w	800e4be <__retarget_lock_acquire_recursive>
 800e23a:	bf00      	nop
 800e23c:	20001d61 	.word	0x20001d61

0800e240 <__sfp_lock_release>:
 800e240:	4801      	ldr	r0, [pc, #4]	@ (800e248 <__sfp_lock_release+0x8>)
 800e242:	f000 b93d 	b.w	800e4c0 <__retarget_lock_release_recursive>
 800e246:	bf00      	nop
 800e248:	20001d61 	.word	0x20001d61

0800e24c <__sinit>:
 800e24c:	b510      	push	{r4, lr}
 800e24e:	4604      	mov	r4, r0
 800e250:	f7ff fff0 	bl	800e234 <__sfp_lock_acquire>
 800e254:	6a23      	ldr	r3, [r4, #32]
 800e256:	b11b      	cbz	r3, 800e260 <__sinit+0x14>
 800e258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e25c:	f7ff bff0 	b.w	800e240 <__sfp_lock_release>
 800e260:	4b04      	ldr	r3, [pc, #16]	@ (800e274 <__sinit+0x28>)
 800e262:	6223      	str	r3, [r4, #32]
 800e264:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <__sinit+0x2c>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1f5      	bne.n	800e258 <__sinit+0xc>
 800e26c:	f7ff ffc4 	bl	800e1f8 <global_stdio_init.part.0>
 800e270:	e7f2      	b.n	800e258 <__sinit+0xc>
 800e272:	bf00      	nop
 800e274:	0800e1b9 	.word	0x0800e1b9
 800e278:	20001d58 	.word	0x20001d58

0800e27c <_fwalk_sglue>:
 800e27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e280:	4607      	mov	r7, r0
 800e282:	4688      	mov	r8, r1
 800e284:	4614      	mov	r4, r2
 800e286:	2600      	movs	r6, #0
 800e288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e28c:	f1b9 0901 	subs.w	r9, r9, #1
 800e290:	d505      	bpl.n	800e29e <_fwalk_sglue+0x22>
 800e292:	6824      	ldr	r4, [r4, #0]
 800e294:	2c00      	cmp	r4, #0
 800e296:	d1f7      	bne.n	800e288 <_fwalk_sglue+0xc>
 800e298:	4630      	mov	r0, r6
 800e29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29e:	89ab      	ldrh	r3, [r5, #12]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d907      	bls.n	800e2b4 <_fwalk_sglue+0x38>
 800e2a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	d003      	beq.n	800e2b4 <_fwalk_sglue+0x38>
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	47c0      	blx	r8
 800e2b2:	4306      	orrs	r6, r0
 800e2b4:	3568      	adds	r5, #104	@ 0x68
 800e2b6:	e7e9      	b.n	800e28c <_fwalk_sglue+0x10>

0800e2b8 <siprintf>:
 800e2b8:	b40e      	push	{r1, r2, r3}
 800e2ba:	b500      	push	{lr}
 800e2bc:	b09c      	sub	sp, #112	@ 0x70
 800e2be:	ab1d      	add	r3, sp, #116	@ 0x74
 800e2c0:	9002      	str	r0, [sp, #8]
 800e2c2:	9006      	str	r0, [sp, #24]
 800e2c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e2c8:	4809      	ldr	r0, [pc, #36]	@ (800e2f0 <siprintf+0x38>)
 800e2ca:	9107      	str	r1, [sp, #28]
 800e2cc:	9104      	str	r1, [sp, #16]
 800e2ce:	4909      	ldr	r1, [pc, #36]	@ (800e2f4 <siprintf+0x3c>)
 800e2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2d4:	9105      	str	r1, [sp, #20]
 800e2d6:	6800      	ldr	r0, [r0, #0]
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	a902      	add	r1, sp, #8
 800e2dc:	f002 f888 	bl	80103f0 <_svfiprintf_r>
 800e2e0:	9b02      	ldr	r3, [sp, #8]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	701a      	strb	r2, [r3, #0]
 800e2e6:	b01c      	add	sp, #112	@ 0x70
 800e2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2ec:	b003      	add	sp, #12
 800e2ee:	4770      	bx	lr
 800e2f0:	2000029c 	.word	0x2000029c
 800e2f4:	ffff0208 	.word	0xffff0208

0800e2f8 <__sread>:
 800e2f8:	b510      	push	{r4, lr}
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e300:	f000 f87e 	bl	800e400 <_read_r>
 800e304:	2800      	cmp	r0, #0
 800e306:	bfab      	itete	ge
 800e308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e30a:	89a3      	ldrhlt	r3, [r4, #12]
 800e30c:	181b      	addge	r3, r3, r0
 800e30e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e312:	bfac      	ite	ge
 800e314:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e316:	81a3      	strhlt	r3, [r4, #12]
 800e318:	bd10      	pop	{r4, pc}

0800e31a <__swrite>:
 800e31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31e:	461f      	mov	r7, r3
 800e320:	898b      	ldrh	r3, [r1, #12]
 800e322:	05db      	lsls	r3, r3, #23
 800e324:	4605      	mov	r5, r0
 800e326:	460c      	mov	r4, r1
 800e328:	4616      	mov	r6, r2
 800e32a:	d505      	bpl.n	800e338 <__swrite+0x1e>
 800e32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e330:	2302      	movs	r3, #2
 800e332:	2200      	movs	r2, #0
 800e334:	f000 f852 	bl	800e3dc <_lseek_r>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e33e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	4632      	mov	r2, r6
 800e346:	463b      	mov	r3, r7
 800e348:	4628      	mov	r0, r5
 800e34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e34e:	f000 b879 	b.w	800e444 <_write_r>

0800e352 <__sseek>:
 800e352:	b510      	push	{r4, lr}
 800e354:	460c      	mov	r4, r1
 800e356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35a:	f000 f83f 	bl	800e3dc <_lseek_r>
 800e35e:	1c43      	adds	r3, r0, #1
 800e360:	89a3      	ldrh	r3, [r4, #12]
 800e362:	bf15      	itete	ne
 800e364:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e36a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e36e:	81a3      	strheq	r3, [r4, #12]
 800e370:	bf18      	it	ne
 800e372:	81a3      	strhne	r3, [r4, #12]
 800e374:	bd10      	pop	{r4, pc}

0800e376 <__sclose>:
 800e376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e37a:	f000 b81f 	b.w	800e3bc <_close_r>

0800e37e <memset>:
 800e37e:	4402      	add	r2, r0
 800e380:	4603      	mov	r3, r0
 800e382:	4293      	cmp	r3, r2
 800e384:	d100      	bne.n	800e388 <memset+0xa>
 800e386:	4770      	bx	lr
 800e388:	f803 1b01 	strb.w	r1, [r3], #1
 800e38c:	e7f9      	b.n	800e382 <memset+0x4>

0800e38e <strncmp>:
 800e38e:	b510      	push	{r4, lr}
 800e390:	b16a      	cbz	r2, 800e3ae <strncmp+0x20>
 800e392:	3901      	subs	r1, #1
 800e394:	1884      	adds	r4, r0, r2
 800e396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e39a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d103      	bne.n	800e3aa <strncmp+0x1c>
 800e3a2:	42a0      	cmp	r0, r4
 800e3a4:	d001      	beq.n	800e3aa <strncmp+0x1c>
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	d1f5      	bne.n	800e396 <strncmp+0x8>
 800e3aa:	1ad0      	subs	r0, r2, r3
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	e7fc      	b.n	800e3ac <strncmp+0x1e>
	...

0800e3b4 <_localeconv_r>:
 800e3b4:	4800      	ldr	r0, [pc, #0]	@ (800e3b8 <_localeconv_r+0x4>)
 800e3b6:	4770      	bx	lr
 800e3b8:	20000220 	.word	0x20000220

0800e3bc <_close_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4d06      	ldr	r5, [pc, #24]	@ (800e3d8 <_close_r+0x1c>)
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	602b      	str	r3, [r5, #0]
 800e3c8:	f7f5 fa3a 	bl	8003840 <_close>
 800e3cc:	1c43      	adds	r3, r0, #1
 800e3ce:	d102      	bne.n	800e3d6 <_close_r+0x1a>
 800e3d0:	682b      	ldr	r3, [r5, #0]
 800e3d2:	b103      	cbz	r3, 800e3d6 <_close_r+0x1a>
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	20001d5c 	.word	0x20001d5c

0800e3dc <_lseek_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d07      	ldr	r5, [pc, #28]	@ (800e3fc <_lseek_r+0x20>)
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	4608      	mov	r0, r1
 800e3e4:	4611      	mov	r1, r2
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	602a      	str	r2, [r5, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	f7f5 fa4f 	bl	800388e <_lseek>
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	d102      	bne.n	800e3fa <_lseek_r+0x1e>
 800e3f4:	682b      	ldr	r3, [r5, #0]
 800e3f6:	b103      	cbz	r3, 800e3fa <_lseek_r+0x1e>
 800e3f8:	6023      	str	r3, [r4, #0]
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	20001d5c 	.word	0x20001d5c

0800e400 <_read_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4d07      	ldr	r5, [pc, #28]	@ (800e420 <_read_r+0x20>)
 800e404:	4604      	mov	r4, r0
 800e406:	4608      	mov	r0, r1
 800e408:	4611      	mov	r1, r2
 800e40a:	2200      	movs	r2, #0
 800e40c:	602a      	str	r2, [r5, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	f7f5 f9dd 	bl	80037ce <_read>
 800e414:	1c43      	adds	r3, r0, #1
 800e416:	d102      	bne.n	800e41e <_read_r+0x1e>
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	b103      	cbz	r3, 800e41e <_read_r+0x1e>
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	bd38      	pop	{r3, r4, r5, pc}
 800e420:	20001d5c 	.word	0x20001d5c

0800e424 <_sbrk_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d06      	ldr	r5, [pc, #24]	@ (800e440 <_sbrk_r+0x1c>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4604      	mov	r4, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	602b      	str	r3, [r5, #0]
 800e430:	f7f5 fa3a 	bl	80038a8 <_sbrk>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_sbrk_r+0x1a>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_sbrk_r+0x1a>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	20001d5c 	.word	0x20001d5c

0800e444 <_write_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4d07      	ldr	r5, [pc, #28]	@ (800e464 <_write_r+0x20>)
 800e448:	4604      	mov	r4, r0
 800e44a:	4608      	mov	r0, r1
 800e44c:	4611      	mov	r1, r2
 800e44e:	2200      	movs	r2, #0
 800e450:	602a      	str	r2, [r5, #0]
 800e452:	461a      	mov	r2, r3
 800e454:	f7f5 f9d8 	bl	8003808 <_write>
 800e458:	1c43      	adds	r3, r0, #1
 800e45a:	d102      	bne.n	800e462 <_write_r+0x1e>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	b103      	cbz	r3, 800e462 <_write_r+0x1e>
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	20001d5c 	.word	0x20001d5c

0800e468 <__errno>:
 800e468:	4b01      	ldr	r3, [pc, #4]	@ (800e470 <__errno+0x8>)
 800e46a:	6818      	ldr	r0, [r3, #0]
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	2000029c 	.word	0x2000029c

0800e474 <__libc_init_array>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	4d0d      	ldr	r5, [pc, #52]	@ (800e4ac <__libc_init_array+0x38>)
 800e478:	4c0d      	ldr	r4, [pc, #52]	@ (800e4b0 <__libc_init_array+0x3c>)
 800e47a:	1b64      	subs	r4, r4, r5
 800e47c:	10a4      	asrs	r4, r4, #2
 800e47e:	2600      	movs	r6, #0
 800e480:	42a6      	cmp	r6, r4
 800e482:	d109      	bne.n	800e498 <__libc_init_array+0x24>
 800e484:	4d0b      	ldr	r5, [pc, #44]	@ (800e4b4 <__libc_init_array+0x40>)
 800e486:	4c0c      	ldr	r4, [pc, #48]	@ (800e4b8 <__libc_init_array+0x44>)
 800e488:	f002 fc92 	bl	8010db0 <_init>
 800e48c:	1b64      	subs	r4, r4, r5
 800e48e:	10a4      	asrs	r4, r4, #2
 800e490:	2600      	movs	r6, #0
 800e492:	42a6      	cmp	r6, r4
 800e494:	d105      	bne.n	800e4a2 <__libc_init_array+0x2e>
 800e496:	bd70      	pop	{r4, r5, r6, pc}
 800e498:	f855 3b04 	ldr.w	r3, [r5], #4
 800e49c:	4798      	blx	r3
 800e49e:	3601      	adds	r6, #1
 800e4a0:	e7ee      	b.n	800e480 <__libc_init_array+0xc>
 800e4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4a6:	4798      	blx	r3
 800e4a8:	3601      	adds	r6, #1
 800e4aa:	e7f2      	b.n	800e492 <__libc_init_array+0x1e>
 800e4ac:	08011350 	.word	0x08011350
 800e4b0:	08011350 	.word	0x08011350
 800e4b4:	08011350 	.word	0x08011350
 800e4b8:	08011354 	.word	0x08011354

0800e4bc <__retarget_lock_init_recursive>:
 800e4bc:	4770      	bx	lr

0800e4be <__retarget_lock_acquire_recursive>:
 800e4be:	4770      	bx	lr

0800e4c0 <__retarget_lock_release_recursive>:
 800e4c0:	4770      	bx	lr

0800e4c2 <memcpy>:
 800e4c2:	440a      	add	r2, r1
 800e4c4:	4291      	cmp	r1, r2
 800e4c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4ca:	d100      	bne.n	800e4ce <memcpy+0xc>
 800e4cc:	4770      	bx	lr
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4d8:	4291      	cmp	r1, r2
 800e4da:	d1f9      	bne.n	800e4d0 <memcpy+0xe>
 800e4dc:	bd10      	pop	{r4, pc}
	...

0800e4e0 <nan>:
 800e4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e4e8 <nan+0x8>
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	7ff80000 	.word	0x7ff80000

0800e4f0 <nanf>:
 800e4f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e4f8 <nanf+0x8>
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	7fc00000 	.word	0x7fc00000

0800e4fc <quorem>:
 800e4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	6903      	ldr	r3, [r0, #16]
 800e502:	690c      	ldr	r4, [r1, #16]
 800e504:	42a3      	cmp	r3, r4
 800e506:	4607      	mov	r7, r0
 800e508:	db7e      	blt.n	800e608 <quorem+0x10c>
 800e50a:	3c01      	subs	r4, #1
 800e50c:	f101 0814 	add.w	r8, r1, #20
 800e510:	00a3      	lsls	r3, r4, #2
 800e512:	f100 0514 	add.w	r5, r0, #20
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e526:	3301      	adds	r3, #1
 800e528:	429a      	cmp	r2, r3
 800e52a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e52e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e532:	d32e      	bcc.n	800e592 <quorem+0x96>
 800e534:	f04f 0a00 	mov.w	sl, #0
 800e538:	46c4      	mov	ip, r8
 800e53a:	46ae      	mov	lr, r5
 800e53c:	46d3      	mov	fp, sl
 800e53e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e542:	b298      	uxth	r0, r3
 800e544:	fb06 a000 	mla	r0, r6, r0, sl
 800e548:	0c02      	lsrs	r2, r0, #16
 800e54a:	0c1b      	lsrs	r3, r3, #16
 800e54c:	fb06 2303 	mla	r3, r6, r3, r2
 800e550:	f8de 2000 	ldr.w	r2, [lr]
 800e554:	b280      	uxth	r0, r0
 800e556:	b292      	uxth	r2, r2
 800e558:	1a12      	subs	r2, r2, r0
 800e55a:	445a      	add	r2, fp
 800e55c:	f8de 0000 	ldr.w	r0, [lr]
 800e560:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e564:	b29b      	uxth	r3, r3
 800e566:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e56a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e56e:	b292      	uxth	r2, r2
 800e570:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e574:	45e1      	cmp	r9, ip
 800e576:	f84e 2b04 	str.w	r2, [lr], #4
 800e57a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e57e:	d2de      	bcs.n	800e53e <quorem+0x42>
 800e580:	9b00      	ldr	r3, [sp, #0]
 800e582:	58eb      	ldr	r3, [r5, r3]
 800e584:	b92b      	cbnz	r3, 800e592 <quorem+0x96>
 800e586:	9b01      	ldr	r3, [sp, #4]
 800e588:	3b04      	subs	r3, #4
 800e58a:	429d      	cmp	r5, r3
 800e58c:	461a      	mov	r2, r3
 800e58e:	d32f      	bcc.n	800e5f0 <quorem+0xf4>
 800e590:	613c      	str	r4, [r7, #16]
 800e592:	4638      	mov	r0, r7
 800e594:	f001 fc5a 	bl	800fe4c <__mcmp>
 800e598:	2800      	cmp	r0, #0
 800e59a:	db25      	blt.n	800e5e8 <quorem+0xec>
 800e59c:	4629      	mov	r1, r5
 800e59e:	2000      	movs	r0, #0
 800e5a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e5a4:	f8d1 c000 	ldr.w	ip, [r1]
 800e5a8:	fa1f fe82 	uxth.w	lr, r2
 800e5ac:	fa1f f38c 	uxth.w	r3, ip
 800e5b0:	eba3 030e 	sub.w	r3, r3, lr
 800e5b4:	4403      	add	r3, r0
 800e5b6:	0c12      	lsrs	r2, r2, #16
 800e5b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e5bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5c6:	45c1      	cmp	r9, r8
 800e5c8:	f841 3b04 	str.w	r3, [r1], #4
 800e5cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e5d0:	d2e6      	bcs.n	800e5a0 <quorem+0xa4>
 800e5d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5da:	b922      	cbnz	r2, 800e5e6 <quorem+0xea>
 800e5dc:	3b04      	subs	r3, #4
 800e5de:	429d      	cmp	r5, r3
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	d30b      	bcc.n	800e5fc <quorem+0x100>
 800e5e4:	613c      	str	r4, [r7, #16]
 800e5e6:	3601      	adds	r6, #1
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	b003      	add	sp, #12
 800e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f0:	6812      	ldr	r2, [r2, #0]
 800e5f2:	3b04      	subs	r3, #4
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	d1cb      	bne.n	800e590 <quorem+0x94>
 800e5f8:	3c01      	subs	r4, #1
 800e5fa:	e7c6      	b.n	800e58a <quorem+0x8e>
 800e5fc:	6812      	ldr	r2, [r2, #0]
 800e5fe:	3b04      	subs	r3, #4
 800e600:	2a00      	cmp	r2, #0
 800e602:	d1ef      	bne.n	800e5e4 <quorem+0xe8>
 800e604:	3c01      	subs	r4, #1
 800e606:	e7ea      	b.n	800e5de <quorem+0xe2>
 800e608:	2000      	movs	r0, #0
 800e60a:	e7ee      	b.n	800e5ea <quorem+0xee>
 800e60c:	0000      	movs	r0, r0
	...

0800e610 <_dtoa_r>:
 800e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	69c7      	ldr	r7, [r0, #28]
 800e616:	b099      	sub	sp, #100	@ 0x64
 800e618:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e61c:	ec55 4b10 	vmov	r4, r5, d0
 800e620:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e622:	9109      	str	r1, [sp, #36]	@ 0x24
 800e624:	4683      	mov	fp, r0
 800e626:	920e      	str	r2, [sp, #56]	@ 0x38
 800e628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e62a:	b97f      	cbnz	r7, 800e64c <_dtoa_r+0x3c>
 800e62c:	2010      	movs	r0, #16
 800e62e:	f7fe f849 	bl	800c6c4 <malloc>
 800e632:	4602      	mov	r2, r0
 800e634:	f8cb 001c 	str.w	r0, [fp, #28]
 800e638:	b920      	cbnz	r0, 800e644 <_dtoa_r+0x34>
 800e63a:	4ba7      	ldr	r3, [pc, #668]	@ (800e8d8 <_dtoa_r+0x2c8>)
 800e63c:	21ef      	movs	r1, #239	@ 0xef
 800e63e:	48a7      	ldr	r0, [pc, #668]	@ (800e8dc <_dtoa_r+0x2cc>)
 800e640:	f002 f898 	bl	8010774 <__assert_func>
 800e644:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e648:	6007      	str	r7, [r0, #0]
 800e64a:	60c7      	str	r7, [r0, #12]
 800e64c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e650:	6819      	ldr	r1, [r3, #0]
 800e652:	b159      	cbz	r1, 800e66c <_dtoa_r+0x5c>
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	604a      	str	r2, [r1, #4]
 800e658:	2301      	movs	r3, #1
 800e65a:	4093      	lsls	r3, r2
 800e65c:	608b      	str	r3, [r1, #8]
 800e65e:	4658      	mov	r0, fp
 800e660:	f001 f970 	bl	800f944 <_Bfree>
 800e664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e668:	2200      	movs	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	1e2b      	subs	r3, r5, #0
 800e66e:	bfb9      	ittee	lt
 800e670:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e674:	9303      	strlt	r3, [sp, #12]
 800e676:	2300      	movge	r3, #0
 800e678:	6033      	strge	r3, [r6, #0]
 800e67a:	9f03      	ldr	r7, [sp, #12]
 800e67c:	4b98      	ldr	r3, [pc, #608]	@ (800e8e0 <_dtoa_r+0x2d0>)
 800e67e:	bfbc      	itt	lt
 800e680:	2201      	movlt	r2, #1
 800e682:	6032      	strlt	r2, [r6, #0]
 800e684:	43bb      	bics	r3, r7
 800e686:	d112      	bne.n	800e6ae <_dtoa_r+0x9e>
 800e688:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e68a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e694:	4323      	orrs	r3, r4
 800e696:	f000 854d 	beq.w	800f134 <_dtoa_r+0xb24>
 800e69a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e69c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e8f4 <_dtoa_r+0x2e4>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 854f 	beq.w	800f144 <_dtoa_r+0xb34>
 800e6a6:	f10a 0303 	add.w	r3, sl, #3
 800e6aa:	f000 bd49 	b.w	800f140 <_dtoa_r+0xb30>
 800e6ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	ec51 0b17 	vmov	r0, r1, d7
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e6be:	f7f2 fa23 	bl	8000b08 <__aeabi_dcmpeq>
 800e6c2:	4680      	mov	r8, r0
 800e6c4:	b158      	cbz	r0, 800e6de <_dtoa_r+0xce>
 800e6c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	6013      	str	r3, [r2, #0]
 800e6cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6ce:	b113      	cbz	r3, 800e6d6 <_dtoa_r+0xc6>
 800e6d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e6d2:	4b84      	ldr	r3, [pc, #528]	@ (800e8e4 <_dtoa_r+0x2d4>)
 800e6d4:	6013      	str	r3, [r2, #0]
 800e6d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e8f8 <_dtoa_r+0x2e8>
 800e6da:	f000 bd33 	b.w	800f144 <_dtoa_r+0xb34>
 800e6de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e6e2:	aa16      	add	r2, sp, #88	@ 0x58
 800e6e4:	a917      	add	r1, sp, #92	@ 0x5c
 800e6e6:	4658      	mov	r0, fp
 800e6e8:	f001 fcd0 	bl	801008c <__d2b>
 800e6ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e6f0:	4681      	mov	r9, r0
 800e6f2:	2e00      	cmp	r6, #0
 800e6f4:	d077      	beq.n	800e7e6 <_dtoa_r+0x1d6>
 800e6f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e704:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e708:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e70c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e710:	4619      	mov	r1, r3
 800e712:	2200      	movs	r2, #0
 800e714:	4b74      	ldr	r3, [pc, #464]	@ (800e8e8 <_dtoa_r+0x2d8>)
 800e716:	f7f1 fdd7 	bl	80002c8 <__aeabi_dsub>
 800e71a:	a369      	add	r3, pc, #420	@ (adr r3, 800e8c0 <_dtoa_r+0x2b0>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f7f1 ff8a 	bl	8000638 <__aeabi_dmul>
 800e724:	a368      	add	r3, pc, #416	@ (adr r3, 800e8c8 <_dtoa_r+0x2b8>)
 800e726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72a:	f7f1 fdcf 	bl	80002cc <__adddf3>
 800e72e:	4604      	mov	r4, r0
 800e730:	4630      	mov	r0, r6
 800e732:	460d      	mov	r5, r1
 800e734:	f7f1 ff16 	bl	8000564 <__aeabi_i2d>
 800e738:	a365      	add	r3, pc, #404	@ (adr r3, 800e8d0 <_dtoa_r+0x2c0>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f1 ff7b 	bl	8000638 <__aeabi_dmul>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4620      	mov	r0, r4
 800e748:	4629      	mov	r1, r5
 800e74a:	f7f1 fdbf 	bl	80002cc <__adddf3>
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	f7f2 fa21 	bl	8000b98 <__aeabi_d2iz>
 800e756:	2200      	movs	r2, #0
 800e758:	4607      	mov	r7, r0
 800e75a:	2300      	movs	r3, #0
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f2 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800e764:	b140      	cbz	r0, 800e778 <_dtoa_r+0x168>
 800e766:	4638      	mov	r0, r7
 800e768:	f7f1 fefc 	bl	8000564 <__aeabi_i2d>
 800e76c:	4622      	mov	r2, r4
 800e76e:	462b      	mov	r3, r5
 800e770:	f7f2 f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 800e774:	b900      	cbnz	r0, 800e778 <_dtoa_r+0x168>
 800e776:	3f01      	subs	r7, #1
 800e778:	2f16      	cmp	r7, #22
 800e77a:	d851      	bhi.n	800e820 <_dtoa_r+0x210>
 800e77c:	4b5b      	ldr	r3, [pc, #364]	@ (800e8ec <_dtoa_r+0x2dc>)
 800e77e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e78a:	f7f2 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800e78e:	2800      	cmp	r0, #0
 800e790:	d048      	beq.n	800e824 <_dtoa_r+0x214>
 800e792:	3f01      	subs	r7, #1
 800e794:	2300      	movs	r3, #0
 800e796:	9312      	str	r3, [sp, #72]	@ 0x48
 800e798:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e79a:	1b9b      	subs	r3, r3, r6
 800e79c:	1e5a      	subs	r2, r3, #1
 800e79e:	bf44      	itt	mi
 800e7a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e7a4:	2300      	movmi	r3, #0
 800e7a6:	9208      	str	r2, [sp, #32]
 800e7a8:	bf54      	ite	pl
 800e7aa:	f04f 0800 	movpl.w	r8, #0
 800e7ae:	9308      	strmi	r3, [sp, #32]
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	db39      	blt.n	800e828 <_dtoa_r+0x218>
 800e7b4:	9b08      	ldr	r3, [sp, #32]
 800e7b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e7b8:	443b      	add	r3, r7
 800e7ba:	9308      	str	r3, [sp, #32]
 800e7bc:	2300      	movs	r3, #0
 800e7be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c2:	2b09      	cmp	r3, #9
 800e7c4:	d864      	bhi.n	800e890 <_dtoa_r+0x280>
 800e7c6:	2b05      	cmp	r3, #5
 800e7c8:	bfc4      	itt	gt
 800e7ca:	3b04      	subgt	r3, #4
 800e7cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7d0:	f1a3 0302 	sub.w	r3, r3, #2
 800e7d4:	bfcc      	ite	gt
 800e7d6:	2400      	movgt	r4, #0
 800e7d8:	2401      	movle	r4, #1
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d863      	bhi.n	800e8a6 <_dtoa_r+0x296>
 800e7de:	e8df f003 	tbb	[pc, r3]
 800e7e2:	372a      	.short	0x372a
 800e7e4:	5535      	.short	0x5535
 800e7e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e7ea:	441e      	add	r6, r3
 800e7ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7f0:	2b20      	cmp	r3, #32
 800e7f2:	bfc1      	itttt	gt
 800e7f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7f8:	409f      	lslgt	r7, r3
 800e7fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e802:	bfd6      	itet	le
 800e804:	f1c3 0320 	rsble	r3, r3, #32
 800e808:	ea47 0003 	orrgt.w	r0, r7, r3
 800e80c:	fa04 f003 	lslle.w	r0, r4, r3
 800e810:	f7f1 fe98 	bl	8000544 <__aeabi_ui2d>
 800e814:	2201      	movs	r2, #1
 800e816:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e81a:	3e01      	subs	r6, #1
 800e81c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e81e:	e777      	b.n	800e710 <_dtoa_r+0x100>
 800e820:	2301      	movs	r3, #1
 800e822:	e7b8      	b.n	800e796 <_dtoa_r+0x186>
 800e824:	9012      	str	r0, [sp, #72]	@ 0x48
 800e826:	e7b7      	b.n	800e798 <_dtoa_r+0x188>
 800e828:	427b      	negs	r3, r7
 800e82a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e82c:	2300      	movs	r3, #0
 800e82e:	eba8 0807 	sub.w	r8, r8, r7
 800e832:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e834:	e7c4      	b.n	800e7c0 <_dtoa_r+0x1b0>
 800e836:	2300      	movs	r3, #0
 800e838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dc35      	bgt.n	800e8ac <_dtoa_r+0x29c>
 800e840:	2301      	movs	r3, #1
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	9307      	str	r3, [sp, #28]
 800e846:	461a      	mov	r2, r3
 800e848:	920e      	str	r2, [sp, #56]	@ 0x38
 800e84a:	e00b      	b.n	800e864 <_dtoa_r+0x254>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e7f3      	b.n	800e838 <_dtoa_r+0x228>
 800e850:	2300      	movs	r3, #0
 800e852:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e856:	18fb      	adds	r3, r7, r3
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	3301      	adds	r3, #1
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	bfb8      	it	lt
 800e862:	2301      	movlt	r3, #1
 800e864:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e868:	2100      	movs	r1, #0
 800e86a:	2204      	movs	r2, #4
 800e86c:	f102 0514 	add.w	r5, r2, #20
 800e870:	429d      	cmp	r5, r3
 800e872:	d91f      	bls.n	800e8b4 <_dtoa_r+0x2a4>
 800e874:	6041      	str	r1, [r0, #4]
 800e876:	4658      	mov	r0, fp
 800e878:	f001 f824 	bl	800f8c4 <_Balloc>
 800e87c:	4682      	mov	sl, r0
 800e87e:	2800      	cmp	r0, #0
 800e880:	d13c      	bne.n	800e8fc <_dtoa_r+0x2ec>
 800e882:	4b1b      	ldr	r3, [pc, #108]	@ (800e8f0 <_dtoa_r+0x2e0>)
 800e884:	4602      	mov	r2, r0
 800e886:	f240 11af 	movw	r1, #431	@ 0x1af
 800e88a:	e6d8      	b.n	800e63e <_dtoa_r+0x2e>
 800e88c:	2301      	movs	r3, #1
 800e88e:	e7e0      	b.n	800e852 <_dtoa_r+0x242>
 800e890:	2401      	movs	r4, #1
 800e892:	2300      	movs	r3, #0
 800e894:	9309      	str	r3, [sp, #36]	@ 0x24
 800e896:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e898:	f04f 33ff 	mov.w	r3, #4294967295
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	9307      	str	r3, [sp, #28]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	2312      	movs	r3, #18
 800e8a4:	e7d0      	b.n	800e848 <_dtoa_r+0x238>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8aa:	e7f5      	b.n	800e898 <_dtoa_r+0x288>
 800e8ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	e7d7      	b.n	800e864 <_dtoa_r+0x254>
 800e8b4:	3101      	adds	r1, #1
 800e8b6:	0052      	lsls	r2, r2, #1
 800e8b8:	e7d8      	b.n	800e86c <_dtoa_r+0x25c>
 800e8ba:	bf00      	nop
 800e8bc:	f3af 8000 	nop.w
 800e8c0:	636f4361 	.word	0x636f4361
 800e8c4:	3fd287a7 	.word	0x3fd287a7
 800e8c8:	8b60c8b3 	.word	0x8b60c8b3
 800e8cc:	3fc68a28 	.word	0x3fc68a28
 800e8d0:	509f79fb 	.word	0x509f79fb
 800e8d4:	3fd34413 	.word	0x3fd34413
 800e8d8:	08010fbe 	.word	0x08010fbe
 800e8dc:	08010fd5 	.word	0x08010fd5
 800e8e0:	7ff00000 	.word	0x7ff00000
 800e8e4:	08010f81 	.word	0x08010f81
 800e8e8:	3ff80000 	.word	0x3ff80000
 800e8ec:	08011130 	.word	0x08011130
 800e8f0:	0801102d 	.word	0x0801102d
 800e8f4:	08010fba 	.word	0x08010fba
 800e8f8:	08010f80 	.word	0x08010f80
 800e8fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e900:	6018      	str	r0, [r3, #0]
 800e902:	9b07      	ldr	r3, [sp, #28]
 800e904:	2b0e      	cmp	r3, #14
 800e906:	f200 80a4 	bhi.w	800ea52 <_dtoa_r+0x442>
 800e90a:	2c00      	cmp	r4, #0
 800e90c:	f000 80a1 	beq.w	800ea52 <_dtoa_r+0x442>
 800e910:	2f00      	cmp	r7, #0
 800e912:	dd33      	ble.n	800e97c <_dtoa_r+0x36c>
 800e914:	4bad      	ldr	r3, [pc, #692]	@ (800ebcc <_dtoa_r+0x5bc>)
 800e916:	f007 020f 	and.w	r2, r7, #15
 800e91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e91e:	ed93 7b00 	vldr	d7, [r3]
 800e922:	05f8      	lsls	r0, r7, #23
 800e924:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e928:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e92c:	d516      	bpl.n	800e95c <_dtoa_r+0x34c>
 800e92e:	4ba8      	ldr	r3, [pc, #672]	@ (800ebd0 <_dtoa_r+0x5c0>)
 800e930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e938:	f7f1 ffa8 	bl	800088c <__aeabi_ddiv>
 800e93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e940:	f004 040f 	and.w	r4, r4, #15
 800e944:	2603      	movs	r6, #3
 800e946:	4da2      	ldr	r5, [pc, #648]	@ (800ebd0 <_dtoa_r+0x5c0>)
 800e948:	b954      	cbnz	r4, 800e960 <_dtoa_r+0x350>
 800e94a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e952:	f7f1 ff9b 	bl	800088c <__aeabi_ddiv>
 800e956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e95a:	e028      	b.n	800e9ae <_dtoa_r+0x39e>
 800e95c:	2602      	movs	r6, #2
 800e95e:	e7f2      	b.n	800e946 <_dtoa_r+0x336>
 800e960:	07e1      	lsls	r1, r4, #31
 800e962:	d508      	bpl.n	800e976 <_dtoa_r+0x366>
 800e964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e96c:	f7f1 fe64 	bl	8000638 <__aeabi_dmul>
 800e970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e974:	3601      	adds	r6, #1
 800e976:	1064      	asrs	r4, r4, #1
 800e978:	3508      	adds	r5, #8
 800e97a:	e7e5      	b.n	800e948 <_dtoa_r+0x338>
 800e97c:	f000 80d2 	beq.w	800eb24 <_dtoa_r+0x514>
 800e980:	427c      	negs	r4, r7
 800e982:	4b92      	ldr	r3, [pc, #584]	@ (800ebcc <_dtoa_r+0x5bc>)
 800e984:	4d92      	ldr	r5, [pc, #584]	@ (800ebd0 <_dtoa_r+0x5c0>)
 800e986:	f004 020f 	and.w	r2, r4, #15
 800e98a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e996:	f7f1 fe4f 	bl	8000638 <__aeabi_dmul>
 800e99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e99e:	1124      	asrs	r4, r4, #4
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	2602      	movs	r6, #2
 800e9a4:	2c00      	cmp	r4, #0
 800e9a6:	f040 80b2 	bne.w	800eb0e <_dtoa_r+0x4fe>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1d3      	bne.n	800e956 <_dtoa_r+0x346>
 800e9ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e9b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f000 80b7 	beq.w	800eb28 <_dtoa_r+0x518>
 800e9ba:	4b86      	ldr	r3, [pc, #536]	@ (800ebd4 <_dtoa_r+0x5c4>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	f7f2 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f000 80ae 	beq.w	800eb28 <_dtoa_r+0x518>
 800e9cc:	9b07      	ldr	r3, [sp, #28]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f000 80aa 	beq.w	800eb28 <_dtoa_r+0x518>
 800e9d4:	9b00      	ldr	r3, [sp, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	dd37      	ble.n	800ea4a <_dtoa_r+0x43a>
 800e9da:	1e7b      	subs	r3, r7, #1
 800e9dc:	9304      	str	r3, [sp, #16]
 800e9de:	4620      	mov	r0, r4
 800e9e0:	4b7d      	ldr	r3, [pc, #500]	@ (800ebd8 <_dtoa_r+0x5c8>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	f7f1 fe27 	bl	8000638 <__aeabi_dmul>
 800e9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ee:	9c00      	ldr	r4, [sp, #0]
 800e9f0:	3601      	adds	r6, #1
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f7f1 fdb6 	bl	8000564 <__aeabi_i2d>
 800e9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9fc:	f7f1 fe1c 	bl	8000638 <__aeabi_dmul>
 800ea00:	4b76      	ldr	r3, [pc, #472]	@ (800ebdc <_dtoa_r+0x5cc>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	f7f1 fc62 	bl	80002cc <__adddf3>
 800ea08:	4605      	mov	r5, r0
 800ea0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ea0e:	2c00      	cmp	r4, #0
 800ea10:	f040 808d 	bne.w	800eb2e <_dtoa_r+0x51e>
 800ea14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea18:	4b71      	ldr	r3, [pc, #452]	@ (800ebe0 <_dtoa_r+0x5d0>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f7f1 fc54 	bl	80002c8 <__aeabi_dsub>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea28:	462a      	mov	r2, r5
 800ea2a:	4633      	mov	r3, r6
 800ea2c:	f7f2 f894 	bl	8000b58 <__aeabi_dcmpgt>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f040 828b 	bne.w	800ef4c <_dtoa_r+0x93c>
 800ea36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea3a:	462a      	mov	r2, r5
 800ea3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ea40:	f7f2 f86c 	bl	8000b1c <__aeabi_dcmplt>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f040 8128 	bne.w	800ec9a <_dtoa_r+0x68a>
 800ea4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ea4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ea52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f2c0 815a 	blt.w	800ed0e <_dtoa_r+0x6fe>
 800ea5a:	2f0e      	cmp	r7, #14
 800ea5c:	f300 8157 	bgt.w	800ed0e <_dtoa_r+0x6fe>
 800ea60:	4b5a      	ldr	r3, [pc, #360]	@ (800ebcc <_dtoa_r+0x5bc>)
 800ea62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea66:	ed93 7b00 	vldr	d7, [r3]
 800ea6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	ed8d 7b00 	vstr	d7, [sp]
 800ea72:	da03      	bge.n	800ea7c <_dtoa_r+0x46c>
 800ea74:	9b07      	ldr	r3, [sp, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f340 8101 	ble.w	800ec7e <_dtoa_r+0x66e>
 800ea7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea80:	4656      	mov	r6, sl
 800ea82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f1 feff 	bl	800088c <__aeabi_ddiv>
 800ea8e:	f7f2 f883 	bl	8000b98 <__aeabi_d2iz>
 800ea92:	4680      	mov	r8, r0
 800ea94:	f7f1 fd66 	bl	8000564 <__aeabi_i2d>
 800ea98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea9c:	f7f1 fdcc 	bl	8000638 <__aeabi_dmul>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eaac:	f7f1 fc0c 	bl	80002c8 <__aeabi_dsub>
 800eab0:	f806 4b01 	strb.w	r4, [r6], #1
 800eab4:	9d07      	ldr	r5, [sp, #28]
 800eab6:	eba6 040a 	sub.w	r4, r6, sl
 800eaba:	42a5      	cmp	r5, r4
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	f040 8117 	bne.w	800ecf2 <_dtoa_r+0x6e2>
 800eac4:	f7f1 fc02 	bl	80002cc <__adddf3>
 800eac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eacc:	4604      	mov	r4, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	f7f2 f842 	bl	8000b58 <__aeabi_dcmpgt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 80f9 	bne.w	800eccc <_dtoa_r+0x6bc>
 800eada:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eade:	4620      	mov	r0, r4
 800eae0:	4629      	mov	r1, r5
 800eae2:	f7f2 f811 	bl	8000b08 <__aeabi_dcmpeq>
 800eae6:	b118      	cbz	r0, 800eaf0 <_dtoa_r+0x4e0>
 800eae8:	f018 0f01 	tst.w	r8, #1
 800eaec:	f040 80ee 	bne.w	800eccc <_dtoa_r+0x6bc>
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	4658      	mov	r0, fp
 800eaf4:	f000 ff26 	bl	800f944 <_Bfree>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	7033      	strb	r3, [r6, #0]
 800eafc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eafe:	3701      	adds	r7, #1
 800eb00:	601f      	str	r7, [r3, #0]
 800eb02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 831d 	beq.w	800f144 <_dtoa_r+0xb34>
 800eb0a:	601e      	str	r6, [r3, #0]
 800eb0c:	e31a      	b.n	800f144 <_dtoa_r+0xb34>
 800eb0e:	07e2      	lsls	r2, r4, #31
 800eb10:	d505      	bpl.n	800eb1e <_dtoa_r+0x50e>
 800eb12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb16:	f7f1 fd8f 	bl	8000638 <__aeabi_dmul>
 800eb1a:	3601      	adds	r6, #1
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	1064      	asrs	r4, r4, #1
 800eb20:	3508      	adds	r5, #8
 800eb22:	e73f      	b.n	800e9a4 <_dtoa_r+0x394>
 800eb24:	2602      	movs	r6, #2
 800eb26:	e742      	b.n	800e9ae <_dtoa_r+0x39e>
 800eb28:	9c07      	ldr	r4, [sp, #28]
 800eb2a:	9704      	str	r7, [sp, #16]
 800eb2c:	e761      	b.n	800e9f2 <_dtoa_r+0x3e2>
 800eb2e:	4b27      	ldr	r3, [pc, #156]	@ (800ebcc <_dtoa_r+0x5bc>)
 800eb30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb3a:	4454      	add	r4, sl
 800eb3c:	2900      	cmp	r1, #0
 800eb3e:	d053      	beq.n	800ebe8 <_dtoa_r+0x5d8>
 800eb40:	4928      	ldr	r1, [pc, #160]	@ (800ebe4 <_dtoa_r+0x5d4>)
 800eb42:	2000      	movs	r0, #0
 800eb44:	f7f1 fea2 	bl	800088c <__aeabi_ddiv>
 800eb48:	4633      	mov	r3, r6
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	f7f1 fbbc 	bl	80002c8 <__aeabi_dsub>
 800eb50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb54:	4656      	mov	r6, sl
 800eb56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb5a:	f7f2 f81d 	bl	8000b98 <__aeabi_d2iz>
 800eb5e:	4605      	mov	r5, r0
 800eb60:	f7f1 fd00 	bl	8000564 <__aeabi_i2d>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6c:	f7f1 fbac 	bl	80002c8 <__aeabi_dsub>
 800eb70:	3530      	adds	r5, #48	@ 0x30
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb7a:	f806 5b01 	strb.w	r5, [r6], #1
 800eb7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb82:	f7f1 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d171      	bne.n	800ec6e <_dtoa_r+0x65e>
 800eb8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb8e:	4911      	ldr	r1, [pc, #68]	@ (800ebd4 <_dtoa_r+0x5c4>)
 800eb90:	2000      	movs	r0, #0
 800eb92:	f7f1 fb99 	bl	80002c8 <__aeabi_dsub>
 800eb96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb9a:	f7f1 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f040 8095 	bne.w	800ecce <_dtoa_r+0x6be>
 800eba4:	42a6      	cmp	r6, r4
 800eba6:	f43f af50 	beq.w	800ea4a <_dtoa_r+0x43a>
 800ebaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebae:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd8 <_dtoa_r+0x5c8>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f7f1 fd41 	bl	8000638 <__aeabi_dmul>
 800ebb6:	4b08      	ldr	r3, [pc, #32]	@ (800ebd8 <_dtoa_r+0x5c8>)
 800ebb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc2:	f7f1 fd39 	bl	8000638 <__aeabi_dmul>
 800ebc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebca:	e7c4      	b.n	800eb56 <_dtoa_r+0x546>
 800ebcc:	08011130 	.word	0x08011130
 800ebd0:	08011108 	.word	0x08011108
 800ebd4:	3ff00000 	.word	0x3ff00000
 800ebd8:	40240000 	.word	0x40240000
 800ebdc:	401c0000 	.word	0x401c0000
 800ebe0:	40140000 	.word	0x40140000
 800ebe4:	3fe00000 	.word	0x3fe00000
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4628      	mov	r0, r5
 800ebec:	f7f1 fd24 	bl	8000638 <__aeabi_dmul>
 800ebf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebf4:	9415      	str	r4, [sp, #84]	@ 0x54
 800ebf6:	4656      	mov	r6, sl
 800ebf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebfc:	f7f1 ffcc 	bl	8000b98 <__aeabi_d2iz>
 800ec00:	4605      	mov	r5, r0
 800ec02:	f7f1 fcaf 	bl	8000564 <__aeabi_i2d>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec0e:	f7f1 fb5b 	bl	80002c8 <__aeabi_dsub>
 800ec12:	3530      	adds	r5, #48	@ 0x30
 800ec14:	f806 5b01 	strb.w	r5, [r6], #1
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	42a6      	cmp	r6, r4
 800ec1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec22:	f04f 0200 	mov.w	r2, #0
 800ec26:	d124      	bne.n	800ec72 <_dtoa_r+0x662>
 800ec28:	4bac      	ldr	r3, [pc, #688]	@ (800eedc <_dtoa_r+0x8cc>)
 800ec2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ec2e:	f7f1 fb4d 	bl	80002cc <__adddf3>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec3a:	f7f1 ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d145      	bne.n	800ecce <_dtoa_r+0x6be>
 800ec42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec46:	49a5      	ldr	r1, [pc, #660]	@ (800eedc <_dtoa_r+0x8cc>)
 800ec48:	2000      	movs	r0, #0
 800ec4a:	f7f1 fb3d 	bl	80002c8 <__aeabi_dsub>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec56:	f7f1 ff61 	bl	8000b1c <__aeabi_dcmplt>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	f43f aef5 	beq.w	800ea4a <_dtoa_r+0x43a>
 800ec60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ec62:	1e73      	subs	r3, r6, #1
 800ec64:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec6a:	2b30      	cmp	r3, #48	@ 0x30
 800ec6c:	d0f8      	beq.n	800ec60 <_dtoa_r+0x650>
 800ec6e:	9f04      	ldr	r7, [sp, #16]
 800ec70:	e73e      	b.n	800eaf0 <_dtoa_r+0x4e0>
 800ec72:	4b9b      	ldr	r3, [pc, #620]	@ (800eee0 <_dtoa_r+0x8d0>)
 800ec74:	f7f1 fce0 	bl	8000638 <__aeabi_dmul>
 800ec78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec7c:	e7bc      	b.n	800ebf8 <_dtoa_r+0x5e8>
 800ec7e:	d10c      	bne.n	800ec9a <_dtoa_r+0x68a>
 800ec80:	4b98      	ldr	r3, [pc, #608]	@ (800eee4 <_dtoa_r+0x8d4>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec88:	f7f1 fcd6 	bl	8000638 <__aeabi_dmul>
 800ec8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec90:	f7f1 ff58 	bl	8000b44 <__aeabi_dcmpge>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	f000 8157 	beq.w	800ef48 <_dtoa_r+0x938>
 800ec9a:	2400      	movs	r4, #0
 800ec9c:	4625      	mov	r5, r4
 800ec9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eca0:	43db      	mvns	r3, r3
 800eca2:	9304      	str	r3, [sp, #16]
 800eca4:	4656      	mov	r6, sl
 800eca6:	2700      	movs	r7, #0
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4658      	mov	r0, fp
 800ecac:	f000 fe4a 	bl	800f944 <_Bfree>
 800ecb0:	2d00      	cmp	r5, #0
 800ecb2:	d0dc      	beq.n	800ec6e <_dtoa_r+0x65e>
 800ecb4:	b12f      	cbz	r7, 800ecc2 <_dtoa_r+0x6b2>
 800ecb6:	42af      	cmp	r7, r5
 800ecb8:	d003      	beq.n	800ecc2 <_dtoa_r+0x6b2>
 800ecba:	4639      	mov	r1, r7
 800ecbc:	4658      	mov	r0, fp
 800ecbe:	f000 fe41 	bl	800f944 <_Bfree>
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	4658      	mov	r0, fp
 800ecc6:	f000 fe3d 	bl	800f944 <_Bfree>
 800ecca:	e7d0      	b.n	800ec6e <_dtoa_r+0x65e>
 800eccc:	9704      	str	r7, [sp, #16]
 800ecce:	4633      	mov	r3, r6
 800ecd0:	461e      	mov	r6, r3
 800ecd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecd6:	2a39      	cmp	r2, #57	@ 0x39
 800ecd8:	d107      	bne.n	800ecea <_dtoa_r+0x6da>
 800ecda:	459a      	cmp	sl, r3
 800ecdc:	d1f8      	bne.n	800ecd0 <_dtoa_r+0x6c0>
 800ecde:	9a04      	ldr	r2, [sp, #16]
 800ece0:	3201      	adds	r2, #1
 800ece2:	9204      	str	r2, [sp, #16]
 800ece4:	2230      	movs	r2, #48	@ 0x30
 800ece6:	f88a 2000 	strb.w	r2, [sl]
 800ecea:	781a      	ldrb	r2, [r3, #0]
 800ecec:	3201      	adds	r2, #1
 800ecee:	701a      	strb	r2, [r3, #0]
 800ecf0:	e7bd      	b.n	800ec6e <_dtoa_r+0x65e>
 800ecf2:	4b7b      	ldr	r3, [pc, #492]	@ (800eee0 <_dtoa_r+0x8d0>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f7f1 fc9f 	bl	8000638 <__aeabi_dmul>
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	4604      	mov	r4, r0
 800ed00:	460d      	mov	r5, r1
 800ed02:	f7f1 ff01 	bl	8000b08 <__aeabi_dcmpeq>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	f43f aebb 	beq.w	800ea82 <_dtoa_r+0x472>
 800ed0c:	e6f0      	b.n	800eaf0 <_dtoa_r+0x4e0>
 800ed0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed10:	2a00      	cmp	r2, #0
 800ed12:	f000 80db 	beq.w	800eecc <_dtoa_r+0x8bc>
 800ed16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed18:	2a01      	cmp	r2, #1
 800ed1a:	f300 80bf 	bgt.w	800ee9c <_dtoa_r+0x88c>
 800ed1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	f000 80b7 	beq.w	800ee94 <_dtoa_r+0x884>
 800ed26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ed2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed2c:	4646      	mov	r6, r8
 800ed2e:	9a08      	ldr	r2, [sp, #32]
 800ed30:	2101      	movs	r1, #1
 800ed32:	441a      	add	r2, r3
 800ed34:	4658      	mov	r0, fp
 800ed36:	4498      	add	r8, r3
 800ed38:	9208      	str	r2, [sp, #32]
 800ed3a:	f000 ff01 	bl	800fb40 <__i2b>
 800ed3e:	4605      	mov	r5, r0
 800ed40:	b15e      	cbz	r6, 800ed5a <_dtoa_r+0x74a>
 800ed42:	9b08      	ldr	r3, [sp, #32]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	dd08      	ble.n	800ed5a <_dtoa_r+0x74a>
 800ed48:	42b3      	cmp	r3, r6
 800ed4a:	9a08      	ldr	r2, [sp, #32]
 800ed4c:	bfa8      	it	ge
 800ed4e:	4633      	movge	r3, r6
 800ed50:	eba8 0803 	sub.w	r8, r8, r3
 800ed54:	1af6      	subs	r6, r6, r3
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	9308      	str	r3, [sp, #32]
 800ed5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed5c:	b1f3      	cbz	r3, 800ed9c <_dtoa_r+0x78c>
 800ed5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f000 80b7 	beq.w	800eed4 <_dtoa_r+0x8c4>
 800ed66:	b18c      	cbz	r4, 800ed8c <_dtoa_r+0x77c>
 800ed68:	4629      	mov	r1, r5
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	4658      	mov	r0, fp
 800ed6e:	f000 ffa7 	bl	800fcc0 <__pow5mult>
 800ed72:	464a      	mov	r2, r9
 800ed74:	4601      	mov	r1, r0
 800ed76:	4605      	mov	r5, r0
 800ed78:	4658      	mov	r0, fp
 800ed7a:	f000 fef7 	bl	800fb6c <__multiply>
 800ed7e:	4649      	mov	r1, r9
 800ed80:	9004      	str	r0, [sp, #16]
 800ed82:	4658      	mov	r0, fp
 800ed84:	f000 fdde 	bl	800f944 <_Bfree>
 800ed88:	9b04      	ldr	r3, [sp, #16]
 800ed8a:	4699      	mov	r9, r3
 800ed8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed8e:	1b1a      	subs	r2, r3, r4
 800ed90:	d004      	beq.n	800ed9c <_dtoa_r+0x78c>
 800ed92:	4649      	mov	r1, r9
 800ed94:	4658      	mov	r0, fp
 800ed96:	f000 ff93 	bl	800fcc0 <__pow5mult>
 800ed9a:	4681      	mov	r9, r0
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	4658      	mov	r0, fp
 800eda0:	f000 fece 	bl	800fb40 <__i2b>
 800eda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eda6:	4604      	mov	r4, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 81cf 	beq.w	800f14c <_dtoa_r+0xb3c>
 800edae:	461a      	mov	r2, r3
 800edb0:	4601      	mov	r1, r0
 800edb2:	4658      	mov	r0, fp
 800edb4:	f000 ff84 	bl	800fcc0 <__pow5mult>
 800edb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edba:	2b01      	cmp	r3, #1
 800edbc:	4604      	mov	r4, r0
 800edbe:	f300 8095 	bgt.w	800eeec <_dtoa_r+0x8dc>
 800edc2:	9b02      	ldr	r3, [sp, #8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 8087 	bne.w	800eed8 <_dtoa_r+0x8c8>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	f040 8089 	bne.w	800eee8 <_dtoa_r+0x8d8>
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eddc:	0d1b      	lsrs	r3, r3, #20
 800edde:	051b      	lsls	r3, r3, #20
 800ede0:	b12b      	cbz	r3, 800edee <_dtoa_r+0x7de>
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	3301      	adds	r3, #1
 800ede6:	9308      	str	r3, [sp, #32]
 800ede8:	f108 0801 	add.w	r8, r8, #1
 800edec:	2301      	movs	r3, #1
 800edee:	930a      	str	r3, [sp, #40]	@ 0x28
 800edf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 81b0 	beq.w	800f158 <_dtoa_r+0xb48>
 800edf8:	6923      	ldr	r3, [r4, #16]
 800edfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edfe:	6918      	ldr	r0, [r3, #16]
 800ee00:	f000 fe52 	bl	800faa8 <__hi0bits>
 800ee04:	f1c0 0020 	rsb	r0, r0, #32
 800ee08:	9b08      	ldr	r3, [sp, #32]
 800ee0a:	4418      	add	r0, r3
 800ee0c:	f010 001f 	ands.w	r0, r0, #31
 800ee10:	d077      	beq.n	800ef02 <_dtoa_r+0x8f2>
 800ee12:	f1c0 0320 	rsb	r3, r0, #32
 800ee16:	2b04      	cmp	r3, #4
 800ee18:	dd6b      	ble.n	800eef2 <_dtoa_r+0x8e2>
 800ee1a:	9b08      	ldr	r3, [sp, #32]
 800ee1c:	f1c0 001c 	rsb	r0, r0, #28
 800ee20:	4403      	add	r3, r0
 800ee22:	4480      	add	r8, r0
 800ee24:	4406      	add	r6, r0
 800ee26:	9308      	str	r3, [sp, #32]
 800ee28:	f1b8 0f00 	cmp.w	r8, #0
 800ee2c:	dd05      	ble.n	800ee3a <_dtoa_r+0x82a>
 800ee2e:	4649      	mov	r1, r9
 800ee30:	4642      	mov	r2, r8
 800ee32:	4658      	mov	r0, fp
 800ee34:	f000 ff9e 	bl	800fd74 <__lshift>
 800ee38:	4681      	mov	r9, r0
 800ee3a:	9b08      	ldr	r3, [sp, #32]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dd05      	ble.n	800ee4c <_dtoa_r+0x83c>
 800ee40:	4621      	mov	r1, r4
 800ee42:	461a      	mov	r2, r3
 800ee44:	4658      	mov	r0, fp
 800ee46:	f000 ff95 	bl	800fd74 <__lshift>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d059      	beq.n	800ef06 <_dtoa_r+0x8f6>
 800ee52:	4621      	mov	r1, r4
 800ee54:	4648      	mov	r0, r9
 800ee56:	f000 fff9 	bl	800fe4c <__mcmp>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	da53      	bge.n	800ef06 <_dtoa_r+0x8f6>
 800ee5e:	1e7b      	subs	r3, r7, #1
 800ee60:	9304      	str	r3, [sp, #16]
 800ee62:	4649      	mov	r1, r9
 800ee64:	2300      	movs	r3, #0
 800ee66:	220a      	movs	r2, #10
 800ee68:	4658      	mov	r0, fp
 800ee6a:	f000 fd8d 	bl	800f988 <__multadd>
 800ee6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee70:	4681      	mov	r9, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f000 8172 	beq.w	800f15c <_dtoa_r+0xb4c>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	220a      	movs	r2, #10
 800ee7e:	4658      	mov	r0, fp
 800ee80:	f000 fd82 	bl	800f988 <__multadd>
 800ee84:	9b00      	ldr	r3, [sp, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	4605      	mov	r5, r0
 800ee8a:	dc67      	bgt.n	800ef5c <_dtoa_r+0x94c>
 800ee8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	dc41      	bgt.n	800ef16 <_dtoa_r+0x906>
 800ee92:	e063      	b.n	800ef5c <_dtoa_r+0x94c>
 800ee94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee9a:	e746      	b.n	800ed2a <_dtoa_r+0x71a>
 800ee9c:	9b07      	ldr	r3, [sp, #28]
 800ee9e:	1e5c      	subs	r4, r3, #1
 800eea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	bfbf      	itttt	lt
 800eea6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eea8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800eeaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eeac:	1ae3      	sublt	r3, r4, r3
 800eeae:	bfb4      	ite	lt
 800eeb0:	18d2      	addlt	r2, r2, r3
 800eeb2:	1b1c      	subge	r4, r3, r4
 800eeb4:	9b07      	ldr	r3, [sp, #28]
 800eeb6:	bfbc      	itt	lt
 800eeb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800eeba:	2400      	movlt	r4, #0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bfb5      	itete	lt
 800eec0:	eba8 0603 	sublt.w	r6, r8, r3
 800eec4:	9b07      	ldrge	r3, [sp, #28]
 800eec6:	2300      	movlt	r3, #0
 800eec8:	4646      	movge	r6, r8
 800eeca:	e730      	b.n	800ed2e <_dtoa_r+0x71e>
 800eecc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eece:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eed0:	4646      	mov	r6, r8
 800eed2:	e735      	b.n	800ed40 <_dtoa_r+0x730>
 800eed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eed6:	e75c      	b.n	800ed92 <_dtoa_r+0x782>
 800eed8:	2300      	movs	r3, #0
 800eeda:	e788      	b.n	800edee <_dtoa_r+0x7de>
 800eedc:	3fe00000 	.word	0x3fe00000
 800eee0:	40240000 	.word	0x40240000
 800eee4:	40140000 	.word	0x40140000
 800eee8:	9b02      	ldr	r3, [sp, #8]
 800eeea:	e780      	b.n	800edee <_dtoa_r+0x7de>
 800eeec:	2300      	movs	r3, #0
 800eeee:	930a      	str	r3, [sp, #40]	@ 0x28
 800eef0:	e782      	b.n	800edf8 <_dtoa_r+0x7e8>
 800eef2:	d099      	beq.n	800ee28 <_dtoa_r+0x818>
 800eef4:	9a08      	ldr	r2, [sp, #32]
 800eef6:	331c      	adds	r3, #28
 800eef8:	441a      	add	r2, r3
 800eefa:	4498      	add	r8, r3
 800eefc:	441e      	add	r6, r3
 800eefe:	9208      	str	r2, [sp, #32]
 800ef00:	e792      	b.n	800ee28 <_dtoa_r+0x818>
 800ef02:	4603      	mov	r3, r0
 800ef04:	e7f6      	b.n	800eef4 <_dtoa_r+0x8e4>
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	9704      	str	r7, [sp, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	dc20      	bgt.n	800ef50 <_dtoa_r+0x940>
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	dd1e      	ble.n	800ef54 <_dtoa_r+0x944>
 800ef16:	9b00      	ldr	r3, [sp, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f47f aec0 	bne.w	800ec9e <_dtoa_r+0x68e>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	2205      	movs	r2, #5
 800ef22:	4658      	mov	r0, fp
 800ef24:	f000 fd30 	bl	800f988 <__multadd>
 800ef28:	4601      	mov	r1, r0
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	4648      	mov	r0, r9
 800ef2e:	f000 ff8d 	bl	800fe4c <__mcmp>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	f77f aeb3 	ble.w	800ec9e <_dtoa_r+0x68e>
 800ef38:	4656      	mov	r6, sl
 800ef3a:	2331      	movs	r3, #49	@ 0x31
 800ef3c:	f806 3b01 	strb.w	r3, [r6], #1
 800ef40:	9b04      	ldr	r3, [sp, #16]
 800ef42:	3301      	adds	r3, #1
 800ef44:	9304      	str	r3, [sp, #16]
 800ef46:	e6ae      	b.n	800eca6 <_dtoa_r+0x696>
 800ef48:	9c07      	ldr	r4, [sp, #28]
 800ef4a:	9704      	str	r7, [sp, #16]
 800ef4c:	4625      	mov	r5, r4
 800ef4e:	e7f3      	b.n	800ef38 <_dtoa_r+0x928>
 800ef50:	9b07      	ldr	r3, [sp, #28]
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 8104 	beq.w	800f164 <_dtoa_r+0xb54>
 800ef5c:	2e00      	cmp	r6, #0
 800ef5e:	dd05      	ble.n	800ef6c <_dtoa_r+0x95c>
 800ef60:	4629      	mov	r1, r5
 800ef62:	4632      	mov	r2, r6
 800ef64:	4658      	mov	r0, fp
 800ef66:	f000 ff05 	bl	800fd74 <__lshift>
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d05a      	beq.n	800f028 <_dtoa_r+0xa18>
 800ef72:	6869      	ldr	r1, [r5, #4]
 800ef74:	4658      	mov	r0, fp
 800ef76:	f000 fca5 	bl	800f8c4 <_Balloc>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	b928      	cbnz	r0, 800ef8a <_dtoa_r+0x97a>
 800ef7e:	4b84      	ldr	r3, [pc, #528]	@ (800f190 <_dtoa_r+0xb80>)
 800ef80:	4602      	mov	r2, r0
 800ef82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef86:	f7ff bb5a 	b.w	800e63e <_dtoa_r+0x2e>
 800ef8a:	692a      	ldr	r2, [r5, #16]
 800ef8c:	3202      	adds	r2, #2
 800ef8e:	0092      	lsls	r2, r2, #2
 800ef90:	f105 010c 	add.w	r1, r5, #12
 800ef94:	300c      	adds	r0, #12
 800ef96:	f7ff fa94 	bl	800e4c2 <memcpy>
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	4658      	mov	r0, fp
 800efa0:	f000 fee8 	bl	800fd74 <__lshift>
 800efa4:	f10a 0301 	add.w	r3, sl, #1
 800efa8:	9307      	str	r3, [sp, #28]
 800efaa:	9b00      	ldr	r3, [sp, #0]
 800efac:	4453      	add	r3, sl
 800efae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efb0:	9b02      	ldr	r3, [sp, #8]
 800efb2:	f003 0301 	and.w	r3, r3, #1
 800efb6:	462f      	mov	r7, r5
 800efb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800efba:	4605      	mov	r5, r0
 800efbc:	9b07      	ldr	r3, [sp, #28]
 800efbe:	4621      	mov	r1, r4
 800efc0:	3b01      	subs	r3, #1
 800efc2:	4648      	mov	r0, r9
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	f7ff fa99 	bl	800e4fc <quorem>
 800efca:	4639      	mov	r1, r7
 800efcc:	9002      	str	r0, [sp, #8]
 800efce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800efd2:	4648      	mov	r0, r9
 800efd4:	f000 ff3a 	bl	800fe4c <__mcmp>
 800efd8:	462a      	mov	r2, r5
 800efda:	9008      	str	r0, [sp, #32]
 800efdc:	4621      	mov	r1, r4
 800efde:	4658      	mov	r0, fp
 800efe0:	f000 ff50 	bl	800fe84 <__mdiff>
 800efe4:	68c2      	ldr	r2, [r0, #12]
 800efe6:	4606      	mov	r6, r0
 800efe8:	bb02      	cbnz	r2, 800f02c <_dtoa_r+0xa1c>
 800efea:	4601      	mov	r1, r0
 800efec:	4648      	mov	r0, r9
 800efee:	f000 ff2d 	bl	800fe4c <__mcmp>
 800eff2:	4602      	mov	r2, r0
 800eff4:	4631      	mov	r1, r6
 800eff6:	4658      	mov	r0, fp
 800eff8:	920e      	str	r2, [sp, #56]	@ 0x38
 800effa:	f000 fca3 	bl	800f944 <_Bfree>
 800effe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f002:	9e07      	ldr	r6, [sp, #28]
 800f004:	ea43 0102 	orr.w	r1, r3, r2
 800f008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f00a:	4319      	orrs	r1, r3
 800f00c:	d110      	bne.n	800f030 <_dtoa_r+0xa20>
 800f00e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f012:	d029      	beq.n	800f068 <_dtoa_r+0xa58>
 800f014:	9b08      	ldr	r3, [sp, #32]
 800f016:	2b00      	cmp	r3, #0
 800f018:	dd02      	ble.n	800f020 <_dtoa_r+0xa10>
 800f01a:	9b02      	ldr	r3, [sp, #8]
 800f01c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f020:	9b00      	ldr	r3, [sp, #0]
 800f022:	f883 8000 	strb.w	r8, [r3]
 800f026:	e63f      	b.n	800eca8 <_dtoa_r+0x698>
 800f028:	4628      	mov	r0, r5
 800f02a:	e7bb      	b.n	800efa4 <_dtoa_r+0x994>
 800f02c:	2201      	movs	r2, #1
 800f02e:	e7e1      	b.n	800eff4 <_dtoa_r+0x9e4>
 800f030:	9b08      	ldr	r3, [sp, #32]
 800f032:	2b00      	cmp	r3, #0
 800f034:	db04      	blt.n	800f040 <_dtoa_r+0xa30>
 800f036:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f038:	430b      	orrs	r3, r1
 800f03a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f03c:	430b      	orrs	r3, r1
 800f03e:	d120      	bne.n	800f082 <_dtoa_r+0xa72>
 800f040:	2a00      	cmp	r2, #0
 800f042:	dded      	ble.n	800f020 <_dtoa_r+0xa10>
 800f044:	4649      	mov	r1, r9
 800f046:	2201      	movs	r2, #1
 800f048:	4658      	mov	r0, fp
 800f04a:	f000 fe93 	bl	800fd74 <__lshift>
 800f04e:	4621      	mov	r1, r4
 800f050:	4681      	mov	r9, r0
 800f052:	f000 fefb 	bl	800fe4c <__mcmp>
 800f056:	2800      	cmp	r0, #0
 800f058:	dc03      	bgt.n	800f062 <_dtoa_r+0xa52>
 800f05a:	d1e1      	bne.n	800f020 <_dtoa_r+0xa10>
 800f05c:	f018 0f01 	tst.w	r8, #1
 800f060:	d0de      	beq.n	800f020 <_dtoa_r+0xa10>
 800f062:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f066:	d1d8      	bne.n	800f01a <_dtoa_r+0xa0a>
 800f068:	9a00      	ldr	r2, [sp, #0]
 800f06a:	2339      	movs	r3, #57	@ 0x39
 800f06c:	7013      	strb	r3, [r2, #0]
 800f06e:	4633      	mov	r3, r6
 800f070:	461e      	mov	r6, r3
 800f072:	3b01      	subs	r3, #1
 800f074:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f078:	2a39      	cmp	r2, #57	@ 0x39
 800f07a:	d052      	beq.n	800f122 <_dtoa_r+0xb12>
 800f07c:	3201      	adds	r2, #1
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	e612      	b.n	800eca8 <_dtoa_r+0x698>
 800f082:	2a00      	cmp	r2, #0
 800f084:	dd07      	ble.n	800f096 <_dtoa_r+0xa86>
 800f086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f08a:	d0ed      	beq.n	800f068 <_dtoa_r+0xa58>
 800f08c:	9a00      	ldr	r2, [sp, #0]
 800f08e:	f108 0301 	add.w	r3, r8, #1
 800f092:	7013      	strb	r3, [r2, #0]
 800f094:	e608      	b.n	800eca8 <_dtoa_r+0x698>
 800f096:	9b07      	ldr	r3, [sp, #28]
 800f098:	9a07      	ldr	r2, [sp, #28]
 800f09a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d028      	beq.n	800f0f6 <_dtoa_r+0xae6>
 800f0a4:	4649      	mov	r1, r9
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	220a      	movs	r2, #10
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 fc6c 	bl	800f988 <__multadd>
 800f0b0:	42af      	cmp	r7, r5
 800f0b2:	4681      	mov	r9, r0
 800f0b4:	f04f 0300 	mov.w	r3, #0
 800f0b8:	f04f 020a 	mov.w	r2, #10
 800f0bc:	4639      	mov	r1, r7
 800f0be:	4658      	mov	r0, fp
 800f0c0:	d107      	bne.n	800f0d2 <_dtoa_r+0xac2>
 800f0c2:	f000 fc61 	bl	800f988 <__multadd>
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	9b07      	ldr	r3, [sp, #28]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	e774      	b.n	800efbc <_dtoa_r+0x9ac>
 800f0d2:	f000 fc59 	bl	800f988 <__multadd>
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	4607      	mov	r7, r0
 800f0da:	2300      	movs	r3, #0
 800f0dc:	220a      	movs	r2, #10
 800f0de:	4658      	mov	r0, fp
 800f0e0:	f000 fc52 	bl	800f988 <__multadd>
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	e7f0      	b.n	800f0ca <_dtoa_r+0xaba>
 800f0e8:	9b00      	ldr	r3, [sp, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	bfcc      	ite	gt
 800f0ee:	461e      	movgt	r6, r3
 800f0f0:	2601      	movle	r6, #1
 800f0f2:	4456      	add	r6, sl
 800f0f4:	2700      	movs	r7, #0
 800f0f6:	4649      	mov	r1, r9
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	4658      	mov	r0, fp
 800f0fc:	f000 fe3a 	bl	800fd74 <__lshift>
 800f100:	4621      	mov	r1, r4
 800f102:	4681      	mov	r9, r0
 800f104:	f000 fea2 	bl	800fe4c <__mcmp>
 800f108:	2800      	cmp	r0, #0
 800f10a:	dcb0      	bgt.n	800f06e <_dtoa_r+0xa5e>
 800f10c:	d102      	bne.n	800f114 <_dtoa_r+0xb04>
 800f10e:	f018 0f01 	tst.w	r8, #1
 800f112:	d1ac      	bne.n	800f06e <_dtoa_r+0xa5e>
 800f114:	4633      	mov	r3, r6
 800f116:	461e      	mov	r6, r3
 800f118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f11c:	2a30      	cmp	r2, #48	@ 0x30
 800f11e:	d0fa      	beq.n	800f116 <_dtoa_r+0xb06>
 800f120:	e5c2      	b.n	800eca8 <_dtoa_r+0x698>
 800f122:	459a      	cmp	sl, r3
 800f124:	d1a4      	bne.n	800f070 <_dtoa_r+0xa60>
 800f126:	9b04      	ldr	r3, [sp, #16]
 800f128:	3301      	adds	r3, #1
 800f12a:	9304      	str	r3, [sp, #16]
 800f12c:	2331      	movs	r3, #49	@ 0x31
 800f12e:	f88a 3000 	strb.w	r3, [sl]
 800f132:	e5b9      	b.n	800eca8 <_dtoa_r+0x698>
 800f134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f136:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f194 <_dtoa_r+0xb84>
 800f13a:	b11b      	cbz	r3, 800f144 <_dtoa_r+0xb34>
 800f13c:	f10a 0308 	add.w	r3, sl, #8
 800f140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f142:	6013      	str	r3, [r2, #0]
 800f144:	4650      	mov	r0, sl
 800f146:	b019      	add	sp, #100	@ 0x64
 800f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f14e:	2b01      	cmp	r3, #1
 800f150:	f77f ae37 	ble.w	800edc2 <_dtoa_r+0x7b2>
 800f154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f156:	930a      	str	r3, [sp, #40]	@ 0x28
 800f158:	2001      	movs	r0, #1
 800f15a:	e655      	b.n	800ee08 <_dtoa_r+0x7f8>
 800f15c:	9b00      	ldr	r3, [sp, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f77f aed6 	ble.w	800ef10 <_dtoa_r+0x900>
 800f164:	4656      	mov	r6, sl
 800f166:	4621      	mov	r1, r4
 800f168:	4648      	mov	r0, r9
 800f16a:	f7ff f9c7 	bl	800e4fc <quorem>
 800f16e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f172:	f806 8b01 	strb.w	r8, [r6], #1
 800f176:	9b00      	ldr	r3, [sp, #0]
 800f178:	eba6 020a 	sub.w	r2, r6, sl
 800f17c:	4293      	cmp	r3, r2
 800f17e:	ddb3      	ble.n	800f0e8 <_dtoa_r+0xad8>
 800f180:	4649      	mov	r1, r9
 800f182:	2300      	movs	r3, #0
 800f184:	220a      	movs	r2, #10
 800f186:	4658      	mov	r0, fp
 800f188:	f000 fbfe 	bl	800f988 <__multadd>
 800f18c:	4681      	mov	r9, r0
 800f18e:	e7ea      	b.n	800f166 <_dtoa_r+0xb56>
 800f190:	0801102d 	.word	0x0801102d
 800f194:	08010fb1 	.word	0x08010fb1

0800f198 <_free_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4605      	mov	r5, r0
 800f19c:	2900      	cmp	r1, #0
 800f19e:	d041      	beq.n	800f224 <_free_r+0x8c>
 800f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a4:	1f0c      	subs	r4, r1, #4
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bfb8      	it	lt
 800f1aa:	18e4      	addlt	r4, r4, r3
 800f1ac:	f7fd fb34 	bl	800c818 <__malloc_lock>
 800f1b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f228 <_free_r+0x90>)
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	b933      	cbnz	r3, 800f1c4 <_free_r+0x2c>
 800f1b6:	6063      	str	r3, [r4, #4]
 800f1b8:	6014      	str	r4, [r2, #0]
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1c0:	f7fd bb30 	b.w	800c824 <__malloc_unlock>
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	d908      	bls.n	800f1da <_free_r+0x42>
 800f1c8:	6820      	ldr	r0, [r4, #0]
 800f1ca:	1821      	adds	r1, r4, r0
 800f1cc:	428b      	cmp	r3, r1
 800f1ce:	bf01      	itttt	eq
 800f1d0:	6819      	ldreq	r1, [r3, #0]
 800f1d2:	685b      	ldreq	r3, [r3, #4]
 800f1d4:	1809      	addeq	r1, r1, r0
 800f1d6:	6021      	streq	r1, [r4, #0]
 800f1d8:	e7ed      	b.n	800f1b6 <_free_r+0x1e>
 800f1da:	461a      	mov	r2, r3
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	b10b      	cbz	r3, 800f1e4 <_free_r+0x4c>
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	d9fa      	bls.n	800f1da <_free_r+0x42>
 800f1e4:	6811      	ldr	r1, [r2, #0]
 800f1e6:	1850      	adds	r0, r2, r1
 800f1e8:	42a0      	cmp	r0, r4
 800f1ea:	d10b      	bne.n	800f204 <_free_r+0x6c>
 800f1ec:	6820      	ldr	r0, [r4, #0]
 800f1ee:	4401      	add	r1, r0
 800f1f0:	1850      	adds	r0, r2, r1
 800f1f2:	4283      	cmp	r3, r0
 800f1f4:	6011      	str	r1, [r2, #0]
 800f1f6:	d1e0      	bne.n	800f1ba <_free_r+0x22>
 800f1f8:	6818      	ldr	r0, [r3, #0]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	6053      	str	r3, [r2, #4]
 800f1fe:	4408      	add	r0, r1
 800f200:	6010      	str	r0, [r2, #0]
 800f202:	e7da      	b.n	800f1ba <_free_r+0x22>
 800f204:	d902      	bls.n	800f20c <_free_r+0x74>
 800f206:	230c      	movs	r3, #12
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	e7d6      	b.n	800f1ba <_free_r+0x22>
 800f20c:	6820      	ldr	r0, [r4, #0]
 800f20e:	1821      	adds	r1, r4, r0
 800f210:	428b      	cmp	r3, r1
 800f212:	bf04      	itt	eq
 800f214:	6819      	ldreq	r1, [r3, #0]
 800f216:	685b      	ldreq	r3, [r3, #4]
 800f218:	6063      	str	r3, [r4, #4]
 800f21a:	bf04      	itt	eq
 800f21c:	1809      	addeq	r1, r1, r0
 800f21e:	6021      	streq	r1, [r4, #0]
 800f220:	6054      	str	r4, [r2, #4]
 800f222:	e7ca      	b.n	800f1ba <_free_r+0x22>
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	bf00      	nop
 800f228:	20001c1c 	.word	0x20001c1c

0800f22c <rshift>:
 800f22c:	6903      	ldr	r3, [r0, #16]
 800f22e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f23a:	f100 0414 	add.w	r4, r0, #20
 800f23e:	dd45      	ble.n	800f2cc <rshift+0xa0>
 800f240:	f011 011f 	ands.w	r1, r1, #31
 800f244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f24c:	d10c      	bne.n	800f268 <rshift+0x3c>
 800f24e:	f100 0710 	add.w	r7, r0, #16
 800f252:	4629      	mov	r1, r5
 800f254:	42b1      	cmp	r1, r6
 800f256:	d334      	bcc.n	800f2c2 <rshift+0x96>
 800f258:	1a9b      	subs	r3, r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	1eea      	subs	r2, r5, #3
 800f25e:	4296      	cmp	r6, r2
 800f260:	bf38      	it	cc
 800f262:	2300      	movcc	r3, #0
 800f264:	4423      	add	r3, r4
 800f266:	e015      	b.n	800f294 <rshift+0x68>
 800f268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f26c:	f1c1 0820 	rsb	r8, r1, #32
 800f270:	40cf      	lsrs	r7, r1
 800f272:	f105 0e04 	add.w	lr, r5, #4
 800f276:	46a1      	mov	r9, r4
 800f278:	4576      	cmp	r6, lr
 800f27a:	46f4      	mov	ip, lr
 800f27c:	d815      	bhi.n	800f2aa <rshift+0x7e>
 800f27e:	1a9a      	subs	r2, r3, r2
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	3a04      	subs	r2, #4
 800f284:	3501      	adds	r5, #1
 800f286:	42ae      	cmp	r6, r5
 800f288:	bf38      	it	cc
 800f28a:	2200      	movcc	r2, #0
 800f28c:	18a3      	adds	r3, r4, r2
 800f28e:	50a7      	str	r7, [r4, r2]
 800f290:	b107      	cbz	r7, 800f294 <rshift+0x68>
 800f292:	3304      	adds	r3, #4
 800f294:	1b1a      	subs	r2, r3, r4
 800f296:	42a3      	cmp	r3, r4
 800f298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f29c:	bf08      	it	eq
 800f29e:	2300      	moveq	r3, #0
 800f2a0:	6102      	str	r2, [r0, #16]
 800f2a2:	bf08      	it	eq
 800f2a4:	6143      	streq	r3, [r0, #20]
 800f2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2aa:	f8dc c000 	ldr.w	ip, [ip]
 800f2ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800f2b2:	ea4c 0707 	orr.w	r7, ip, r7
 800f2b6:	f849 7b04 	str.w	r7, [r9], #4
 800f2ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2be:	40cf      	lsrs	r7, r1
 800f2c0:	e7da      	b.n	800f278 <rshift+0x4c>
 800f2c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f2c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f2ca:	e7c3      	b.n	800f254 <rshift+0x28>
 800f2cc:	4623      	mov	r3, r4
 800f2ce:	e7e1      	b.n	800f294 <rshift+0x68>

0800f2d0 <__hexdig_fun>:
 800f2d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f2d4:	2b09      	cmp	r3, #9
 800f2d6:	d802      	bhi.n	800f2de <__hexdig_fun+0xe>
 800f2d8:	3820      	subs	r0, #32
 800f2da:	b2c0      	uxtb	r0, r0
 800f2dc:	4770      	bx	lr
 800f2de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2e2:	2b05      	cmp	r3, #5
 800f2e4:	d801      	bhi.n	800f2ea <__hexdig_fun+0x1a>
 800f2e6:	3847      	subs	r0, #71	@ 0x47
 800f2e8:	e7f7      	b.n	800f2da <__hexdig_fun+0xa>
 800f2ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2ee:	2b05      	cmp	r3, #5
 800f2f0:	d801      	bhi.n	800f2f6 <__hexdig_fun+0x26>
 800f2f2:	3827      	subs	r0, #39	@ 0x27
 800f2f4:	e7f1      	b.n	800f2da <__hexdig_fun+0xa>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	4770      	bx	lr
	...

0800f2fc <__gethex>:
 800f2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f300:	b085      	sub	sp, #20
 800f302:	468a      	mov	sl, r1
 800f304:	9302      	str	r3, [sp, #8]
 800f306:	680b      	ldr	r3, [r1, #0]
 800f308:	9001      	str	r0, [sp, #4]
 800f30a:	4690      	mov	r8, r2
 800f30c:	1c9c      	adds	r4, r3, #2
 800f30e:	46a1      	mov	r9, r4
 800f310:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f314:	2830      	cmp	r0, #48	@ 0x30
 800f316:	d0fa      	beq.n	800f30e <__gethex+0x12>
 800f318:	eba9 0303 	sub.w	r3, r9, r3
 800f31c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f320:	f7ff ffd6 	bl	800f2d0 <__hexdig_fun>
 800f324:	4605      	mov	r5, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d168      	bne.n	800f3fc <__gethex+0x100>
 800f32a:	49a0      	ldr	r1, [pc, #640]	@ (800f5ac <__gethex+0x2b0>)
 800f32c:	2201      	movs	r2, #1
 800f32e:	4648      	mov	r0, r9
 800f330:	f7ff f82d 	bl	800e38e <strncmp>
 800f334:	4607      	mov	r7, r0
 800f336:	2800      	cmp	r0, #0
 800f338:	d167      	bne.n	800f40a <__gethex+0x10e>
 800f33a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f33e:	4626      	mov	r6, r4
 800f340:	f7ff ffc6 	bl	800f2d0 <__hexdig_fun>
 800f344:	2800      	cmp	r0, #0
 800f346:	d062      	beq.n	800f40e <__gethex+0x112>
 800f348:	4623      	mov	r3, r4
 800f34a:	7818      	ldrb	r0, [r3, #0]
 800f34c:	2830      	cmp	r0, #48	@ 0x30
 800f34e:	4699      	mov	r9, r3
 800f350:	f103 0301 	add.w	r3, r3, #1
 800f354:	d0f9      	beq.n	800f34a <__gethex+0x4e>
 800f356:	f7ff ffbb 	bl	800f2d0 <__hexdig_fun>
 800f35a:	fab0 f580 	clz	r5, r0
 800f35e:	096d      	lsrs	r5, r5, #5
 800f360:	f04f 0b01 	mov.w	fp, #1
 800f364:	464a      	mov	r2, r9
 800f366:	4616      	mov	r6, r2
 800f368:	3201      	adds	r2, #1
 800f36a:	7830      	ldrb	r0, [r6, #0]
 800f36c:	f7ff ffb0 	bl	800f2d0 <__hexdig_fun>
 800f370:	2800      	cmp	r0, #0
 800f372:	d1f8      	bne.n	800f366 <__gethex+0x6a>
 800f374:	498d      	ldr	r1, [pc, #564]	@ (800f5ac <__gethex+0x2b0>)
 800f376:	2201      	movs	r2, #1
 800f378:	4630      	mov	r0, r6
 800f37a:	f7ff f808 	bl	800e38e <strncmp>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d13f      	bne.n	800f402 <__gethex+0x106>
 800f382:	b944      	cbnz	r4, 800f396 <__gethex+0x9a>
 800f384:	1c74      	adds	r4, r6, #1
 800f386:	4622      	mov	r2, r4
 800f388:	4616      	mov	r6, r2
 800f38a:	3201      	adds	r2, #1
 800f38c:	7830      	ldrb	r0, [r6, #0]
 800f38e:	f7ff ff9f 	bl	800f2d0 <__hexdig_fun>
 800f392:	2800      	cmp	r0, #0
 800f394:	d1f8      	bne.n	800f388 <__gethex+0x8c>
 800f396:	1ba4      	subs	r4, r4, r6
 800f398:	00a7      	lsls	r7, r4, #2
 800f39a:	7833      	ldrb	r3, [r6, #0]
 800f39c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f3a0:	2b50      	cmp	r3, #80	@ 0x50
 800f3a2:	d13e      	bne.n	800f422 <__gethex+0x126>
 800f3a4:	7873      	ldrb	r3, [r6, #1]
 800f3a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f3a8:	d033      	beq.n	800f412 <__gethex+0x116>
 800f3aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800f3ac:	d034      	beq.n	800f418 <__gethex+0x11c>
 800f3ae:	1c71      	adds	r1, r6, #1
 800f3b0:	2400      	movs	r4, #0
 800f3b2:	7808      	ldrb	r0, [r1, #0]
 800f3b4:	f7ff ff8c 	bl	800f2d0 <__hexdig_fun>
 800f3b8:	1e43      	subs	r3, r0, #1
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b18      	cmp	r3, #24
 800f3be:	d830      	bhi.n	800f422 <__gethex+0x126>
 800f3c0:	f1a0 0210 	sub.w	r2, r0, #16
 800f3c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f3c8:	f7ff ff82 	bl	800f2d0 <__hexdig_fun>
 800f3cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f3d0:	fa5f fc8c 	uxtb.w	ip, ip
 800f3d4:	f1bc 0f18 	cmp.w	ip, #24
 800f3d8:	f04f 030a 	mov.w	r3, #10
 800f3dc:	d91e      	bls.n	800f41c <__gethex+0x120>
 800f3de:	b104      	cbz	r4, 800f3e2 <__gethex+0xe6>
 800f3e0:	4252      	negs	r2, r2
 800f3e2:	4417      	add	r7, r2
 800f3e4:	f8ca 1000 	str.w	r1, [sl]
 800f3e8:	b1ed      	cbz	r5, 800f426 <__gethex+0x12a>
 800f3ea:	f1bb 0f00 	cmp.w	fp, #0
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2506      	moveq	r5, #6
 800f3f2:	2500      	movne	r5, #0
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	b005      	add	sp, #20
 800f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fc:	2500      	movs	r5, #0
 800f3fe:	462c      	mov	r4, r5
 800f400:	e7b0      	b.n	800f364 <__gethex+0x68>
 800f402:	2c00      	cmp	r4, #0
 800f404:	d1c7      	bne.n	800f396 <__gethex+0x9a>
 800f406:	4627      	mov	r7, r4
 800f408:	e7c7      	b.n	800f39a <__gethex+0x9e>
 800f40a:	464e      	mov	r6, r9
 800f40c:	462f      	mov	r7, r5
 800f40e:	2501      	movs	r5, #1
 800f410:	e7c3      	b.n	800f39a <__gethex+0x9e>
 800f412:	2400      	movs	r4, #0
 800f414:	1cb1      	adds	r1, r6, #2
 800f416:	e7cc      	b.n	800f3b2 <__gethex+0xb6>
 800f418:	2401      	movs	r4, #1
 800f41a:	e7fb      	b.n	800f414 <__gethex+0x118>
 800f41c:	fb03 0002 	mla	r0, r3, r2, r0
 800f420:	e7ce      	b.n	800f3c0 <__gethex+0xc4>
 800f422:	4631      	mov	r1, r6
 800f424:	e7de      	b.n	800f3e4 <__gethex+0xe8>
 800f426:	eba6 0309 	sub.w	r3, r6, r9
 800f42a:	3b01      	subs	r3, #1
 800f42c:	4629      	mov	r1, r5
 800f42e:	2b07      	cmp	r3, #7
 800f430:	dc0a      	bgt.n	800f448 <__gethex+0x14c>
 800f432:	9801      	ldr	r0, [sp, #4]
 800f434:	f000 fa46 	bl	800f8c4 <_Balloc>
 800f438:	4604      	mov	r4, r0
 800f43a:	b940      	cbnz	r0, 800f44e <__gethex+0x152>
 800f43c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5b0 <__gethex+0x2b4>)
 800f43e:	4602      	mov	r2, r0
 800f440:	21e4      	movs	r1, #228	@ 0xe4
 800f442:	485c      	ldr	r0, [pc, #368]	@ (800f5b4 <__gethex+0x2b8>)
 800f444:	f001 f996 	bl	8010774 <__assert_func>
 800f448:	3101      	adds	r1, #1
 800f44a:	105b      	asrs	r3, r3, #1
 800f44c:	e7ef      	b.n	800f42e <__gethex+0x132>
 800f44e:	f100 0a14 	add.w	sl, r0, #20
 800f452:	2300      	movs	r3, #0
 800f454:	4655      	mov	r5, sl
 800f456:	469b      	mov	fp, r3
 800f458:	45b1      	cmp	r9, r6
 800f45a:	d337      	bcc.n	800f4cc <__gethex+0x1d0>
 800f45c:	f845 bb04 	str.w	fp, [r5], #4
 800f460:	eba5 050a 	sub.w	r5, r5, sl
 800f464:	10ad      	asrs	r5, r5, #2
 800f466:	6125      	str	r5, [r4, #16]
 800f468:	4658      	mov	r0, fp
 800f46a:	f000 fb1d 	bl	800faa8 <__hi0bits>
 800f46e:	016d      	lsls	r5, r5, #5
 800f470:	f8d8 6000 	ldr.w	r6, [r8]
 800f474:	1a2d      	subs	r5, r5, r0
 800f476:	42b5      	cmp	r5, r6
 800f478:	dd54      	ble.n	800f524 <__gethex+0x228>
 800f47a:	1bad      	subs	r5, r5, r6
 800f47c:	4629      	mov	r1, r5
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 feb1 	bl	80101e6 <__any_on>
 800f484:	4681      	mov	r9, r0
 800f486:	b178      	cbz	r0, 800f4a8 <__gethex+0x1ac>
 800f488:	1e6b      	subs	r3, r5, #1
 800f48a:	1159      	asrs	r1, r3, #5
 800f48c:	f003 021f 	and.w	r2, r3, #31
 800f490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f494:	f04f 0901 	mov.w	r9, #1
 800f498:	fa09 f202 	lsl.w	r2, r9, r2
 800f49c:	420a      	tst	r2, r1
 800f49e:	d003      	beq.n	800f4a8 <__gethex+0x1ac>
 800f4a0:	454b      	cmp	r3, r9
 800f4a2:	dc36      	bgt.n	800f512 <__gethex+0x216>
 800f4a4:	f04f 0902 	mov.w	r9, #2
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7ff febe 	bl	800f22c <rshift>
 800f4b0:	442f      	add	r7, r5
 800f4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4b6:	42bb      	cmp	r3, r7
 800f4b8:	da42      	bge.n	800f540 <__gethex+0x244>
 800f4ba:	9801      	ldr	r0, [sp, #4]
 800f4bc:	4621      	mov	r1, r4
 800f4be:	f000 fa41 	bl	800f944 <_Bfree>
 800f4c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	25a3      	movs	r5, #163	@ 0xa3
 800f4ca:	e793      	b.n	800f3f4 <__gethex+0xf8>
 800f4cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f4d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f4d2:	d012      	beq.n	800f4fa <__gethex+0x1fe>
 800f4d4:	2b20      	cmp	r3, #32
 800f4d6:	d104      	bne.n	800f4e2 <__gethex+0x1e6>
 800f4d8:	f845 bb04 	str.w	fp, [r5], #4
 800f4dc:	f04f 0b00 	mov.w	fp, #0
 800f4e0:	465b      	mov	r3, fp
 800f4e2:	7830      	ldrb	r0, [r6, #0]
 800f4e4:	9303      	str	r3, [sp, #12]
 800f4e6:	f7ff fef3 	bl	800f2d0 <__hexdig_fun>
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	f000 000f 	and.w	r0, r0, #15
 800f4f0:	4098      	lsls	r0, r3
 800f4f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	e7ae      	b.n	800f458 <__gethex+0x15c>
 800f4fa:	45b1      	cmp	r9, r6
 800f4fc:	d8ea      	bhi.n	800f4d4 <__gethex+0x1d8>
 800f4fe:	492b      	ldr	r1, [pc, #172]	@ (800f5ac <__gethex+0x2b0>)
 800f500:	9303      	str	r3, [sp, #12]
 800f502:	2201      	movs	r2, #1
 800f504:	4630      	mov	r0, r6
 800f506:	f7fe ff42 	bl	800e38e <strncmp>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1e1      	bne.n	800f4d4 <__gethex+0x1d8>
 800f510:	e7a2      	b.n	800f458 <__gethex+0x15c>
 800f512:	1ea9      	subs	r1, r5, #2
 800f514:	4620      	mov	r0, r4
 800f516:	f000 fe66 	bl	80101e6 <__any_on>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d0c2      	beq.n	800f4a4 <__gethex+0x1a8>
 800f51e:	f04f 0903 	mov.w	r9, #3
 800f522:	e7c1      	b.n	800f4a8 <__gethex+0x1ac>
 800f524:	da09      	bge.n	800f53a <__gethex+0x23e>
 800f526:	1b75      	subs	r5, r6, r5
 800f528:	4621      	mov	r1, r4
 800f52a:	9801      	ldr	r0, [sp, #4]
 800f52c:	462a      	mov	r2, r5
 800f52e:	f000 fc21 	bl	800fd74 <__lshift>
 800f532:	1b7f      	subs	r7, r7, r5
 800f534:	4604      	mov	r4, r0
 800f536:	f100 0a14 	add.w	sl, r0, #20
 800f53a:	f04f 0900 	mov.w	r9, #0
 800f53e:	e7b8      	b.n	800f4b2 <__gethex+0x1b6>
 800f540:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f544:	42bd      	cmp	r5, r7
 800f546:	dd6f      	ble.n	800f628 <__gethex+0x32c>
 800f548:	1bed      	subs	r5, r5, r7
 800f54a:	42ae      	cmp	r6, r5
 800f54c:	dc34      	bgt.n	800f5b8 <__gethex+0x2bc>
 800f54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f552:	2b02      	cmp	r3, #2
 800f554:	d022      	beq.n	800f59c <__gethex+0x2a0>
 800f556:	2b03      	cmp	r3, #3
 800f558:	d024      	beq.n	800f5a4 <__gethex+0x2a8>
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d115      	bne.n	800f58a <__gethex+0x28e>
 800f55e:	42ae      	cmp	r6, r5
 800f560:	d113      	bne.n	800f58a <__gethex+0x28e>
 800f562:	2e01      	cmp	r6, #1
 800f564:	d10b      	bne.n	800f57e <__gethex+0x282>
 800f566:	9a02      	ldr	r2, [sp, #8]
 800f568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	2301      	movs	r3, #1
 800f570:	6123      	str	r3, [r4, #16]
 800f572:	f8ca 3000 	str.w	r3, [sl]
 800f576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f578:	2562      	movs	r5, #98	@ 0x62
 800f57a:	601c      	str	r4, [r3, #0]
 800f57c:	e73a      	b.n	800f3f4 <__gethex+0xf8>
 800f57e:	1e71      	subs	r1, r6, #1
 800f580:	4620      	mov	r0, r4
 800f582:	f000 fe30 	bl	80101e6 <__any_on>
 800f586:	2800      	cmp	r0, #0
 800f588:	d1ed      	bne.n	800f566 <__gethex+0x26a>
 800f58a:	9801      	ldr	r0, [sp, #4]
 800f58c:	4621      	mov	r1, r4
 800f58e:	f000 f9d9 	bl	800f944 <_Bfree>
 800f592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f594:	2300      	movs	r3, #0
 800f596:	6013      	str	r3, [r2, #0]
 800f598:	2550      	movs	r5, #80	@ 0x50
 800f59a:	e72b      	b.n	800f3f4 <__gethex+0xf8>
 800f59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f3      	bne.n	800f58a <__gethex+0x28e>
 800f5a2:	e7e0      	b.n	800f566 <__gethex+0x26a>
 800f5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1dd      	bne.n	800f566 <__gethex+0x26a>
 800f5aa:	e7ee      	b.n	800f58a <__gethex+0x28e>
 800f5ac:	08010f1c 	.word	0x08010f1c
 800f5b0:	0801102d 	.word	0x0801102d
 800f5b4:	0801103e 	.word	0x0801103e
 800f5b8:	1e6f      	subs	r7, r5, #1
 800f5ba:	f1b9 0f00 	cmp.w	r9, #0
 800f5be:	d130      	bne.n	800f622 <__gethex+0x326>
 800f5c0:	b127      	cbz	r7, 800f5cc <__gethex+0x2d0>
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f000 fe0e 	bl	80101e6 <__any_on>
 800f5ca:	4681      	mov	r9, r0
 800f5cc:	117a      	asrs	r2, r7, #5
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f5d4:	f007 071f 	and.w	r7, r7, #31
 800f5d8:	40bb      	lsls	r3, r7
 800f5da:	4213      	tst	r3, r2
 800f5dc:	4629      	mov	r1, r5
 800f5de:	4620      	mov	r0, r4
 800f5e0:	bf18      	it	ne
 800f5e2:	f049 0902 	orrne.w	r9, r9, #2
 800f5e6:	f7ff fe21 	bl	800f22c <rshift>
 800f5ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5ee:	1b76      	subs	r6, r6, r5
 800f5f0:	2502      	movs	r5, #2
 800f5f2:	f1b9 0f00 	cmp.w	r9, #0
 800f5f6:	d047      	beq.n	800f688 <__gethex+0x38c>
 800f5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d015      	beq.n	800f62c <__gethex+0x330>
 800f600:	2b03      	cmp	r3, #3
 800f602:	d017      	beq.n	800f634 <__gethex+0x338>
 800f604:	2b01      	cmp	r3, #1
 800f606:	d109      	bne.n	800f61c <__gethex+0x320>
 800f608:	f019 0f02 	tst.w	r9, #2
 800f60c:	d006      	beq.n	800f61c <__gethex+0x320>
 800f60e:	f8da 3000 	ldr.w	r3, [sl]
 800f612:	ea49 0903 	orr.w	r9, r9, r3
 800f616:	f019 0f01 	tst.w	r9, #1
 800f61a:	d10e      	bne.n	800f63a <__gethex+0x33e>
 800f61c:	f045 0510 	orr.w	r5, r5, #16
 800f620:	e032      	b.n	800f688 <__gethex+0x38c>
 800f622:	f04f 0901 	mov.w	r9, #1
 800f626:	e7d1      	b.n	800f5cc <__gethex+0x2d0>
 800f628:	2501      	movs	r5, #1
 800f62a:	e7e2      	b.n	800f5f2 <__gethex+0x2f6>
 800f62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f62e:	f1c3 0301 	rsb	r3, r3, #1
 800f632:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f636:	2b00      	cmp	r3, #0
 800f638:	d0f0      	beq.n	800f61c <__gethex+0x320>
 800f63a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f63e:	f104 0314 	add.w	r3, r4, #20
 800f642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f64a:	f04f 0c00 	mov.w	ip, #0
 800f64e:	4618      	mov	r0, r3
 800f650:	f853 2b04 	ldr.w	r2, [r3], #4
 800f654:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f658:	d01b      	beq.n	800f692 <__gethex+0x396>
 800f65a:	3201      	adds	r2, #1
 800f65c:	6002      	str	r2, [r0, #0]
 800f65e:	2d02      	cmp	r5, #2
 800f660:	f104 0314 	add.w	r3, r4, #20
 800f664:	d13c      	bne.n	800f6e0 <__gethex+0x3e4>
 800f666:	f8d8 2000 	ldr.w	r2, [r8]
 800f66a:	3a01      	subs	r2, #1
 800f66c:	42b2      	cmp	r2, r6
 800f66e:	d109      	bne.n	800f684 <__gethex+0x388>
 800f670:	1171      	asrs	r1, r6, #5
 800f672:	2201      	movs	r2, #1
 800f674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f678:	f006 061f 	and.w	r6, r6, #31
 800f67c:	fa02 f606 	lsl.w	r6, r2, r6
 800f680:	421e      	tst	r6, r3
 800f682:	d13a      	bne.n	800f6fa <__gethex+0x3fe>
 800f684:	f045 0520 	orr.w	r5, r5, #32
 800f688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f68a:	601c      	str	r4, [r3, #0]
 800f68c:	9b02      	ldr	r3, [sp, #8]
 800f68e:	601f      	str	r7, [r3, #0]
 800f690:	e6b0      	b.n	800f3f4 <__gethex+0xf8>
 800f692:	4299      	cmp	r1, r3
 800f694:	f843 cc04 	str.w	ip, [r3, #-4]
 800f698:	d8d9      	bhi.n	800f64e <__gethex+0x352>
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	459b      	cmp	fp, r3
 800f69e:	db17      	blt.n	800f6d0 <__gethex+0x3d4>
 800f6a0:	6861      	ldr	r1, [r4, #4]
 800f6a2:	9801      	ldr	r0, [sp, #4]
 800f6a4:	3101      	adds	r1, #1
 800f6a6:	f000 f90d 	bl	800f8c4 <_Balloc>
 800f6aa:	4681      	mov	r9, r0
 800f6ac:	b918      	cbnz	r0, 800f6b6 <__gethex+0x3ba>
 800f6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f718 <__gethex+0x41c>)
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	2184      	movs	r1, #132	@ 0x84
 800f6b4:	e6c5      	b.n	800f442 <__gethex+0x146>
 800f6b6:	6922      	ldr	r2, [r4, #16]
 800f6b8:	3202      	adds	r2, #2
 800f6ba:	f104 010c 	add.w	r1, r4, #12
 800f6be:	0092      	lsls	r2, r2, #2
 800f6c0:	300c      	adds	r0, #12
 800f6c2:	f7fe fefe 	bl	800e4c2 <memcpy>
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	9801      	ldr	r0, [sp, #4]
 800f6ca:	f000 f93b 	bl	800f944 <_Bfree>
 800f6ce:	464c      	mov	r4, r9
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6d8:	6122      	str	r2, [r4, #16]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	615a      	str	r2, [r3, #20]
 800f6de:	e7be      	b.n	800f65e <__gethex+0x362>
 800f6e0:	6922      	ldr	r2, [r4, #16]
 800f6e2:	455a      	cmp	r2, fp
 800f6e4:	dd0b      	ble.n	800f6fe <__gethex+0x402>
 800f6e6:	2101      	movs	r1, #1
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7ff fd9f 	bl	800f22c <rshift>
 800f6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6f2:	3701      	adds	r7, #1
 800f6f4:	42bb      	cmp	r3, r7
 800f6f6:	f6ff aee0 	blt.w	800f4ba <__gethex+0x1be>
 800f6fa:	2501      	movs	r5, #1
 800f6fc:	e7c2      	b.n	800f684 <__gethex+0x388>
 800f6fe:	f016 061f 	ands.w	r6, r6, #31
 800f702:	d0fa      	beq.n	800f6fa <__gethex+0x3fe>
 800f704:	4453      	add	r3, sl
 800f706:	f1c6 0620 	rsb	r6, r6, #32
 800f70a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f70e:	f000 f9cb 	bl	800faa8 <__hi0bits>
 800f712:	42b0      	cmp	r0, r6
 800f714:	dbe7      	blt.n	800f6e6 <__gethex+0x3ea>
 800f716:	e7f0      	b.n	800f6fa <__gethex+0x3fe>
 800f718:	0801102d 	.word	0x0801102d

0800f71c <L_shift>:
 800f71c:	f1c2 0208 	rsb	r2, r2, #8
 800f720:	0092      	lsls	r2, r2, #2
 800f722:	b570      	push	{r4, r5, r6, lr}
 800f724:	f1c2 0620 	rsb	r6, r2, #32
 800f728:	6843      	ldr	r3, [r0, #4]
 800f72a:	6804      	ldr	r4, [r0, #0]
 800f72c:	fa03 f506 	lsl.w	r5, r3, r6
 800f730:	432c      	orrs	r4, r5
 800f732:	40d3      	lsrs	r3, r2
 800f734:	6004      	str	r4, [r0, #0]
 800f736:	f840 3f04 	str.w	r3, [r0, #4]!
 800f73a:	4288      	cmp	r0, r1
 800f73c:	d3f4      	bcc.n	800f728 <L_shift+0xc>
 800f73e:	bd70      	pop	{r4, r5, r6, pc}

0800f740 <__match>:
 800f740:	b530      	push	{r4, r5, lr}
 800f742:	6803      	ldr	r3, [r0, #0]
 800f744:	3301      	adds	r3, #1
 800f746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f74a:	b914      	cbnz	r4, 800f752 <__match+0x12>
 800f74c:	6003      	str	r3, [r0, #0]
 800f74e:	2001      	movs	r0, #1
 800f750:	bd30      	pop	{r4, r5, pc}
 800f752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f756:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f75a:	2d19      	cmp	r5, #25
 800f75c:	bf98      	it	ls
 800f75e:	3220      	addls	r2, #32
 800f760:	42a2      	cmp	r2, r4
 800f762:	d0f0      	beq.n	800f746 <__match+0x6>
 800f764:	2000      	movs	r0, #0
 800f766:	e7f3      	b.n	800f750 <__match+0x10>

0800f768 <__hexnan>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	680b      	ldr	r3, [r1, #0]
 800f76e:	6801      	ldr	r1, [r0, #0]
 800f770:	115e      	asrs	r6, r3, #5
 800f772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f776:	f013 031f 	ands.w	r3, r3, #31
 800f77a:	b087      	sub	sp, #28
 800f77c:	bf18      	it	ne
 800f77e:	3604      	addne	r6, #4
 800f780:	2500      	movs	r5, #0
 800f782:	1f37      	subs	r7, r6, #4
 800f784:	4682      	mov	sl, r0
 800f786:	4690      	mov	r8, r2
 800f788:	9301      	str	r3, [sp, #4]
 800f78a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f78e:	46b9      	mov	r9, r7
 800f790:	463c      	mov	r4, r7
 800f792:	9502      	str	r5, [sp, #8]
 800f794:	46ab      	mov	fp, r5
 800f796:	784a      	ldrb	r2, [r1, #1]
 800f798:	1c4b      	adds	r3, r1, #1
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	b342      	cbz	r2, 800f7f0 <__hexnan+0x88>
 800f79e:	4610      	mov	r0, r2
 800f7a0:	9105      	str	r1, [sp, #20]
 800f7a2:	9204      	str	r2, [sp, #16]
 800f7a4:	f7ff fd94 	bl	800f2d0 <__hexdig_fun>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d151      	bne.n	800f850 <__hexnan+0xe8>
 800f7ac:	9a04      	ldr	r2, [sp, #16]
 800f7ae:	9905      	ldr	r1, [sp, #20]
 800f7b0:	2a20      	cmp	r2, #32
 800f7b2:	d818      	bhi.n	800f7e6 <__hexnan+0x7e>
 800f7b4:	9b02      	ldr	r3, [sp, #8]
 800f7b6:	459b      	cmp	fp, r3
 800f7b8:	dd13      	ble.n	800f7e2 <__hexnan+0x7a>
 800f7ba:	454c      	cmp	r4, r9
 800f7bc:	d206      	bcs.n	800f7cc <__hexnan+0x64>
 800f7be:	2d07      	cmp	r5, #7
 800f7c0:	dc04      	bgt.n	800f7cc <__hexnan+0x64>
 800f7c2:	462a      	mov	r2, r5
 800f7c4:	4649      	mov	r1, r9
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f7ff ffa8 	bl	800f71c <L_shift>
 800f7cc:	4544      	cmp	r4, r8
 800f7ce:	d952      	bls.n	800f876 <__hexnan+0x10e>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f1a4 0904 	sub.w	r9, r4, #4
 800f7d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7da:	f8cd b008 	str.w	fp, [sp, #8]
 800f7de:	464c      	mov	r4, r9
 800f7e0:	461d      	mov	r5, r3
 800f7e2:	9903      	ldr	r1, [sp, #12]
 800f7e4:	e7d7      	b.n	800f796 <__hexnan+0x2e>
 800f7e6:	2a29      	cmp	r2, #41	@ 0x29
 800f7e8:	d157      	bne.n	800f89a <__hexnan+0x132>
 800f7ea:	3102      	adds	r1, #2
 800f7ec:	f8ca 1000 	str.w	r1, [sl]
 800f7f0:	f1bb 0f00 	cmp.w	fp, #0
 800f7f4:	d051      	beq.n	800f89a <__hexnan+0x132>
 800f7f6:	454c      	cmp	r4, r9
 800f7f8:	d206      	bcs.n	800f808 <__hexnan+0xa0>
 800f7fa:	2d07      	cmp	r5, #7
 800f7fc:	dc04      	bgt.n	800f808 <__hexnan+0xa0>
 800f7fe:	462a      	mov	r2, r5
 800f800:	4649      	mov	r1, r9
 800f802:	4620      	mov	r0, r4
 800f804:	f7ff ff8a 	bl	800f71c <L_shift>
 800f808:	4544      	cmp	r4, r8
 800f80a:	d936      	bls.n	800f87a <__hexnan+0x112>
 800f80c:	f1a8 0204 	sub.w	r2, r8, #4
 800f810:	4623      	mov	r3, r4
 800f812:	f853 1b04 	ldr.w	r1, [r3], #4
 800f816:	f842 1f04 	str.w	r1, [r2, #4]!
 800f81a:	429f      	cmp	r7, r3
 800f81c:	d2f9      	bcs.n	800f812 <__hexnan+0xaa>
 800f81e:	1b3b      	subs	r3, r7, r4
 800f820:	f023 0303 	bic.w	r3, r3, #3
 800f824:	3304      	adds	r3, #4
 800f826:	3401      	adds	r4, #1
 800f828:	3e03      	subs	r6, #3
 800f82a:	42b4      	cmp	r4, r6
 800f82c:	bf88      	it	hi
 800f82e:	2304      	movhi	r3, #4
 800f830:	4443      	add	r3, r8
 800f832:	2200      	movs	r2, #0
 800f834:	f843 2b04 	str.w	r2, [r3], #4
 800f838:	429f      	cmp	r7, r3
 800f83a:	d2fb      	bcs.n	800f834 <__hexnan+0xcc>
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	b91b      	cbnz	r3, 800f848 <__hexnan+0xe0>
 800f840:	4547      	cmp	r7, r8
 800f842:	d128      	bne.n	800f896 <__hexnan+0x12e>
 800f844:	2301      	movs	r3, #1
 800f846:	603b      	str	r3, [r7, #0]
 800f848:	2005      	movs	r0, #5
 800f84a:	b007      	add	sp, #28
 800f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f850:	3501      	adds	r5, #1
 800f852:	2d08      	cmp	r5, #8
 800f854:	f10b 0b01 	add.w	fp, fp, #1
 800f858:	dd06      	ble.n	800f868 <__hexnan+0x100>
 800f85a:	4544      	cmp	r4, r8
 800f85c:	d9c1      	bls.n	800f7e2 <__hexnan+0x7a>
 800f85e:	2300      	movs	r3, #0
 800f860:	f844 3c04 	str.w	r3, [r4, #-4]
 800f864:	2501      	movs	r5, #1
 800f866:	3c04      	subs	r4, #4
 800f868:	6822      	ldr	r2, [r4, #0]
 800f86a:	f000 000f 	and.w	r0, r0, #15
 800f86e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f872:	6020      	str	r0, [r4, #0]
 800f874:	e7b5      	b.n	800f7e2 <__hexnan+0x7a>
 800f876:	2508      	movs	r5, #8
 800f878:	e7b3      	b.n	800f7e2 <__hexnan+0x7a>
 800f87a:	9b01      	ldr	r3, [sp, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0dd      	beq.n	800f83c <__hexnan+0xd4>
 800f880:	f1c3 0320 	rsb	r3, r3, #32
 800f884:	f04f 32ff 	mov.w	r2, #4294967295
 800f888:	40da      	lsrs	r2, r3
 800f88a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f88e:	4013      	ands	r3, r2
 800f890:	f846 3c04 	str.w	r3, [r6, #-4]
 800f894:	e7d2      	b.n	800f83c <__hexnan+0xd4>
 800f896:	3f04      	subs	r7, #4
 800f898:	e7d0      	b.n	800f83c <__hexnan+0xd4>
 800f89a:	2004      	movs	r0, #4
 800f89c:	e7d5      	b.n	800f84a <__hexnan+0xe2>

0800f89e <__ascii_mbtowc>:
 800f89e:	b082      	sub	sp, #8
 800f8a0:	b901      	cbnz	r1, 800f8a4 <__ascii_mbtowc+0x6>
 800f8a2:	a901      	add	r1, sp, #4
 800f8a4:	b142      	cbz	r2, 800f8b8 <__ascii_mbtowc+0x1a>
 800f8a6:	b14b      	cbz	r3, 800f8bc <__ascii_mbtowc+0x1e>
 800f8a8:	7813      	ldrb	r3, [r2, #0]
 800f8aa:	600b      	str	r3, [r1, #0]
 800f8ac:	7812      	ldrb	r2, [r2, #0]
 800f8ae:	1e10      	subs	r0, r2, #0
 800f8b0:	bf18      	it	ne
 800f8b2:	2001      	movne	r0, #1
 800f8b4:	b002      	add	sp, #8
 800f8b6:	4770      	bx	lr
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	e7fb      	b.n	800f8b4 <__ascii_mbtowc+0x16>
 800f8bc:	f06f 0001 	mvn.w	r0, #1
 800f8c0:	e7f8      	b.n	800f8b4 <__ascii_mbtowc+0x16>
	...

0800f8c4 <_Balloc>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	69c6      	ldr	r6, [r0, #28]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	b976      	cbnz	r6, 800f8ec <_Balloc+0x28>
 800f8ce:	2010      	movs	r0, #16
 800f8d0:	f7fc fef8 	bl	800c6c4 <malloc>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	61e0      	str	r0, [r4, #28]
 800f8d8:	b920      	cbnz	r0, 800f8e4 <_Balloc+0x20>
 800f8da:	4b18      	ldr	r3, [pc, #96]	@ (800f93c <_Balloc+0x78>)
 800f8dc:	4818      	ldr	r0, [pc, #96]	@ (800f940 <_Balloc+0x7c>)
 800f8de:	216b      	movs	r1, #107	@ 0x6b
 800f8e0:	f000 ff48 	bl	8010774 <__assert_func>
 800f8e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8e8:	6006      	str	r6, [r0, #0]
 800f8ea:	60c6      	str	r6, [r0, #12]
 800f8ec:	69e6      	ldr	r6, [r4, #28]
 800f8ee:	68f3      	ldr	r3, [r6, #12]
 800f8f0:	b183      	cbz	r3, 800f914 <_Balloc+0x50>
 800f8f2:	69e3      	ldr	r3, [r4, #28]
 800f8f4:	68db      	ldr	r3, [r3, #12]
 800f8f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8fa:	b9b8      	cbnz	r0, 800f92c <_Balloc+0x68>
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	fa01 f605 	lsl.w	r6, r1, r5
 800f902:	1d72      	adds	r2, r6, #5
 800f904:	0092      	lsls	r2, r2, #2
 800f906:	4620      	mov	r0, r4
 800f908:	f000 ff52 	bl	80107b0 <_calloc_r>
 800f90c:	b160      	cbz	r0, 800f928 <_Balloc+0x64>
 800f90e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f912:	e00e      	b.n	800f932 <_Balloc+0x6e>
 800f914:	2221      	movs	r2, #33	@ 0x21
 800f916:	2104      	movs	r1, #4
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 ff49 	bl	80107b0 <_calloc_r>
 800f91e:	69e3      	ldr	r3, [r4, #28]
 800f920:	60f0      	str	r0, [r6, #12]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1e4      	bne.n	800f8f2 <_Balloc+0x2e>
 800f928:	2000      	movs	r0, #0
 800f92a:	bd70      	pop	{r4, r5, r6, pc}
 800f92c:	6802      	ldr	r2, [r0, #0]
 800f92e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f932:	2300      	movs	r3, #0
 800f934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f938:	e7f7      	b.n	800f92a <_Balloc+0x66>
 800f93a:	bf00      	nop
 800f93c:	08010fbe 	.word	0x08010fbe
 800f940:	0801109e 	.word	0x0801109e

0800f944 <_Bfree>:
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	69c6      	ldr	r6, [r0, #28]
 800f948:	4605      	mov	r5, r0
 800f94a:	460c      	mov	r4, r1
 800f94c:	b976      	cbnz	r6, 800f96c <_Bfree+0x28>
 800f94e:	2010      	movs	r0, #16
 800f950:	f7fc feb8 	bl	800c6c4 <malloc>
 800f954:	4602      	mov	r2, r0
 800f956:	61e8      	str	r0, [r5, #28]
 800f958:	b920      	cbnz	r0, 800f964 <_Bfree+0x20>
 800f95a:	4b09      	ldr	r3, [pc, #36]	@ (800f980 <_Bfree+0x3c>)
 800f95c:	4809      	ldr	r0, [pc, #36]	@ (800f984 <_Bfree+0x40>)
 800f95e:	218f      	movs	r1, #143	@ 0x8f
 800f960:	f000 ff08 	bl	8010774 <__assert_func>
 800f964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f968:	6006      	str	r6, [r0, #0]
 800f96a:	60c6      	str	r6, [r0, #12]
 800f96c:	b13c      	cbz	r4, 800f97e <_Bfree+0x3a>
 800f96e:	69eb      	ldr	r3, [r5, #28]
 800f970:	6862      	ldr	r2, [r4, #4]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f978:	6021      	str	r1, [r4, #0]
 800f97a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f97e:	bd70      	pop	{r4, r5, r6, pc}
 800f980:	08010fbe 	.word	0x08010fbe
 800f984:	0801109e 	.word	0x0801109e

0800f988 <__multadd>:
 800f988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98c:	690d      	ldr	r5, [r1, #16]
 800f98e:	4607      	mov	r7, r0
 800f990:	460c      	mov	r4, r1
 800f992:	461e      	mov	r6, r3
 800f994:	f101 0c14 	add.w	ip, r1, #20
 800f998:	2000      	movs	r0, #0
 800f99a:	f8dc 3000 	ldr.w	r3, [ip]
 800f99e:	b299      	uxth	r1, r3
 800f9a0:	fb02 6101 	mla	r1, r2, r1, r6
 800f9a4:	0c1e      	lsrs	r6, r3, #16
 800f9a6:	0c0b      	lsrs	r3, r1, #16
 800f9a8:	fb02 3306 	mla	r3, r2, r6, r3
 800f9ac:	b289      	uxth	r1, r1
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9b4:	4285      	cmp	r5, r0
 800f9b6:	f84c 1b04 	str.w	r1, [ip], #4
 800f9ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9be:	dcec      	bgt.n	800f99a <__multadd+0x12>
 800f9c0:	b30e      	cbz	r6, 800fa06 <__multadd+0x7e>
 800f9c2:	68a3      	ldr	r3, [r4, #8]
 800f9c4:	42ab      	cmp	r3, r5
 800f9c6:	dc19      	bgt.n	800f9fc <__multadd+0x74>
 800f9c8:	6861      	ldr	r1, [r4, #4]
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	3101      	adds	r1, #1
 800f9ce:	f7ff ff79 	bl	800f8c4 <_Balloc>
 800f9d2:	4680      	mov	r8, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <__multadd+0x5a>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800fa0c <__multadd+0x84>)
 800f9da:	480d      	ldr	r0, [pc, #52]	@ (800fa10 <__multadd+0x88>)
 800f9dc:	21ba      	movs	r1, #186	@ 0xba
 800f9de:	f000 fec9 	bl	8010774 <__assert_func>
 800f9e2:	6922      	ldr	r2, [r4, #16]
 800f9e4:	3202      	adds	r2, #2
 800f9e6:	f104 010c 	add.w	r1, r4, #12
 800f9ea:	0092      	lsls	r2, r2, #2
 800f9ec:	300c      	adds	r0, #12
 800f9ee:	f7fe fd68 	bl	800e4c2 <memcpy>
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	4638      	mov	r0, r7
 800f9f6:	f7ff ffa5 	bl	800f944 <_Bfree>
 800f9fa:	4644      	mov	r4, r8
 800f9fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa00:	3501      	adds	r5, #1
 800fa02:	615e      	str	r6, [r3, #20]
 800fa04:	6125      	str	r5, [r4, #16]
 800fa06:	4620      	mov	r0, r4
 800fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa0c:	0801102d 	.word	0x0801102d
 800fa10:	0801109e 	.word	0x0801109e

0800fa14 <__s2b>:
 800fa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa18:	460c      	mov	r4, r1
 800fa1a:	4615      	mov	r5, r2
 800fa1c:	461f      	mov	r7, r3
 800fa1e:	2209      	movs	r2, #9
 800fa20:	3308      	adds	r3, #8
 800fa22:	4606      	mov	r6, r0
 800fa24:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa28:	2100      	movs	r1, #0
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	db09      	blt.n	800fa44 <__s2b+0x30>
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff ff47 	bl	800f8c4 <_Balloc>
 800fa36:	b940      	cbnz	r0, 800fa4a <__s2b+0x36>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	4b19      	ldr	r3, [pc, #100]	@ (800faa0 <__s2b+0x8c>)
 800fa3c:	4819      	ldr	r0, [pc, #100]	@ (800faa4 <__s2b+0x90>)
 800fa3e:	21d3      	movs	r1, #211	@ 0xd3
 800fa40:	f000 fe98 	bl	8010774 <__assert_func>
 800fa44:	0052      	lsls	r2, r2, #1
 800fa46:	3101      	adds	r1, #1
 800fa48:	e7f0      	b.n	800fa2c <__s2b+0x18>
 800fa4a:	9b08      	ldr	r3, [sp, #32]
 800fa4c:	6143      	str	r3, [r0, #20]
 800fa4e:	2d09      	cmp	r5, #9
 800fa50:	f04f 0301 	mov.w	r3, #1
 800fa54:	6103      	str	r3, [r0, #16]
 800fa56:	dd16      	ble.n	800fa86 <__s2b+0x72>
 800fa58:	f104 0909 	add.w	r9, r4, #9
 800fa5c:	46c8      	mov	r8, r9
 800fa5e:	442c      	add	r4, r5
 800fa60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa64:	4601      	mov	r1, r0
 800fa66:	3b30      	subs	r3, #48	@ 0x30
 800fa68:	220a      	movs	r2, #10
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7ff ff8c 	bl	800f988 <__multadd>
 800fa70:	45a0      	cmp	r8, r4
 800fa72:	d1f5      	bne.n	800fa60 <__s2b+0x4c>
 800fa74:	f1a5 0408 	sub.w	r4, r5, #8
 800fa78:	444c      	add	r4, r9
 800fa7a:	1b2d      	subs	r5, r5, r4
 800fa7c:	1963      	adds	r3, r4, r5
 800fa7e:	42bb      	cmp	r3, r7
 800fa80:	db04      	blt.n	800fa8c <__s2b+0x78>
 800fa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa86:	340a      	adds	r4, #10
 800fa88:	2509      	movs	r5, #9
 800fa8a:	e7f6      	b.n	800fa7a <__s2b+0x66>
 800fa8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa90:	4601      	mov	r1, r0
 800fa92:	3b30      	subs	r3, #48	@ 0x30
 800fa94:	220a      	movs	r2, #10
 800fa96:	4630      	mov	r0, r6
 800fa98:	f7ff ff76 	bl	800f988 <__multadd>
 800fa9c:	e7ee      	b.n	800fa7c <__s2b+0x68>
 800fa9e:	bf00      	nop
 800faa0:	0801102d 	.word	0x0801102d
 800faa4:	0801109e 	.word	0x0801109e

0800faa8 <__hi0bits>:
 800faa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800faac:	4603      	mov	r3, r0
 800faae:	bf36      	itet	cc
 800fab0:	0403      	lslcc	r3, r0, #16
 800fab2:	2000      	movcs	r0, #0
 800fab4:	2010      	movcc	r0, #16
 800fab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800faba:	bf3c      	itt	cc
 800fabc:	021b      	lslcc	r3, r3, #8
 800fabe:	3008      	addcc	r0, #8
 800fac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fac4:	bf3c      	itt	cc
 800fac6:	011b      	lslcc	r3, r3, #4
 800fac8:	3004      	addcc	r0, #4
 800faca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800face:	bf3c      	itt	cc
 800fad0:	009b      	lslcc	r3, r3, #2
 800fad2:	3002      	addcc	r0, #2
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	db05      	blt.n	800fae4 <__hi0bits+0x3c>
 800fad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fadc:	f100 0001 	add.w	r0, r0, #1
 800fae0:	bf08      	it	eq
 800fae2:	2020      	moveq	r0, #32
 800fae4:	4770      	bx	lr

0800fae6 <__lo0bits>:
 800fae6:	6803      	ldr	r3, [r0, #0]
 800fae8:	4602      	mov	r2, r0
 800faea:	f013 0007 	ands.w	r0, r3, #7
 800faee:	d00b      	beq.n	800fb08 <__lo0bits+0x22>
 800faf0:	07d9      	lsls	r1, r3, #31
 800faf2:	d421      	bmi.n	800fb38 <__lo0bits+0x52>
 800faf4:	0798      	lsls	r0, r3, #30
 800faf6:	bf49      	itett	mi
 800faf8:	085b      	lsrmi	r3, r3, #1
 800fafa:	089b      	lsrpl	r3, r3, #2
 800fafc:	2001      	movmi	r0, #1
 800fafe:	6013      	strmi	r3, [r2, #0]
 800fb00:	bf5c      	itt	pl
 800fb02:	6013      	strpl	r3, [r2, #0]
 800fb04:	2002      	movpl	r0, #2
 800fb06:	4770      	bx	lr
 800fb08:	b299      	uxth	r1, r3
 800fb0a:	b909      	cbnz	r1, 800fb10 <__lo0bits+0x2a>
 800fb0c:	0c1b      	lsrs	r3, r3, #16
 800fb0e:	2010      	movs	r0, #16
 800fb10:	b2d9      	uxtb	r1, r3
 800fb12:	b909      	cbnz	r1, 800fb18 <__lo0bits+0x32>
 800fb14:	3008      	adds	r0, #8
 800fb16:	0a1b      	lsrs	r3, r3, #8
 800fb18:	0719      	lsls	r1, r3, #28
 800fb1a:	bf04      	itt	eq
 800fb1c:	091b      	lsreq	r3, r3, #4
 800fb1e:	3004      	addeq	r0, #4
 800fb20:	0799      	lsls	r1, r3, #30
 800fb22:	bf04      	itt	eq
 800fb24:	089b      	lsreq	r3, r3, #2
 800fb26:	3002      	addeq	r0, #2
 800fb28:	07d9      	lsls	r1, r3, #31
 800fb2a:	d403      	bmi.n	800fb34 <__lo0bits+0x4e>
 800fb2c:	085b      	lsrs	r3, r3, #1
 800fb2e:	f100 0001 	add.w	r0, r0, #1
 800fb32:	d003      	beq.n	800fb3c <__lo0bits+0x56>
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	4770      	bx	lr
 800fb38:	2000      	movs	r0, #0
 800fb3a:	4770      	bx	lr
 800fb3c:	2020      	movs	r0, #32
 800fb3e:	4770      	bx	lr

0800fb40 <__i2b>:
 800fb40:	b510      	push	{r4, lr}
 800fb42:	460c      	mov	r4, r1
 800fb44:	2101      	movs	r1, #1
 800fb46:	f7ff febd 	bl	800f8c4 <_Balloc>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	b928      	cbnz	r0, 800fb5a <__i2b+0x1a>
 800fb4e:	4b05      	ldr	r3, [pc, #20]	@ (800fb64 <__i2b+0x24>)
 800fb50:	4805      	ldr	r0, [pc, #20]	@ (800fb68 <__i2b+0x28>)
 800fb52:	f240 1145 	movw	r1, #325	@ 0x145
 800fb56:	f000 fe0d 	bl	8010774 <__assert_func>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	6144      	str	r4, [r0, #20]
 800fb5e:	6103      	str	r3, [r0, #16]
 800fb60:	bd10      	pop	{r4, pc}
 800fb62:	bf00      	nop
 800fb64:	0801102d 	.word	0x0801102d
 800fb68:	0801109e 	.word	0x0801109e

0800fb6c <__multiply>:
 800fb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb70:	4614      	mov	r4, r2
 800fb72:	690a      	ldr	r2, [r1, #16]
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	bfa8      	it	ge
 800fb7a:	4623      	movge	r3, r4
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	bfa4      	itt	ge
 800fb80:	460c      	movge	r4, r1
 800fb82:	461f      	movge	r7, r3
 800fb84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fb88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fb8c:	68a3      	ldr	r3, [r4, #8]
 800fb8e:	6861      	ldr	r1, [r4, #4]
 800fb90:	eb0a 0609 	add.w	r6, sl, r9
 800fb94:	42b3      	cmp	r3, r6
 800fb96:	b085      	sub	sp, #20
 800fb98:	bfb8      	it	lt
 800fb9a:	3101      	addlt	r1, #1
 800fb9c:	f7ff fe92 	bl	800f8c4 <_Balloc>
 800fba0:	b930      	cbnz	r0, 800fbb0 <__multiply+0x44>
 800fba2:	4602      	mov	r2, r0
 800fba4:	4b44      	ldr	r3, [pc, #272]	@ (800fcb8 <__multiply+0x14c>)
 800fba6:	4845      	ldr	r0, [pc, #276]	@ (800fcbc <__multiply+0x150>)
 800fba8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fbac:	f000 fde2 	bl	8010774 <__assert_func>
 800fbb0:	f100 0514 	add.w	r5, r0, #20
 800fbb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbb8:	462b      	mov	r3, r5
 800fbba:	2200      	movs	r2, #0
 800fbbc:	4543      	cmp	r3, r8
 800fbbe:	d321      	bcc.n	800fc04 <__multiply+0x98>
 800fbc0:	f107 0114 	add.w	r1, r7, #20
 800fbc4:	f104 0214 	add.w	r2, r4, #20
 800fbc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fbcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fbd0:	9302      	str	r3, [sp, #8]
 800fbd2:	1b13      	subs	r3, r2, r4
 800fbd4:	3b15      	subs	r3, #21
 800fbd6:	f023 0303 	bic.w	r3, r3, #3
 800fbda:	3304      	adds	r3, #4
 800fbdc:	f104 0715 	add.w	r7, r4, #21
 800fbe0:	42ba      	cmp	r2, r7
 800fbe2:	bf38      	it	cc
 800fbe4:	2304      	movcc	r3, #4
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	9103      	str	r1, [sp, #12]
 800fbec:	428b      	cmp	r3, r1
 800fbee:	d80c      	bhi.n	800fc0a <__multiply+0x9e>
 800fbf0:	2e00      	cmp	r6, #0
 800fbf2:	dd03      	ble.n	800fbfc <__multiply+0x90>
 800fbf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d05b      	beq.n	800fcb4 <__multiply+0x148>
 800fbfc:	6106      	str	r6, [r0, #16]
 800fbfe:	b005      	add	sp, #20
 800fc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc04:	f843 2b04 	str.w	r2, [r3], #4
 800fc08:	e7d8      	b.n	800fbbc <__multiply+0x50>
 800fc0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc0e:	f1ba 0f00 	cmp.w	sl, #0
 800fc12:	d024      	beq.n	800fc5e <__multiply+0xf2>
 800fc14:	f104 0e14 	add.w	lr, r4, #20
 800fc18:	46a9      	mov	r9, r5
 800fc1a:	f04f 0c00 	mov.w	ip, #0
 800fc1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc22:	f8d9 3000 	ldr.w	r3, [r9]
 800fc26:	fa1f fb87 	uxth.w	fp, r7
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fc30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fc34:	f8d9 7000 	ldr.w	r7, [r9]
 800fc38:	4463      	add	r3, ip
 800fc3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800fc42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc4c:	4572      	cmp	r2, lr
 800fc4e:	f849 3b04 	str.w	r3, [r9], #4
 800fc52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc56:	d8e2      	bhi.n	800fc1e <__multiply+0xb2>
 800fc58:	9b01      	ldr	r3, [sp, #4]
 800fc5a:	f845 c003 	str.w	ip, [r5, r3]
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc64:	3104      	adds	r1, #4
 800fc66:	f1b9 0f00 	cmp.w	r9, #0
 800fc6a:	d021      	beq.n	800fcb0 <__multiply+0x144>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	f104 0c14 	add.w	ip, r4, #20
 800fc72:	46ae      	mov	lr, r5
 800fc74:	f04f 0a00 	mov.w	sl, #0
 800fc78:	f8bc b000 	ldrh.w	fp, [ip]
 800fc7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fc80:	fb09 770b 	mla	r7, r9, fp, r7
 800fc84:	4457      	add	r7, sl
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc8c:	f84e 3b04 	str.w	r3, [lr], #4
 800fc90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc98:	f8be 3000 	ldrh.w	r3, [lr]
 800fc9c:	fb09 330a 	mla	r3, r9, sl, r3
 800fca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fca4:	4562      	cmp	r2, ip
 800fca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcaa:	d8e5      	bhi.n	800fc78 <__multiply+0x10c>
 800fcac:	9f01      	ldr	r7, [sp, #4]
 800fcae:	51eb      	str	r3, [r5, r7]
 800fcb0:	3504      	adds	r5, #4
 800fcb2:	e799      	b.n	800fbe8 <__multiply+0x7c>
 800fcb4:	3e01      	subs	r6, #1
 800fcb6:	e79b      	b.n	800fbf0 <__multiply+0x84>
 800fcb8:	0801102d 	.word	0x0801102d
 800fcbc:	0801109e 	.word	0x0801109e

0800fcc0 <__pow5mult>:
 800fcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc4:	4615      	mov	r5, r2
 800fcc6:	f012 0203 	ands.w	r2, r2, #3
 800fcca:	4607      	mov	r7, r0
 800fccc:	460e      	mov	r6, r1
 800fcce:	d007      	beq.n	800fce0 <__pow5mult+0x20>
 800fcd0:	4c25      	ldr	r4, [pc, #148]	@ (800fd68 <__pow5mult+0xa8>)
 800fcd2:	3a01      	subs	r2, #1
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcda:	f7ff fe55 	bl	800f988 <__multadd>
 800fcde:	4606      	mov	r6, r0
 800fce0:	10ad      	asrs	r5, r5, #2
 800fce2:	d03d      	beq.n	800fd60 <__pow5mult+0xa0>
 800fce4:	69fc      	ldr	r4, [r7, #28]
 800fce6:	b97c      	cbnz	r4, 800fd08 <__pow5mult+0x48>
 800fce8:	2010      	movs	r0, #16
 800fcea:	f7fc fceb 	bl	800c6c4 <malloc>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	61f8      	str	r0, [r7, #28]
 800fcf2:	b928      	cbnz	r0, 800fd00 <__pow5mult+0x40>
 800fcf4:	4b1d      	ldr	r3, [pc, #116]	@ (800fd6c <__pow5mult+0xac>)
 800fcf6:	481e      	ldr	r0, [pc, #120]	@ (800fd70 <__pow5mult+0xb0>)
 800fcf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fcfc:	f000 fd3a 	bl	8010774 <__assert_func>
 800fd00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd04:	6004      	str	r4, [r0, #0]
 800fd06:	60c4      	str	r4, [r0, #12]
 800fd08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd10:	b94c      	cbnz	r4, 800fd26 <__pow5mult+0x66>
 800fd12:	f240 2171 	movw	r1, #625	@ 0x271
 800fd16:	4638      	mov	r0, r7
 800fd18:	f7ff ff12 	bl	800fb40 <__i2b>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd22:	4604      	mov	r4, r0
 800fd24:	6003      	str	r3, [r0, #0]
 800fd26:	f04f 0900 	mov.w	r9, #0
 800fd2a:	07eb      	lsls	r3, r5, #31
 800fd2c:	d50a      	bpl.n	800fd44 <__pow5mult+0x84>
 800fd2e:	4631      	mov	r1, r6
 800fd30:	4622      	mov	r2, r4
 800fd32:	4638      	mov	r0, r7
 800fd34:	f7ff ff1a 	bl	800fb6c <__multiply>
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4680      	mov	r8, r0
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f7ff fe01 	bl	800f944 <_Bfree>
 800fd42:	4646      	mov	r6, r8
 800fd44:	106d      	asrs	r5, r5, #1
 800fd46:	d00b      	beq.n	800fd60 <__pow5mult+0xa0>
 800fd48:	6820      	ldr	r0, [r4, #0]
 800fd4a:	b938      	cbnz	r0, 800fd5c <__pow5mult+0x9c>
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	4621      	mov	r1, r4
 800fd50:	4638      	mov	r0, r7
 800fd52:	f7ff ff0b 	bl	800fb6c <__multiply>
 800fd56:	6020      	str	r0, [r4, #0]
 800fd58:	f8c0 9000 	str.w	r9, [r0]
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	e7e4      	b.n	800fd2a <__pow5mult+0x6a>
 800fd60:	4630      	mov	r0, r6
 800fd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd66:	bf00      	nop
 800fd68:	080110f8 	.word	0x080110f8
 800fd6c:	08010fbe 	.word	0x08010fbe
 800fd70:	0801109e 	.word	0x0801109e

0800fd74 <__lshift>:
 800fd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd78:	460c      	mov	r4, r1
 800fd7a:	6849      	ldr	r1, [r1, #4]
 800fd7c:	6923      	ldr	r3, [r4, #16]
 800fd7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd82:	68a3      	ldr	r3, [r4, #8]
 800fd84:	4607      	mov	r7, r0
 800fd86:	4691      	mov	r9, r2
 800fd88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd8c:	f108 0601 	add.w	r6, r8, #1
 800fd90:	42b3      	cmp	r3, r6
 800fd92:	db0b      	blt.n	800fdac <__lshift+0x38>
 800fd94:	4638      	mov	r0, r7
 800fd96:	f7ff fd95 	bl	800f8c4 <_Balloc>
 800fd9a:	4605      	mov	r5, r0
 800fd9c:	b948      	cbnz	r0, 800fdb2 <__lshift+0x3e>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	4b28      	ldr	r3, [pc, #160]	@ (800fe44 <__lshift+0xd0>)
 800fda2:	4829      	ldr	r0, [pc, #164]	@ (800fe48 <__lshift+0xd4>)
 800fda4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fda8:	f000 fce4 	bl	8010774 <__assert_func>
 800fdac:	3101      	adds	r1, #1
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	e7ee      	b.n	800fd90 <__lshift+0x1c>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	f100 0114 	add.w	r1, r0, #20
 800fdb8:	f100 0210 	add.w	r2, r0, #16
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	4553      	cmp	r3, sl
 800fdc0:	db33      	blt.n	800fe2a <__lshift+0xb6>
 800fdc2:	6920      	ldr	r0, [r4, #16]
 800fdc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdc8:	f104 0314 	add.w	r3, r4, #20
 800fdcc:	f019 091f 	ands.w	r9, r9, #31
 800fdd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fdd8:	d02b      	beq.n	800fe32 <__lshift+0xbe>
 800fdda:	f1c9 0e20 	rsb	lr, r9, #32
 800fdde:	468a      	mov	sl, r1
 800fde0:	2200      	movs	r2, #0
 800fde2:	6818      	ldr	r0, [r3, #0]
 800fde4:	fa00 f009 	lsl.w	r0, r0, r9
 800fde8:	4310      	orrs	r0, r2
 800fdea:	f84a 0b04 	str.w	r0, [sl], #4
 800fdee:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf2:	459c      	cmp	ip, r3
 800fdf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdf8:	d8f3      	bhi.n	800fde2 <__lshift+0x6e>
 800fdfa:	ebac 0304 	sub.w	r3, ip, r4
 800fdfe:	3b15      	subs	r3, #21
 800fe00:	f023 0303 	bic.w	r3, r3, #3
 800fe04:	3304      	adds	r3, #4
 800fe06:	f104 0015 	add.w	r0, r4, #21
 800fe0a:	4584      	cmp	ip, r0
 800fe0c:	bf38      	it	cc
 800fe0e:	2304      	movcc	r3, #4
 800fe10:	50ca      	str	r2, [r1, r3]
 800fe12:	b10a      	cbz	r2, 800fe18 <__lshift+0xa4>
 800fe14:	f108 0602 	add.w	r6, r8, #2
 800fe18:	3e01      	subs	r6, #1
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	612e      	str	r6, [r5, #16]
 800fe1e:	4621      	mov	r1, r4
 800fe20:	f7ff fd90 	bl	800f944 <_Bfree>
 800fe24:	4628      	mov	r0, r5
 800fe26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe2e:	3301      	adds	r3, #1
 800fe30:	e7c5      	b.n	800fdbe <__lshift+0x4a>
 800fe32:	3904      	subs	r1, #4
 800fe34:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe38:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe3c:	459c      	cmp	ip, r3
 800fe3e:	d8f9      	bhi.n	800fe34 <__lshift+0xc0>
 800fe40:	e7ea      	b.n	800fe18 <__lshift+0xa4>
 800fe42:	bf00      	nop
 800fe44:	0801102d 	.word	0x0801102d
 800fe48:	0801109e 	.word	0x0801109e

0800fe4c <__mcmp>:
 800fe4c:	690a      	ldr	r2, [r1, #16]
 800fe4e:	4603      	mov	r3, r0
 800fe50:	6900      	ldr	r0, [r0, #16]
 800fe52:	1a80      	subs	r0, r0, r2
 800fe54:	b530      	push	{r4, r5, lr}
 800fe56:	d10e      	bne.n	800fe76 <__mcmp+0x2a>
 800fe58:	3314      	adds	r3, #20
 800fe5a:	3114      	adds	r1, #20
 800fe5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe6c:	4295      	cmp	r5, r2
 800fe6e:	d003      	beq.n	800fe78 <__mcmp+0x2c>
 800fe70:	d205      	bcs.n	800fe7e <__mcmp+0x32>
 800fe72:	f04f 30ff 	mov.w	r0, #4294967295
 800fe76:	bd30      	pop	{r4, r5, pc}
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	d3f3      	bcc.n	800fe64 <__mcmp+0x18>
 800fe7c:	e7fb      	b.n	800fe76 <__mcmp+0x2a>
 800fe7e:	2001      	movs	r0, #1
 800fe80:	e7f9      	b.n	800fe76 <__mcmp+0x2a>
	...

0800fe84 <__mdiff>:
 800fe84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe88:	4689      	mov	r9, r1
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	4648      	mov	r0, r9
 800fe90:	4614      	mov	r4, r2
 800fe92:	f7ff ffdb 	bl	800fe4c <__mcmp>
 800fe96:	1e05      	subs	r5, r0, #0
 800fe98:	d112      	bne.n	800fec0 <__mdiff+0x3c>
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f7ff fd11 	bl	800f8c4 <_Balloc>
 800fea2:	4602      	mov	r2, r0
 800fea4:	b928      	cbnz	r0, 800feb2 <__mdiff+0x2e>
 800fea6:	4b3f      	ldr	r3, [pc, #252]	@ (800ffa4 <__mdiff+0x120>)
 800fea8:	f240 2137 	movw	r1, #567	@ 0x237
 800feac:	483e      	ldr	r0, [pc, #248]	@ (800ffa8 <__mdiff+0x124>)
 800feae:	f000 fc61 	bl	8010774 <__assert_func>
 800feb2:	2301      	movs	r3, #1
 800feb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800feb8:	4610      	mov	r0, r2
 800feba:	b003      	add	sp, #12
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	bfbc      	itt	lt
 800fec2:	464b      	movlt	r3, r9
 800fec4:	46a1      	movlt	r9, r4
 800fec6:	4630      	mov	r0, r6
 800fec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fecc:	bfba      	itte	lt
 800fece:	461c      	movlt	r4, r3
 800fed0:	2501      	movlt	r5, #1
 800fed2:	2500      	movge	r5, #0
 800fed4:	f7ff fcf6 	bl	800f8c4 <_Balloc>
 800fed8:	4602      	mov	r2, r0
 800feda:	b918      	cbnz	r0, 800fee4 <__mdiff+0x60>
 800fedc:	4b31      	ldr	r3, [pc, #196]	@ (800ffa4 <__mdiff+0x120>)
 800fede:	f240 2145 	movw	r1, #581	@ 0x245
 800fee2:	e7e3      	b.n	800feac <__mdiff+0x28>
 800fee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fee8:	6926      	ldr	r6, [r4, #16]
 800feea:	60c5      	str	r5, [r0, #12]
 800feec:	f109 0310 	add.w	r3, r9, #16
 800fef0:	f109 0514 	add.w	r5, r9, #20
 800fef4:	f104 0e14 	add.w	lr, r4, #20
 800fef8:	f100 0b14 	add.w	fp, r0, #20
 800fefc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff04:	9301      	str	r3, [sp, #4]
 800ff06:	46d9      	mov	r9, fp
 800ff08:	f04f 0c00 	mov.w	ip, #0
 800ff0c:	9b01      	ldr	r3, [sp, #4]
 800ff0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff16:	9301      	str	r3, [sp, #4]
 800ff18:	fa1f f38a 	uxth.w	r3, sl
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	b283      	uxth	r3, r0
 800ff20:	1acb      	subs	r3, r1, r3
 800ff22:	0c00      	lsrs	r0, r0, #16
 800ff24:	4463      	add	r3, ip
 800ff26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ff2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ff34:	4576      	cmp	r6, lr
 800ff36:	f849 3b04 	str.w	r3, [r9], #4
 800ff3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff3e:	d8e5      	bhi.n	800ff0c <__mdiff+0x88>
 800ff40:	1b33      	subs	r3, r6, r4
 800ff42:	3b15      	subs	r3, #21
 800ff44:	f023 0303 	bic.w	r3, r3, #3
 800ff48:	3415      	adds	r4, #21
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	42a6      	cmp	r6, r4
 800ff4e:	bf38      	it	cc
 800ff50:	2304      	movcc	r3, #4
 800ff52:	441d      	add	r5, r3
 800ff54:	445b      	add	r3, fp
 800ff56:	461e      	mov	r6, r3
 800ff58:	462c      	mov	r4, r5
 800ff5a:	4544      	cmp	r4, r8
 800ff5c:	d30e      	bcc.n	800ff7c <__mdiff+0xf8>
 800ff5e:	f108 0103 	add.w	r1, r8, #3
 800ff62:	1b49      	subs	r1, r1, r5
 800ff64:	f021 0103 	bic.w	r1, r1, #3
 800ff68:	3d03      	subs	r5, #3
 800ff6a:	45a8      	cmp	r8, r5
 800ff6c:	bf38      	it	cc
 800ff6e:	2100      	movcc	r1, #0
 800ff70:	440b      	add	r3, r1
 800ff72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff76:	b191      	cbz	r1, 800ff9e <__mdiff+0x11a>
 800ff78:	6117      	str	r7, [r2, #16]
 800ff7a:	e79d      	b.n	800feb8 <__mdiff+0x34>
 800ff7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ff80:	46e6      	mov	lr, ip
 800ff82:	0c08      	lsrs	r0, r1, #16
 800ff84:	fa1c fc81 	uxtah	ip, ip, r1
 800ff88:	4471      	add	r1, lr
 800ff8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff8e:	b289      	uxth	r1, r1
 800ff90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff94:	f846 1b04 	str.w	r1, [r6], #4
 800ff98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff9c:	e7dd      	b.n	800ff5a <__mdiff+0xd6>
 800ff9e:	3f01      	subs	r7, #1
 800ffa0:	e7e7      	b.n	800ff72 <__mdiff+0xee>
 800ffa2:	bf00      	nop
 800ffa4:	0801102d 	.word	0x0801102d
 800ffa8:	0801109e 	.word	0x0801109e

0800ffac <__ulp>:
 800ffac:	b082      	sub	sp, #8
 800ffae:	ed8d 0b00 	vstr	d0, [sp]
 800ffb2:	9a01      	ldr	r2, [sp, #4]
 800ffb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fff4 <__ulp+0x48>)
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	dc08      	bgt.n	800ffd2 <__ulp+0x26>
 800ffc0:	425b      	negs	r3, r3
 800ffc2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ffc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ffca:	da04      	bge.n	800ffd6 <__ulp+0x2a>
 800ffcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ffd0:	4113      	asrs	r3, r2
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	e008      	b.n	800ffe8 <__ulp+0x3c>
 800ffd6:	f1a2 0314 	sub.w	r3, r2, #20
 800ffda:	2b1e      	cmp	r3, #30
 800ffdc:	bfda      	itte	le
 800ffde:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ffe2:	40da      	lsrle	r2, r3
 800ffe4:	2201      	movgt	r2, #1
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	4619      	mov	r1, r3
 800ffea:	4610      	mov	r0, r2
 800ffec:	ec41 0b10 	vmov	d0, r0, r1
 800fff0:	b002      	add	sp, #8
 800fff2:	4770      	bx	lr
 800fff4:	7ff00000 	.word	0x7ff00000

0800fff8 <__b2d>:
 800fff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fffc:	6906      	ldr	r6, [r0, #16]
 800fffe:	f100 0814 	add.w	r8, r0, #20
 8010002:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010006:	1f37      	subs	r7, r6, #4
 8010008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801000c:	4610      	mov	r0, r2
 801000e:	f7ff fd4b 	bl	800faa8 <__hi0bits>
 8010012:	f1c0 0320 	rsb	r3, r0, #32
 8010016:	280a      	cmp	r0, #10
 8010018:	600b      	str	r3, [r1, #0]
 801001a:	491b      	ldr	r1, [pc, #108]	@ (8010088 <__b2d+0x90>)
 801001c:	dc15      	bgt.n	801004a <__b2d+0x52>
 801001e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010022:	fa22 f30c 	lsr.w	r3, r2, ip
 8010026:	45b8      	cmp	r8, r7
 8010028:	ea43 0501 	orr.w	r5, r3, r1
 801002c:	bf34      	ite	cc
 801002e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010032:	2300      	movcs	r3, #0
 8010034:	3015      	adds	r0, #21
 8010036:	fa02 f000 	lsl.w	r0, r2, r0
 801003a:	fa23 f30c 	lsr.w	r3, r3, ip
 801003e:	4303      	orrs	r3, r0
 8010040:	461c      	mov	r4, r3
 8010042:	ec45 4b10 	vmov	d0, r4, r5
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801004a:	45b8      	cmp	r8, r7
 801004c:	bf3a      	itte	cc
 801004e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010052:	f1a6 0708 	subcc.w	r7, r6, #8
 8010056:	2300      	movcs	r3, #0
 8010058:	380b      	subs	r0, #11
 801005a:	d012      	beq.n	8010082 <__b2d+0x8a>
 801005c:	f1c0 0120 	rsb	r1, r0, #32
 8010060:	fa23 f401 	lsr.w	r4, r3, r1
 8010064:	4082      	lsls	r2, r0
 8010066:	4322      	orrs	r2, r4
 8010068:	4547      	cmp	r7, r8
 801006a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801006e:	bf8c      	ite	hi
 8010070:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010074:	2200      	movls	r2, #0
 8010076:	4083      	lsls	r3, r0
 8010078:	40ca      	lsrs	r2, r1
 801007a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801007e:	4313      	orrs	r3, r2
 8010080:	e7de      	b.n	8010040 <__b2d+0x48>
 8010082:	ea42 0501 	orr.w	r5, r2, r1
 8010086:	e7db      	b.n	8010040 <__b2d+0x48>
 8010088:	3ff00000 	.word	0x3ff00000

0801008c <__d2b>:
 801008c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010090:	460f      	mov	r7, r1
 8010092:	2101      	movs	r1, #1
 8010094:	ec59 8b10 	vmov	r8, r9, d0
 8010098:	4616      	mov	r6, r2
 801009a:	f7ff fc13 	bl	800f8c4 <_Balloc>
 801009e:	4604      	mov	r4, r0
 80100a0:	b930      	cbnz	r0, 80100b0 <__d2b+0x24>
 80100a2:	4602      	mov	r2, r0
 80100a4:	4b23      	ldr	r3, [pc, #140]	@ (8010134 <__d2b+0xa8>)
 80100a6:	4824      	ldr	r0, [pc, #144]	@ (8010138 <__d2b+0xac>)
 80100a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80100ac:	f000 fb62 	bl	8010774 <__assert_func>
 80100b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80100b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80100b8:	b10d      	cbz	r5, 80100be <__d2b+0x32>
 80100ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100be:	9301      	str	r3, [sp, #4]
 80100c0:	f1b8 0300 	subs.w	r3, r8, #0
 80100c4:	d023      	beq.n	801010e <__d2b+0x82>
 80100c6:	4668      	mov	r0, sp
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	f7ff fd0c 	bl	800fae6 <__lo0bits>
 80100ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80100d2:	b1d0      	cbz	r0, 801010a <__d2b+0x7e>
 80100d4:	f1c0 0320 	rsb	r3, r0, #32
 80100d8:	fa02 f303 	lsl.w	r3, r2, r3
 80100dc:	430b      	orrs	r3, r1
 80100de:	40c2      	lsrs	r2, r0
 80100e0:	6163      	str	r3, [r4, #20]
 80100e2:	9201      	str	r2, [sp, #4]
 80100e4:	9b01      	ldr	r3, [sp, #4]
 80100e6:	61a3      	str	r3, [r4, #24]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	bf0c      	ite	eq
 80100ec:	2201      	moveq	r2, #1
 80100ee:	2202      	movne	r2, #2
 80100f0:	6122      	str	r2, [r4, #16]
 80100f2:	b1a5      	cbz	r5, 801011e <__d2b+0x92>
 80100f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80100f8:	4405      	add	r5, r0
 80100fa:	603d      	str	r5, [r7, #0]
 80100fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010100:	6030      	str	r0, [r6, #0]
 8010102:	4620      	mov	r0, r4
 8010104:	b003      	add	sp, #12
 8010106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801010a:	6161      	str	r1, [r4, #20]
 801010c:	e7ea      	b.n	80100e4 <__d2b+0x58>
 801010e:	a801      	add	r0, sp, #4
 8010110:	f7ff fce9 	bl	800fae6 <__lo0bits>
 8010114:	9b01      	ldr	r3, [sp, #4]
 8010116:	6163      	str	r3, [r4, #20]
 8010118:	3020      	adds	r0, #32
 801011a:	2201      	movs	r2, #1
 801011c:	e7e8      	b.n	80100f0 <__d2b+0x64>
 801011e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010126:	6038      	str	r0, [r7, #0]
 8010128:	6918      	ldr	r0, [r3, #16]
 801012a:	f7ff fcbd 	bl	800faa8 <__hi0bits>
 801012e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010132:	e7e5      	b.n	8010100 <__d2b+0x74>
 8010134:	0801102d 	.word	0x0801102d
 8010138:	0801109e 	.word	0x0801109e

0801013c <__ratio>:
 801013c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010140:	b085      	sub	sp, #20
 8010142:	e9cd 1000 	strd	r1, r0, [sp]
 8010146:	a902      	add	r1, sp, #8
 8010148:	f7ff ff56 	bl	800fff8 <__b2d>
 801014c:	9800      	ldr	r0, [sp, #0]
 801014e:	a903      	add	r1, sp, #12
 8010150:	ec55 4b10 	vmov	r4, r5, d0
 8010154:	f7ff ff50 	bl	800fff8 <__b2d>
 8010158:	9b01      	ldr	r3, [sp, #4]
 801015a:	6919      	ldr	r1, [r3, #16]
 801015c:	9b00      	ldr	r3, [sp, #0]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	1ac9      	subs	r1, r1, r3
 8010162:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010166:	1a9b      	subs	r3, r3, r2
 8010168:	ec5b ab10 	vmov	sl, fp, d0
 801016c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010170:	2b00      	cmp	r3, #0
 8010172:	bfce      	itee	gt
 8010174:	462a      	movgt	r2, r5
 8010176:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801017a:	465a      	movle	r2, fp
 801017c:	462f      	mov	r7, r5
 801017e:	46d9      	mov	r9, fp
 8010180:	bfcc      	ite	gt
 8010182:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010186:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801018a:	464b      	mov	r3, r9
 801018c:	4652      	mov	r2, sl
 801018e:	4620      	mov	r0, r4
 8010190:	4639      	mov	r1, r7
 8010192:	f7f0 fb7b 	bl	800088c <__aeabi_ddiv>
 8010196:	ec41 0b10 	vmov	d0, r0, r1
 801019a:	b005      	add	sp, #20
 801019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101a0 <__copybits>:
 80101a0:	3901      	subs	r1, #1
 80101a2:	b570      	push	{r4, r5, r6, lr}
 80101a4:	1149      	asrs	r1, r1, #5
 80101a6:	6914      	ldr	r4, [r2, #16]
 80101a8:	3101      	adds	r1, #1
 80101aa:	f102 0314 	add.w	r3, r2, #20
 80101ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80101b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101b6:	1f05      	subs	r5, r0, #4
 80101b8:	42a3      	cmp	r3, r4
 80101ba:	d30c      	bcc.n	80101d6 <__copybits+0x36>
 80101bc:	1aa3      	subs	r3, r4, r2
 80101be:	3b11      	subs	r3, #17
 80101c0:	f023 0303 	bic.w	r3, r3, #3
 80101c4:	3211      	adds	r2, #17
 80101c6:	42a2      	cmp	r2, r4
 80101c8:	bf88      	it	hi
 80101ca:	2300      	movhi	r3, #0
 80101cc:	4418      	add	r0, r3
 80101ce:	2300      	movs	r3, #0
 80101d0:	4288      	cmp	r0, r1
 80101d2:	d305      	bcc.n	80101e0 <__copybits+0x40>
 80101d4:	bd70      	pop	{r4, r5, r6, pc}
 80101d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80101da:	f845 6f04 	str.w	r6, [r5, #4]!
 80101de:	e7eb      	b.n	80101b8 <__copybits+0x18>
 80101e0:	f840 3b04 	str.w	r3, [r0], #4
 80101e4:	e7f4      	b.n	80101d0 <__copybits+0x30>

080101e6 <__any_on>:
 80101e6:	f100 0214 	add.w	r2, r0, #20
 80101ea:	6900      	ldr	r0, [r0, #16]
 80101ec:	114b      	asrs	r3, r1, #5
 80101ee:	4298      	cmp	r0, r3
 80101f0:	b510      	push	{r4, lr}
 80101f2:	db11      	blt.n	8010218 <__any_on+0x32>
 80101f4:	dd0a      	ble.n	801020c <__any_on+0x26>
 80101f6:	f011 011f 	ands.w	r1, r1, #31
 80101fa:	d007      	beq.n	801020c <__any_on+0x26>
 80101fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010200:	fa24 f001 	lsr.w	r0, r4, r1
 8010204:	fa00 f101 	lsl.w	r1, r0, r1
 8010208:	428c      	cmp	r4, r1
 801020a:	d10b      	bne.n	8010224 <__any_on+0x3e>
 801020c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010210:	4293      	cmp	r3, r2
 8010212:	d803      	bhi.n	801021c <__any_on+0x36>
 8010214:	2000      	movs	r0, #0
 8010216:	bd10      	pop	{r4, pc}
 8010218:	4603      	mov	r3, r0
 801021a:	e7f7      	b.n	801020c <__any_on+0x26>
 801021c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010220:	2900      	cmp	r1, #0
 8010222:	d0f5      	beq.n	8010210 <__any_on+0x2a>
 8010224:	2001      	movs	r0, #1
 8010226:	e7f6      	b.n	8010216 <__any_on+0x30>

08010228 <_strtol_l.constprop.0>:
 8010228:	2b24      	cmp	r3, #36	@ 0x24
 801022a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801022e:	4686      	mov	lr, r0
 8010230:	4690      	mov	r8, r2
 8010232:	d801      	bhi.n	8010238 <_strtol_l.constprop.0+0x10>
 8010234:	2b01      	cmp	r3, #1
 8010236:	d106      	bne.n	8010246 <_strtol_l.constprop.0+0x1e>
 8010238:	f7fe f916 	bl	800e468 <__errno>
 801023c:	2316      	movs	r3, #22
 801023e:	6003      	str	r3, [r0, #0]
 8010240:	2000      	movs	r0, #0
 8010242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010246:	4834      	ldr	r0, [pc, #208]	@ (8010318 <_strtol_l.constprop.0+0xf0>)
 8010248:	460d      	mov	r5, r1
 801024a:	462a      	mov	r2, r5
 801024c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010250:	5d06      	ldrb	r6, [r0, r4]
 8010252:	f016 0608 	ands.w	r6, r6, #8
 8010256:	d1f8      	bne.n	801024a <_strtol_l.constprop.0+0x22>
 8010258:	2c2d      	cmp	r4, #45	@ 0x2d
 801025a:	d12d      	bne.n	80102b8 <_strtol_l.constprop.0+0x90>
 801025c:	782c      	ldrb	r4, [r5, #0]
 801025e:	2601      	movs	r6, #1
 8010260:	1c95      	adds	r5, r2, #2
 8010262:	f033 0210 	bics.w	r2, r3, #16
 8010266:	d109      	bne.n	801027c <_strtol_l.constprop.0+0x54>
 8010268:	2c30      	cmp	r4, #48	@ 0x30
 801026a:	d12a      	bne.n	80102c2 <_strtol_l.constprop.0+0x9a>
 801026c:	782a      	ldrb	r2, [r5, #0]
 801026e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010272:	2a58      	cmp	r2, #88	@ 0x58
 8010274:	d125      	bne.n	80102c2 <_strtol_l.constprop.0+0x9a>
 8010276:	786c      	ldrb	r4, [r5, #1]
 8010278:	2310      	movs	r3, #16
 801027a:	3502      	adds	r5, #2
 801027c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010280:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010284:	2200      	movs	r2, #0
 8010286:	fbbc f9f3 	udiv	r9, ip, r3
 801028a:	4610      	mov	r0, r2
 801028c:	fb03 ca19 	mls	sl, r3, r9, ip
 8010290:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010294:	2f09      	cmp	r7, #9
 8010296:	d81b      	bhi.n	80102d0 <_strtol_l.constprop.0+0xa8>
 8010298:	463c      	mov	r4, r7
 801029a:	42a3      	cmp	r3, r4
 801029c:	dd27      	ble.n	80102ee <_strtol_l.constprop.0+0xc6>
 801029e:	1c57      	adds	r7, r2, #1
 80102a0:	d007      	beq.n	80102b2 <_strtol_l.constprop.0+0x8a>
 80102a2:	4581      	cmp	r9, r0
 80102a4:	d320      	bcc.n	80102e8 <_strtol_l.constprop.0+0xc0>
 80102a6:	d101      	bne.n	80102ac <_strtol_l.constprop.0+0x84>
 80102a8:	45a2      	cmp	sl, r4
 80102aa:	db1d      	blt.n	80102e8 <_strtol_l.constprop.0+0xc0>
 80102ac:	fb00 4003 	mla	r0, r0, r3, r4
 80102b0:	2201      	movs	r2, #1
 80102b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102b6:	e7eb      	b.n	8010290 <_strtol_l.constprop.0+0x68>
 80102b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80102ba:	bf04      	itt	eq
 80102bc:	782c      	ldrbeq	r4, [r5, #0]
 80102be:	1c95      	addeq	r5, r2, #2
 80102c0:	e7cf      	b.n	8010262 <_strtol_l.constprop.0+0x3a>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1da      	bne.n	801027c <_strtol_l.constprop.0+0x54>
 80102c6:	2c30      	cmp	r4, #48	@ 0x30
 80102c8:	bf0c      	ite	eq
 80102ca:	2308      	moveq	r3, #8
 80102cc:	230a      	movne	r3, #10
 80102ce:	e7d5      	b.n	801027c <_strtol_l.constprop.0+0x54>
 80102d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80102d4:	2f19      	cmp	r7, #25
 80102d6:	d801      	bhi.n	80102dc <_strtol_l.constprop.0+0xb4>
 80102d8:	3c37      	subs	r4, #55	@ 0x37
 80102da:	e7de      	b.n	801029a <_strtol_l.constprop.0+0x72>
 80102dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80102e0:	2f19      	cmp	r7, #25
 80102e2:	d804      	bhi.n	80102ee <_strtol_l.constprop.0+0xc6>
 80102e4:	3c57      	subs	r4, #87	@ 0x57
 80102e6:	e7d8      	b.n	801029a <_strtol_l.constprop.0+0x72>
 80102e8:	f04f 32ff 	mov.w	r2, #4294967295
 80102ec:	e7e1      	b.n	80102b2 <_strtol_l.constprop.0+0x8a>
 80102ee:	1c53      	adds	r3, r2, #1
 80102f0:	d108      	bne.n	8010304 <_strtol_l.constprop.0+0xdc>
 80102f2:	2322      	movs	r3, #34	@ 0x22
 80102f4:	f8ce 3000 	str.w	r3, [lr]
 80102f8:	4660      	mov	r0, ip
 80102fa:	f1b8 0f00 	cmp.w	r8, #0
 80102fe:	d0a0      	beq.n	8010242 <_strtol_l.constprop.0+0x1a>
 8010300:	1e69      	subs	r1, r5, #1
 8010302:	e006      	b.n	8010312 <_strtol_l.constprop.0+0xea>
 8010304:	b106      	cbz	r6, 8010308 <_strtol_l.constprop.0+0xe0>
 8010306:	4240      	negs	r0, r0
 8010308:	f1b8 0f00 	cmp.w	r8, #0
 801030c:	d099      	beq.n	8010242 <_strtol_l.constprop.0+0x1a>
 801030e:	2a00      	cmp	r2, #0
 8010310:	d1f6      	bne.n	8010300 <_strtol_l.constprop.0+0xd8>
 8010312:	f8c8 1000 	str.w	r1, [r8]
 8010316:	e794      	b.n	8010242 <_strtol_l.constprop.0+0x1a>
 8010318:	080111f9 	.word	0x080111f9

0801031c <_strtol_r>:
 801031c:	f7ff bf84 	b.w	8010228 <_strtol_l.constprop.0>

08010320 <__ascii_wctomb>:
 8010320:	4603      	mov	r3, r0
 8010322:	4608      	mov	r0, r1
 8010324:	b141      	cbz	r1, 8010338 <__ascii_wctomb+0x18>
 8010326:	2aff      	cmp	r2, #255	@ 0xff
 8010328:	d904      	bls.n	8010334 <__ascii_wctomb+0x14>
 801032a:	228a      	movs	r2, #138	@ 0x8a
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	f04f 30ff 	mov.w	r0, #4294967295
 8010332:	4770      	bx	lr
 8010334:	700a      	strb	r2, [r1, #0]
 8010336:	2001      	movs	r0, #1
 8010338:	4770      	bx	lr

0801033a <__ssputs_r>:
 801033a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801033e:	688e      	ldr	r6, [r1, #8]
 8010340:	461f      	mov	r7, r3
 8010342:	42be      	cmp	r6, r7
 8010344:	680b      	ldr	r3, [r1, #0]
 8010346:	4682      	mov	sl, r0
 8010348:	460c      	mov	r4, r1
 801034a:	4690      	mov	r8, r2
 801034c:	d82d      	bhi.n	80103aa <__ssputs_r+0x70>
 801034e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010352:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010356:	d026      	beq.n	80103a6 <__ssputs_r+0x6c>
 8010358:	6965      	ldr	r5, [r4, #20]
 801035a:	6909      	ldr	r1, [r1, #16]
 801035c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010360:	eba3 0901 	sub.w	r9, r3, r1
 8010364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010368:	1c7b      	adds	r3, r7, #1
 801036a:	444b      	add	r3, r9
 801036c:	106d      	asrs	r5, r5, #1
 801036e:	429d      	cmp	r5, r3
 8010370:	bf38      	it	cc
 8010372:	461d      	movcc	r5, r3
 8010374:	0553      	lsls	r3, r2, #21
 8010376:	d527      	bpl.n	80103c8 <__ssputs_r+0x8e>
 8010378:	4629      	mov	r1, r5
 801037a:	f7fc f9cd 	bl	800c718 <_malloc_r>
 801037e:	4606      	mov	r6, r0
 8010380:	b360      	cbz	r0, 80103dc <__ssputs_r+0xa2>
 8010382:	6921      	ldr	r1, [r4, #16]
 8010384:	464a      	mov	r2, r9
 8010386:	f7fe f89c 	bl	800e4c2 <memcpy>
 801038a:	89a3      	ldrh	r3, [r4, #12]
 801038c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010394:	81a3      	strh	r3, [r4, #12]
 8010396:	6126      	str	r6, [r4, #16]
 8010398:	6165      	str	r5, [r4, #20]
 801039a:	444e      	add	r6, r9
 801039c:	eba5 0509 	sub.w	r5, r5, r9
 80103a0:	6026      	str	r6, [r4, #0]
 80103a2:	60a5      	str	r5, [r4, #8]
 80103a4:	463e      	mov	r6, r7
 80103a6:	42be      	cmp	r6, r7
 80103a8:	d900      	bls.n	80103ac <__ssputs_r+0x72>
 80103aa:	463e      	mov	r6, r7
 80103ac:	6820      	ldr	r0, [r4, #0]
 80103ae:	4632      	mov	r2, r6
 80103b0:	4641      	mov	r1, r8
 80103b2:	f000 f9c5 	bl	8010740 <memmove>
 80103b6:	68a3      	ldr	r3, [r4, #8]
 80103b8:	1b9b      	subs	r3, r3, r6
 80103ba:	60a3      	str	r3, [r4, #8]
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	4433      	add	r3, r6
 80103c0:	6023      	str	r3, [r4, #0]
 80103c2:	2000      	movs	r0, #0
 80103c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103c8:	462a      	mov	r2, r5
 80103ca:	f000 fa05 	bl	80107d8 <_realloc_r>
 80103ce:	4606      	mov	r6, r0
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d1e0      	bne.n	8010396 <__ssputs_r+0x5c>
 80103d4:	6921      	ldr	r1, [r4, #16]
 80103d6:	4650      	mov	r0, sl
 80103d8:	f7fe fede 	bl	800f198 <_free_r>
 80103dc:	230c      	movs	r3, #12
 80103de:	f8ca 3000 	str.w	r3, [sl]
 80103e2:	89a3      	ldrh	r3, [r4, #12]
 80103e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e8:	81a3      	strh	r3, [r4, #12]
 80103ea:	f04f 30ff 	mov.w	r0, #4294967295
 80103ee:	e7e9      	b.n	80103c4 <__ssputs_r+0x8a>

080103f0 <_svfiprintf_r>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	4698      	mov	r8, r3
 80103f6:	898b      	ldrh	r3, [r1, #12]
 80103f8:	061b      	lsls	r3, r3, #24
 80103fa:	b09d      	sub	sp, #116	@ 0x74
 80103fc:	4607      	mov	r7, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	4614      	mov	r4, r2
 8010402:	d510      	bpl.n	8010426 <_svfiprintf_r+0x36>
 8010404:	690b      	ldr	r3, [r1, #16]
 8010406:	b973      	cbnz	r3, 8010426 <_svfiprintf_r+0x36>
 8010408:	2140      	movs	r1, #64	@ 0x40
 801040a:	f7fc f985 	bl	800c718 <_malloc_r>
 801040e:	6028      	str	r0, [r5, #0]
 8010410:	6128      	str	r0, [r5, #16]
 8010412:	b930      	cbnz	r0, 8010422 <_svfiprintf_r+0x32>
 8010414:	230c      	movs	r3, #12
 8010416:	603b      	str	r3, [r7, #0]
 8010418:	f04f 30ff 	mov.w	r0, #4294967295
 801041c:	b01d      	add	sp, #116	@ 0x74
 801041e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010422:	2340      	movs	r3, #64	@ 0x40
 8010424:	616b      	str	r3, [r5, #20]
 8010426:	2300      	movs	r3, #0
 8010428:	9309      	str	r3, [sp, #36]	@ 0x24
 801042a:	2320      	movs	r3, #32
 801042c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010430:	f8cd 800c 	str.w	r8, [sp, #12]
 8010434:	2330      	movs	r3, #48	@ 0x30
 8010436:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105d4 <_svfiprintf_r+0x1e4>
 801043a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801043e:	f04f 0901 	mov.w	r9, #1
 8010442:	4623      	mov	r3, r4
 8010444:	469a      	mov	sl, r3
 8010446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801044a:	b10a      	cbz	r2, 8010450 <_svfiprintf_r+0x60>
 801044c:	2a25      	cmp	r2, #37	@ 0x25
 801044e:	d1f9      	bne.n	8010444 <_svfiprintf_r+0x54>
 8010450:	ebba 0b04 	subs.w	fp, sl, r4
 8010454:	d00b      	beq.n	801046e <_svfiprintf_r+0x7e>
 8010456:	465b      	mov	r3, fp
 8010458:	4622      	mov	r2, r4
 801045a:	4629      	mov	r1, r5
 801045c:	4638      	mov	r0, r7
 801045e:	f7ff ff6c 	bl	801033a <__ssputs_r>
 8010462:	3001      	adds	r0, #1
 8010464:	f000 80a7 	beq.w	80105b6 <_svfiprintf_r+0x1c6>
 8010468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801046a:	445a      	add	r2, fp
 801046c:	9209      	str	r2, [sp, #36]	@ 0x24
 801046e:	f89a 3000 	ldrb.w	r3, [sl]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 809f 	beq.w	80105b6 <_svfiprintf_r+0x1c6>
 8010478:	2300      	movs	r3, #0
 801047a:	f04f 32ff 	mov.w	r2, #4294967295
 801047e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010482:	f10a 0a01 	add.w	sl, sl, #1
 8010486:	9304      	str	r3, [sp, #16]
 8010488:	9307      	str	r3, [sp, #28]
 801048a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801048e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010490:	4654      	mov	r4, sl
 8010492:	2205      	movs	r2, #5
 8010494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010498:	484e      	ldr	r0, [pc, #312]	@ (80105d4 <_svfiprintf_r+0x1e4>)
 801049a:	f7ef feb9 	bl	8000210 <memchr>
 801049e:	9a04      	ldr	r2, [sp, #16]
 80104a0:	b9d8      	cbnz	r0, 80104da <_svfiprintf_r+0xea>
 80104a2:	06d0      	lsls	r0, r2, #27
 80104a4:	bf44      	itt	mi
 80104a6:	2320      	movmi	r3, #32
 80104a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104ac:	0711      	lsls	r1, r2, #28
 80104ae:	bf44      	itt	mi
 80104b0:	232b      	movmi	r3, #43	@ 0x2b
 80104b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104b6:	f89a 3000 	ldrb.w	r3, [sl]
 80104ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80104bc:	d015      	beq.n	80104ea <_svfiprintf_r+0xfa>
 80104be:	9a07      	ldr	r2, [sp, #28]
 80104c0:	4654      	mov	r4, sl
 80104c2:	2000      	movs	r0, #0
 80104c4:	f04f 0c0a 	mov.w	ip, #10
 80104c8:	4621      	mov	r1, r4
 80104ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104ce:	3b30      	subs	r3, #48	@ 0x30
 80104d0:	2b09      	cmp	r3, #9
 80104d2:	d94b      	bls.n	801056c <_svfiprintf_r+0x17c>
 80104d4:	b1b0      	cbz	r0, 8010504 <_svfiprintf_r+0x114>
 80104d6:	9207      	str	r2, [sp, #28]
 80104d8:	e014      	b.n	8010504 <_svfiprintf_r+0x114>
 80104da:	eba0 0308 	sub.w	r3, r0, r8
 80104de:	fa09 f303 	lsl.w	r3, r9, r3
 80104e2:	4313      	orrs	r3, r2
 80104e4:	9304      	str	r3, [sp, #16]
 80104e6:	46a2      	mov	sl, r4
 80104e8:	e7d2      	b.n	8010490 <_svfiprintf_r+0xa0>
 80104ea:	9b03      	ldr	r3, [sp, #12]
 80104ec:	1d19      	adds	r1, r3, #4
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	9103      	str	r1, [sp, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	bfbb      	ittet	lt
 80104f6:	425b      	neglt	r3, r3
 80104f8:	f042 0202 	orrlt.w	r2, r2, #2
 80104fc:	9307      	strge	r3, [sp, #28]
 80104fe:	9307      	strlt	r3, [sp, #28]
 8010500:	bfb8      	it	lt
 8010502:	9204      	strlt	r2, [sp, #16]
 8010504:	7823      	ldrb	r3, [r4, #0]
 8010506:	2b2e      	cmp	r3, #46	@ 0x2e
 8010508:	d10a      	bne.n	8010520 <_svfiprintf_r+0x130>
 801050a:	7863      	ldrb	r3, [r4, #1]
 801050c:	2b2a      	cmp	r3, #42	@ 0x2a
 801050e:	d132      	bne.n	8010576 <_svfiprintf_r+0x186>
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	1d1a      	adds	r2, r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	9203      	str	r2, [sp, #12]
 8010518:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801051c:	3402      	adds	r4, #2
 801051e:	9305      	str	r3, [sp, #20]
 8010520:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105e4 <_svfiprintf_r+0x1f4>
 8010524:	7821      	ldrb	r1, [r4, #0]
 8010526:	2203      	movs	r2, #3
 8010528:	4650      	mov	r0, sl
 801052a:	f7ef fe71 	bl	8000210 <memchr>
 801052e:	b138      	cbz	r0, 8010540 <_svfiprintf_r+0x150>
 8010530:	9b04      	ldr	r3, [sp, #16]
 8010532:	eba0 000a 	sub.w	r0, r0, sl
 8010536:	2240      	movs	r2, #64	@ 0x40
 8010538:	4082      	lsls	r2, r0
 801053a:	4313      	orrs	r3, r2
 801053c:	3401      	adds	r4, #1
 801053e:	9304      	str	r3, [sp, #16]
 8010540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010544:	4824      	ldr	r0, [pc, #144]	@ (80105d8 <_svfiprintf_r+0x1e8>)
 8010546:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801054a:	2206      	movs	r2, #6
 801054c:	f7ef fe60 	bl	8000210 <memchr>
 8010550:	2800      	cmp	r0, #0
 8010552:	d036      	beq.n	80105c2 <_svfiprintf_r+0x1d2>
 8010554:	4b21      	ldr	r3, [pc, #132]	@ (80105dc <_svfiprintf_r+0x1ec>)
 8010556:	bb1b      	cbnz	r3, 80105a0 <_svfiprintf_r+0x1b0>
 8010558:	9b03      	ldr	r3, [sp, #12]
 801055a:	3307      	adds	r3, #7
 801055c:	f023 0307 	bic.w	r3, r3, #7
 8010560:	3308      	adds	r3, #8
 8010562:	9303      	str	r3, [sp, #12]
 8010564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010566:	4433      	add	r3, r6
 8010568:	9309      	str	r3, [sp, #36]	@ 0x24
 801056a:	e76a      	b.n	8010442 <_svfiprintf_r+0x52>
 801056c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010570:	460c      	mov	r4, r1
 8010572:	2001      	movs	r0, #1
 8010574:	e7a8      	b.n	80104c8 <_svfiprintf_r+0xd8>
 8010576:	2300      	movs	r3, #0
 8010578:	3401      	adds	r4, #1
 801057a:	9305      	str	r3, [sp, #20]
 801057c:	4619      	mov	r1, r3
 801057e:	f04f 0c0a 	mov.w	ip, #10
 8010582:	4620      	mov	r0, r4
 8010584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010588:	3a30      	subs	r2, #48	@ 0x30
 801058a:	2a09      	cmp	r2, #9
 801058c:	d903      	bls.n	8010596 <_svfiprintf_r+0x1a6>
 801058e:	2b00      	cmp	r3, #0
 8010590:	d0c6      	beq.n	8010520 <_svfiprintf_r+0x130>
 8010592:	9105      	str	r1, [sp, #20]
 8010594:	e7c4      	b.n	8010520 <_svfiprintf_r+0x130>
 8010596:	fb0c 2101 	mla	r1, ip, r1, r2
 801059a:	4604      	mov	r4, r0
 801059c:	2301      	movs	r3, #1
 801059e:	e7f0      	b.n	8010582 <_svfiprintf_r+0x192>
 80105a0:	ab03      	add	r3, sp, #12
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	462a      	mov	r2, r5
 80105a6:	4b0e      	ldr	r3, [pc, #56]	@ (80105e0 <_svfiprintf_r+0x1f0>)
 80105a8:	a904      	add	r1, sp, #16
 80105aa:	4638      	mov	r0, r7
 80105ac:	f7fc fff6 	bl	800d59c <_printf_float>
 80105b0:	1c42      	adds	r2, r0, #1
 80105b2:	4606      	mov	r6, r0
 80105b4:	d1d6      	bne.n	8010564 <_svfiprintf_r+0x174>
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	065b      	lsls	r3, r3, #25
 80105ba:	f53f af2d 	bmi.w	8010418 <_svfiprintf_r+0x28>
 80105be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105c0:	e72c      	b.n	801041c <_svfiprintf_r+0x2c>
 80105c2:	ab03      	add	r3, sp, #12
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	462a      	mov	r2, r5
 80105c8:	4b05      	ldr	r3, [pc, #20]	@ (80105e0 <_svfiprintf_r+0x1f0>)
 80105ca:	a904      	add	r1, sp, #16
 80105cc:	4638      	mov	r0, r7
 80105ce:	f7fd fa7d 	bl	800dacc <_printf_i>
 80105d2:	e7ed      	b.n	80105b0 <_svfiprintf_r+0x1c0>
 80105d4:	080112f9 	.word	0x080112f9
 80105d8:	08011303 	.word	0x08011303
 80105dc:	0800d59d 	.word	0x0800d59d
 80105e0:	0801033b 	.word	0x0801033b
 80105e4:	080112ff 	.word	0x080112ff

080105e8 <__sflush_r>:
 80105e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f0:	0716      	lsls	r6, r2, #28
 80105f2:	4605      	mov	r5, r0
 80105f4:	460c      	mov	r4, r1
 80105f6:	d454      	bmi.n	80106a2 <__sflush_r+0xba>
 80105f8:	684b      	ldr	r3, [r1, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	dc02      	bgt.n	8010604 <__sflush_r+0x1c>
 80105fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010600:	2b00      	cmp	r3, #0
 8010602:	dd48      	ble.n	8010696 <__sflush_r+0xae>
 8010604:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010606:	2e00      	cmp	r6, #0
 8010608:	d045      	beq.n	8010696 <__sflush_r+0xae>
 801060a:	2300      	movs	r3, #0
 801060c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010610:	682f      	ldr	r7, [r5, #0]
 8010612:	6a21      	ldr	r1, [r4, #32]
 8010614:	602b      	str	r3, [r5, #0]
 8010616:	d030      	beq.n	801067a <__sflush_r+0x92>
 8010618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801061a:	89a3      	ldrh	r3, [r4, #12]
 801061c:	0759      	lsls	r1, r3, #29
 801061e:	d505      	bpl.n	801062c <__sflush_r+0x44>
 8010620:	6863      	ldr	r3, [r4, #4]
 8010622:	1ad2      	subs	r2, r2, r3
 8010624:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010626:	b10b      	cbz	r3, 801062c <__sflush_r+0x44>
 8010628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801062a:	1ad2      	subs	r2, r2, r3
 801062c:	2300      	movs	r3, #0
 801062e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010630:	6a21      	ldr	r1, [r4, #32]
 8010632:	4628      	mov	r0, r5
 8010634:	47b0      	blx	r6
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	d106      	bne.n	801064a <__sflush_r+0x62>
 801063c:	6829      	ldr	r1, [r5, #0]
 801063e:	291d      	cmp	r1, #29
 8010640:	d82b      	bhi.n	801069a <__sflush_r+0xb2>
 8010642:	4a2a      	ldr	r2, [pc, #168]	@ (80106ec <__sflush_r+0x104>)
 8010644:	410a      	asrs	r2, r1
 8010646:	07d6      	lsls	r6, r2, #31
 8010648:	d427      	bmi.n	801069a <__sflush_r+0xb2>
 801064a:	2200      	movs	r2, #0
 801064c:	6062      	str	r2, [r4, #4]
 801064e:	04d9      	lsls	r1, r3, #19
 8010650:	6922      	ldr	r2, [r4, #16]
 8010652:	6022      	str	r2, [r4, #0]
 8010654:	d504      	bpl.n	8010660 <__sflush_r+0x78>
 8010656:	1c42      	adds	r2, r0, #1
 8010658:	d101      	bne.n	801065e <__sflush_r+0x76>
 801065a:	682b      	ldr	r3, [r5, #0]
 801065c:	b903      	cbnz	r3, 8010660 <__sflush_r+0x78>
 801065e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010662:	602f      	str	r7, [r5, #0]
 8010664:	b1b9      	cbz	r1, 8010696 <__sflush_r+0xae>
 8010666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801066a:	4299      	cmp	r1, r3
 801066c:	d002      	beq.n	8010674 <__sflush_r+0x8c>
 801066e:	4628      	mov	r0, r5
 8010670:	f7fe fd92 	bl	800f198 <_free_r>
 8010674:	2300      	movs	r3, #0
 8010676:	6363      	str	r3, [r4, #52]	@ 0x34
 8010678:	e00d      	b.n	8010696 <__sflush_r+0xae>
 801067a:	2301      	movs	r3, #1
 801067c:	4628      	mov	r0, r5
 801067e:	47b0      	blx	r6
 8010680:	4602      	mov	r2, r0
 8010682:	1c50      	adds	r0, r2, #1
 8010684:	d1c9      	bne.n	801061a <__sflush_r+0x32>
 8010686:	682b      	ldr	r3, [r5, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0c6      	beq.n	801061a <__sflush_r+0x32>
 801068c:	2b1d      	cmp	r3, #29
 801068e:	d001      	beq.n	8010694 <__sflush_r+0xac>
 8010690:	2b16      	cmp	r3, #22
 8010692:	d11e      	bne.n	80106d2 <__sflush_r+0xea>
 8010694:	602f      	str	r7, [r5, #0]
 8010696:	2000      	movs	r0, #0
 8010698:	e022      	b.n	80106e0 <__sflush_r+0xf8>
 801069a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801069e:	b21b      	sxth	r3, r3
 80106a0:	e01b      	b.n	80106da <__sflush_r+0xf2>
 80106a2:	690f      	ldr	r7, [r1, #16]
 80106a4:	2f00      	cmp	r7, #0
 80106a6:	d0f6      	beq.n	8010696 <__sflush_r+0xae>
 80106a8:	0793      	lsls	r3, r2, #30
 80106aa:	680e      	ldr	r6, [r1, #0]
 80106ac:	bf08      	it	eq
 80106ae:	694b      	ldreq	r3, [r1, #20]
 80106b0:	600f      	str	r7, [r1, #0]
 80106b2:	bf18      	it	ne
 80106b4:	2300      	movne	r3, #0
 80106b6:	eba6 0807 	sub.w	r8, r6, r7
 80106ba:	608b      	str	r3, [r1, #8]
 80106bc:	f1b8 0f00 	cmp.w	r8, #0
 80106c0:	dde9      	ble.n	8010696 <__sflush_r+0xae>
 80106c2:	6a21      	ldr	r1, [r4, #32]
 80106c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106c6:	4643      	mov	r3, r8
 80106c8:	463a      	mov	r2, r7
 80106ca:	4628      	mov	r0, r5
 80106cc:	47b0      	blx	r6
 80106ce:	2800      	cmp	r0, #0
 80106d0:	dc08      	bgt.n	80106e4 <__sflush_r+0xfc>
 80106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106da:	81a3      	strh	r3, [r4, #12]
 80106dc:	f04f 30ff 	mov.w	r0, #4294967295
 80106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e4:	4407      	add	r7, r0
 80106e6:	eba8 0800 	sub.w	r8, r8, r0
 80106ea:	e7e7      	b.n	80106bc <__sflush_r+0xd4>
 80106ec:	dfbffffe 	.word	0xdfbffffe

080106f0 <_fflush_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	690b      	ldr	r3, [r1, #16]
 80106f4:	4605      	mov	r5, r0
 80106f6:	460c      	mov	r4, r1
 80106f8:	b913      	cbnz	r3, 8010700 <_fflush_r+0x10>
 80106fa:	2500      	movs	r5, #0
 80106fc:	4628      	mov	r0, r5
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	b118      	cbz	r0, 801070a <_fflush_r+0x1a>
 8010702:	6a03      	ldr	r3, [r0, #32]
 8010704:	b90b      	cbnz	r3, 801070a <_fflush_r+0x1a>
 8010706:	f7fd fda1 	bl	800e24c <__sinit>
 801070a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0f3      	beq.n	80106fa <_fflush_r+0xa>
 8010712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010714:	07d0      	lsls	r0, r2, #31
 8010716:	d404      	bmi.n	8010722 <_fflush_r+0x32>
 8010718:	0599      	lsls	r1, r3, #22
 801071a:	d402      	bmi.n	8010722 <_fflush_r+0x32>
 801071c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801071e:	f7fd fece 	bl	800e4be <__retarget_lock_acquire_recursive>
 8010722:	4628      	mov	r0, r5
 8010724:	4621      	mov	r1, r4
 8010726:	f7ff ff5f 	bl	80105e8 <__sflush_r>
 801072a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801072c:	07da      	lsls	r2, r3, #31
 801072e:	4605      	mov	r5, r0
 8010730:	d4e4      	bmi.n	80106fc <_fflush_r+0xc>
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	059b      	lsls	r3, r3, #22
 8010736:	d4e1      	bmi.n	80106fc <_fflush_r+0xc>
 8010738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801073a:	f7fd fec1 	bl	800e4c0 <__retarget_lock_release_recursive>
 801073e:	e7dd      	b.n	80106fc <_fflush_r+0xc>

08010740 <memmove>:
 8010740:	4288      	cmp	r0, r1
 8010742:	b510      	push	{r4, lr}
 8010744:	eb01 0402 	add.w	r4, r1, r2
 8010748:	d902      	bls.n	8010750 <memmove+0x10>
 801074a:	4284      	cmp	r4, r0
 801074c:	4623      	mov	r3, r4
 801074e:	d807      	bhi.n	8010760 <memmove+0x20>
 8010750:	1e43      	subs	r3, r0, #1
 8010752:	42a1      	cmp	r1, r4
 8010754:	d008      	beq.n	8010768 <memmove+0x28>
 8010756:	f811 2b01 	ldrb.w	r2, [r1], #1
 801075a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801075e:	e7f8      	b.n	8010752 <memmove+0x12>
 8010760:	4402      	add	r2, r0
 8010762:	4601      	mov	r1, r0
 8010764:	428a      	cmp	r2, r1
 8010766:	d100      	bne.n	801076a <memmove+0x2a>
 8010768:	bd10      	pop	{r4, pc}
 801076a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801076e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010772:	e7f7      	b.n	8010764 <memmove+0x24>

08010774 <__assert_func>:
 8010774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010776:	4614      	mov	r4, r2
 8010778:	461a      	mov	r2, r3
 801077a:	4b09      	ldr	r3, [pc, #36]	@ (80107a0 <__assert_func+0x2c>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4605      	mov	r5, r0
 8010780:	68d8      	ldr	r0, [r3, #12]
 8010782:	b954      	cbnz	r4, 801079a <__assert_func+0x26>
 8010784:	4b07      	ldr	r3, [pc, #28]	@ (80107a4 <__assert_func+0x30>)
 8010786:	461c      	mov	r4, r3
 8010788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801078c:	9100      	str	r1, [sp, #0]
 801078e:	462b      	mov	r3, r5
 8010790:	4905      	ldr	r1, [pc, #20]	@ (80107a8 <__assert_func+0x34>)
 8010792:	f000 f84f 	bl	8010834 <fiprintf>
 8010796:	f000 f85f 	bl	8010858 <abort>
 801079a:	4b04      	ldr	r3, [pc, #16]	@ (80107ac <__assert_func+0x38>)
 801079c:	e7f4      	b.n	8010788 <__assert_func+0x14>
 801079e:	bf00      	nop
 80107a0:	2000029c 	.word	0x2000029c
 80107a4:	08011345 	.word	0x08011345
 80107a8:	08011317 	.word	0x08011317
 80107ac:	0801130a 	.word	0x0801130a

080107b0 <_calloc_r>:
 80107b0:	b570      	push	{r4, r5, r6, lr}
 80107b2:	fba1 5402 	umull	r5, r4, r1, r2
 80107b6:	b93c      	cbnz	r4, 80107c8 <_calloc_r+0x18>
 80107b8:	4629      	mov	r1, r5
 80107ba:	f7fb ffad 	bl	800c718 <_malloc_r>
 80107be:	4606      	mov	r6, r0
 80107c0:	b928      	cbnz	r0, 80107ce <_calloc_r+0x1e>
 80107c2:	2600      	movs	r6, #0
 80107c4:	4630      	mov	r0, r6
 80107c6:	bd70      	pop	{r4, r5, r6, pc}
 80107c8:	220c      	movs	r2, #12
 80107ca:	6002      	str	r2, [r0, #0]
 80107cc:	e7f9      	b.n	80107c2 <_calloc_r+0x12>
 80107ce:	462a      	mov	r2, r5
 80107d0:	4621      	mov	r1, r4
 80107d2:	f7fd fdd4 	bl	800e37e <memset>
 80107d6:	e7f5      	b.n	80107c4 <_calloc_r+0x14>

080107d8 <_realloc_r>:
 80107d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107dc:	4680      	mov	r8, r0
 80107de:	4615      	mov	r5, r2
 80107e0:	460c      	mov	r4, r1
 80107e2:	b921      	cbnz	r1, 80107ee <_realloc_r+0x16>
 80107e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107e8:	4611      	mov	r1, r2
 80107ea:	f7fb bf95 	b.w	800c718 <_malloc_r>
 80107ee:	b92a      	cbnz	r2, 80107fc <_realloc_r+0x24>
 80107f0:	f7fe fcd2 	bl	800f198 <_free_r>
 80107f4:	2400      	movs	r4, #0
 80107f6:	4620      	mov	r0, r4
 80107f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107fc:	f000 f833 	bl	8010866 <_malloc_usable_size_r>
 8010800:	4285      	cmp	r5, r0
 8010802:	4606      	mov	r6, r0
 8010804:	d802      	bhi.n	801080c <_realloc_r+0x34>
 8010806:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801080a:	d8f4      	bhi.n	80107f6 <_realloc_r+0x1e>
 801080c:	4629      	mov	r1, r5
 801080e:	4640      	mov	r0, r8
 8010810:	f7fb ff82 	bl	800c718 <_malloc_r>
 8010814:	4607      	mov	r7, r0
 8010816:	2800      	cmp	r0, #0
 8010818:	d0ec      	beq.n	80107f4 <_realloc_r+0x1c>
 801081a:	42b5      	cmp	r5, r6
 801081c:	462a      	mov	r2, r5
 801081e:	4621      	mov	r1, r4
 8010820:	bf28      	it	cs
 8010822:	4632      	movcs	r2, r6
 8010824:	f7fd fe4d 	bl	800e4c2 <memcpy>
 8010828:	4621      	mov	r1, r4
 801082a:	4640      	mov	r0, r8
 801082c:	f7fe fcb4 	bl	800f198 <_free_r>
 8010830:	463c      	mov	r4, r7
 8010832:	e7e0      	b.n	80107f6 <_realloc_r+0x1e>

08010834 <fiprintf>:
 8010834:	b40e      	push	{r1, r2, r3}
 8010836:	b503      	push	{r0, r1, lr}
 8010838:	4601      	mov	r1, r0
 801083a:	ab03      	add	r3, sp, #12
 801083c:	4805      	ldr	r0, [pc, #20]	@ (8010854 <fiprintf+0x20>)
 801083e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010842:	6800      	ldr	r0, [r0, #0]
 8010844:	9301      	str	r3, [sp, #4]
 8010846:	f000 f83f 	bl	80108c8 <_vfiprintf_r>
 801084a:	b002      	add	sp, #8
 801084c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010850:	b003      	add	sp, #12
 8010852:	4770      	bx	lr
 8010854:	2000029c 	.word	0x2000029c

08010858 <abort>:
 8010858:	b508      	push	{r3, lr}
 801085a:	2006      	movs	r0, #6
 801085c:	f000 fa08 	bl	8010c70 <raise>
 8010860:	2001      	movs	r0, #1
 8010862:	f7f2 ffa9 	bl	80037b8 <_exit>

08010866 <_malloc_usable_size_r>:
 8010866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801086a:	1f18      	subs	r0, r3, #4
 801086c:	2b00      	cmp	r3, #0
 801086e:	bfbc      	itt	lt
 8010870:	580b      	ldrlt	r3, [r1, r0]
 8010872:	18c0      	addlt	r0, r0, r3
 8010874:	4770      	bx	lr

08010876 <__sfputc_r>:
 8010876:	6893      	ldr	r3, [r2, #8]
 8010878:	3b01      	subs	r3, #1
 801087a:	2b00      	cmp	r3, #0
 801087c:	b410      	push	{r4}
 801087e:	6093      	str	r3, [r2, #8]
 8010880:	da08      	bge.n	8010894 <__sfputc_r+0x1e>
 8010882:	6994      	ldr	r4, [r2, #24]
 8010884:	42a3      	cmp	r3, r4
 8010886:	db01      	blt.n	801088c <__sfputc_r+0x16>
 8010888:	290a      	cmp	r1, #10
 801088a:	d103      	bne.n	8010894 <__sfputc_r+0x1e>
 801088c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010890:	f000 b932 	b.w	8010af8 <__swbuf_r>
 8010894:	6813      	ldr	r3, [r2, #0]
 8010896:	1c58      	adds	r0, r3, #1
 8010898:	6010      	str	r0, [r2, #0]
 801089a:	7019      	strb	r1, [r3, #0]
 801089c:	4608      	mov	r0, r1
 801089e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <__sfputs_r>:
 80108a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a6:	4606      	mov	r6, r0
 80108a8:	460f      	mov	r7, r1
 80108aa:	4614      	mov	r4, r2
 80108ac:	18d5      	adds	r5, r2, r3
 80108ae:	42ac      	cmp	r4, r5
 80108b0:	d101      	bne.n	80108b6 <__sfputs_r+0x12>
 80108b2:	2000      	movs	r0, #0
 80108b4:	e007      	b.n	80108c6 <__sfputs_r+0x22>
 80108b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ba:	463a      	mov	r2, r7
 80108bc:	4630      	mov	r0, r6
 80108be:	f7ff ffda 	bl	8010876 <__sfputc_r>
 80108c2:	1c43      	adds	r3, r0, #1
 80108c4:	d1f3      	bne.n	80108ae <__sfputs_r+0xa>
 80108c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108c8 <_vfiprintf_r>:
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	460d      	mov	r5, r1
 80108ce:	b09d      	sub	sp, #116	@ 0x74
 80108d0:	4614      	mov	r4, r2
 80108d2:	4698      	mov	r8, r3
 80108d4:	4606      	mov	r6, r0
 80108d6:	b118      	cbz	r0, 80108e0 <_vfiprintf_r+0x18>
 80108d8:	6a03      	ldr	r3, [r0, #32]
 80108da:	b90b      	cbnz	r3, 80108e0 <_vfiprintf_r+0x18>
 80108dc:	f7fd fcb6 	bl	800e24c <__sinit>
 80108e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108e2:	07d9      	lsls	r1, r3, #31
 80108e4:	d405      	bmi.n	80108f2 <_vfiprintf_r+0x2a>
 80108e6:	89ab      	ldrh	r3, [r5, #12]
 80108e8:	059a      	lsls	r2, r3, #22
 80108ea:	d402      	bmi.n	80108f2 <_vfiprintf_r+0x2a>
 80108ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108ee:	f7fd fde6 	bl	800e4be <__retarget_lock_acquire_recursive>
 80108f2:	89ab      	ldrh	r3, [r5, #12]
 80108f4:	071b      	lsls	r3, r3, #28
 80108f6:	d501      	bpl.n	80108fc <_vfiprintf_r+0x34>
 80108f8:	692b      	ldr	r3, [r5, #16]
 80108fa:	b99b      	cbnz	r3, 8010924 <_vfiprintf_r+0x5c>
 80108fc:	4629      	mov	r1, r5
 80108fe:	4630      	mov	r0, r6
 8010900:	f000 f938 	bl	8010b74 <__swsetup_r>
 8010904:	b170      	cbz	r0, 8010924 <_vfiprintf_r+0x5c>
 8010906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010908:	07dc      	lsls	r4, r3, #31
 801090a:	d504      	bpl.n	8010916 <_vfiprintf_r+0x4e>
 801090c:	f04f 30ff 	mov.w	r0, #4294967295
 8010910:	b01d      	add	sp, #116	@ 0x74
 8010912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010916:	89ab      	ldrh	r3, [r5, #12]
 8010918:	0598      	lsls	r0, r3, #22
 801091a:	d4f7      	bmi.n	801090c <_vfiprintf_r+0x44>
 801091c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801091e:	f7fd fdcf 	bl	800e4c0 <__retarget_lock_release_recursive>
 8010922:	e7f3      	b.n	801090c <_vfiprintf_r+0x44>
 8010924:	2300      	movs	r3, #0
 8010926:	9309      	str	r3, [sp, #36]	@ 0x24
 8010928:	2320      	movs	r3, #32
 801092a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801092e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010932:	2330      	movs	r3, #48	@ 0x30
 8010934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ae4 <_vfiprintf_r+0x21c>
 8010938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801093c:	f04f 0901 	mov.w	r9, #1
 8010940:	4623      	mov	r3, r4
 8010942:	469a      	mov	sl, r3
 8010944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010948:	b10a      	cbz	r2, 801094e <_vfiprintf_r+0x86>
 801094a:	2a25      	cmp	r2, #37	@ 0x25
 801094c:	d1f9      	bne.n	8010942 <_vfiprintf_r+0x7a>
 801094e:	ebba 0b04 	subs.w	fp, sl, r4
 8010952:	d00b      	beq.n	801096c <_vfiprintf_r+0xa4>
 8010954:	465b      	mov	r3, fp
 8010956:	4622      	mov	r2, r4
 8010958:	4629      	mov	r1, r5
 801095a:	4630      	mov	r0, r6
 801095c:	f7ff ffa2 	bl	80108a4 <__sfputs_r>
 8010960:	3001      	adds	r0, #1
 8010962:	f000 80a7 	beq.w	8010ab4 <_vfiprintf_r+0x1ec>
 8010966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010968:	445a      	add	r2, fp
 801096a:	9209      	str	r2, [sp, #36]	@ 0x24
 801096c:	f89a 3000 	ldrb.w	r3, [sl]
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 809f 	beq.w	8010ab4 <_vfiprintf_r+0x1ec>
 8010976:	2300      	movs	r3, #0
 8010978:	f04f 32ff 	mov.w	r2, #4294967295
 801097c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010980:	f10a 0a01 	add.w	sl, sl, #1
 8010984:	9304      	str	r3, [sp, #16]
 8010986:	9307      	str	r3, [sp, #28]
 8010988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801098c:	931a      	str	r3, [sp, #104]	@ 0x68
 801098e:	4654      	mov	r4, sl
 8010990:	2205      	movs	r2, #5
 8010992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010996:	4853      	ldr	r0, [pc, #332]	@ (8010ae4 <_vfiprintf_r+0x21c>)
 8010998:	f7ef fc3a 	bl	8000210 <memchr>
 801099c:	9a04      	ldr	r2, [sp, #16]
 801099e:	b9d8      	cbnz	r0, 80109d8 <_vfiprintf_r+0x110>
 80109a0:	06d1      	lsls	r1, r2, #27
 80109a2:	bf44      	itt	mi
 80109a4:	2320      	movmi	r3, #32
 80109a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109aa:	0713      	lsls	r3, r2, #28
 80109ac:	bf44      	itt	mi
 80109ae:	232b      	movmi	r3, #43	@ 0x2b
 80109b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109b4:	f89a 3000 	ldrb.w	r3, [sl]
 80109b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109ba:	d015      	beq.n	80109e8 <_vfiprintf_r+0x120>
 80109bc:	9a07      	ldr	r2, [sp, #28]
 80109be:	4654      	mov	r4, sl
 80109c0:	2000      	movs	r0, #0
 80109c2:	f04f 0c0a 	mov.w	ip, #10
 80109c6:	4621      	mov	r1, r4
 80109c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109cc:	3b30      	subs	r3, #48	@ 0x30
 80109ce:	2b09      	cmp	r3, #9
 80109d0:	d94b      	bls.n	8010a6a <_vfiprintf_r+0x1a2>
 80109d2:	b1b0      	cbz	r0, 8010a02 <_vfiprintf_r+0x13a>
 80109d4:	9207      	str	r2, [sp, #28]
 80109d6:	e014      	b.n	8010a02 <_vfiprintf_r+0x13a>
 80109d8:	eba0 0308 	sub.w	r3, r0, r8
 80109dc:	fa09 f303 	lsl.w	r3, r9, r3
 80109e0:	4313      	orrs	r3, r2
 80109e2:	9304      	str	r3, [sp, #16]
 80109e4:	46a2      	mov	sl, r4
 80109e6:	e7d2      	b.n	801098e <_vfiprintf_r+0xc6>
 80109e8:	9b03      	ldr	r3, [sp, #12]
 80109ea:	1d19      	adds	r1, r3, #4
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	9103      	str	r1, [sp, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	bfbb      	ittet	lt
 80109f4:	425b      	neglt	r3, r3
 80109f6:	f042 0202 	orrlt.w	r2, r2, #2
 80109fa:	9307      	strge	r3, [sp, #28]
 80109fc:	9307      	strlt	r3, [sp, #28]
 80109fe:	bfb8      	it	lt
 8010a00:	9204      	strlt	r2, [sp, #16]
 8010a02:	7823      	ldrb	r3, [r4, #0]
 8010a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a06:	d10a      	bne.n	8010a1e <_vfiprintf_r+0x156>
 8010a08:	7863      	ldrb	r3, [r4, #1]
 8010a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a0c:	d132      	bne.n	8010a74 <_vfiprintf_r+0x1ac>
 8010a0e:	9b03      	ldr	r3, [sp, #12]
 8010a10:	1d1a      	adds	r2, r3, #4
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	9203      	str	r2, [sp, #12]
 8010a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a1a:	3402      	adds	r4, #2
 8010a1c:	9305      	str	r3, [sp, #20]
 8010a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010af4 <_vfiprintf_r+0x22c>
 8010a22:	7821      	ldrb	r1, [r4, #0]
 8010a24:	2203      	movs	r2, #3
 8010a26:	4650      	mov	r0, sl
 8010a28:	f7ef fbf2 	bl	8000210 <memchr>
 8010a2c:	b138      	cbz	r0, 8010a3e <_vfiprintf_r+0x176>
 8010a2e:	9b04      	ldr	r3, [sp, #16]
 8010a30:	eba0 000a 	sub.w	r0, r0, sl
 8010a34:	2240      	movs	r2, #64	@ 0x40
 8010a36:	4082      	lsls	r2, r0
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	3401      	adds	r4, #1
 8010a3c:	9304      	str	r3, [sp, #16]
 8010a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a42:	4829      	ldr	r0, [pc, #164]	@ (8010ae8 <_vfiprintf_r+0x220>)
 8010a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a48:	2206      	movs	r2, #6
 8010a4a:	f7ef fbe1 	bl	8000210 <memchr>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d03f      	beq.n	8010ad2 <_vfiprintf_r+0x20a>
 8010a52:	4b26      	ldr	r3, [pc, #152]	@ (8010aec <_vfiprintf_r+0x224>)
 8010a54:	bb1b      	cbnz	r3, 8010a9e <_vfiprintf_r+0x1d6>
 8010a56:	9b03      	ldr	r3, [sp, #12]
 8010a58:	3307      	adds	r3, #7
 8010a5a:	f023 0307 	bic.w	r3, r3, #7
 8010a5e:	3308      	adds	r3, #8
 8010a60:	9303      	str	r3, [sp, #12]
 8010a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a64:	443b      	add	r3, r7
 8010a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a68:	e76a      	b.n	8010940 <_vfiprintf_r+0x78>
 8010a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a6e:	460c      	mov	r4, r1
 8010a70:	2001      	movs	r0, #1
 8010a72:	e7a8      	b.n	80109c6 <_vfiprintf_r+0xfe>
 8010a74:	2300      	movs	r3, #0
 8010a76:	3401      	adds	r4, #1
 8010a78:	9305      	str	r3, [sp, #20]
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	f04f 0c0a 	mov.w	ip, #10
 8010a80:	4620      	mov	r0, r4
 8010a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a86:	3a30      	subs	r2, #48	@ 0x30
 8010a88:	2a09      	cmp	r2, #9
 8010a8a:	d903      	bls.n	8010a94 <_vfiprintf_r+0x1cc>
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d0c6      	beq.n	8010a1e <_vfiprintf_r+0x156>
 8010a90:	9105      	str	r1, [sp, #20]
 8010a92:	e7c4      	b.n	8010a1e <_vfiprintf_r+0x156>
 8010a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a98:	4604      	mov	r4, r0
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e7f0      	b.n	8010a80 <_vfiprintf_r+0x1b8>
 8010a9e:	ab03      	add	r3, sp, #12
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	462a      	mov	r2, r5
 8010aa4:	4b12      	ldr	r3, [pc, #72]	@ (8010af0 <_vfiprintf_r+0x228>)
 8010aa6:	a904      	add	r1, sp, #16
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7fc fd77 	bl	800d59c <_printf_float>
 8010aae:	4607      	mov	r7, r0
 8010ab0:	1c78      	adds	r0, r7, #1
 8010ab2:	d1d6      	bne.n	8010a62 <_vfiprintf_r+0x19a>
 8010ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ab6:	07d9      	lsls	r1, r3, #31
 8010ab8:	d405      	bmi.n	8010ac6 <_vfiprintf_r+0x1fe>
 8010aba:	89ab      	ldrh	r3, [r5, #12]
 8010abc:	059a      	lsls	r2, r3, #22
 8010abe:	d402      	bmi.n	8010ac6 <_vfiprintf_r+0x1fe>
 8010ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ac2:	f7fd fcfd 	bl	800e4c0 <__retarget_lock_release_recursive>
 8010ac6:	89ab      	ldrh	r3, [r5, #12]
 8010ac8:	065b      	lsls	r3, r3, #25
 8010aca:	f53f af1f 	bmi.w	801090c <_vfiprintf_r+0x44>
 8010ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ad0:	e71e      	b.n	8010910 <_vfiprintf_r+0x48>
 8010ad2:	ab03      	add	r3, sp, #12
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	462a      	mov	r2, r5
 8010ad8:	4b05      	ldr	r3, [pc, #20]	@ (8010af0 <_vfiprintf_r+0x228>)
 8010ada:	a904      	add	r1, sp, #16
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7fc fff5 	bl	800dacc <_printf_i>
 8010ae2:	e7e4      	b.n	8010aae <_vfiprintf_r+0x1e6>
 8010ae4:	080112f9 	.word	0x080112f9
 8010ae8:	08011303 	.word	0x08011303
 8010aec:	0800d59d 	.word	0x0800d59d
 8010af0:	080108a5 	.word	0x080108a5
 8010af4:	080112ff 	.word	0x080112ff

08010af8 <__swbuf_r>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	460e      	mov	r6, r1
 8010afc:	4614      	mov	r4, r2
 8010afe:	4605      	mov	r5, r0
 8010b00:	b118      	cbz	r0, 8010b0a <__swbuf_r+0x12>
 8010b02:	6a03      	ldr	r3, [r0, #32]
 8010b04:	b90b      	cbnz	r3, 8010b0a <__swbuf_r+0x12>
 8010b06:	f7fd fba1 	bl	800e24c <__sinit>
 8010b0a:	69a3      	ldr	r3, [r4, #24]
 8010b0c:	60a3      	str	r3, [r4, #8]
 8010b0e:	89a3      	ldrh	r3, [r4, #12]
 8010b10:	071a      	lsls	r2, r3, #28
 8010b12:	d501      	bpl.n	8010b18 <__swbuf_r+0x20>
 8010b14:	6923      	ldr	r3, [r4, #16]
 8010b16:	b943      	cbnz	r3, 8010b2a <__swbuf_r+0x32>
 8010b18:	4621      	mov	r1, r4
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f000 f82a 	bl	8010b74 <__swsetup_r>
 8010b20:	b118      	cbz	r0, 8010b2a <__swbuf_r+0x32>
 8010b22:	f04f 37ff 	mov.w	r7, #4294967295
 8010b26:	4638      	mov	r0, r7
 8010b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2a:	6823      	ldr	r3, [r4, #0]
 8010b2c:	6922      	ldr	r2, [r4, #16]
 8010b2e:	1a98      	subs	r0, r3, r2
 8010b30:	6963      	ldr	r3, [r4, #20]
 8010b32:	b2f6      	uxtb	r6, r6
 8010b34:	4283      	cmp	r3, r0
 8010b36:	4637      	mov	r7, r6
 8010b38:	dc05      	bgt.n	8010b46 <__swbuf_r+0x4e>
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f7ff fdd7 	bl	80106f0 <_fflush_r>
 8010b42:	2800      	cmp	r0, #0
 8010b44:	d1ed      	bne.n	8010b22 <__swbuf_r+0x2a>
 8010b46:	68a3      	ldr	r3, [r4, #8]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	60a3      	str	r3, [r4, #8]
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	1c5a      	adds	r2, r3, #1
 8010b50:	6022      	str	r2, [r4, #0]
 8010b52:	701e      	strb	r6, [r3, #0]
 8010b54:	6962      	ldr	r2, [r4, #20]
 8010b56:	1c43      	adds	r3, r0, #1
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d004      	beq.n	8010b66 <__swbuf_r+0x6e>
 8010b5c:	89a3      	ldrh	r3, [r4, #12]
 8010b5e:	07db      	lsls	r3, r3, #31
 8010b60:	d5e1      	bpl.n	8010b26 <__swbuf_r+0x2e>
 8010b62:	2e0a      	cmp	r6, #10
 8010b64:	d1df      	bne.n	8010b26 <__swbuf_r+0x2e>
 8010b66:	4621      	mov	r1, r4
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f7ff fdc1 	bl	80106f0 <_fflush_r>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0d9      	beq.n	8010b26 <__swbuf_r+0x2e>
 8010b72:	e7d6      	b.n	8010b22 <__swbuf_r+0x2a>

08010b74 <__swsetup_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	4b29      	ldr	r3, [pc, #164]	@ (8010c1c <__swsetup_r+0xa8>)
 8010b78:	4605      	mov	r5, r0
 8010b7a:	6818      	ldr	r0, [r3, #0]
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	b118      	cbz	r0, 8010b88 <__swsetup_r+0x14>
 8010b80:	6a03      	ldr	r3, [r0, #32]
 8010b82:	b90b      	cbnz	r3, 8010b88 <__swsetup_r+0x14>
 8010b84:	f7fd fb62 	bl	800e24c <__sinit>
 8010b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b8c:	0719      	lsls	r1, r3, #28
 8010b8e:	d422      	bmi.n	8010bd6 <__swsetup_r+0x62>
 8010b90:	06da      	lsls	r2, r3, #27
 8010b92:	d407      	bmi.n	8010ba4 <__swsetup_r+0x30>
 8010b94:	2209      	movs	r2, #9
 8010b96:	602a      	str	r2, [r5, #0]
 8010b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b9c:	81a3      	strh	r3, [r4, #12]
 8010b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba2:	e033      	b.n	8010c0c <__swsetup_r+0x98>
 8010ba4:	0758      	lsls	r0, r3, #29
 8010ba6:	d512      	bpl.n	8010bce <__swsetup_r+0x5a>
 8010ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010baa:	b141      	cbz	r1, 8010bbe <__swsetup_r+0x4a>
 8010bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bb0:	4299      	cmp	r1, r3
 8010bb2:	d002      	beq.n	8010bba <__swsetup_r+0x46>
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	f7fe faef 	bl	800f198 <_free_r>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bc4:	81a3      	strh	r3, [r4, #12]
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	6063      	str	r3, [r4, #4]
 8010bca:	6923      	ldr	r3, [r4, #16]
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	f043 0308 	orr.w	r3, r3, #8
 8010bd4:	81a3      	strh	r3, [r4, #12]
 8010bd6:	6923      	ldr	r3, [r4, #16]
 8010bd8:	b94b      	cbnz	r3, 8010bee <__swsetup_r+0x7a>
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010be4:	d003      	beq.n	8010bee <__swsetup_r+0x7a>
 8010be6:	4621      	mov	r1, r4
 8010be8:	4628      	mov	r0, r5
 8010bea:	f000 f883 	bl	8010cf4 <__smakebuf_r>
 8010bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf2:	f013 0201 	ands.w	r2, r3, #1
 8010bf6:	d00a      	beq.n	8010c0e <__swsetup_r+0x9a>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	60a2      	str	r2, [r4, #8]
 8010bfc:	6962      	ldr	r2, [r4, #20]
 8010bfe:	4252      	negs	r2, r2
 8010c00:	61a2      	str	r2, [r4, #24]
 8010c02:	6922      	ldr	r2, [r4, #16]
 8010c04:	b942      	cbnz	r2, 8010c18 <__swsetup_r+0xa4>
 8010c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c0a:	d1c5      	bne.n	8010b98 <__swsetup_r+0x24>
 8010c0c:	bd38      	pop	{r3, r4, r5, pc}
 8010c0e:	0799      	lsls	r1, r3, #30
 8010c10:	bf58      	it	pl
 8010c12:	6962      	ldrpl	r2, [r4, #20]
 8010c14:	60a2      	str	r2, [r4, #8]
 8010c16:	e7f4      	b.n	8010c02 <__swsetup_r+0x8e>
 8010c18:	2000      	movs	r0, #0
 8010c1a:	e7f7      	b.n	8010c0c <__swsetup_r+0x98>
 8010c1c:	2000029c 	.word	0x2000029c

08010c20 <_raise_r>:
 8010c20:	291f      	cmp	r1, #31
 8010c22:	b538      	push	{r3, r4, r5, lr}
 8010c24:	4605      	mov	r5, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	d904      	bls.n	8010c34 <_raise_r+0x14>
 8010c2a:	2316      	movs	r3, #22
 8010c2c:	6003      	str	r3, [r0, #0]
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c36:	b112      	cbz	r2, 8010c3e <_raise_r+0x1e>
 8010c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c3c:	b94b      	cbnz	r3, 8010c52 <_raise_r+0x32>
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f000 f830 	bl	8010ca4 <_getpid_r>
 8010c44:	4622      	mov	r2, r4
 8010c46:	4601      	mov	r1, r0
 8010c48:	4628      	mov	r0, r5
 8010c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c4e:	f000 b817 	b.w	8010c80 <_kill_r>
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d00a      	beq.n	8010c6c <_raise_r+0x4c>
 8010c56:	1c59      	adds	r1, r3, #1
 8010c58:	d103      	bne.n	8010c62 <_raise_r+0x42>
 8010c5a:	2316      	movs	r3, #22
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	2001      	movs	r0, #1
 8010c60:	e7e7      	b.n	8010c32 <_raise_r+0x12>
 8010c62:	2100      	movs	r1, #0
 8010c64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c68:	4620      	mov	r0, r4
 8010c6a:	4798      	blx	r3
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	e7e0      	b.n	8010c32 <_raise_r+0x12>

08010c70 <raise>:
 8010c70:	4b02      	ldr	r3, [pc, #8]	@ (8010c7c <raise+0xc>)
 8010c72:	4601      	mov	r1, r0
 8010c74:	6818      	ldr	r0, [r3, #0]
 8010c76:	f7ff bfd3 	b.w	8010c20 <_raise_r>
 8010c7a:	bf00      	nop
 8010c7c:	2000029c 	.word	0x2000029c

08010c80 <_kill_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4d07      	ldr	r5, [pc, #28]	@ (8010ca0 <_kill_r+0x20>)
 8010c84:	2300      	movs	r3, #0
 8010c86:	4604      	mov	r4, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	602b      	str	r3, [r5, #0]
 8010c8e:	f7f2 fd83 	bl	8003798 <_kill>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	d102      	bne.n	8010c9c <_kill_r+0x1c>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	b103      	cbz	r3, 8010c9c <_kill_r+0x1c>
 8010c9a:	6023      	str	r3, [r4, #0]
 8010c9c:	bd38      	pop	{r3, r4, r5, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20001d5c 	.word	0x20001d5c

08010ca4 <_getpid_r>:
 8010ca4:	f7f2 bd70 	b.w	8003788 <_getpid>

08010ca8 <__swhatbuf_r>:
 8010ca8:	b570      	push	{r4, r5, r6, lr}
 8010caa:	460c      	mov	r4, r1
 8010cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb0:	2900      	cmp	r1, #0
 8010cb2:	b096      	sub	sp, #88	@ 0x58
 8010cb4:	4615      	mov	r5, r2
 8010cb6:	461e      	mov	r6, r3
 8010cb8:	da0d      	bge.n	8010cd6 <__swhatbuf_r+0x2e>
 8010cba:	89a3      	ldrh	r3, [r4, #12]
 8010cbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010cc0:	f04f 0100 	mov.w	r1, #0
 8010cc4:	bf14      	ite	ne
 8010cc6:	2340      	movne	r3, #64	@ 0x40
 8010cc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010ccc:	2000      	movs	r0, #0
 8010cce:	6031      	str	r1, [r6, #0]
 8010cd0:	602b      	str	r3, [r5, #0]
 8010cd2:	b016      	add	sp, #88	@ 0x58
 8010cd4:	bd70      	pop	{r4, r5, r6, pc}
 8010cd6:	466a      	mov	r2, sp
 8010cd8:	f000 f848 	bl	8010d6c <_fstat_r>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	dbec      	blt.n	8010cba <__swhatbuf_r+0x12>
 8010ce0:	9901      	ldr	r1, [sp, #4]
 8010ce2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ce6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010cea:	4259      	negs	r1, r3
 8010cec:	4159      	adcs	r1, r3
 8010cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cf2:	e7eb      	b.n	8010ccc <__swhatbuf_r+0x24>

08010cf4 <__smakebuf_r>:
 8010cf4:	898b      	ldrh	r3, [r1, #12]
 8010cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cf8:	079d      	lsls	r5, r3, #30
 8010cfa:	4606      	mov	r6, r0
 8010cfc:	460c      	mov	r4, r1
 8010cfe:	d507      	bpl.n	8010d10 <__smakebuf_r+0x1c>
 8010d00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	6123      	str	r3, [r4, #16]
 8010d08:	2301      	movs	r3, #1
 8010d0a:	6163      	str	r3, [r4, #20]
 8010d0c:	b003      	add	sp, #12
 8010d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d10:	ab01      	add	r3, sp, #4
 8010d12:	466a      	mov	r2, sp
 8010d14:	f7ff ffc8 	bl	8010ca8 <__swhatbuf_r>
 8010d18:	9f00      	ldr	r7, [sp, #0]
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	4639      	mov	r1, r7
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7fb fcfa 	bl	800c718 <_malloc_r>
 8010d24:	b948      	cbnz	r0, 8010d3a <__smakebuf_r+0x46>
 8010d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d2a:	059a      	lsls	r2, r3, #22
 8010d2c:	d4ee      	bmi.n	8010d0c <__smakebuf_r+0x18>
 8010d2e:	f023 0303 	bic.w	r3, r3, #3
 8010d32:	f043 0302 	orr.w	r3, r3, #2
 8010d36:	81a3      	strh	r3, [r4, #12]
 8010d38:	e7e2      	b.n	8010d00 <__smakebuf_r+0xc>
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	6020      	str	r0, [r4, #0]
 8010d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d42:	81a3      	strh	r3, [r4, #12]
 8010d44:	9b01      	ldr	r3, [sp, #4]
 8010d46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d4a:	b15b      	cbz	r3, 8010d64 <__smakebuf_r+0x70>
 8010d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d50:	4630      	mov	r0, r6
 8010d52:	f000 f81d 	bl	8010d90 <_isatty_r>
 8010d56:	b128      	cbz	r0, 8010d64 <__smakebuf_r+0x70>
 8010d58:	89a3      	ldrh	r3, [r4, #12]
 8010d5a:	f023 0303 	bic.w	r3, r3, #3
 8010d5e:	f043 0301 	orr.w	r3, r3, #1
 8010d62:	81a3      	strh	r3, [r4, #12]
 8010d64:	89a3      	ldrh	r3, [r4, #12]
 8010d66:	431d      	orrs	r5, r3
 8010d68:	81a5      	strh	r5, [r4, #12]
 8010d6a:	e7cf      	b.n	8010d0c <__smakebuf_r+0x18>

08010d6c <_fstat_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4d07      	ldr	r5, [pc, #28]	@ (8010d8c <_fstat_r+0x20>)
 8010d70:	2300      	movs	r3, #0
 8010d72:	4604      	mov	r4, r0
 8010d74:	4608      	mov	r0, r1
 8010d76:	4611      	mov	r1, r2
 8010d78:	602b      	str	r3, [r5, #0]
 8010d7a:	f7f2 fd6d 	bl	8003858 <_fstat>
 8010d7e:	1c43      	adds	r3, r0, #1
 8010d80:	d102      	bne.n	8010d88 <_fstat_r+0x1c>
 8010d82:	682b      	ldr	r3, [r5, #0]
 8010d84:	b103      	cbz	r3, 8010d88 <_fstat_r+0x1c>
 8010d86:	6023      	str	r3, [r4, #0]
 8010d88:	bd38      	pop	{r3, r4, r5, pc}
 8010d8a:	bf00      	nop
 8010d8c:	20001d5c 	.word	0x20001d5c

08010d90 <_isatty_r>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4d06      	ldr	r5, [pc, #24]	@ (8010dac <_isatty_r+0x1c>)
 8010d94:	2300      	movs	r3, #0
 8010d96:	4604      	mov	r4, r0
 8010d98:	4608      	mov	r0, r1
 8010d9a:	602b      	str	r3, [r5, #0]
 8010d9c:	f7f2 fd6c 	bl	8003878 <_isatty>
 8010da0:	1c43      	adds	r3, r0, #1
 8010da2:	d102      	bne.n	8010daa <_isatty_r+0x1a>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	b103      	cbz	r3, 8010daa <_isatty_r+0x1a>
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	20001d5c 	.word	0x20001d5c

08010db0 <_init>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	bf00      	nop
 8010db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db6:	bc08      	pop	{r3}
 8010db8:	469e      	mov	lr, r3
 8010dba:	4770      	bx	lr

08010dbc <_fini>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	bf00      	nop
 8010dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc2:	bc08      	pop	{r3}
 8010dc4:	469e      	mov	lr, r3
 8010dc6:	4770      	bx	lr
