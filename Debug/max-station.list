
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014420  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  080145f0  080145f0  000155f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e30  08014e30  00016300  2**0
                  CONTENTS
  4 .ARM          00000008  08014e30  08014e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e38  08014e38  00016300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e38  08014e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e3c  08014e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08014e40  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002384  20000300  08015140  00016300  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002684  08015140  00016684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214af  00000000  00000000  00016330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c10  00000000  00000000  000377df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  0003c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001626  00000000  00000000  0003e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297df  00000000  00000000  0003f696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000276d2  00000000  00000000  00068e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f38  00000000  00000000  00090547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009328  00000000  00000000  0017a4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001837ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080145d8 	.word	0x080145d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	080145d8 	.word	0x080145d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00d fbd4 	bl	800e894 <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e fb0a 	bl	800f7de <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00e fb00 	bl	800f7de <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00e faf1 	bl	800f7de <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00e fae7 	bl	800f7de <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00e fad8 	bl	800f7de <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00e face 	bl	800f7de <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00e fabf 	bl	800f7de <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00e fab5 	bl	800f7de <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	080145f0 	.word	0x080145f0
 80014b0:	080145f8 	.word	0x080145f8
 80014b4:	08014600 	.word	0x08014600
 80014b8:	08014608 	.word	0x08014608
 80014bc:	08014610 	.word	0x08014610
 80014c0:	08014618 	.word	0x08014618
 80014c4:	08014620 	.word	0x08014620
 80014c8:	08014628 	.word	0x08014628
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00e f818 	bl	800f912 <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00d ff2c 	bl	800f7ce <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00d ff13 	bl	800f7ce <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d11e      	bne.n	8001b4e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d00f      	beq.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
 8001b18:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b1e:	d80b      	bhi.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	b2d1      	uxtb	r1, r2
 8001b28:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b2a:	7011      	strb	r1, [r2, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_UART_RxCpltCallback+0xbc>)
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	e005      	b.n	8001b44 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <HAL_UART_RxCpltCallback+0xb8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

		}
	  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	491b      	ldr	r1, [pc, #108]	@ (8001bb4 <HAL_UART_RxCpltCallback+0xb4>)
 8001b48:	4819      	ldr	r0, [pc, #100]	@ (8001bb0 <HAL_UART_RxCpltCallback+0xb0>)
 8001b4a:	f006 fdbc 	bl	80086c6 <HAL_UART_Receive_IT>
	}

	if(huart == &huart2) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d127      	bne.n	8001ba6 <HAL_UART_RxCpltCallback+0xa6>
			if( rx_data != '\n'&& rx_index < RX_BUFFER_SIZE) {
 8001b56:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d010      	beq.n	8001b80 <HAL_UART_RxCpltCallback+0x80>
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0b      	blt.n	8001b80 <HAL_UART_RxCpltCallback+0x80>
				gps_rx_buffer[rx_index++] = rx_data;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	b2d1      	uxtb	r1, r2
 8001b70:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b72:	7011      	strb	r1, [r2, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b78:	7819      	ldrb	r1, [r3, #0]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_UART_RxCpltCallback+0xcc>)
 8001b7c:	5499      	strb	r1, [r3, r2]
 8001b7e:	e00d      	b.n	8001b9c <HAL_UART_RxCpltCallback+0x9c>
			} else {
				lwgps_process(&gps, gps_rx_buffer, rx_index+1);
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	461a      	mov	r2, r3
 8001b88:	4910      	ldr	r1, [pc, #64]	@ (8001bcc <HAL_UART_RxCpltCallback+0xcc>)
 8001b8a:	4811      	ldr	r0, [pc, #68]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b8c:	f7ff fef8 	bl	8001980 <lwgps_process>
				rx_index = 0;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001ba2:	f006 fd90 	bl	80086c6 <HAL_UART_Receive_IT>
		}
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200004e0 	.word	0x200004e0
 8001bb4:	20000570 	.word	0x20000570
 8001bb8:	2000056f 	.word	0x2000056f
 8001bbc:	20000524 	.word	0x20000524
 8001bc0:	2000049c 	.word	0x2000049c
 8001bc4:	20000645 	.word	0x20000645
 8001bc8:	20000644 	.word	0x20000644
 8001bcc:	200005c4 	.word	0x200005c4
 8001bd0:	20000860 	.word	0x20000860

08001bd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x16>
   adc_flag=1;
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]

	}


}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000410 	.word	0x20000410
 8001bfc:	20000848 	.word	0x20000848

08001c00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_ADC_ConvCpltCallback+0x30>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d109      	bne.n	8001c26 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8001c12:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <HAL_ADC_ConvCpltCallback+0x34>)
 8001c14:	f002 fe80 	bl	8004918 <HAL_ADC_GetValue>
 8001c18:	ee07 0a90 	vmov	s15, r0
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_ADC_ConvCpltCallback+0x38>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]


		//adc_flag = 1;
	}
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40012000 	.word	0x40012000
 8001c34:	2000031c 	.word	0x2000031c
 8001c38:	20000840 	.word	0x20000840
 8001c3c:	00000000 	.word	0x00000000

08001c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	ed2d 8b04 	vpush	{d8-d9}
 8001c46:	b0a2      	sub	sp, #136	@ 0x88
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4a:	f002 fb9d 	bl	8004388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4e:	f001 f897 	bl	8002d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c52:	f001 fa59 	bl	8003108 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c56:	f001 f8ff 	bl	8002e58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c5a:	f001 f94f 	bl	8002efc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c5e:	f001 f97b 	bl	8002f58 <MX_SPI1_Init>
  MX_UART4_Init();
 8001c62:	f001 f9d3 	bl	800300c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001c66:	f001 f9fb 	bl	8003060 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c6a:	f001 fa23 	bl	80030b4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001c6e:	f009 f90b 	bl	800ae88 <MX_FATFS_Init>
  MX_TIM11_Init();
 8001c72:	f001 f9a7 	bl	8002fc4 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001c76:	f00b f9bd 	bl	800cff4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	49c3      	ldr	r1, [pc, #780]	@ (8001f8c <main+0x34c>)
 8001c7e:	48c4      	ldr	r0, [pc, #784]	@ (8001f90 <main+0x350>)
 8001c80:	f006 fd21 	bl	80086c6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8001c84:	2201      	movs	r2, #1
 8001c86:	49c3      	ldr	r1, [pc, #780]	@ (8001f94 <main+0x354>)
 8001c88:	48c3      	ldr	r0, [pc, #780]	@ (8001f98 <main+0x358>)
 8001c8a:	f006 fd1c 	bl	80086c6 <HAL_UART_Receive_IT>
  E220_CONFIG(0x8,0x2A,0x10,1);
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2210      	movs	r2, #16
 8001c92:	212a      	movs	r1, #42	@ 0x2a
 8001c94:	2008      	movs	r0, #8
 8001c96:	f001 fae3 	bl	8003260 <E220_CONFIG>
  lwgps_init(&gps);
 8001c9a:	48c0      	ldr	r0, [pc, #768]	@ (8001f9c <main+0x35c>)
 8001c9c:	f7ff fe62 	bl	8001964 <lwgps_init>

  HAL_ADC_Start_IT(&hadc1);
 8001ca0:	48bf      	ldr	r0, [pc, #764]	@ (8001fa0 <main+0x360>)
 8001ca2:	f002 fc4b 	bl	800453c <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001ca6:	48bf      	ldr	r0, [pc, #764]	@ (8001fa4 <main+0x364>)
 8001ca8:	f006 f9da 	bl	8008060 <HAL_TIM_Base_Start_IT>

  tim1=HAL_GetTick();
 8001cac:	f002 fbd2 	bl	8004454 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4abd      	ldr	r2, [pc, #756]	@ (8001fa8 <main+0x368>)
 8001cb4:	6013      	str	r3, [r2, #0]
  while (1)
  {
	//  HAL_UART_Receive(&huart4, nextion_rx_data, 5 , 1000);


		  HYI_BUFFER_Fill();
 8001cb6:	f001 fc81 	bl	80035bc <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 8001cba:	4bbc      	ldr	r3, [pc, #752]	@ (8001fac <main+0x36c>)
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	f040 832f 	bne.w	8002322 <main+0x6e2>
 8001cc4:	4bb9      	ldr	r3, [pc, #740]	@ (8001fac <main+0x36c>)
 8001cc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cca:	2b31      	cmp	r3, #49	@ 0x31
 8001ccc:	f040 8329 	bne.w	8002322 <main+0x6e2>

		  Sustainer.satsinview=lora_rx_buffer[4];
 8001cd0:	4bb6      	ldr	r3, [pc, #728]	@ (8001fac <main+0x36c>)
 8001cd2:	791a      	ldrb	r2, [r3, #4]
 8001cd4:	4bb6      	ldr	r3, [pc, #728]	@ (8001fb0 <main+0x370>)
 8001cd6:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001cde:	e01b      	b.n	8001d18 <main+0xd8>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8001ce0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ce4:	1d5a      	adds	r2, r3, #5
 8001ce6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cea:	49b0      	ldr	r1, [pc, #704]	@ (8001fac <main+0x36c>)
 8001cec:	5c8a      	ldrb	r2, [r1, r2]
 8001cee:	3380      	adds	r3, #128	@ 0x80
 8001cf0:	f107 0108 	add.w	r1, r7, #8
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8001cfa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001cfe:	1d5a      	adds	r2, r3, #5
 8001d00:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d04:	330a      	adds	r3, #10
 8001d06:	49a9      	ldr	r1, [pc, #676]	@ (8001fac <main+0x36c>)
 8001d08:	5c89      	ldrb	r1, [r1, r2]
 8001d0a:	4aaa      	ldr	r2, [pc, #680]	@ (8001fb4 <main+0x374>)
 8001d0c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001d18:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d9df      	bls.n	8001ce0 <main+0xa0>
				 }
				 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 8001d20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d22:	4aa3      	ldr	r2, [pc, #652]	@ (8001fb0 <main+0x370>)
 8001d24:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001d2c:	e01d      	b.n	8001d6a <main+0x12a>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8001d2e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d32:	f103 0209 	add.w	r2, r3, #9
 8001d36:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d3a:	499c      	ldr	r1, [pc, #624]	@ (8001fac <main+0x36c>)
 8001d3c:	5c8a      	ldrb	r2, [r1, r2]
 8001d3e:	3380      	adds	r3, #128	@ 0x80
 8001d40:	f107 0108 	add.w	r1, r7, #8
 8001d44:	440b      	add	r3, r1
 8001d46:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 8001d4a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d4e:	f103 0209 	add.w	r2, r3, #9
 8001d52:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d56:	330e      	adds	r3, #14
 8001d58:	4994      	ldr	r1, [pc, #592]	@ (8001fac <main+0x36c>)
 8001d5a:	5c89      	ldrb	r1, [r1, r2]
 8001d5c:	4a95      	ldr	r2, [pc, #596]	@ (8001fb4 <main+0x374>)
 8001d5e:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d60:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d64:	3301      	adds	r3, #1
 8001d66:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8001d6a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9dd      	bls.n	8001d2e <main+0xee>
				 }
				 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8001d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d74:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb0 <main+0x370>)
 8001d76:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8001d7e:	e01d      	b.n	8001dbc <main+0x17c>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8001d80:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d84:	f103 020d 	add.w	r2, r3, #13
 8001d88:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001d8c:	4987      	ldr	r1, [pc, #540]	@ (8001fac <main+0x36c>)
 8001d8e:	5c8a      	ldrb	r2, [r1, r2]
 8001d90:	3380      	adds	r3, #128	@ 0x80
 8001d92:	f107 0108 	add.w	r1, r7, #8
 8001d96:	440b      	add	r3, r1
 8001d98:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 8001d9c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001da0:	f103 020d 	add.w	r2, r3, #13
 8001da4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001da8:	3312      	adds	r3, #18
 8001daa:	4980      	ldr	r1, [pc, #512]	@ (8001fac <main+0x36c>)
 8001dac:	5c89      	ldrb	r1, [r1, r2]
 8001dae:	4a81      	ldr	r2, [pc, #516]	@ (8001fb4 <main+0x374>)
 8001db0:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001db2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001db6:	3301      	adds	r3, #1
 8001db8:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8001dbc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d9dd      	bls.n	8001d80 <main+0x140>
				 }
				 Sustainer.gpslongitude=f2u8_longitude.fVal;
 8001dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001fb0 <main+0x370>)
 8001dc8:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8001dd0:	e01d      	b.n	8001e0e <main+0x1ce>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 8001dd2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001dd6:	f103 0211 	add.w	r2, r3, #17
 8001dda:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001dde:	4973      	ldr	r1, [pc, #460]	@ (8001fac <main+0x36c>)
 8001de0:	5c8a      	ldrb	r2, [r1, r2]
 8001de2:	3380      	adds	r3, #128	@ 0x80
 8001de4:	f107 0108 	add.w	r1, r7, #8
 8001de8:	440b      	add	r3, r1
 8001dea:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 8001dee:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001df2:	f103 0211 	add.w	r2, r3, #17
 8001df6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	496b      	ldr	r1, [pc, #428]	@ (8001fac <main+0x36c>)
 8001dfe:	5c89      	ldrb	r1, [r1, r2]
 8001e00:	4a6c      	ldr	r2, [pc, #432]	@ (8001fb4 <main+0x374>)
 8001e02:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001e04:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8001e0e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d9dd      	bls.n	8001dd2 <main+0x192>
				 }
				 Sustainer.altitude=f2u8_altitude.fVal;
 8001e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e18:	4a65      	ldr	r2, [pc, #404]	@ (8001fb0 <main+0x370>)
 8001e1a:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001e22:	e012      	b.n	8001e4a <main+0x20a>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8001e24:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e28:	f103 0215 	add.w	r2, r3, #21
 8001e2c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e30:	495e      	ldr	r1, [pc, #376]	@ (8001fac <main+0x36c>)
 8001e32:	5c8a      	ldrb	r2, [r1, r2]
 8001e34:	3380      	adds	r3, #128	@ 0x80
 8001e36:	f107 0108 	add.w	r1, r7, #8
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8001e40:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e44:	3301      	adds	r3, #1
 8001e46:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8001e4a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d9e8      	bls.n	8001e24 <main+0x1e4>
				 }
				 Sustainer.speed=f2u8_speed.fVal;
 8001e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e54:	4a56      	ldr	r2, [pc, #344]	@ (8001fb0 <main+0x370>)
 8001e56:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8001e5e:	e012      	b.n	8001e86 <main+0x246>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8001e60:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e64:	f103 0219 	add.w	r2, r3, #25
 8001e68:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e6c:	494f      	ldr	r1, [pc, #316]	@ (8001fac <main+0x36c>)
 8001e6e:	5c8a      	ldrb	r2, [r1, r2]
 8001e70:	3380      	adds	r3, #128	@ 0x80
 8001e72:	f107 0108 	add.w	r1, r7, #8
 8001e76:	440b      	add	r3, r1
 8001e78:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8001e7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8001e86:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d9e8      	bls.n	8001e60 <main+0x220>
				 }
				 Sustainer.temperature=f2u8_temp.fVal;
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	4a47      	ldr	r2, [pc, #284]	@ (8001fb0 <main+0x370>)
 8001e92:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8001e9a:	e012      	b.n	8001ec2 <main+0x282>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 8001e9c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001ea0:	f103 021d 	add.w	r2, r3, #29
 8001ea4:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001ea8:	4940      	ldr	r1, [pc, #256]	@ (8001fac <main+0x36c>)
 8001eaa:	5c8a      	ldrb	r2, [r1, r2]
 8001eac:	3380      	adds	r3, #128	@ 0x80
 8001eae:	f107 0108 	add.w	r1, r7, #8
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f803 2c38 	strb.w	r2, [r3, #-56]
				 for(uint8_t i=0;i<4;i++)
 8001eb8:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8001ec2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d9e8      	bls.n	8001e9c <main+0x25c>
					// HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
				 }
				 Sustainer.accx=f2u8_accx.fVal;
 8001eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ecc:	4a38      	ldr	r2, [pc, #224]	@ (8001fb0 <main+0x370>)
 8001ece:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8001ed6:	e012      	b.n	8001efe <main+0x2be>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 8001ed8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001edc:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001ee0:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001ee4:	4931      	ldr	r1, [pc, #196]	@ (8001fac <main+0x36c>)
 8001ee6:	5c8a      	ldrb	r2, [r1, r2]
 8001ee8:	3380      	adds	r3, #128	@ 0x80
 8001eea:	f107 0108 	add.w	r1, r7, #8
 8001eee:	440b      	add	r3, r1
 8001ef0:	f803 2c3c 	strb.w	r2, [r3, #-60]
				 for(uint8_t i=0;i<4;i++)
 8001ef4:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8001efe:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d9e8      	bls.n	8001ed8 <main+0x298>
					 //HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
				 }
				 Sustainer.accy=f2u8_accy.fVal;
 8001f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f08:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <main+0x370>)
 8001f0a:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001f12:	e012      	b.n	8001f3a <main+0x2fa>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 8001f14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f18:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001f1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f20:	4922      	ldr	r1, [pc, #136]	@ (8001fac <main+0x36c>)
 8001f22:	5c8a      	ldrb	r2, [r1, r2]
 8001f24:	3380      	adds	r3, #128	@ 0x80
 8001f26:	f107 0108 	add.w	r1, r7, #8
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f803 2c40 	strb.w	r2, [r3, #-64]
			      for(uint8_t i=0;i<4;i++)
 8001f30:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f34:	3301      	adds	r3, #1
 8001f36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001f3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d9e8      	bls.n	8001f14 <main+0x2d4>
			    	//  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
				 }
			      Sustainer.accz=f2u8_accz.fVal;
 8001f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <main+0x370>)
 8001f46:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001f4e:	e012      	b.n	8001f76 <main+0x336>
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 8001f50:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f54:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001f58:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f5c:	4913      	ldr	r1, [pc, #76]	@ (8001fac <main+0x36c>)
 8001f5e:	5c8a      	ldrb	r2, [r1, r2]
 8001f60:	3380      	adds	r3, #128	@ 0x80
 8001f62:	f107 0108 	add.w	r1, r7, #8
 8001f66:	440b      	add	r3, r1
 8001f68:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 8001f6c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f70:	3301      	adds	r3, #1
 8001f72:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001f76:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d9e8      	bls.n	8001f50 <main+0x310>
				 }
				  Sustainer.normal=f2u8_roll.fVal;
 8001f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <main+0x370>)
 8001f82:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001f8a:	e028      	b.n	8001fde <main+0x39e>
 8001f8c:	20000570 	.word	0x20000570
 8001f90:	200004e0 	.word	0x200004e0
 8001f94:	20000645 	.word	0x20000645
 8001f98:	2000049c 	.word	0x2000049c
 8001f9c:	20000860 	.word	0x20000860
 8001fa0:	2000031c 	.word	0x2000031c
 8001fa4:	20000410 	.word	0x20000410
 8001fa8:	20000850 	.word	0x20000850
 8001fac:	20000524 	.word	0x20000524
 8001fb0:	200006e8 	.word	0x200006e8
 8001fb4:	20000574 	.word	0x20000574
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8001fb8:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fbc:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8001fc0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fc4:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <main+0x464>)
 8001fc6:	5c8a      	ldrb	r2, [r1, r2]
 8001fc8:	3380      	adds	r3, #128	@ 0x80
 8001fca:	f107 0108 	add.w	r1, r7, #8
 8001fce:	440b      	add	r3, r1
 8001fd0:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 8001fd4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001fde:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d9e8      	bls.n	8001fb8 <main+0x378>
				 }
				  Sustainer.pitch=f2u8_pitch.fVal;
 8001fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <main+0x468>)
 8001fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Sustainer.battery=lora_rx_buffer[49];
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <main+0x464>)
 8001fee:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <main+0x468>)
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Sustainer.mod=lora_rx_buffer[73];
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <main+0x464>)
 8001ffa:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <main+0x468>)
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Sustainer.communication=lora_rx_buffer[51];
 8002004:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <main+0x464>)
 8002006:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800200a:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <main+0x468>)
 800200c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <main+0x464>)
 8002012:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002016:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <main+0x46c>)
 8002018:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 800201a:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <main+0x464>)
 800201c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8002020:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <main+0x470>)
 8002022:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8002024:	2300      	movs	r3, #0
 8002026:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800202a:	e012      	b.n	8002052 <main+0x412>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 800202c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002030:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8002034:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002038:	491a      	ldr	r1, [pc, #104]	@ (80020a4 <main+0x464>)
 800203a:	5c8a      	ldrb	r2, [r1, r2]
 800203c:	3380      	adds	r3, #128	@ 0x80
 800203e:	f107 0108 	add.w	r1, r7, #8
 8002042:	440b      	add	r3, r1
 8002044:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8002048:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800204c:	3301      	adds	r3, #1
 800204e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8002052:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8002056:	2b03      	cmp	r3, #3
 8002058:	d9e8      	bls.n	800202c <main+0x3ec>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 800205a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205c:	4a15      	ldr	r2, [pc, #84]	@ (80020b4 <main+0x474>)
 800205e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 8002060:	2300      	movs	r3, #0
 8002062:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8002066:	e012      	b.n	800208e <main+0x44e>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 8002068:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800206c:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 8002070:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002074:	490b      	ldr	r1, [pc, #44]	@ (80020a4 <main+0x464>)
 8002076:	5c8a      	ldrb	r2, [r1, r2]
 8002078:	3380      	adds	r3, #128	@ 0x80
 800207a:	f107 0108 	add.w	r1, r7, #8
 800207e:	440b      	add	r3, r1
 8002080:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 8002084:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002088:	3301      	adds	r3, #1
 800208a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800208e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002092:	2b03      	cmp	r3, #3
 8002094:	d9e8      	bls.n	8002068 <main+0x428>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <main+0x478>)
 800209a:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 800209c:	2300      	movs	r3, #0
 800209e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 80020a2:	e01e      	b.n	80020e2 <main+0x4a2>
 80020a4:	20000524 	.word	0x20000524
 80020a8:	200006e8 	.word	0x200006e8
 80020ac:	20000658 	.word	0x20000658
 80020b0:	20000659 	.word	0x20000659
 80020b4:	20000660 	.word	0x20000660
 80020b8:	20000668 	.word	0x20000668
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 80020bc:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80020c0:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80020c4:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80020c8:	499f      	ldr	r1, [pc, #636]	@ (8002348 <main+0x708>)
 80020ca:	5c8a      	ldrb	r2, [r1, r2]
 80020cc:	3380      	adds	r3, #128	@ 0x80
 80020ce:	f107 0108 	add.w	r1, r7, #8
 80020d2:	440b      	add	r3, r1
 80020d4:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 80020d8:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80020dc:	3301      	adds	r3, #1
 80020de:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 80020e2:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d9e8      	bls.n	80020bc <main+0x47c>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 80020ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ec:	4a97      	ldr	r2, [pc, #604]	@ (800234c <main+0x70c>)
 80020ee:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 80020f0:	4b95      	ldr	r3, [pc, #596]	@ (8002348 <main+0x708>)
 80020f2:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80020f6:	4b96      	ldr	r3, [pc, #600]	@ (8002350 <main+0x710>)
 80020f8:	701a      	strb	r2, [r3, #0]
	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=lora_rx_buffer[66];
 80020fa:	4b93      	ldr	r3, [pc, #588]	@ (8002348 <main+0x708>)
 80020fc:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8002100:	4b94      	ldr	r3, [pc, #592]	@ (8002354 <main+0x714>)
 8002102:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 8002104:	4b90      	ldr	r3, [pc, #576]	@ (8002348 <main+0x708>)
 8002106:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 800210a:	4b93      	ldr	r3, [pc, #588]	@ (8002358 <main+0x718>)
 800210c:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 800210e:	4b8e      	ldr	r3, [pc, #568]	@ (8002348 <main+0x708>)
 8002110:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8002114:	4b91      	ldr	r3, [pc, #580]	@ (800235c <main+0x71c>)
 8002116:	701a      	strb	r2, [r3, #0]

					  f2u8_altitude.array[0] = lora_rx_buffer[69];
 8002118:	4b8b      	ldr	r3, [pc, #556]	@ (8002348 <main+0x708>)
 800211a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800211e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
					  f2u8_altitude.array[1] = lora_rx_buffer[70];
 8002122:	4b89      	ldr	r3, [pc, #548]	@ (8002348 <main+0x708>)
 8002124:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002128:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
					  f2u8_altitude.array[2] = lora_rx_buffer[71];
 800212c:	4b86      	ldr	r3, [pc, #536]	@ (8002348 <main+0x708>)
 800212e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002132:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
					  f2u8_altitude.array[3] = lora_rx_buffer[72];
 8002136:	4b84      	ldr	r3, [pc, #528]	@ (8002348 <main+0x708>)
 8002138:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800213c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					  Sustainer.maxAltitude=f2u8_altitude.fVal;
 8002140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002142:	4a87      	ldr	r2, [pc, #540]	@ (8002360 <main+0x720>)
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30




				     	sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 8002146:	4b86      	ldr	r3, [pc, #536]	@ (8002360 <main+0x720>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fa1c 	bl	8000588 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4983      	ldr	r1, [pc, #524]	@ (8002364 <main+0x724>)
 8002156:	4884      	ldr	r0, [pc, #528]	@ (8002368 <main+0x728>)
 8002158:	f00d fad6 	bl	800f708 <siprintf>
				     	sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 800215c:	4b80      	ldr	r3, [pc, #512]	@ (8002360 <main+0x720>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fa11 	bl	8000588 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4980      	ldr	r1, [pc, #512]	@ (800236c <main+0x72c>)
 800216c:	4880      	ldr	r0, [pc, #512]	@ (8002370 <main+0x730>)
 800216e:	f00d facb 	bl	800f708 <siprintf>
				     	sprintf(s_speed,"%2.2f",Sustainer.speed);
 8002172:	4b7b      	ldr	r3, [pc, #492]	@ (8002360 <main+0x720>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fa06 	bl	8000588 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	497a      	ldr	r1, [pc, #488]	@ (800236c <main+0x72c>)
 8002182:	487c      	ldr	r0, [pc, #496]	@ (8002374 <main+0x734>)
 8002184:	f00d fac0 	bl	800f708 <siprintf>
				     	sprintf(s_roll,"%2.2f",Sustainer.normal);
 8002188:	4b75      	ldr	r3, [pc, #468]	@ (8002360 <main+0x720>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9fb 	bl	8000588 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4975      	ldr	r1, [pc, #468]	@ (800236c <main+0x72c>)
 8002198:	4877      	ldr	r0, [pc, #476]	@ (8002378 <main+0x738>)
 800219a:	f00d fab5 	bl	800f708 <siprintf>
				     	sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 800219e:	4b70      	ldr	r3, [pc, #448]	@ (8002360 <main+0x720>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9f0 	bl	8000588 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	496f      	ldr	r1, [pc, #444]	@ (800236c <main+0x72c>)
 80021ae:	4873      	ldr	r0, [pc, #460]	@ (800237c <main+0x73c>)
 80021b0:	f00d faaa 	bl	800f708 <siprintf>
				     	sprintf(s_latitude,"%2.6f",Sustainer.gpslatitude);
 80021b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002360 <main+0x720>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f9e5 	bl	8000588 <__aeabi_f2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	496f      	ldr	r1, [pc, #444]	@ (8002380 <main+0x740>)
 80021c4:	486f      	ldr	r0, [pc, #444]	@ (8002384 <main+0x744>)
 80021c6:	f00d fa9f 	bl	800f708 <siprintf>
				     	sprintf(s_longitude,"%2.6f",Sustainer.gpslongitude);
 80021ca:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <main+0x720>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9da 	bl	8000588 <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4969      	ldr	r1, [pc, #420]	@ (8002380 <main+0x740>)
 80021da:	486b      	ldr	r0, [pc, #428]	@ (8002388 <main+0x748>)
 80021dc:	f00d fa94 	bl	800f708 <siprintf>
				    	sprintf(s_bat,"%2d",Sustainer.battery);
 80021e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002360 <main+0x720>)
 80021e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021e6:	461a      	mov	r2, r3
 80021e8:	4968      	ldr	r1, [pc, #416]	@ (800238c <main+0x74c>)
 80021ea:	4869      	ldr	r0, [pc, #420]	@ (8002390 <main+0x750>)
 80021ec:	f00d fa8c 	bl	800f708 <siprintf>
				    	sprintf(s_sats,"%2d",Sustainer.satsinview);
 80021f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002360 <main+0x720>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4965      	ldr	r1, [pc, #404]	@ (800238c <main+0x74c>)
 80021f8:	4866      	ldr	r0, [pc, #408]	@ (8002394 <main+0x754>)
 80021fa:	f00d fa85 	bl	800f708 <siprintf>
				    	sprintf(s_comm,"%2d",Sustainer.communication);
 80021fe:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <main+0x720>)
 8002200:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002204:	461a      	mov	r2, r3
 8002206:	4961      	ldr	r1, [pc, #388]	@ (800238c <main+0x74c>)
 8002208:	4863      	ldr	r0, [pc, #396]	@ (8002398 <main+0x758>)
 800220a:	f00d fa7d 	bl	800f708 <siprintf>
				       	sprintf(s_comm,"%2d",Sustainer.communication);
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <main+0x720>)
 8002210:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002214:	461a      	mov	r2, r3
 8002216:	495d      	ldr	r1, [pc, #372]	@ (800238c <main+0x74c>)
 8002218:	485f      	ldr	r0, [pc, #380]	@ (8002398 <main+0x758>)
 800221a:	f00d fa75 	bl	800f708 <siprintf>
				       	sprintf(s_dist,"%4.2f",s_distance);
 800221e:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <main+0x75c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9b0 	bl	8000588 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	495c      	ldr	r1, [pc, #368]	@ (80023a0 <main+0x760>)
 800222e:	485d      	ldr	r0, [pc, #372]	@ (80023a4 <main+0x764>)
 8002230:	f00d fa6a 	bl	800f708 <siprintf>

			        	sprintf(e_altitude,"%4.2f",EGU_IRTIFA);
 8002234:	4b45      	ldr	r3, [pc, #276]	@ (800234c <main+0x70c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f9a5 	bl	8000588 <__aeabi_f2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4957      	ldr	r1, [pc, #348]	@ (80023a0 <main+0x760>)
 8002244:	4858      	ldr	r0, [pc, #352]	@ (80023a8 <main+0x768>)
 8002246:	f00d fa5f 	bl	800f708 <siprintf>
			         	sprintf(e_angle,"%2.2f",EGU_ANGLE);
 800224a:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <main+0x76c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f99a 	bl	8000588 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4944      	ldr	r1, [pc, #272]	@ (800236c <main+0x72c>)
 800225a:	4855      	ldr	r0, [pc, #340]	@ (80023b0 <main+0x770>)
 800225c:	f00d fa54 	bl	800f708 <siprintf>
						sprintf(e_bat,"%2d",EGU_BATTERY);
 8002260:	4b54      	ldr	r3, [pc, #336]	@ (80023b4 <main+0x774>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f98f 	bl	8000588 <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4947      	ldr	r1, [pc, #284]	@ (800238c <main+0x74c>)
 8002270:	4851      	ldr	r0, [pc, #324]	@ (80023b8 <main+0x778>)
 8002272:	f00d fa49 	bl	800f708 <siprintf>
						sprintf(e_flight,"%d",EGU_UCUS_BASLADIMI);
 8002276:	4b51      	ldr	r3, [pc, #324]	@ (80023bc <main+0x77c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4950      	ldr	r1, [pc, #320]	@ (80023c0 <main+0x780>)
 800227e:	4851      	ldr	r0, [pc, #324]	@ (80023c4 <main+0x784>)
 8002280:	f00d fa42 	bl	800f708 <siprintf>
			          	sprintf(e_stage,"%d",EGU_AYRILMA_TESPIT);
 8002284:	4b50      	ldr	r3, [pc, #320]	@ (80023c8 <main+0x788>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	494d      	ldr	r1, [pc, #308]	@ (80023c0 <main+0x780>)
 800228c:	484f      	ldr	r0, [pc, #316]	@ (80023cc <main+0x78c>)
 800228e:	f00d fa3b 	bl	800f708 <siprintf>
			         	sprintf(e_fitil,"%d",EGU_FITIL);
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <main+0x710>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	4949      	ldr	r1, [pc, #292]	@ (80023c0 <main+0x780>)
 800229a:	484d      	ldr	r0, [pc, #308]	@ (80023d0 <main+0x790>)
 800229c:	f00d fa34 	bl	800f708 <siprintf>
				        // Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
				         NEXTION_SendString("s1", s_altitude);
 80022a0:	4931      	ldr	r1, [pc, #196]	@ (8002368 <main+0x728>)
 80022a2:	484c      	ldr	r0, [pc, #304]	@ (80023d4 <main+0x794>)
 80022a4:	f001 f964 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s2", s_temperature);
 80022a8:	4931      	ldr	r1, [pc, #196]	@ (8002370 <main+0x730>)
 80022aa:	484b      	ldr	r0, [pc, #300]	@ (80023d8 <main+0x798>)
 80022ac:	f001 f960 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s3", s_speed);
 80022b0:	4930      	ldr	r1, [pc, #192]	@ (8002374 <main+0x734>)
 80022b2:	484a      	ldr	r0, [pc, #296]	@ (80023dc <main+0x79c>)
 80022b4:	f001 f95c 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s4", s_roll);
 80022b8:	492f      	ldr	r1, [pc, #188]	@ (8002378 <main+0x738>)
 80022ba:	4849      	ldr	r0, [pc, #292]	@ (80023e0 <main+0x7a0>)
 80022bc:	f001 f958 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s5", s_pitch);
 80022c0:	492e      	ldr	r1, [pc, #184]	@ (800237c <main+0x73c>)
 80022c2:	4848      	ldr	r0, [pc, #288]	@ (80023e4 <main+0x7a4>)
 80022c4:	f001 f954 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s6", s_sats);
 80022c8:	4932      	ldr	r1, [pc, #200]	@ (8002394 <main+0x754>)
 80022ca:	4847      	ldr	r0, [pc, #284]	@ (80023e8 <main+0x7a8>)
 80022cc:	f001 f950 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s7", s_latitude);
 80022d0:	492c      	ldr	r1, [pc, #176]	@ (8002384 <main+0x744>)
 80022d2:	4846      	ldr	r0, [pc, #280]	@ (80023ec <main+0x7ac>)
 80022d4:	f001 f94c 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s8", s_longitude);
 80022d8:	492b      	ldr	r1, [pc, #172]	@ (8002388 <main+0x748>)
 80022da:	4845      	ldr	r0, [pc, #276]	@ (80023f0 <main+0x7b0>)
 80022dc:	f001 f948 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("s9", s_bat);
 80022e0:	492b      	ldr	r1, [pc, #172]	@ (8002390 <main+0x750>)
 80022e2:	4844      	ldr	r0, [pc, #272]	@ (80023f4 <main+0x7b4>)
 80022e4:	f001 f944 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("t57", s_comm);
 80022e8:	492b      	ldr	r1, [pc, #172]	@ (8002398 <main+0x758>)
 80022ea:	4843      	ldr	r0, [pc, #268]	@ (80023f8 <main+0x7b8>)
 80022ec:	f001 f940 	bl	8003570 <NEXTION_SendString>
				         NEXTION_SendString("t", s_dist);
 80022f0:	492c      	ldr	r1, [pc, #176]	@ (80023a4 <main+0x764>)
 80022f2:	4842      	ldr	r0, [pc, #264]	@ (80023fc <main+0x7bc>)
 80022f4:	f001 f93c 	bl	8003570 <NEXTION_SendString>


						 NEXTION_SendString("m1", e_altitude);
 80022f8:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <main+0x768>)
 80022fa:	4841      	ldr	r0, [pc, #260]	@ (8002400 <main+0x7c0>)
 80022fc:	f001 f938 	bl	8003570 <NEXTION_SendString>
						 NEXTION_SendString("m3", e_angle);
 8002300:	492b      	ldr	r1, [pc, #172]	@ (80023b0 <main+0x770>)
 8002302:	4840      	ldr	r0, [pc, #256]	@ (8002404 <main+0x7c4>)
 8002304:	f001 f934 	bl	8003570 <NEXTION_SendString>
						 NEXTION_SendString("m2", e_bat);
 8002308:	492b      	ldr	r1, [pc, #172]	@ (80023b8 <main+0x778>)
 800230a:	483f      	ldr	r0, [pc, #252]	@ (8002408 <main+0x7c8>)
 800230c:	f001 f930 	bl	8003570 <NEXTION_SendString>
						 NEXTION_SendString("m4", e_flight);
 8002310:	492c      	ldr	r1, [pc, #176]	@ (80023c4 <main+0x784>)
 8002312:	483e      	ldr	r0, [pc, #248]	@ (800240c <main+0x7cc>)
 8002314:	f001 f92c 	bl	8003570 <NEXTION_SendString>
						 NEXTION_SendString("m5", e_stage);
 8002318:	492c      	ldr	r1, [pc, #176]	@ (80023cc <main+0x78c>)
 800231a:	483d      	ldr	r0, [pc, #244]	@ (8002410 <main+0x7d0>)
 800231c:	f001 f928 	bl	8003570 <NEXTION_SendString>
	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 8002320:	e351      	b.n	80029c6 <main+0xd86>

}

	  else if(lora_rx_buffer[3]==1 && lora_rx_buffer[50]==0x32){
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <main+0x708>)
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 82e4 	bne.w	80028f4 <main+0xcb4>
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <main+0x708>)
 800232e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002332:	2b32      	cmp	r3, #50	@ 0x32
 8002334:	f040 82de 	bne.w	80028f4 <main+0xcb4>

		  Booster.satsinview=lora_rx_buffer[4];
 8002338:	4b03      	ldr	r3, [pc, #12]	@ (8002348 <main+0x708>)
 800233a:	791a      	ldrb	r2, [r3, #4]
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <main+0x7d4>)
 800233e:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8002346:	e083      	b.n	8002450 <main+0x810>
 8002348:	20000524 	.word	0x20000524
 800234c:	20000664 	.word	0x20000664
 8002350:	2000065d 	.word	0x2000065d
 8002354:	20000650 	.word	0x20000650
 8002358:	2000065b 	.word	0x2000065b
 800235c:	2000065a 	.word	0x2000065a
 8002360:	200006e8 	.word	0x200006e8
 8002364:	08014630 	.word	0x08014630
 8002368:	2000078c 	.word	0x2000078c
 800236c:	08014638 	.word	0x08014638
 8002370:	20000794 	.word	0x20000794
 8002374:	2000079c 	.word	0x2000079c
 8002378:	200007a4 	.word	0x200007a4
 800237c:	200007ac 	.word	0x200007ac
 8002380:	08014640 	.word	0x08014640
 8002384:	200007b4 	.word	0x200007b4
 8002388:	200007c0 	.word	0x200007c0
 800238c:	08014648 	.word	0x08014648
 8002390:	200007cc 	.word	0x200007cc
 8002394:	200007d0 	.word	0x200007d0
 8002398:	200007d4 	.word	0x200007d4
 800239c:	20000654 	.word	0x20000654
 80023a0:	0801464c 	.word	0x0801464c
 80023a4:	200007d8 	.word	0x200007d8
 80023a8:	20000818 	.word	0x20000818
 80023ac:	20000668 	.word	0x20000668
 80023b0:	20000824 	.word	0x20000824
 80023b4:	20000660 	.word	0x20000660
 80023b8:	20000820 	.word	0x20000820
 80023bc:	2000065c 	.word	0x2000065c
 80023c0:	08014654 	.word	0x08014654
 80023c4:	2000082c 	.word	0x2000082c
 80023c8:	20000659 	.word	0x20000659
 80023cc:	20000830 	.word	0x20000830
 80023d0:	20000834 	.word	0x20000834
 80023d4:	08014658 	.word	0x08014658
 80023d8:	0801465c 	.word	0x0801465c
 80023dc:	08014660 	.word	0x08014660
 80023e0:	08014664 	.word	0x08014664
 80023e4:	08014668 	.word	0x08014668
 80023e8:	0801466c 	.word	0x0801466c
 80023ec:	08014670 	.word	0x08014670
 80023f0:	08014674 	.word	0x08014674
 80023f4:	08014678 	.word	0x08014678
 80023f8:	0801467c 	.word	0x0801467c
 80023fc:	08014680 	.word	0x08014680
 8002400:	08014684 	.word	0x08014684
 8002404:	08014688 	.word	0x08014688
 8002408:	0801468c 	.word	0x0801468c
 800240c:	08014690 	.word	0x08014690
 8002410:	08014694 	.word	0x08014694
 8002414:	200006b0 	.word	0x200006b0
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 8002418:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800241c:	1d5a      	adds	r2, r3, #5
 800241e:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002422:	49a3      	ldr	r1, [pc, #652]	@ (80026b0 <main+0xa70>)
 8002424:	5c8a      	ldrb	r2, [r1, r2]
 8002426:	3380      	adds	r3, #128	@ 0x80
 8002428:	f107 0108 	add.w	r1, r7, #8
 800242c:	440b      	add	r3, r1
 800242e:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8002432:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002436:	1d5a      	adds	r2, r3, #5
 8002438:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800243c:	3322      	adds	r3, #34	@ 0x22
 800243e:	499c      	ldr	r1, [pc, #624]	@ (80026b0 <main+0xa70>)
 8002440:	5c89      	ldrb	r1, [r1, r2]
 8002442:	4a9c      	ldr	r2, [pc, #624]	@ (80026b4 <main+0xa74>)
 8002444:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8002446:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800244a:	3301      	adds	r3, #1
 800244c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8002450:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002454:	2b03      	cmp	r3, #3
 8002456:	d9df      	bls.n	8002418 <main+0x7d8>
				 }
				 Booster.gpsaltitude=f2u8_bgpsalt.fVal;
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	4a97      	ldr	r2, [pc, #604]	@ (80026b8 <main+0xa78>)
 800245c:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 800245e:	2300      	movs	r3, #0
 8002460:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8002464:	e01d      	b.n	80024a2 <main+0x862>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 8002466:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800246a:	f103 0209 	add.w	r2, r3, #9
 800246e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002472:	498f      	ldr	r1, [pc, #572]	@ (80026b0 <main+0xa70>)
 8002474:	5c8a      	ldrb	r2, [r1, r2]
 8002476:	3380      	adds	r3, #128	@ 0x80
 8002478:	f107 0108 	add.w	r1, r7, #8
 800247c:	440b      	add	r3, r1
 800247e:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8002482:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002486:	f103 0209 	add.w	r2, r3, #9
 800248a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800248e:	3326      	adds	r3, #38	@ 0x26
 8002490:	4987      	ldr	r1, [pc, #540]	@ (80026b0 <main+0xa70>)
 8002492:	5c89      	ldrb	r1, [r1, r2]
 8002494:	4a87      	ldr	r2, [pc, #540]	@ (80026b4 <main+0xa74>)
 8002496:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8002498:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800249c:	3301      	adds	r3, #1
 800249e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80024a2:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d9dd      	bls.n	8002466 <main+0x826>
				 }
				 Booster.gpslatitude=f2u8_blatitude.fVal;
 80024aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ac:	4a82      	ldr	r2, [pc, #520]	@ (80026b8 <main+0xa78>)
 80024ae:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80024b6:	e01d      	b.n	80024f4 <main+0x8b4>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 80024b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024bc:	f103 020d 	add.w	r2, r3, #13
 80024c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024c4:	497a      	ldr	r1, [pc, #488]	@ (80026b0 <main+0xa70>)
 80024c6:	5c8a      	ldrb	r2, [r1, r2]
 80024c8:	3380      	adds	r3, #128	@ 0x80
 80024ca:	f107 0108 	add.w	r1, r7, #8
 80024ce:	440b      	add	r3, r1
 80024d0:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 80024d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024d8:	f103 020d 	add.w	r2, r3, #13
 80024dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024e0:	332a      	adds	r3, #42	@ 0x2a
 80024e2:	4973      	ldr	r1, [pc, #460]	@ (80026b0 <main+0xa70>)
 80024e4:	5c89      	ldrb	r1, [r1, r2]
 80024e6:	4a73      	ldr	r2, [pc, #460]	@ (80026b4 <main+0xa74>)
 80024e8:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80024ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024ee:	3301      	adds	r3, #1
 80024f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80024f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d9dd      	bls.n	80024b8 <main+0x878>
				 }
				 Booster.gpslongitude=f2u8_blongitude.fVal;
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	4a6e      	ldr	r2, [pc, #440]	@ (80026b8 <main+0xa78>)
 8002500:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002508:	e012      	b.n	8002530 <main+0x8f0>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 800250a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800250e:	f103 0211 	add.w	r2, r3, #17
 8002512:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002516:	4966      	ldr	r1, [pc, #408]	@ (80026b0 <main+0xa70>)
 8002518:	5c8a      	ldrb	r2, [r1, r2]
 800251a:	3380      	adds	r3, #128	@ 0x80
 800251c:	f107 0108 	add.w	r1, r7, #8
 8002520:	440b      	add	r3, r1
 8002522:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8002526:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800252a:	3301      	adds	r3, #1
 800252c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002530:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002534:	2b03      	cmp	r3, #3
 8002536:	d9e8      	bls.n	800250a <main+0x8ca>
				 }
				 Booster.altitude=f2u8_baltitude.fVal;
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <main+0xa78>)
 800253c:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002544:	e012      	b.n	800256c <main+0x92c>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 8002546:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800254a:	f103 0215 	add.w	r2, r3, #21
 800254e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002552:	4957      	ldr	r1, [pc, #348]	@ (80026b0 <main+0xa70>)
 8002554:	5c8a      	ldrb	r2, [r1, r2]
 8002556:	3380      	adds	r3, #128	@ 0x80
 8002558:	f107 0108 	add.w	r1, r7, #8
 800255c:	440b      	add	r3, r1
 800255e:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 8002562:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002566:	3301      	adds	r3, #1
 8002568:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800256c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002570:	2b03      	cmp	r3, #3
 8002572:	d9e8      	bls.n	8002546 <main+0x906>
				 }
				 Booster.speed=f2u8_bspeed.fVal;
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	4a50      	ldr	r2, [pc, #320]	@ (80026b8 <main+0xa78>)
 8002578:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8002580:	e012      	b.n	80025a8 <main+0x968>
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 8002582:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002586:	f103 0219 	add.w	r2, r3, #25
 800258a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800258e:	4948      	ldr	r1, [pc, #288]	@ (80026b0 <main+0xa70>)
 8002590:	5c8a      	ldrb	r2, [r1, r2]
 8002592:	3380      	adds	r3, #128	@ 0x80
 8002594:	f107 0108 	add.w	r1, r7, #8
 8002598:	440b      	add	r3, r1
 800259a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 800259e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80025a2:	3301      	adds	r3, #1
 80025a4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80025a8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d9e8      	bls.n	8002582 <main+0x942>
				 }
				 Booster.temperature=f2u8_btemp.fVal;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4a41      	ldr	r2, [pc, #260]	@ (80026b8 <main+0xa78>)
 80025b4:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80025bc:	e012      	b.n	80025e4 <main+0x9a4>
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 80025be:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80025c2:	f103 021d 	add.w	r2, r3, #29
 80025c6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80025ca:	4939      	ldr	r1, [pc, #228]	@ (80026b0 <main+0xa70>)
 80025cc:	5c8a      	ldrb	r2, [r1, r2]
 80025ce:	3380      	adds	r3, #128	@ 0x80
 80025d0:	f107 0108 	add.w	r1, r7, #8
 80025d4:	440b      	add	r3, r1
 80025d6:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 80025da:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80025de:	3301      	adds	r3, #1
 80025e0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80025e4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d9e8      	bls.n	80025be <main+0x97e>
				 }
				 Booster.accx=f2u8_baccx.fVal;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4a32      	ldr	r2, [pc, #200]	@ (80026b8 <main+0xa78>)
 80025f0:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80025f8:	e012      	b.n	8002620 <main+0x9e0>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 80025fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80025fe:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002602:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002606:	492a      	ldr	r1, [pc, #168]	@ (80026b0 <main+0xa70>)
 8002608:	5c8a      	ldrb	r2, [r1, r2]
 800260a:	3380      	adds	r3, #128	@ 0x80
 800260c:	f107 0108 	add.w	r1, r7, #8
 8002610:	440b      	add	r3, r1
 8002612:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 8002616:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800261a:	3301      	adds	r3, #1
 800261c:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8002620:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8002624:	2b03      	cmp	r3, #3
 8002626:	d9e8      	bls.n	80025fa <main+0x9ba>
				 }
				 Booster.accy=f2u8_baccy.fVal;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <main+0xa78>)
 800262c:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8002634:	e012      	b.n	800265c <main+0xa1c>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 8002636:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800263a:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 800263e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002642:	491b      	ldr	r1, [pc, #108]	@ (80026b0 <main+0xa70>)
 8002644:	5c8a      	ldrb	r2, [r1, r2]
 8002646:	3380      	adds	r3, #128	@ 0x80
 8002648:	f107 0108 	add.w	r1, r7, #8
 800264c:	440b      	add	r3, r1
 800264e:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8002652:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002656:	3301      	adds	r3, #1
 8002658:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 800265c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8002660:	2b03      	cmp	r3, #3
 8002662:	d9e8      	bls.n	8002636 <main+0x9f6>
				 }
			      Booster.accz=f2u8_baccz.fVal;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <main+0xa78>)
 8002668:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8002670:	e012      	b.n	8002698 <main+0xa58>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 8002672:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002676:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800267a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800267e:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <main+0xa70>)
 8002680:	5c8a      	ldrb	r2, [r1, r2]
 8002682:	3380      	adds	r3, #128	@ 0x80
 8002684:	f107 0108 	add.w	r1, r7, #8
 8002688:	440b      	add	r3, r1
 800268a:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 800268e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002692:	3301      	adds	r3, #1
 8002694:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8002698:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800269c:	2b03      	cmp	r3, #3
 800269e:	d9e8      	bls.n	8002672 <main+0xa32>
				 }
				  Booster.normal=f2u8_broll.fVal;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <main+0xa78>)
 80026a4:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80026ac:	e019      	b.n	80026e2 <main+0xaa2>
 80026ae:	bf00      	nop
 80026b0:	20000524 	.word	0x20000524
 80026b4:	20000574 	.word	0x20000574
 80026b8:	200006b0 	.word	0x200006b0
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 80026bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026c0:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80026c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026c8:	496c      	ldr	r1, [pc, #432]	@ (800287c <main+0xc3c>)
 80026ca:	5c8a      	ldrb	r2, [r1, r2]
 80026cc:	3380      	adds	r3, #128	@ 0x80
 80026ce:	f107 0108 	add.w	r1, r7, #8
 80026d2:	440b      	add	r3, r1
 80026d4:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 80026d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026dc:	3301      	adds	r3, #1
 80026de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80026e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d9e8      	bls.n	80026bc <main+0xa7c>
				 }
				  Booster.pitch=f2u8_bpitch.fVal;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a64      	ldr	r2, [pc, #400]	@ (8002880 <main+0xc40>)
 80026ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Booster.battery=lora_rx_buffer[49];
 80026f0:	4b62      	ldr	r3, [pc, #392]	@ (800287c <main+0xc3c>)
 80026f2:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80026f6:	4b62      	ldr	r3, [pc, #392]	@ (8002880 <main+0xc40>)
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Booster.mod=lora_rx_buffer[73];
 80026fc:	4b5f      	ldr	r3, [pc, #380]	@ (800287c <main+0xc3c>)
 80026fe:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <main+0xc40>)
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Booster.communication=lora_rx_buffer[51];
 8002708:	4b5c      	ldr	r3, [pc, #368]	@ (800287c <main+0xc3c>)
 800270a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <main+0xc40>)
 8002710:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

				  f2u8_baltitude.array[0] = lora_rx_buffer[69];
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <main+0xc3c>)
 8002716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800271a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				  f2u8_baltitude.array[1] = lora_rx_buffer[70];
 800271e:	4b57      	ldr	r3, [pc, #348]	@ (800287c <main+0xc3c>)
 8002720:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002724:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				  f2u8_baltitude.array[2] = lora_rx_buffer[71];
 8002728:	4b54      	ldr	r3, [pc, #336]	@ (800287c <main+0xc3c>)
 800272a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800272e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				  f2u8_baltitude.array[3] = lora_rx_buffer[72];
 8002732:	4b52      	ldr	r3, [pc, #328]	@ (800287c <main+0xc3c>)
 8002734:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				  Booster.maxAltitude = f2u8_baltitude.fVal;
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	4a50      	ldr	r2, [pc, #320]	@ (8002880 <main+0xc40>)
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30


			     	sprintf(b_altitude,"%4.3f",Booster.altitude);
 8002742:	4b4f      	ldr	r3, [pc, #316]	@ (8002880 <main+0xc40>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff1e 	bl	8000588 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	494c      	ldr	r1, [pc, #304]	@ (8002884 <main+0xc44>)
 8002752:	484d      	ldr	r0, [pc, #308]	@ (8002888 <main+0xc48>)
 8002754:	f00c ffd8 	bl	800f708 <siprintf>
			     	sprintf(b_temperature,"%2.2f",Booster.temperature);
 8002758:	4b49      	ldr	r3, [pc, #292]	@ (8002880 <main+0xc40>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd ff13 	bl	8000588 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4949      	ldr	r1, [pc, #292]	@ (800288c <main+0xc4c>)
 8002768:	4849      	ldr	r0, [pc, #292]	@ (8002890 <main+0xc50>)
 800276a:	f00c ffcd 	bl	800f708 <siprintf>
			     	sprintf(b_speed,"%2.2f",Booster.speed);
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <main+0xc40>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd ff08 	bl	8000588 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4943      	ldr	r1, [pc, #268]	@ (800288c <main+0xc4c>)
 800277e:	4845      	ldr	r0, [pc, #276]	@ (8002894 <main+0xc54>)
 8002780:	f00c ffc2 	bl	800f708 <siprintf>
			     	sprintf(b_roll,"%2.2f",Booster.normal);
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <main+0xc40>)
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fefd 	bl	8000588 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	493e      	ldr	r1, [pc, #248]	@ (800288c <main+0xc4c>)
 8002794:	4840      	ldr	r0, [pc, #256]	@ (8002898 <main+0xc58>)
 8002796:	f00c ffb7 	bl	800f708 <siprintf>
			     	sprintf(b_pitch,"%2.2f",Booster.pitch);
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <main+0xc40>)
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fef2 	bl	8000588 <__aeabi_f2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4938      	ldr	r1, [pc, #224]	@ (800288c <main+0xc4c>)
 80027aa:	483c      	ldr	r0, [pc, #240]	@ (800289c <main+0xc5c>)
 80027ac:	f00c ffac 	bl	800f708 <siprintf>
			     	sprintf(b_latitude,"%2.6f",Booster.gpslatitude);
 80027b0:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <main+0xc40>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fee7 	bl	8000588 <__aeabi_f2d>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4938      	ldr	r1, [pc, #224]	@ (80028a0 <main+0xc60>)
 80027c0:	4838      	ldr	r0, [pc, #224]	@ (80028a4 <main+0xc64>)
 80027c2:	f00c ffa1 	bl	800f708 <siprintf>
			     	sprintf(b_longitude,"%2.6f",Booster.gpslongitude);
 80027c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <main+0xc40>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fedc 	bl	8000588 <__aeabi_f2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4932      	ldr	r1, [pc, #200]	@ (80028a0 <main+0xc60>)
 80027d6:	4834      	ldr	r0, [pc, #208]	@ (80028a8 <main+0xc68>)
 80027d8:	f00c ff96 	bl	800f708 <siprintf>
			     	sprintf(b_bat,"%2d",Booster.battery);
 80027dc:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <main+0xc40>)
 80027de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027e2:	461a      	mov	r2, r3
 80027e4:	4931      	ldr	r1, [pc, #196]	@ (80028ac <main+0xc6c>)
 80027e6:	4832      	ldr	r0, [pc, #200]	@ (80028b0 <main+0xc70>)
 80027e8:	f00c ff8e 	bl	800f708 <siprintf>
			     	sprintf(b_sats,"%2d",Booster.satsinview);
 80027ec:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <main+0xc40>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	492e      	ldr	r1, [pc, #184]	@ (80028ac <main+0xc6c>)
 80027f4:	482f      	ldr	r0, [pc, #188]	@ (80028b4 <main+0xc74>)
 80027f6:	f00c ff87 	bl	800f708 <siprintf>
			       	sprintf(b_comm,"%2d",Booster.communication);
 80027fa:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <main+0xc40>)
 80027fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002800:	461a      	mov	r2, r3
 8002802:	492a      	ldr	r1, [pc, #168]	@ (80028ac <main+0xc6c>)
 8002804:	482c      	ldr	r0, [pc, #176]	@ (80028b8 <main+0xc78>)
 8002806:	f00c ff7f 	bl	800f708 <siprintf>
			       	sprintf(b_dist,"%4.2f",bs_distance);
 800280a:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <main+0xc7c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd feba 	bl	8000588 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4929      	ldr	r1, [pc, #164]	@ (80028c0 <main+0xc80>)
 800281a:	482a      	ldr	r0, [pc, #168]	@ (80028c4 <main+0xc84>)
 800281c:	f00c ff74 	bl	800f708 <siprintf>

			        NEXTION_SendString("bs1", b_altitude);
 8002820:	4919      	ldr	r1, [pc, #100]	@ (8002888 <main+0xc48>)
 8002822:	4829      	ldr	r0, [pc, #164]	@ (80028c8 <main+0xc88>)
 8002824:	f000 fea4 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs2", b_temperature);
 8002828:	4919      	ldr	r1, [pc, #100]	@ (8002890 <main+0xc50>)
 800282a:	4828      	ldr	r0, [pc, #160]	@ (80028cc <main+0xc8c>)
 800282c:	f000 fea0 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs3", b_speed);
 8002830:	4918      	ldr	r1, [pc, #96]	@ (8002894 <main+0xc54>)
 8002832:	4827      	ldr	r0, [pc, #156]	@ (80028d0 <main+0xc90>)
 8002834:	f000 fe9c 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs4", b_roll);
 8002838:	4917      	ldr	r1, [pc, #92]	@ (8002898 <main+0xc58>)
 800283a:	4826      	ldr	r0, [pc, #152]	@ (80028d4 <main+0xc94>)
 800283c:	f000 fe98 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs5", b_pitch);
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <main+0xc5c>)
 8002842:	4825      	ldr	r0, [pc, #148]	@ (80028d8 <main+0xc98>)
 8002844:	f000 fe94 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs6", b_sats);
 8002848:	491a      	ldr	r1, [pc, #104]	@ (80028b4 <main+0xc74>)
 800284a:	4824      	ldr	r0, [pc, #144]	@ (80028dc <main+0xc9c>)
 800284c:	f000 fe90 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs7", b_latitude);
 8002850:	4914      	ldr	r1, [pc, #80]	@ (80028a4 <main+0xc64>)
 8002852:	4823      	ldr	r0, [pc, #140]	@ (80028e0 <main+0xca0>)
 8002854:	f000 fe8c 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs8", b_longitude);
 8002858:	4913      	ldr	r1, [pc, #76]	@ (80028a8 <main+0xc68>)
 800285a:	4822      	ldr	r0, [pc, #136]	@ (80028e4 <main+0xca4>)
 800285c:	f000 fe88 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("bs9", b_bat);
 8002860:	4913      	ldr	r1, [pc, #76]	@ (80028b0 <main+0xc70>)
 8002862:	4821      	ldr	r0, [pc, #132]	@ (80028e8 <main+0xca8>)
 8002864:	f000 fe84 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("t56", b_comm);
 8002868:	4913      	ldr	r1, [pc, #76]	@ (80028b8 <main+0xc78>)
 800286a:	4820      	ldr	r0, [pc, #128]	@ (80028ec <main+0xcac>)
 800286c:	f000 fe80 	bl	8003570 <NEXTION_SendString>
			        NEXTION_SendString("t17", b_dist);
 8002870:	4914      	ldr	r1, [pc, #80]	@ (80028c4 <main+0xc84>)
 8002872:	481f      	ldr	r0, [pc, #124]	@ (80028f0 <main+0xcb0>)
 8002874:	f000 fe7c 	bl	8003570 <NEXTION_SendString>
	  else if(lora_rx_buffer[3]==1 && lora_rx_buffer[50]==0x32){
 8002878:	e0a5      	b.n	80029c6 <main+0xd86>
 800287a:	bf00      	nop
 800287c:	20000524 	.word	0x20000524
 8002880:	200006b0 	.word	0x200006b0
 8002884:	08014630 	.word	0x08014630
 8002888:	20000720 	.word	0x20000720
 800288c:	08014638 	.word	0x08014638
 8002890:	20000728 	.word	0x20000728
 8002894:	20000730 	.word	0x20000730
 8002898:	20000738 	.word	0x20000738
 800289c:	20000740 	.word	0x20000740
 80028a0:	08014640 	.word	0x08014640
 80028a4:	20000748 	.word	0x20000748
 80028a8:	20000754 	.word	0x20000754
 80028ac:	08014648 	.word	0x08014648
 80028b0:	20000760 	.word	0x20000760
 80028b4:	20000764 	.word	0x20000764
 80028b8:	20000768 	.word	0x20000768
 80028bc:	20000674 	.word	0x20000674
 80028c0:	0801464c 	.word	0x0801464c
 80028c4:	2000076c 	.word	0x2000076c
 80028c8:	08014698 	.word	0x08014698
 80028cc:	0801469c 	.word	0x0801469c
 80028d0:	080146a0 	.word	0x080146a0
 80028d4:	080146a4 	.word	0x080146a4
 80028d8:	080146a8 	.word	0x080146a8
 80028dc:	080146ac 	.word	0x080146ac
 80028e0:	080146b0 	.word	0x080146b0
 80028e4:	080146b4 	.word	0x080146b4
 80028e8:	080146b8 	.word	0x080146b8
 80028ec:	080146bc 	.word	0x080146bc
 80028f0:	080146c0 	.word	0x080146c0
	  	  }

	     else if(lora_rx_buffer[3]==3 && lora_rx_buffer[50]==0x33)
 80028f4:	4bad      	ldr	r3, [pc, #692]	@ (8002bac <main+0xf6c>)
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d164      	bne.n	80029c6 <main+0xd86>
 80028fc:	4bab      	ldr	r3, [pc, #684]	@ (8002bac <main+0xf6c>)
 80028fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002902:	2b33      	cmp	r3, #51	@ 0x33
 8002904:	d15f      	bne.n	80029c6 <main+0xd86>
		  {

		  Payload.satsinview=lora_rx_buffer[4];
 8002906:	4ba9      	ldr	r3, [pc, #676]	@ (8002bac <main+0xf6c>)
 8002908:	791a      	ldrb	r2, [r3, #4]
 800290a:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb0 <main+0xf70>)
 800290c:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 800290e:	f000 fe79 	bl	8003604 <Payload_union_converter>

		  Payload.battery=lora_rx_buffer[49];
 8002912:	4ba6      	ldr	r3, [pc, #664]	@ (8002bac <main+0xf6c>)
 8002914:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002918:	4ba5      	ldr	r3, [pc, #660]	@ (8002bb0 <main+0xf70>)
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=lora_rx_buffer[73];
 800291e:	4ba3      	ldr	r3, [pc, #652]	@ (8002bac <main+0xf6c>)
 8002920:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8002924:	4ba2      	ldr	r3, [pc, #648]	@ (8002bb0 <main+0xf70>)
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=lora_rx_buffer[51];
 800292a:	4ba0      	ldr	r3, [pc, #640]	@ (8002bac <main+0xf6c>)
 800292c:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002930:	4b9f      	ldr	r3, [pc, #636]	@ (8002bb0 <main+0xf70>)
 8002932:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	        // payload ekran
	     	sprintf(p_altitude,"%4.2f",Payload.altitude);
 8002936:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb0 <main+0xf70>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	499b      	ldr	r1, [pc, #620]	@ (8002bb4 <main+0xf74>)
 8002946:	489c      	ldr	r0, [pc, #624]	@ (8002bb8 <main+0xf78>)
 8002948:	f00c fede 	bl	800f708 <siprintf>
	     	sprintf(p_latitude,"%2.6f",Payload.gpslatitude);
 800294c:	4b98      	ldr	r3, [pc, #608]	@ (8002bb0 <main+0xf70>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe19 	bl	8000588 <__aeabi_f2d>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4998      	ldr	r1, [pc, #608]	@ (8002bbc <main+0xf7c>)
 800295c:	4898      	ldr	r0, [pc, #608]	@ (8002bc0 <main+0xf80>)
 800295e:	f00c fed3 	bl	800f708 <siprintf>
	     	sprintf(p_gpsaltitude,"%4.2f",Payload.gpsaltitude);
 8002962:	4b93      	ldr	r3, [pc, #588]	@ (8002bb0 <main+0xf70>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fe0e 	bl	8000588 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4990      	ldr	r1, [pc, #576]	@ (8002bb4 <main+0xf74>)
 8002972:	4894      	ldr	r0, [pc, #592]	@ (8002bc4 <main+0xf84>)
 8002974:	f00c fec8 	bl	800f708 <siprintf>
	     	sprintf(p_longitude,"%2.6f",Payload.gpslongitude);
 8002978:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <main+0xf70>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fe03 	bl	8000588 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	498d      	ldr	r1, [pc, #564]	@ (8002bbc <main+0xf7c>)
 8002988:	488f      	ldr	r0, [pc, #572]	@ (8002bc8 <main+0xf88>)
 800298a:	f00c febd 	bl	800f708 <siprintf>
	     	sprintf(p_bat,"%2d",Payload.battery);
 800298e:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <main+0xf70>)
 8002990:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002994:	461a      	mov	r2, r3
 8002996:	498d      	ldr	r1, [pc, #564]	@ (8002bcc <main+0xf8c>)
 8002998:	488d      	ldr	r0, [pc, #564]	@ (8002bd0 <main+0xf90>)
 800299a:	f00c feb5 	bl	800f708 <siprintf>

	        NEXTION_SendString("vp1", p_latitude);
 800299e:	4988      	ldr	r1, [pc, #544]	@ (8002bc0 <main+0xf80>)
 80029a0:	488c      	ldr	r0, [pc, #560]	@ (8002bd4 <main+0xf94>)
 80029a2:	f000 fde5 	bl	8003570 <NEXTION_SendString>
	        NEXTION_SendString("vp2", p_longitude);
 80029a6:	4988      	ldr	r1, [pc, #544]	@ (8002bc8 <main+0xf88>)
 80029a8:	488b      	ldr	r0, [pc, #556]	@ (8002bd8 <main+0xf98>)
 80029aa:	f000 fde1 	bl	8003570 <NEXTION_SendString>
	        NEXTION_SendString("vp3", p_gpsaltitude);
 80029ae:	4985      	ldr	r1, [pc, #532]	@ (8002bc4 <main+0xf84>)
 80029b0:	488a      	ldr	r0, [pc, #552]	@ (8002bdc <main+0xf9c>)
 80029b2:	f000 fddd 	bl	8003570 <NEXTION_SendString>
	        NEXTION_SendString("vp4", p_altitude);
 80029b6:	4980      	ldr	r1, [pc, #512]	@ (8002bb8 <main+0xf78>)
 80029b8:	4889      	ldr	r0, [pc, #548]	@ (8002be0 <main+0xfa0>)
 80029ba:	f000 fdd9 	bl	8003570 <NEXTION_SendString>
	        NEXTION_SendString("vp5", p_bat);
 80029be:	4984      	ldr	r1, [pc, #528]	@ (8002bd0 <main+0xf90>)
 80029c0:	4888      	ldr	r0, [pc, #544]	@ (8002be4 <main+0xfa4>)
 80029c2:	f000 fdd5 	bl	8003570 <NEXTION_SendString>
		  }




	  s_distance=distance_in_m(gps.latitude,gps.longitude,sustgpslatitude,sustgpslongitude);
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <main+0xfa8>)
 80029c8:	ed93 8b00 	vldr	d8, [r3]
 80029cc:	4b86      	ldr	r3, [pc, #536]	@ (8002be8 <main+0xfa8>)
 80029ce:	ed93 9b02 	vldr	d9, [r3, #8]
 80029d2:	4b86      	ldr	r3, [pc, #536]	@ (8002bec <main+0xfac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdd6 	bl	8000588 <__aeabi_f2d>
 80029dc:	4604      	mov	r4, r0
 80029de:	460d      	mov	r5, r1
 80029e0:	4b83      	ldr	r3, [pc, #524]	@ (8002bf0 <main+0xfb0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdcf 	bl	8000588 <__aeabi_f2d>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	ec43 2b13 	vmov	d3, r2, r3
 80029f2:	ec45 4b12 	vmov	d2, r4, r5
 80029f6:	eeb0 1a49 	vmov.f32	s2, s18
 80029fa:	eef0 1a69 	vmov.f32	s3, s19
 80029fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002a02:	eef0 0a68 	vmov.f32	s1, s17
 8002a06:	f000 fc8b 	bl	8003320 <distance_in_m>
 8002a0a:	ec53 2b10 	vmov	r2, r3, d0
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f909 	bl	8000c28 <__aeabi_d2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a76      	ldr	r2, [pc, #472]	@ (8002bf4 <main+0xfb4>)
 8002a1a:	6013      	str	r3, [r2, #0]
	  bs_distance=distance_in_m(gps.latitude,gps.longitude,boostgpslatitude,boostgpslongitude);
 8002a1c:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <main+0xfa8>)
 8002a1e:	ed93 8b00 	vldr	d8, [r3]
 8002a22:	4b71      	ldr	r3, [pc, #452]	@ (8002be8 <main+0xfa8>)
 8002a24:	ed93 9b02 	vldr	d9, [r3, #8]
 8002a28:	4b73      	ldr	r3, [pc, #460]	@ (8002bf8 <main+0xfb8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fdab 	bl	8000588 <__aeabi_f2d>
 8002a32:	4604      	mov	r4, r0
 8002a34:	460d      	mov	r5, r1
 8002a36:	4b71      	ldr	r3, [pc, #452]	@ (8002bfc <main+0xfbc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fda4 	bl	8000588 <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	ec43 2b13 	vmov	d3, r2, r3
 8002a48:	ec45 4b12 	vmov	d2, r4, r5
 8002a4c:	eeb0 1a49 	vmov.f32	s2, s18
 8002a50:	eef0 1a69 	vmov.f32	s3, s19
 8002a54:	eeb0 0a48 	vmov.f32	s0, s16
 8002a58:	eef0 0a68 	vmov.f32	s1, s17
 8002a5c:	f000 fc60 	bl	8003320 <distance_in_m>
 8002a60:	ec53 2b10 	vmov	r2, r3, d0
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f8de 	bl	8000c28 <__aeabi_d2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a64      	ldr	r2, [pc, #400]	@ (8002c00 <main+0xfc0>)
 8002a70:	6013      	str	r3, [r2, #0]

	  // EKRANA YAZMA



    	sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 8002a72:	4b64      	ldr	r3, [pc, #400]	@ (8002c04 <main+0xfc4>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a80:	793b      	ldrb	r3, [r7, #4]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4951      	ldr	r1, [pc, #324]	@ (8002bcc <main+0xf8c>)
 8002a88:	485f      	ldr	r0, [pc, #380]	@ (8002c08 <main+0xfc8>)
 8002a8a:	f00c fe3d 	bl	800f708 <siprintf>
    	NEXTION_SendString("t54", st_bat);
 8002a8e:	495e      	ldr	r1, [pc, #376]	@ (8002c08 <main+0xfc8>)
 8002a90:	485e      	ldr	r0, [pc, #376]	@ (8002c0c <main+0xfcc>)
 8002a92:	f000 fd6d 	bl	8003570 <NEXTION_SendString>

        Enum_State_bs();
 8002a96:	f000 fecf 	bl	8003838 <Enum_State_bs>
        Enum_State_s();
 8002a9a:	f000 fff5 	bl	8003a88 <Enum_State_s>
     //   NEXTION_SendString("t58", &EGU_MOTOR_ATESLEME_TALEP_IN);
    	sprintf(seconds,"%2d",gps.seconds);
 8002a9e:	4b52      	ldr	r3, [pc, #328]	@ (8002be8 <main+0xfa8>)
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4949      	ldr	r1, [pc, #292]	@ (8002bcc <main+0xf8c>)
 8002aa8:	4859      	ldr	r0, [pc, #356]	@ (8002c10 <main+0xfd0>)
 8002aaa:	f00c fe2d 	bl	800f708 <siprintf>
    	sprintf(minutes,"%2d",gps.minutes);
 8002aae:	4b4e      	ldr	r3, [pc, #312]	@ (8002be8 <main+0xfa8>)
 8002ab0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4945      	ldr	r1, [pc, #276]	@ (8002bcc <main+0xf8c>)
 8002ab8:	4856      	ldr	r0, [pc, #344]	@ (8002c14 <main+0xfd4>)
 8002aba:	f00c fe25 	bl	800f708 <siprintf>
    	sprintf(hours,"%2d",gps.hours);
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <main+0xfa8>)
 8002ac0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4941      	ldr	r1, [pc, #260]	@ (8002bcc <main+0xf8c>)
 8002ac8:	4853      	ldr	r0, [pc, #332]	@ (8002c18 <main+0xfd8>)
 8002aca:	f00c fe1d 	bl	800f708 <siprintf>


        NEXTION_SendString("t4", hours);
 8002ace:	4952      	ldr	r1, [pc, #328]	@ (8002c18 <main+0xfd8>)
 8002ad0:	4852      	ldr	r0, [pc, #328]	@ (8002c1c <main+0xfdc>)
 8002ad2:	f000 fd4d 	bl	8003570 <NEXTION_SendString>
        NEXTION_SendString("t6", minutes);
 8002ad6:	494f      	ldr	r1, [pc, #316]	@ (8002c14 <main+0xfd4>)
 8002ad8:	4851      	ldr	r0, [pc, #324]	@ (8002c20 <main+0xfe0>)
 8002ada:	f000 fd49 	bl	8003570 <NEXTION_SendString>
        NEXTION_SendString("t8", seconds);
 8002ade:	494c      	ldr	r1, [pc, #304]	@ (8002c10 <main+0xfd0>)
 8002ae0:	4850      	ldr	r0, [pc, #320]	@ (8002c24 <main+0xfe4>)
 8002ae2:	f000 fd45 	bl	8003570 <NEXTION_SendString>

        //megü ekran


        if(EGU_MOTOR_ATESLEME_TALEP_IN==1){
 8002ae6:	4b50      	ldr	r3, [pc, #320]	@ (8002c28 <main+0xfe8>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d109      	bne.n	8002b02 <main+0xec2>
        	e_engine_request[0]='Y';
 8002aee:	4b4f      	ldr	r3, [pc, #316]	@ (8002c2c <main+0xfec>)
 8002af0:	2259      	movs	r2, #89	@ 0x59
 8002af2:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='E';
 8002af4:	4b4d      	ldr	r3, [pc, #308]	@ (8002c2c <main+0xfec>)
 8002af6:	2245      	movs	r2, #69	@ 0x45
 8002af8:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='S';
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <main+0xfec>)
 8002afc:	2253      	movs	r2, #83	@ 0x53
 8002afe:	709a      	strb	r2, [r3, #2]
 8002b00:	e008      	b.n	8002b14 <main+0xed4>
        }
        else{
        	e_engine_request[0]='N';
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <main+0xfec>)
 8002b04:	224e      	movs	r2, #78	@ 0x4e
 8002b06:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='O';
 8002b08:	4b48      	ldr	r3, [pc, #288]	@ (8002c2c <main+0xfec>)
 8002b0a:	224f      	movs	r2, #79	@ 0x4f
 8002b0c:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='\0';
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <main+0xfec>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	709a      	strb	r2, [r3, #2]
        }

        if(EGU_BATTERY>0)
 8002b14:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <main+0xff0>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	dd27      	ble.n	8002b74 <main+0xf34>
        {
        	if(EGU_FITIL==0){
 8002b24:	4b43      	ldr	r3, [pc, #268]	@ (8002c34 <main+0xff4>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10f      	bne.n	8002b4c <main+0xf0c>
            	e_fitil[0]='R';
 8002b2c:	4b42      	ldr	r3, [pc, #264]	@ (8002c38 <main+0xff8>)
 8002b2e:	2252      	movs	r2, #82	@ 0x52
 8002b30:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='E';
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <main+0xff8>)
 8002b34:	2245      	movs	r2, #69	@ 0x45
 8002b36:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='A';
 8002b38:	4b3f      	ldr	r3, [pc, #252]	@ (8002c38 <main+0xff8>)
 8002b3a:	2241      	movs	r2, #65	@ 0x41
 8002b3c:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='D';
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c38 <main+0xff8>)
 8002b40:	2244      	movs	r2, #68	@ 0x44
 8002b42:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='Y';
 8002b44:	4b3c      	ldr	r3, [pc, #240]	@ (8002c38 <main+0xff8>)
 8002b46:	2259      	movs	r2, #89	@ 0x59
 8002b48:	711a      	strb	r2, [r3, #4]
 8002b4a:	e022      	b.n	8002b92 <main+0xf52>

        	}
        	else if(EGU_FITIL==1){
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <main+0xff4>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d11e      	bne.n	8002b92 <main+0xf52>
            	e_fitil[0]='F';
 8002b54:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <main+0xff8>)
 8002b56:	2246      	movs	r2, #70	@ 0x46
 8002b58:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='I';
 8002b5a:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <main+0xff8>)
 8002b5c:	2249      	movs	r2, #73	@ 0x49
 8002b5e:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='R';
 8002b60:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <main+0xff8>)
 8002b62:	2252      	movs	r2, #82	@ 0x52
 8002b64:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='E';
 8002b66:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <main+0xff8>)
 8002b68:	2245      	movs	r2, #69	@ 0x45
 8002b6a:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='D';
 8002b6c:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <main+0xff8>)
 8002b6e:	2244      	movs	r2, #68	@ 0x44
 8002b70:	711a      	strb	r2, [r3, #4]
 8002b72:	e00e      	b.n	8002b92 <main+0xf52>
        	}

        }
        else {

        	e_fitil[0]='O';
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <main+0xff8>)
 8002b76:	224f      	movs	r2, #79	@ 0x4f
 8002b78:	701a      	strb	r2, [r3, #0]
        	e_fitil[1]='F';
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <main+0xff8>)
 8002b7c:	2246      	movs	r2, #70	@ 0x46
 8002b7e:	705a      	strb	r2, [r3, #1]
        	e_fitil[2]='F';
 8002b80:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <main+0xff8>)
 8002b82:	2246      	movs	r2, #70	@ 0x46
 8002b84:	709a      	strb	r2, [r3, #2]
        	e_fitil[3]='\0';
 8002b86:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <main+0xff8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	70da      	strb	r2, [r3, #3]
        	e_fitil[4]='\0';
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <main+0xff8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	711a      	strb	r2, [r3, #4]


        }

        NEXTION_SendString("m7", e_engine_request);
 8002b92:	4926      	ldr	r1, [pc, #152]	@ (8002c2c <main+0xfec>)
 8002b94:	4829      	ldr	r0, [pc, #164]	@ (8002c3c <main+0xffc>)
 8002b96:	f000 fceb 	bl	8003570 <NEXTION_SendString>
        NEXTION_SendString("t59", e_fitil);
 8002b9a:	4927      	ldr	r1, [pc, #156]	@ (8002c38 <main+0xff8>)
 8002b9c:	4828      	ldr	r0, [pc, #160]	@ (8002c40 <main+0x1000>)
 8002b9e:	f000 fce7 	bl	8003570 <NEXTION_SendString>

    	for(uint8_t i=4;i<75;i++)
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002ba8:	e060      	b.n	8002c6c <main+0x102c>
 8002baa:	bf00      	nop
 8002bac:	20000524 	.word	0x20000524
 8002bb0:	20000678 	.word	0x20000678
 8002bb4:	0801464c 	.word	0x0801464c
 8002bb8:	20000804 	.word	0x20000804
 8002bbc:	08014640 	.word	0x08014640
 8002bc0:	200007ec 	.word	0x200007ec
 8002bc4:	2000080c 	.word	0x2000080c
 8002bc8:	200007f8 	.word	0x200007f8
 8002bcc:	08014648 	.word	0x08014648
 8002bd0:	20000814 	.word	0x20000814
 8002bd4:	080146c4 	.word	0x080146c4
 8002bd8:	080146c8 	.word	0x080146c8
 8002bdc:	080146cc 	.word	0x080146cc
 8002be0:	080146d0 	.word	0x080146d0
 8002be4:	080146d4 	.word	0x080146d4
 8002be8:	20000860 	.word	0x20000860
 8002bec:	20000648 	.word	0x20000648
 8002bf0:	2000064c 	.word	0x2000064c
 8002bf4:	20000654 	.word	0x20000654
 8002bf8:	2000066c 	.word	0x2000066c
 8002bfc:	20000670 	.word	0x20000670
 8002c00:	20000674 	.word	0x20000674
 8002c04:	20000844 	.word	0x20000844
 8002c08:	2000084c 	.word	0x2000084c
 8002c0c:	080146d8 	.word	0x080146d8
 8002c10:	200007e0 	.word	0x200007e0
 8002c14:	200007e4 	.word	0x200007e4
 8002c18:	200007e8 	.word	0x200007e8
 8002c1c:	080146dc 	.word	0x080146dc
 8002c20:	080146e0 	.word	0x080146e0
 8002c24:	080146e4 	.word	0x080146e4
 8002c28:	2000065a 	.word	0x2000065a
 8002c2c:	2000083c 	.word	0x2000083c
 8002c30:	20000660 	.word	0x20000660
 8002c34:	2000065d 	.word	0x2000065d
 8002c38:	20000834 	.word	0x20000834
 8002c3c:	080146e8 	.word	0x080146e8
 8002c40:	080146ec 	.word	0x080146ec
    	{
    		crc+=HYI_BUFFER[i];
 8002c44:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c48:	4a41      	ldr	r2, [pc, #260]	@ (8002d50 <main+0x1110>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <main+0x1114>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a3f      	ldr	r2, [pc, #252]	@ (8002d54 <main+0x1114>)
 8002c56:	6013      	str	r3, [r2, #0]
    		chs=crc % 256;
 8002c58:	4b3e      	ldr	r3, [pc, #248]	@ (8002d54 <main+0x1114>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d58 <main+0x1118>)
 8002c60:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i=4;i<75;i++)
 8002c62:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c66:	3301      	adds	r3, #1
 8002c68:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002c6c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c70:	2b4a      	cmp	r3, #74	@ 0x4a
 8002c72:	d9e7      	bls.n	8002c44 <main+0x1004>


    	}
         HYI_BUFFER[75]= chs; // CRC
 8002c74:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <main+0x1118>)
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <main+0x1110>)
 8002c7a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
     	 CDC_Transmit_FS(HYI_BUFFER,HYI_BUFFER_SIZE);
 8002c7e:	214e      	movs	r1, #78	@ 0x4e
 8002c80:	4833      	ldr	r0, [pc, #204]	@ (8002d50 <main+0x1110>)
 8002c82:	f00a fa75 	bl	800d170 <CDC_Transmit_FS>
     	 crc=0;
 8002c86:	4b33      	ldr	r3, [pc, #204]	@ (8002d54 <main+0x1114>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
          // CDC_Transmit_FS("LLLL",4);



if(adc_flag ==1)
 8002c8c:	4b33      	ldr	r3, [pc, #204]	@ (8002d5c <main+0x111c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f47f a810 	bne.w	8001cb6 <main+0x76>
	  {
		  if(adc > 2476) adc = 2234;
 8002c96:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <main+0x1120>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002d64 <main+0x1124>
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	dd02      	ble.n	8002cb0 <main+0x1070>
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <main+0x1120>)
 8002cac:	4a2e      	ldr	r2, [pc, #184]	@ (8002d68 <main+0x1128>)
 8002cae:	601a      	str	r2, [r3, #0]
		  if(adc < 1755) adc = 1755;
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <main+0x1120>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002d6c <main+0x112c>
 8002cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d502      	bpl.n	8002cca <main+0x108a>
 8002cc4:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <main+0x1120>)
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <main+0x1130>)
 8002cc8:	601a      	str	r2, [r3, #0]
		  // 6V = 1755 adc val 1,41V
		  // 8.4V = 2476 adc val 1,99V 0,58V
		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 8002cca:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <main+0x1120>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002d74 <main+0x1134>
 8002cd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd8:	ee16 0a90 	vmov	r0, s13
 8002cdc:	f7fd fc54 	bl	8000588 <__aeabi_f2d>
 8002ce0:	a315      	add	r3, pc, #84	@ (adr r3, 8002d38 <main+0x10f8>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fca7 	bl	8000638 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	a313      	add	r3, pc, #76	@ (adr r3, 8002d40 <main+0x1100>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fae6 	bl	80002c8 <__aeabi_dsub>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	a310      	add	r3, pc, #64	@ (adr r3, 8002d48 <main+0x1108>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f7fd fdbf 	bl	800088c <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff87 	bl	8000c28 <__aeabi_d2f>
 8002d1a:	ee07 0a10 	vmov	s14, r0
 8002d1e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8002d78 <main+0x1138>
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <main+0x113c>)
 8002d28:	edc3 7a00 	vstr	s15, [r3]
		 // adc_pil_val = (adc-1755)/(2746-1755)*100;
		  adc_flag=0;
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <main+0x111c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
  {
 8002d32:	f7fe bfc0 	b.w	8001cb6 <main+0x76>
 8002d36:	bf00      	nop
 8002d38:	66666666 	.word	0x66666666
 8002d3c:	400a6666 	.word	0x400a6666
 8002d40:	28f5c28f 	.word	0x28f5c28f
 8002d44:	3ff68f5c 	.word	0x3ff68f5c
 8002d48:	28f5c290 	.word	0x28f5c290
 8002d4c:	3fe28f5c 	.word	0x3fe28f5c
 8002d50:	20000574 	.word	0x20000574
 8002d54:	20000854 	.word	0x20000854
 8002d58:	20000858 	.word	0x20000858
 8002d5c:	20000848 	.word	0x20000848
 8002d60:	20000840 	.word	0x20000840
 8002d64:	451ac000 	.word	0x451ac000
 8002d68:	450ba000 	.word	0x450ba000
 8002d6c:	44db6000 	.word	0x44db6000
 8002d70:	44db6000 	.word	0x44db6000
 8002d74:	457ff000 	.word	0x457ff000
 8002d78:	42c80000 	.word	0x42c80000
 8002d7c:	20000844 	.word	0x20000844

08002d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b094      	sub	sp, #80	@ 0x50
 8002d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	2234      	movs	r2, #52	@ 0x34
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00c fd1d 	bl	800f7ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d94:	f107 0308 	add.w	r3, r7, #8
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	2300      	movs	r3, #0
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <SystemClock_Config+0xd0>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	4a28      	ldr	r2, [pc, #160]	@ (8002e50 <SystemClock_Config+0xd0>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db4:	4b26      	ldr	r3, [pc, #152]	@ (8002e50 <SystemClock_Config+0xd0>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <SystemClock_Config+0xd4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <SystemClock_Config+0xd4>)
 8002dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <SystemClock_Config+0xd4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002de0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002de4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de6:	2302      	movs	r3, #2
 8002de8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002df0:	2304      	movs	r3, #4
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002df4:	23a8      	movs	r3, #168	@ 0xa8
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e00:	2302      	movs	r3, #2
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 fdb3 	bl	8007974 <HAL_RCC_OscConfig>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e14:	f000 ff40 	bl	8003c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e18:	230f      	movs	r3, #15
 8002e1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	2105      	movs	r1, #5
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 ff28 	bl	8006c8c <HAL_RCC_ClockConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002e42:	f000 ff29 	bl	8003c98 <Error_Handler>
  }
}
 8002e46:	bf00      	nop
 8002e48:	3750      	adds	r7, #80	@ 0x50
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40007000 	.word	0x40007000

08002e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e6c:	4a21      	ldr	r2, [pc, #132]	@ (8002ef4 <MX_ADC1_Init+0x9c>)
 8002e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e92:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e98:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <MX_ADC1_Init+0xa0>)
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eb8:	480d      	ldr	r0, [pc, #52]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002eba:	f001 fafb 	bl	80044b4 <HAL_ADC_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ec4:	f000 fee8 	bl	8003c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ec8:	230c      	movs	r3, #12
 8002eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <MX_ADC1_Init+0x98>)
 8002eda:	f001 fd3f 	bl	800495c <HAL_ADC_ConfigChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ee4:	f000 fed8 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000031c 	.word	0x2000031c
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	0f000001 	.word	0x0f000001

08002efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f02:	4a13      	ldr	r2, [pc, #76]	@ (8002f50 <MX_I2C1_Init+0x54>)
 8002f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f08:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <MX_I2C1_Init+0x58>)
 8002f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	@ (8002f4c <MX_I2C1_Init+0x50>)
 8002f3a:	f002 fa99 	bl	8005470 <HAL_I2C_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f44:	f000 fea8 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000364 	.word	0x20000364
 8002f50:	40005400 	.word	0x40005400
 8002f54:	000186a0 	.word	0x000186a0

08002f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <MX_SPI1_Init+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f62:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fa8:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <MX_SPI1_Init+0x64>)
 8002faa:	f004 ff81 	bl	8007eb0 <HAL_SPI_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fb4:	f000 fe70 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200003b8 	.word	0x200003b8
 8002fc0:	40013000 	.word	0x40013000

08002fc4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fca:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <MX_TIM11_Init+0x44>)
 8002fcc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fd0:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002fd4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15000-1;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fde:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002fe2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	@ (8003004 <MX_TIM11_Init+0x40>)
 8002ff2:	f004 ffe6 	bl	8007fc2 <HAL_TIM_Base_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002ffc:	f000 fe4c 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000410 	.word	0x20000410
 8003008:	40014800 	.word	0x40014800

0800300c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <MX_UART4_Init+0x50>)
 8003014:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003018:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800301c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <MX_UART4_Init+0x4c>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003032:	220c      	movs	r2, #12
 8003034:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <MX_UART4_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	@ (8003058 <MX_UART4_Init+0x4c>)
 8003044:	f005 fa60 	bl	8008508 <HAL_UART_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800304e:	f000 fe23 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000458 	.word	0x20000458
 800305c:	40004c00 	.word	0x40004c00

08003060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <MX_USART2_UART_Init+0x50>)
 8003068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 800306c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	@ (80030ac <MX_USART2_UART_Init+0x4c>)
 8003098:	f005 fa36 	bl	8008508 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030a2:	f000 fdf9 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000049c 	.word	0x2000049c
 80030b0:	40004400 	.word	0x40004400

080030b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <MX_USART3_UART_Init+0x50>)
 80030bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80030c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030da:	220c      	movs	r2, #12
 80030dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030de:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030ea:	4805      	ldr	r0, [pc, #20]	@ (8003100 <MX_USART3_UART_Init+0x4c>)
 80030ec:	f005 fa0c 	bl	8008508 <HAL_UART_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030f6:	f000 fdcf 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200004e0 	.word	0x200004e0
 8003104:	40004800 	.word	0x40004800

08003108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b4c      	ldr	r3, [pc, #304]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a4b      	ldr	r2, [pc, #300]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b45      	ldr	r3, [pc, #276]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a44      	ldr	r2, [pc, #272]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b42      	ldr	r3, [pc, #264]	@ (8003254 <MX_GPIO_Init+0x14c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <MX_GPIO_Init+0x14c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a3d      	ldr	r2, [pc, #244]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b3b      	ldr	r3, [pc, #236]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a36      	ldr	r2, [pc, #216]	@ (8003254 <MX_GPIO_Init+0x14c>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <MX_GPIO_Init+0x14c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 800318e:	2200      	movs	r2, #0
 8003190:	f640 4112 	movw	r1, #3090	@ 0xc12
 8003194:	4830      	ldr	r0, [pc, #192]	@ (8003258 <MX_GPIO_Init+0x150>)
 8003196:	f002 f951 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 800319a:	2200      	movs	r2, #0
 800319c:	f246 011f 	movw	r1, #24607	@ 0x601f
 80031a0:	482e      	ldr	r0, [pc, #184]	@ (800325c <MX_GPIO_Init+0x154>)
 80031a2:	f002 f94b 	bl	800543c <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80031a6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80031aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	4827      	ldr	r0, [pc, #156]	@ (8003258 <MX_GPIO_Init+0x150>)
 80031bc:	f001 ffaa 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 80031c0:	f640 4312 	movw	r3, #3090	@ 0xc12
 80031c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	481f      	ldr	r0, [pc, #124]	@ (8003258 <MX_GPIO_Init+0x150>)
 80031da:	f001 ff9b 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80031de:	f246 031f 	movw	r3, #24607	@ 0x601f
 80031e2:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	4819      	ldr	r0, [pc, #100]	@ (800325c <MX_GPIO_Init+0x154>)
 80031f8:	f001 ff8c 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 80031fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4812      	ldr	r0, [pc, #72]	@ (800325c <MX_GPIO_Init+0x154>)
 8003212:	f001 ff7f 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800321a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003220:	2301      	movs	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	480b      	ldr	r0, [pc, #44]	@ (8003258 <MX_GPIO_Init+0x150>)
 800322c:	f001 ff72 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8003230:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003236:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800323a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	@ (800325c <MX_GPIO_Init+0x154>)
 8003248:	f001 ff64 	bl	8005114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	@ 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	40020800 	.word	0x40020800
 800325c:	40020400 	.word	0x40020400

08003260 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	4604      	mov	r4, r0
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	4623      	mov	r3, r4
 8003270:	71fb      	strb	r3, [r7, #7]
 8003272:	4603      	mov	r3, r0
 8003274:	71bb      	strb	r3, [r7, #6]
 8003276:	460b      	mov	r3, r1
 8003278:	717b      	strb	r3, [r7, #5]
 800327a:	4613      	mov	r3, r2
 800327c:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2104      	movs	r1, #4
 8003282:	4824      	ldr	r0, [pc, #144]	@ (8003314 <E220_CONFIG+0xb4>)
 8003284:	f002 f8da 	bl	800543c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8003288:	2201      	movs	r2, #1
 800328a:	2102      	movs	r1, #2
 800328c:	4821      	ldr	r0, [pc, #132]	@ (8003314 <E220_CONFIG+0xb4>)
 800328e:	f002 f8d5 	bl	800543c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003292:	2032      	movs	r0, #50	@ 0x32
 8003294:	f001 f8ea 	bl	800446c <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 80032a0:	793b      	ldrb	r3, [r7, #4]
 80032a2:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 80032a8:	79bb      	ldrb	r3, [r7, #6]
 80032aa:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 80032ac:	2362      	movs	r3, #98	@ 0x62
 80032ae:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 80032b4:	797b      	ldrb	r3, [r7, #5]
 80032b6:	743b      	strb	r3, [r7, #16]

    switch(mode){
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <E220_CONFIG+0x64>
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d003      	beq.n	80032ca <E220_CONFIG+0x6a>
 80032c2:	e005      	b.n	80032d0 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80032c4:	2300      	movs	r3, #0
 80032c6:	747b      	strb	r3, [r7, #17]
            break;
 80032c8:	e004      	b.n	80032d4 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80032ca:	2311      	movs	r3, #17
 80032cc:	747b      	strb	r3, [r7, #17]
            break;
 80032ce:	e001      	b.n	80032d4 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 80032d0:	2311      	movs	r3, #17
 80032d2:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 80032d4:	2300      	movs	r3, #0
 80032d6:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80032d8:	2300      	movs	r3, #0
 80032da:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80032dc:	f107 010c 	add.w	r1, r7, #12
 80032e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032e4:	2208      	movs	r2, #8
 80032e6:	480c      	ldr	r0, [pc, #48]	@ (8003318 <E220_CONFIG+0xb8>)
 80032e8:	f005 f95b 	bl	80085a2 <HAL_UART_Transmit>

    HAL_Delay(25);
 80032ec:	2019      	movs	r0, #25
 80032ee:	f001 f8bd 	bl	800446c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2104      	movs	r1, #4
 80032f6:	4807      	ldr	r0, [pc, #28]	@ (8003314 <E220_CONFIG+0xb4>)
 80032f8:	f002 f8a0 	bl	800543c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2102      	movs	r1, #2
 8003300:	4804      	ldr	r0, [pc, #16]	@ (8003314 <E220_CONFIG+0xb4>)
 8003302:	f002 f89b 	bl	800543c <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8003306:	2019      	movs	r0, #25
 8003308:	f001 f8b0 	bl	800446c <HAL_Delay>
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	40020400 	.word	0x40020400
 8003318:	200004e0 	.word	0x200004e0
 800331c:	00000000 	.word	0x00000000

08003320 <distance_in_m>:
double distance_in_m(double lat1, double long1, double lat2, double long2) {
 8003320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003324:	ed2d 8b02 	vpush	{d8}
 8003328:	b09a      	sub	sp, #104	@ 0x68
 800332a:	af00      	add	r7, sp, #0
 800332c:	ed87 0b06 	vstr	d0, [r7, #24]
 8003330:	ed87 1b04 	vstr	d1, [r7, #16]
 8003334:	ed87 2b02 	vstr	d2, [r7, #8]
 8003338:	ed87 3b00 	vstr	d3, [r7]


    double dlat1=lat1*(PI/180);
 800333c:	a184      	add	r1, pc, #528	@ (adr r1, 8003550 <distance_in_m+0x230>)
 800333e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	4b88      	ldr	r3, [pc, #544]	@ (8003568 <distance_in_m+0x248>)
 8003348:	f7fd faa0 	bl	800088c <__aeabi_ddiv>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003354:	f7fd f970 	bl	8000638 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double dlong1=long1*(PI/180);
 8003360:	a17b      	add	r1, pc, #492	@ (adr r1, 8003550 <distance_in_m+0x230>)
 8003362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	4b7f      	ldr	r3, [pc, #508]	@ (8003568 <distance_in_m+0x248>)
 800336c:	f7fd fa8e 	bl	800088c <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003378:	f7fd f95e 	bl	8000638 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dlat2=lat2*(PI/180);
 8003384:	a172      	add	r1, pc, #456	@ (adr r1, 8003550 <distance_in_m+0x230>)
 8003386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <distance_in_m+0x248>)
 8003390:	f7fd fa7c 	bl	800088c <__aeabi_ddiv>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800339c:	f7fd f94c 	bl	8000638 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dlong2=long2*(PI/180);
 80033a8:	a169      	add	r1, pc, #420	@ (adr r1, 8003550 <distance_in_m+0x230>)
 80033aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003568 <distance_in_m+0x248>)
 80033b4:	f7fd fa6a 	bl	800088c <__aeabi_ddiv>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c0:	f7fd f93a 	bl	8000638 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double dLong=dlong1-dlong2;
 80033cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80033d4:	f7fc ff78 	bl	80002c8 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double dLat=dlat1-dlat2;
 80033e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80033e8:	f7fc ff6e 	bl	80002c8 <__aeabi_dsub>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    double aHarv= pow(sin(dLat/2.0),2.0)+cos(dlat1)*cos(dlat2)*pow(sin(dLong/2),2);
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003400:	f7fd fa44 	bl	800088c <__aeabi_ddiv>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	ec43 2b17 	vmov	d7, r2, r3
 800340c:	eeb0 0a47 	vmov.f32	s0, s14
 8003410:	eef0 0a67 	vmov.f32	s1, s15
 8003414:	f00e ffe8 	bl	80123e8 <sin>
 8003418:	eeb0 7a40 	vmov.f32	s14, s0
 800341c:	eef0 7a60 	vmov.f32	s15, s1
 8003420:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003558 <distance_in_m+0x238>
 8003424:	eeb0 0a47 	vmov.f32	s0, s14
 8003428:	eef0 0a67 	vmov.f32	s1, s15
 800342c:	f00e feea 	bl	8012204 <pow>
 8003430:	ec59 8b10 	vmov	r8, r9, d0
 8003434:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003438:	f00e ff82 	bl	8012340 <cos>
 800343c:	ec55 4b10 	vmov	r4, r5, d0
 8003440:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8003444:	f00e ff7c 	bl	8012340 <cos>
 8003448:	ec53 2b10 	vmov	r2, r3, d0
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd f8f2 	bl	8000638 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003464:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003468:	f7fd fa10 	bl	800088c <__aeabi_ddiv>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	ec43 2b17 	vmov	d7, r2, r3
 8003474:	eeb0 0a47 	vmov.f32	s0, s14
 8003478:	eef0 0a67 	vmov.f32	s1, s15
 800347c:	f00e ffb4 	bl	80123e8 <sin>
 8003480:	eeb0 7a40 	vmov.f32	s14, s0
 8003484:	eef0 7a60 	vmov.f32	s15, s1
 8003488:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8003558 <distance_in_m+0x238>
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f00e feb6 	bl	8012204 <pow>
 8003498:	ec53 2b10 	vmov	r2, r3, d0
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	f7fd f8ca 	bl	8000638 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4640      	mov	r0, r8
 80034aa:	4649      	mov	r1, r9
 80034ac:	f7fc ff0e 	bl	80002cc <__adddf3>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double cHarv=2*atan2(sqrt(aHarv),sqrt(1.0-aHarv));
 80034b8:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80034bc:	f00e ff12 	bl	80122e4 <sqrt>
 80034c0:	eeb0 8a40 	vmov.f32	s16, s0
 80034c4:	eef0 8a60 	vmov.f32	s17, s1
 80034c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	4926      	ldr	r1, [pc, #152]	@ (800356c <distance_in_m+0x24c>)
 80034d2:	f7fc fef9 	bl	80002c8 <__aeabi_dsub>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	ec43 2b17 	vmov	d7, r2, r3
 80034de:	eeb0 0a47 	vmov.f32	s0, s14
 80034e2:	eef0 0a67 	vmov.f32	s1, s15
 80034e6:	f00e fefd 	bl	80122e4 <sqrt>
 80034ea:	eeb0 7a40 	vmov.f32	s14, s0
 80034ee:	eef0 7a60 	vmov.f32	s15, s1
 80034f2:	eeb0 1a47 	vmov.f32	s2, s14
 80034f6:	eef0 1a67 	vmov.f32	s3, s15
 80034fa:	eeb0 0a48 	vmov.f32	s0, s16
 80034fe:	eef0 0a68 	vmov.f32	s1, s17
 8003502:	f00e fe7d 	bl	8012200 <atan2>
 8003506:	ec51 0b10 	vmov	r0, r1, d0
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	f7fc fedd 	bl	80002cc <__adddf3>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double distance=radius_of_earth*cHarv;
 800351a:	a311      	add	r3, pc, #68	@ (adr r3, 8003560 <distance_in_m+0x240>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003524:	f7fd f888 	bl	8000638 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return (distance);
 8003530:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003534:	ec43 2b17 	vmov	d7, r2, r3
    }
 8003538:	eeb0 0a47 	vmov.f32	s0, s14
 800353c:	eef0 0a67 	vmov.f32	s1, s15
 8003540:	3768      	adds	r7, #104	@ 0x68
 8003542:	46bd      	mov	sp, r7
 8003544:	ecbd 8b02 	vpop	{d8}
 8003548:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800354c:	f3af 8000 	nop.w
 8003550:	54442d18 	.word	0x54442d18
 8003554:	400921fb 	.word	0x400921fb
 8003558:	00000000 	.word	0x00000000
 800355c:	40000000 	.word	0x40000000
 8003560:	03089a02 	.word	0x03089a02
 8003564:	415854a6 	.word	0x415854a6
 8003568:	40668000 	.word	0x40668000
 800356c:	3ff00000 	.word	0x3ff00000

08003570 <NEXTION_SendString>:
    double angle_deg = angle_rad * 180.0 / PI;
    return angle_deg;
}

void NEXTION_SendString (char *ID, char *string)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b090      	sub	sp, #64	@ 0x40
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 800357a:	f107 0008 	add.w	r0, r7, #8
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	490b      	ldr	r1, [pc, #44]	@ (80035b0 <NEXTION_SendString+0x40>)
 8003584:	f00c f8c0 	bl	800f708 <siprintf>
 8003588:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 800358a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358c:	b29a      	uxth	r2, r3
 800358e:	f107 0108 	add.w	r1, r7, #8
 8003592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003596:	4807      	ldr	r0, [pc, #28]	@ (80035b4 <NEXTION_SendString+0x44>)
 8003598:	f005 f803 	bl	80085a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 800359c:	2364      	movs	r3, #100	@ 0x64
 800359e:	2203      	movs	r2, #3
 80035a0:	4905      	ldr	r1, [pc, #20]	@ (80035b8 <NEXTION_SendString+0x48>)
 80035a2:	4804      	ldr	r0, [pc, #16]	@ (80035b4 <NEXTION_SendString+0x44>)
 80035a4:	f004 fffd 	bl	80085a2 <HAL_UART_Transmit>
}
 80035a8:	bf00      	nop
 80035aa:	3740      	adds	r7, #64	@ 0x40
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	080146f0 	.word	0x080146f0
 80035b4:	20000458 	.word	0x20000458
 80035b8:	20000000 	.word	0x20000000

080035bc <HYI_BUFFER_Fill>:
    // Send the command to the Nextion display
    Nextion_SendCommand(command);
}

void HYI_BUFFER_Fill()
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035c8:	22ff      	movs	r2, #255	@ 0xff
 80035ca:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[2] =0x54;
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035ce:	2254      	movs	r2, #84	@ 0x54
 80035d0:	709a      	strb	r2, [r3, #2]
	HYI_BUFFER[3] =0X52;
 80035d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035d4:	2252      	movs	r2, #82	@ 0x52
 80035d6:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 80035d8:	4b09      	ldr	r3, [pc, #36]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035da:	221f      	movs	r2, #31
 80035dc:	711a      	strb	r2, [r3, #4]
//	HYI_BUFFER[71] =takim_sayac;
//	HYI_BUFFER[72] =takim_sayac;
//	HYI_BUFFER[73] =takim_sayac;


	HYI_BUFFER[74]= 1;//EGU_AYRILMA_TESPIT;
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	//HYI_BUFFER[75]= crc; // CRC
	HYI_BUFFER[76]= 0x0D;
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035e8:	220d      	movs	r2, #13
 80035ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 80035ee:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <HYI_BUFFER_Fill+0x44>)
 80035f0:	220a      	movs	r2, #10
 80035f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000574 	.word	0x20000574

08003604 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e013      	b.n	8003638 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+5];
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	1d5a      	adds	r2, r3, #5
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	4985      	ldr	r1, [pc, #532]	@ (800382c <Payload_union_converter+0x228>)
 8003618:	5c8a      	ldrb	r2, [r1, r2]
 800361a:	3310      	adds	r3, #16
 800361c:	443b      	add	r3, r7
 800361e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	1d5a      	adds	r2, r3, #5
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	3316      	adds	r3, #22
 800362a:	4980      	ldr	r1, [pc, #512]	@ (800382c <Payload_union_converter+0x228>)
 800362c:	5c89      	ldrb	r1, [r1, r2]
 800362e:	4a80      	ldr	r2, [pc, #512]	@ (8003830 <Payload_union_converter+0x22c>)
 8003630:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	3301      	adds	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d9e8      	bls.n	8003610 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	4a7c      	ldr	r2, [pc, #496]	@ (8003834 <Payload_union_converter+0x230>)
 8003642:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8003644:	2300      	movs	r3, #0
 8003646:	73bb      	strb	r3, [r7, #14]
 8003648:	e015      	b.n	8003676 <Payload_union_converter+0x72>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+9];
 800364a:	7bbb      	ldrb	r3, [r7, #14]
 800364c:	f103 0209 	add.w	r2, r3, #9
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	4976      	ldr	r1, [pc, #472]	@ (800382c <Payload_union_converter+0x228>)
 8003654:	5c8a      	ldrb	r2, [r1, r2]
 8003656:	3310      	adds	r3, #16
 8003658:	443b      	add	r3, r7
 800365a:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	f103 0209 	add.w	r2, r3, #9
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	331a      	adds	r3, #26
 8003668:	4970      	ldr	r1, [pc, #448]	@ (800382c <Payload_union_converter+0x228>)
 800366a:	5c89      	ldrb	r1, [r1, r2]
 800366c:	4a70      	ldr	r2, [pc, #448]	@ (8003830 <Payload_union_converter+0x22c>)
 800366e:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	3301      	adds	r3, #1
 8003674:	73bb      	strb	r3, [r7, #14]
 8003676:	7bbb      	ldrb	r3, [r7, #14]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d9e6      	bls.n	800364a <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4a6d      	ldr	r2, [pc, #436]	@ (8003834 <Payload_union_converter+0x230>)
 8003680:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 8003682:	2300      	movs	r3, #0
 8003684:	737b      	strb	r3, [r7, #13]
 8003686:	e015      	b.n	80036b4 <Payload_union_converter+0xb0>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+13];
 8003688:	7b7b      	ldrb	r3, [r7, #13]
 800368a:	f103 020d 	add.w	r2, r3, #13
 800368e:	7b7b      	ldrb	r3, [r7, #13]
 8003690:	4966      	ldr	r1, [pc, #408]	@ (800382c <Payload_union_converter+0x228>)
 8003692:	5c8a      	ldrb	r2, [r1, r2]
 8003694:	3310      	adds	r3, #16
 8003696:	443b      	add	r3, r7
 8003698:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 800369c:	7b7b      	ldrb	r3, [r7, #13]
 800369e:	f103 020d 	add.w	r2, r3, #13
 80036a2:	7b7b      	ldrb	r3, [r7, #13]
 80036a4:	331e      	adds	r3, #30
 80036a6:	4961      	ldr	r1, [pc, #388]	@ (800382c <Payload_union_converter+0x228>)
 80036a8:	5c89      	ldrb	r1, [r1, r2]
 80036aa:	4a61      	ldr	r2, [pc, #388]	@ (8003830 <Payload_union_converter+0x22c>)
 80036ac:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80036ae:	7b7b      	ldrb	r3, [r7, #13]
 80036b0:	3301      	adds	r3, #1
 80036b2:	737b      	strb	r3, [r7, #13]
 80036b4:	7b7b      	ldrb	r3, [r7, #13]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d9e6      	bls.n	8003688 <Payload_union_converter+0x84>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003834 <Payload_union_converter+0x230>)
 80036be:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	733b      	strb	r3, [r7, #12]
 80036c4:	e00c      	b.n	80036e0 <Payload_union_converter+0xdc>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+17];
 80036c6:	7b3b      	ldrb	r3, [r7, #12]
 80036c8:	f103 0211 	add.w	r2, r3, #17
 80036cc:	7b3b      	ldrb	r3, [r7, #12]
 80036ce:	4957      	ldr	r1, [pc, #348]	@ (800382c <Payload_union_converter+0x228>)
 80036d0:	5c8a      	ldrb	r2, [r1, r2]
 80036d2:	3310      	adds	r3, #16
 80036d4:	443b      	add	r3, r7
 80036d6:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80036da:	7b3b      	ldrb	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	733b      	strb	r3, [r7, #12]
 80036e0:	7b3b      	ldrb	r3, [r7, #12]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d9ef      	bls.n	80036c6 <Payload_union_converter+0xc2>
			 }
			 Payload.altitude=f2u8.fVal;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4a52      	ldr	r2, [pc, #328]	@ (8003834 <Payload_union_converter+0x230>)
 80036ea:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	72fb      	strb	r3, [r7, #11]
 80036f0:	e00c      	b.n	800370c <Payload_union_converter+0x108>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+21];
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	f103 0215 	add.w	r2, r3, #21
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	494c      	ldr	r1, [pc, #304]	@ (800382c <Payload_union_converter+0x228>)
 80036fc:	5c8a      	ldrb	r2, [r1, r2]
 80036fe:	3310      	adds	r3, #16
 8003700:	443b      	add	r3, r7
 8003702:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003706:	7afb      	ldrb	r3, [r7, #11]
 8003708:	3301      	adds	r3, #1
 800370a:	72fb      	strb	r3, [r7, #11]
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d9ef      	bls.n	80036f2 <Payload_union_converter+0xee>
			 }
			 Payload.speed=f2u8.fVal;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4a47      	ldr	r2, [pc, #284]	@ (8003834 <Payload_union_converter+0x230>)
 8003716:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8003718:	2300      	movs	r3, #0
 800371a:	72bb      	strb	r3, [r7, #10]
 800371c:	e00c      	b.n	8003738 <Payload_union_converter+0x134>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+25];
 800371e:	7abb      	ldrb	r3, [r7, #10]
 8003720:	f103 0219 	add.w	r2, r3, #25
 8003724:	7abb      	ldrb	r3, [r7, #10]
 8003726:	4941      	ldr	r1, [pc, #260]	@ (800382c <Payload_union_converter+0x228>)
 8003728:	5c8a      	ldrb	r2, [r1, r2]
 800372a:	3310      	adds	r3, #16
 800372c:	443b      	add	r3, r7
 800372e:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003732:	7abb      	ldrb	r3, [r7, #10]
 8003734:	3301      	adds	r3, #1
 8003736:	72bb      	strb	r3, [r7, #10]
 8003738:	7abb      	ldrb	r3, [r7, #10]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d9ef      	bls.n	800371e <Payload_union_converter+0x11a>
			 }
			 Payload.temperature=f2u8.fVal;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4a3c      	ldr	r2, [pc, #240]	@ (8003834 <Payload_union_converter+0x230>)
 8003742:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8003744:	2300      	movs	r3, #0
 8003746:	727b      	strb	r3, [r7, #9]
 8003748:	e00c      	b.n	8003764 <Payload_union_converter+0x160>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+29];
 800374a:	7a7b      	ldrb	r3, [r7, #9]
 800374c:	f103 021d 	add.w	r2, r3, #29
 8003750:	7a7b      	ldrb	r3, [r7, #9]
 8003752:	4936      	ldr	r1, [pc, #216]	@ (800382c <Payload_union_converter+0x228>)
 8003754:	5c8a      	ldrb	r2, [r1, r2]
 8003756:	3310      	adds	r3, #16
 8003758:	443b      	add	r3, r7
 800375a:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800375e:	7a7b      	ldrb	r3, [r7, #9]
 8003760:	3301      	adds	r3, #1
 8003762:	727b      	strb	r3, [r7, #9]
 8003764:	7a7b      	ldrb	r3, [r7, #9]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d9ef      	bls.n	800374a <Payload_union_converter+0x146>
			 }
			 Payload.accx=f2u8.fVal;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	4a31      	ldr	r2, [pc, #196]	@ (8003834 <Payload_union_converter+0x230>)
 800376e:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8003770:	2300      	movs	r3, #0
 8003772:	723b      	strb	r3, [r7, #8]
 8003774:	e00c      	b.n	8003790 <Payload_union_converter+0x18c>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+33];
 8003776:	7a3b      	ldrb	r3, [r7, #8]
 8003778:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800377c:	7a3b      	ldrb	r3, [r7, #8]
 800377e:	492b      	ldr	r1, [pc, #172]	@ (800382c <Payload_union_converter+0x228>)
 8003780:	5c8a      	ldrb	r2, [r1, r2]
 8003782:	3310      	adds	r3, #16
 8003784:	443b      	add	r3, r7
 8003786:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800378a:	7a3b      	ldrb	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	723b      	strb	r3, [r7, #8]
 8003790:	7a3b      	ldrb	r3, [r7, #8]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d9ef      	bls.n	8003776 <Payload_union_converter+0x172>
			 }
			 Payload.accy=f2u8.fVal;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	4a26      	ldr	r2, [pc, #152]	@ (8003834 <Payload_union_converter+0x230>)
 800379a:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 800379c:	2300      	movs	r3, #0
 800379e:	71fb      	strb	r3, [r7, #7]
 80037a0:	e00c      	b.n	80037bc <Payload_union_converter+0x1b8>
			 {
		    	  f2u8.array[i]=lora_rx_buffer[i+37];
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4920      	ldr	r1, [pc, #128]	@ (800382c <Payload_union_converter+0x228>)
 80037ac:	5c8a      	ldrb	r2, [r1, r2]
 80037ae:	3310      	adds	r3, #16
 80037b0:	443b      	add	r3, r7
 80037b2:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	3301      	adds	r3, #1
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d9ef      	bls.n	80037a2 <Payload_union_converter+0x19e>
			 }
		      Payload.accz=f2u8.fVal;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <Payload_union_converter+0x230>)
 80037c6:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	71bb      	strb	r3, [r7, #6]
 80037cc:	e00c      	b.n	80037e8 <Payload_union_converter+0x1e4>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+41];
 80037ce:	79bb      	ldrb	r3, [r7, #6]
 80037d0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	4915      	ldr	r1, [pc, #84]	@ (800382c <Payload_union_converter+0x228>)
 80037d8:	5c8a      	ldrb	r2, [r1, r2]
 80037da:	3310      	adds	r3, #16
 80037dc:	443b      	add	r3, r7
 80037de:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 80037e2:	79bb      	ldrb	r3, [r7, #6]
 80037e4:	3301      	adds	r3, #1
 80037e6:	71bb      	strb	r3, [r7, #6]
 80037e8:	79bb      	ldrb	r3, [r7, #6]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d9ef      	bls.n	80037ce <Payload_union_converter+0x1ca>
			 }
			  Payload.normal=f2u8.fVal;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <Payload_union_converter+0x230>)
 80037f2:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	717b      	strb	r3, [r7, #5]
 80037f8:	e00c      	b.n	8003814 <Payload_union_converter+0x210>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+45];
 80037fa:	797b      	ldrb	r3, [r7, #5]
 80037fc:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8003800:	797b      	ldrb	r3, [r7, #5]
 8003802:	490a      	ldr	r1, [pc, #40]	@ (800382c <Payload_union_converter+0x228>)
 8003804:	5c8a      	ldrb	r2, [r1, r2]
 8003806:	3310      	adds	r3, #16
 8003808:	443b      	add	r3, r7
 800380a:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800380e:	797b      	ldrb	r3, [r7, #5]
 8003810:	3301      	adds	r3, #1
 8003812:	717b      	strb	r3, [r7, #5]
 8003814:	797b      	ldrb	r3, [r7, #5]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d9ef      	bls.n	80037fa <Payload_union_converter+0x1f6>
			 }
			  Payload.pitch=f2u8.fVal;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	4a05      	ldr	r2, [pc, #20]	@ (8003834 <Payload_union_converter+0x230>)
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000524 	.word	0x20000524
 8003830:	20000574 	.word	0x20000574
 8003834:	20000678 	.word	0x20000678

08003838 <Enum_State_bs>:
void Enum_State_bs(void){
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0

    switch(Booster.mod){
 800383c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a78 <Enum_State_bs+0x240>)
 800383e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003842:	2b08      	cmp	r3, #8
 8003844:	f200 8112 	bhi.w	8003a6c <Enum_State_bs+0x234>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <Enum_State_bs+0x18>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003875 	.word	0x08003875
 8003854:	080038ad 	.word	0x080038ad
 8003858:	080038e5 	.word	0x080038e5
 800385c:	0800391d 	.word	0x0800391d
 8003860:	08003955 	.word	0x08003955
 8003864:	0800398d 	.word	0x0800398d
 8003868:	080039c5 	.word	0x080039c5
 800386c:	080039fd 	.word	0x080039fd
 8003870:	08003a35 	.word	0x08003a35

    case 0:
    	enum_bs[0]='O';
 8003874:	4b81      	ldr	r3, [pc, #516]	@ (8003a7c <Enum_State_bs+0x244>)
 8003876:	224f      	movs	r2, #79	@ 0x4f
 8003878:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='F';
 800387a:	4b80      	ldr	r3, [pc, #512]	@ (8003a7c <Enum_State_bs+0x244>)
 800387c:	2246      	movs	r2, #70	@ 0x46
 800387e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='F';
 8003880:	4b7e      	ldr	r3, [pc, #504]	@ (8003a7c <Enum_State_bs+0x244>)
 8003882:	2246      	movs	r2, #70	@ 0x46
 8003884:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='\0';
 8003886:	4b7d      	ldr	r3, [pc, #500]	@ (8003a7c <Enum_State_bs+0x244>)
 8003888:	2200      	movs	r2, #0
 800388a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800388c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a7c <Enum_State_bs+0x244>)
 800388e:	2200      	movs	r2, #0
 8003890:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003892:	4b7a      	ldr	r3, [pc, #488]	@ (8003a7c <Enum_State_bs+0x244>)
 8003894:	2200      	movs	r2, #0
 8003896:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003898:	4b78      	ldr	r3, [pc, #480]	@ (8003a7c <Enum_State_bs+0x244>)
 800389a:	2200      	movs	r2, #0
 800389c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800389e:	4b77      	ldr	r3, [pc, #476]	@ (8003a7c <Enum_State_bs+0x244>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80038a4:	4b75      	ldr	r3, [pc, #468]	@ (8003a7c <Enum_State_bs+0x244>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	721a      	strb	r2, [r3, #8]
    	break;
 80038aa:	e0df      	b.n	8003a6c <Enum_State_bs+0x234>

    case 1:
    	enum_bs[0]='R';
 80038ac:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <Enum_State_bs+0x244>)
 80038ae:	2252      	movs	r2, #82	@ 0x52
 80038b0:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='A';
 80038b2:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <Enum_State_bs+0x244>)
 80038b4:	2241      	movs	r2, #65	@ 0x41
 80038b6:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='M';
 80038b8:	4b70      	ldr	r3, [pc, #448]	@ (8003a7c <Enum_State_bs+0x244>)
 80038ba:	224d      	movs	r2, #77	@ 0x4d
 80038bc:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='P';
 80038be:	4b6f      	ldr	r3, [pc, #444]	@ (8003a7c <Enum_State_bs+0x244>)
 80038c0:	2250      	movs	r2, #80	@ 0x50
 80038c2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='A';
 80038c4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a7c <Enum_State_bs+0x244>)
 80038c6:	2241      	movs	r2, #65	@ 0x41
 80038c8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 80038ca:	4b6c      	ldr	r3, [pc, #432]	@ (8003a7c <Enum_State_bs+0x244>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 80038d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a7c <Enum_State_bs+0x244>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80038d6:	4b69      	ldr	r3, [pc, #420]	@ (8003a7c <Enum_State_bs+0x244>)
 80038d8:	2200      	movs	r2, #0
 80038da:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80038dc:	4b67      	ldr	r3, [pc, #412]	@ (8003a7c <Enum_State_bs+0x244>)
 80038de:	2200      	movs	r2, #0
 80038e0:	721a      	strb	r2, [r3, #8]
    	break;
 80038e2:	e0c3      	b.n	8003a6c <Enum_State_bs+0x234>

    case 2:
    	enum_bs[0]='U';
 80038e4:	4b65      	ldr	r3, [pc, #404]	@ (8003a7c <Enum_State_bs+0x244>)
 80038e6:	2255      	movs	r2, #85	@ 0x55
 80038e8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='C';
 80038ea:	4b64      	ldr	r3, [pc, #400]	@ (8003a7c <Enum_State_bs+0x244>)
 80038ec:	2243      	movs	r2, #67	@ 0x43
 80038ee:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='U';
 80038f0:	4b62      	ldr	r3, [pc, #392]	@ (8003a7c <Enum_State_bs+0x244>)
 80038f2:	2255      	movs	r2, #85	@ 0x55
 80038f4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='S';
 80038f6:	4b61      	ldr	r3, [pc, #388]	@ (8003a7c <Enum_State_bs+0x244>)
 80038f8:	2253      	movs	r2, #83	@ 0x53
 80038fa:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 80038fc:	4b5f      	ldr	r3, [pc, #380]	@ (8003a7c <Enum_State_bs+0x244>)
 80038fe:	2200      	movs	r2, #0
 8003900:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003902:	4b5e      	ldr	r3, [pc, #376]	@ (8003a7c <Enum_State_bs+0x244>)
 8003904:	2200      	movs	r2, #0
 8003906:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003908:	4b5c      	ldr	r3, [pc, #368]	@ (8003a7c <Enum_State_bs+0x244>)
 800390a:	2200      	movs	r2, #0
 800390c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800390e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a7c <Enum_State_bs+0x244>)
 8003910:	2200      	movs	r2, #0
 8003912:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003914:	4b5a      	ldr	r3, [pc, #360]	@ (8003a80 <Enum_State_bs+0x248>)
 8003916:	2200      	movs	r2, #0
 8003918:	721a      	strb	r2, [r3, #8]
    	break;
 800391a:	e0a7      	b.n	8003a6c <Enum_State_bs+0x234>
    case 3:
    	enum_bs[0]='B';
 800391c:	4b57      	ldr	r3, [pc, #348]	@ (8003a7c <Enum_State_bs+0x244>)
 800391e:	2242      	movs	r2, #66	@ 0x42
 8003920:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='U';
 8003922:	4b56      	ldr	r3, [pc, #344]	@ (8003a7c <Enum_State_bs+0x244>)
 8003924:	2255      	movs	r2, #85	@ 0x55
 8003926:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003928:	4b54      	ldr	r3, [pc, #336]	@ (8003a7c <Enum_State_bs+0x244>)
 800392a:	2252      	movs	r2, #82	@ 0x52
 800392c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='N';
 800392e:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <Enum_State_bs+0x244>)
 8003930:	224e      	movs	r2, #78	@ 0x4e
 8003932:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='O';
 8003934:	4b51      	ldr	r3, [pc, #324]	@ (8003a7c <Enum_State_bs+0x244>)
 8003936:	224f      	movs	r2, #79	@ 0x4f
 8003938:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='U';
 800393a:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <Enum_State_bs+0x244>)
 800393c:	2255      	movs	r2, #85	@ 0x55
 800393e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='T';
 8003940:	4b4e      	ldr	r3, [pc, #312]	@ (8003a7c <Enum_State_bs+0x244>)
 8003942:	2254      	movs	r2, #84	@ 0x54
 8003944:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003946:	4b4d      	ldr	r3, [pc, #308]	@ (8003a7c <Enum_State_bs+0x244>)
 8003948:	2200      	movs	r2, #0
 800394a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 800394c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a7c <Enum_State_bs+0x244>)
 800394e:	2200      	movs	r2, #0
 8003950:	721a      	strb	r2, [r3, #8]
    	break;
 8003952:	e08b      	b.n	8003a6c <Enum_State_bs+0x234>
    case 4:
    	enum_bs[0]='A';
 8003954:	4b49      	ldr	r3, [pc, #292]	@ (8003a7c <Enum_State_bs+0x244>)
 8003956:	2241      	movs	r2, #65	@ 0x41
 8003958:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 800395a:	4b48      	ldr	r3, [pc, #288]	@ (8003a7c <Enum_State_bs+0x244>)
 800395c:	2259      	movs	r2, #89	@ 0x59
 800395e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='I';
 8003960:	4b46      	ldr	r3, [pc, #280]	@ (8003a7c <Enum_State_bs+0x244>)
 8003962:	2249      	movs	r2, #73	@ 0x49
 8003964:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='R';
 8003966:	4b45      	ldr	r3, [pc, #276]	@ (8003a7c <Enum_State_bs+0x244>)
 8003968:	2252      	movs	r2, #82	@ 0x52
 800396a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800396c:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <Enum_State_bs+0x244>)
 800396e:	2200      	movs	r2, #0
 8003970:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003972:	4b42      	ldr	r3, [pc, #264]	@ (8003a7c <Enum_State_bs+0x244>)
 8003974:	2200      	movs	r2, #0
 8003976:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003978:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <Enum_State_bs+0x244>)
 800397a:	2200      	movs	r2, #0
 800397c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800397e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <Enum_State_bs+0x244>)
 8003980:	2200      	movs	r2, #0
 8003982:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003984:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <Enum_State_bs+0x244>)
 8003986:	2200      	movs	r2, #0
 8003988:	721a      	strb	r2, [r3, #8]
    	break;
 800398a:	e06f      	b.n	8003a6c <Enum_State_bs+0x234>
    case 5:
    	enum_bs[0]='A';
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <Enum_State_bs+0x244>)
 800398e:	2241      	movs	r2, #65	@ 0x41
 8003990:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003992:	4b3a      	ldr	r3, [pc, #232]	@ (8003a7c <Enum_State_bs+0x244>)
 8003994:	2259      	movs	r2, #89	@ 0x59
 8003996:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003998:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <Enum_State_bs+0x244>)
 800399a:	2252      	movs	r2, #82	@ 0x52
 800399c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <Enum_State_bs+0x244>)
 80039a0:	2249      	movs	r2, #73	@ 0x49
 80039a2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80039a4:	4b35      	ldr	r3, [pc, #212]	@ (8003a7c <Enum_State_bs+0x244>)
 80039a6:	224c      	movs	r2, #76	@ 0x4c
 80039a8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80039aa:	4b34      	ldr	r3, [pc, #208]	@ (8003a7c <Enum_State_bs+0x244>)
 80039ac:	2244      	movs	r2, #68	@ 0x44
 80039ae:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80039b0:	4b32      	ldr	r3, [pc, #200]	@ (8003a7c <Enum_State_bs+0x244>)
 80039b2:	2249      	movs	r2, #73	@ 0x49
 80039b4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='?';
 80039b6:	4b31      	ldr	r3, [pc, #196]	@ (8003a7c <Enum_State_bs+0x244>)
 80039b8:	223f      	movs	r2, #63	@ 0x3f
 80039ba:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80039bc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a7c <Enum_State_bs+0x244>)
 80039be:	2200      	movs	r2, #0
 80039c0:	721a      	strb	r2, [r3, #8]
    	break;
 80039c2:	e053      	b.n	8003a6c <Enum_State_bs+0x234>
    case 6:
    	enum_bs[0]='A';
 80039c4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a7c <Enum_State_bs+0x244>)
 80039c6:	2241      	movs	r2, #65	@ 0x41
 80039c8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 80039ca:	4b2c      	ldr	r3, [pc, #176]	@ (8003a7c <Enum_State_bs+0x244>)
 80039cc:	2259      	movs	r2, #89	@ 0x59
 80039ce:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 80039d0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <Enum_State_bs+0x244>)
 80039d2:	2252      	movs	r2, #82	@ 0x52
 80039d4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 80039d6:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <Enum_State_bs+0x244>)
 80039d8:	2249      	movs	r2, #73	@ 0x49
 80039da:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <Enum_State_bs+0x244>)
 80039de:	224c      	movs	r2, #76	@ 0x4c
 80039e0:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80039e2:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <Enum_State_bs+0x244>)
 80039e4:	2244      	movs	r2, #68	@ 0x44
 80039e6:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80039e8:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <Enum_State_bs+0x244>)
 80039ea:	2249      	movs	r2, #73	@ 0x49
 80039ec:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80039ee:	4b23      	ldr	r3, [pc, #140]	@ (8003a7c <Enum_State_bs+0x244>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80039f4:	4b21      	ldr	r3, [pc, #132]	@ (8003a7c <Enum_State_bs+0x244>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	721a      	strb	r2, [r3, #8]
    	break;
 80039fa:	e037      	b.n	8003a6c <Enum_State_bs+0x234>
    case 7:
    	enum_bs[0]='A';
 80039fc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <Enum_State_bs+0x244>)
 80039fe:	2241      	movs	r2, #65	@ 0x41
 8003a00:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a04:	2259      	movs	r2, #89	@ 0x59
 8003a06:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003a08:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a0a:	2252      	movs	r2, #82	@ 0x52
 8003a0c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a10:	2249      	movs	r2, #73	@ 0x49
 8003a12:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a16:	224c      	movs	r2, #76	@ 0x4c
 8003a18:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='M';
 8003a1a:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a1c:	224d      	movs	r2, #77	@ 0x4d
 8003a1e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='A';
 8003a20:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a22:	2241      	movs	r2, #65	@ 0x41
 8003a24:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='D';
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a28:	2244      	movs	r2, #68	@ 0x44
 8003a2a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='I';
 8003a2c:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a2e:	2249      	movs	r2, #73	@ 0x49
 8003a30:	721a      	strb	r2, [r3, #8]
    	break;
 8003a32:	e01b      	b.n	8003a6c <Enum_State_bs+0x234>
    case 8:
    	enum_bs[0]='F';
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a36:	2246      	movs	r2, #70	@ 0x46
 8003a38:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='I';
 8003a3a:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a3c:	2249      	movs	r2, #73	@ 0x49
 8003a3e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='N';
 8003a40:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a42:	224e      	movs	r2, #78	@ 0x4e
 8003a44:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a48:	2249      	movs	r2, #73	@ 0x49
 8003a4a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='S';
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a4e:	2253      	movs	r2, #83	@ 0x53
 8003a50:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='H';
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a54:	2248      	movs	r2, #72	@ 0x48
 8003a56:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	721a      	strb	r2, [r3, #8]
    	break;
 8003a6a:	bf00      	nop

    	 }

    NEXTION_SendString("bs10", &enum_bs);
 8003a6c:	4903      	ldr	r1, [pc, #12]	@ (8003a7c <Enum_State_bs+0x244>)
 8003a6e:	4805      	ldr	r0, [pc, #20]	@ (8003a84 <Enum_State_bs+0x24c>)
 8003a70:	f7ff fd7e 	bl	8003570 <NEXTION_SendString>


}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200006b0 	.word	0x200006b0
 8003a7c:	20000774 	.word	0x20000774
 8003a80:	20000780 	.word	0x20000780
 8003a84:	08014720 	.word	0x08014720

08003a88 <Enum_State_s>:
void Enum_State_s(void){
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0

    switch(Sustainer.mod){
 8003a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <Enum_State_s+0x204>)
 8003a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a92:	2b07      	cmp	r3, #7
 8003a94:	f200 80f4 	bhi.w	8003c80 <Enum_State_s+0x1f8>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <Enum_State_s+0x18>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ac1 	.word	0x08003ac1
 8003aa4:	08003af9 	.word	0x08003af9
 8003aa8:	08003b31 	.word	0x08003b31
 8003aac:	08003b69 	.word	0x08003b69
 8003ab0:	08003ba1 	.word	0x08003ba1
 8003ab4:	08003bd9 	.word	0x08003bd9
 8003ab8:	08003c11 	.word	0x08003c11
 8003abc:	08003c49 	.word	0x08003c49


    case 0:
    	enum_s[0]='O';
 8003ac0:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <Enum_State_s+0x208>)
 8003ac2:	224f      	movs	r2, #79	@ 0x4f
 8003ac4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='F';
 8003ac6:	4b72      	ldr	r3, [pc, #456]	@ (8003c90 <Enum_State_s+0x208>)
 8003ac8:	2246      	movs	r2, #70	@ 0x46
 8003aca:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='F';
 8003acc:	4b70      	ldr	r3, [pc, #448]	@ (8003c90 <Enum_State_s+0x208>)
 8003ace:	2246      	movs	r2, #70	@ 0x46
 8003ad0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='\0';
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8003c90 <Enum_State_s+0x208>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8003c90 <Enum_State_s+0x208>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003ade:	4b6c      	ldr	r3, [pc, #432]	@ (8003c90 <Enum_State_s+0x208>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c90 <Enum_State_s+0x208>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003aea:	4b69      	ldr	r3, [pc, #420]	@ (8003c90 <Enum_State_s+0x208>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003af0:	4b67      	ldr	r3, [pc, #412]	@ (8003c90 <Enum_State_s+0x208>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	721a      	strb	r2, [r3, #8]
    	break;
 8003af6:	e0c3      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 1:
    	enum_s[0]='R';
 8003af8:	4b65      	ldr	r3, [pc, #404]	@ (8003c90 <Enum_State_s+0x208>)
 8003afa:	2252      	movs	r2, #82	@ 0x52
 8003afc:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 8003afe:	4b64      	ldr	r3, [pc, #400]	@ (8003c90 <Enum_State_s+0x208>)
 8003b00:	2241      	movs	r2, #65	@ 0x41
 8003b02:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='M';
 8003b04:	4b62      	ldr	r3, [pc, #392]	@ (8003c90 <Enum_State_s+0x208>)
 8003b06:	224d      	movs	r2, #77	@ 0x4d
 8003b08:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='P';
 8003b0a:	4b61      	ldr	r3, [pc, #388]	@ (8003c90 <Enum_State_s+0x208>)
 8003b0c:	2250      	movs	r2, #80	@ 0x50
 8003b0e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='A';
 8003b10:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <Enum_State_s+0x208>)
 8003b12:	2241      	movs	r2, #65	@ 0x41
 8003b14:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003b16:	4b5e      	ldr	r3, [pc, #376]	@ (8003c90 <Enum_State_s+0x208>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8003c90 <Enum_State_s+0x208>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003b22:	4b5b      	ldr	r3, [pc, #364]	@ (8003c90 <Enum_State_s+0x208>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b28:	4b59      	ldr	r3, [pc, #356]	@ (8003c90 <Enum_State_s+0x208>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	721a      	strb	r2, [r3, #8]
    	break;
 8003b2e:	e0a7      	b.n	8003c80 <Enum_State_s+0x1f8>

    case 2:
    	enum_s[0]='U';
 8003b30:	4b57      	ldr	r3, [pc, #348]	@ (8003c90 <Enum_State_s+0x208>)
 8003b32:	2255      	movs	r2, #85	@ 0x55
 8003b34:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='C';
 8003b36:	4b56      	ldr	r3, [pc, #344]	@ (8003c90 <Enum_State_s+0x208>)
 8003b38:	2243      	movs	r2, #67	@ 0x43
 8003b3a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='U';
 8003b3c:	4b54      	ldr	r3, [pc, #336]	@ (8003c90 <Enum_State_s+0x208>)
 8003b3e:	2255      	movs	r2, #85	@ 0x55
 8003b40:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='S';
 8003b42:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <Enum_State_s+0x208>)
 8003b44:	2253      	movs	r2, #83	@ 0x53
 8003b46:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003b48:	4b51      	ldr	r3, [pc, #324]	@ (8003c90 <Enum_State_s+0x208>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003b4e:	4b50      	ldr	r3, [pc, #320]	@ (8003c90 <Enum_State_s+0x208>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003b54:	4b4e      	ldr	r3, [pc, #312]	@ (8003c90 <Enum_State_s+0x208>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c90 <Enum_State_s+0x208>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b60:	4b4b      	ldr	r3, [pc, #300]	@ (8003c90 <Enum_State_s+0x208>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	721a      	strb	r2, [r3, #8]
    	break;
 8003b66:	e08b      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 3:
    	enum_s[0]='A';
 8003b68:	4b49      	ldr	r3, [pc, #292]	@ (8003c90 <Enum_State_s+0x208>)
 8003b6a:	2241      	movs	r2, #65	@ 0x41
 8003b6c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 8003b6e:	4b48      	ldr	r3, [pc, #288]	@ (8003c90 <Enum_State_s+0x208>)
 8003b70:	2259      	movs	r2, #89	@ 0x59
 8003b72:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003b74:	4b46      	ldr	r3, [pc, #280]	@ (8003c90 <Enum_State_s+0x208>)
 8003b76:	2252      	movs	r2, #82	@ 0x52
 8003b78:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003b7a:	4b45      	ldr	r3, [pc, #276]	@ (8003c90 <Enum_State_s+0x208>)
 8003b7c:	2249      	movs	r2, #73	@ 0x49
 8003b7e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003b80:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <Enum_State_s+0x208>)
 8003b82:	224c      	movs	r2, #76	@ 0x4c
 8003b84:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003b86:	4b42      	ldr	r3, [pc, #264]	@ (8003c90 <Enum_State_s+0x208>)
 8003b88:	2244      	movs	r2, #68	@ 0x44
 8003b8a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003b8c:	4b40      	ldr	r3, [pc, #256]	@ (8003c90 <Enum_State_s+0x208>)
 8003b8e:	2249      	movs	r2, #73	@ 0x49
 8003b90:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='?';
 8003b92:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <Enum_State_s+0x208>)
 8003b94:	223f      	movs	r2, #63	@ 0x3f
 8003b96:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003b98:	4b3d      	ldr	r3, [pc, #244]	@ (8003c90 <Enum_State_s+0x208>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	721a      	strb	r2, [r3, #8]
    	break;
 8003b9e:	e06f      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 4:
    	enum_s[0]='A';
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <Enum_State_s+0x208>)
 8003ba2:	2241      	movs	r2, #65	@ 0x41
 8003ba4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 8003ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8003c90 <Enum_State_s+0x208>)
 8003ba8:	2259      	movs	r2, #89	@ 0x59
 8003baa:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003bac:	4b38      	ldr	r3, [pc, #224]	@ (8003c90 <Enum_State_s+0x208>)
 8003bae:	2252      	movs	r2, #82	@ 0x52
 8003bb0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003bb2:	4b37      	ldr	r3, [pc, #220]	@ (8003c90 <Enum_State_s+0x208>)
 8003bb4:	2249      	movs	r2, #73	@ 0x49
 8003bb6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003bb8:	4b35      	ldr	r3, [pc, #212]	@ (8003c90 <Enum_State_s+0x208>)
 8003bba:	224c      	movs	r2, #76	@ 0x4c
 8003bbc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003bbe:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <Enum_State_s+0x208>)
 8003bc0:	2244      	movs	r2, #68	@ 0x44
 8003bc2:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 8003bc4:	4b32      	ldr	r3, [pc, #200]	@ (8003c90 <Enum_State_s+0x208>)
 8003bc6:	2249      	movs	r2, #73	@ 0x49
 8003bc8:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003bca:	4b31      	ldr	r3, [pc, #196]	@ (8003c90 <Enum_State_s+0x208>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c90 <Enum_State_s+0x208>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	721a      	strb	r2, [r3, #8]
    	break;
 8003bd6:	e053      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 5:
    	enum_s[0]='A';
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c90 <Enum_State_s+0x208>)
 8003bda:	2241      	movs	r2, #65	@ 0x41
 8003bdc:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='P';
 8003bde:	4b2c      	ldr	r3, [pc, #176]	@ (8003c90 <Enum_State_s+0x208>)
 8003be0:	2250      	movs	r2, #80	@ 0x50
 8003be2:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='O';
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <Enum_State_s+0x208>)
 8003be6:	224f      	movs	r2, #79	@ 0x4f
 8003be8:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='G';
 8003bea:	4b29      	ldr	r3, [pc, #164]	@ (8003c90 <Enum_State_s+0x208>)
 8003bec:	2247      	movs	r2, #71	@ 0x47
 8003bee:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='E';
 8003bf0:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <Enum_State_s+0x208>)
 8003bf2:	2245      	movs	r2, #69	@ 0x45
 8003bf4:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='E';
 8003bf6:	4b26      	ldr	r3, [pc, #152]	@ (8003c90 <Enum_State_s+0x208>)
 8003bf8:	2245      	movs	r2, #69	@ 0x45
 8003bfa:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003bfc:	4b24      	ldr	r3, [pc, #144]	@ (8003c90 <Enum_State_s+0x208>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c02:	4b23      	ldr	r3, [pc, #140]	@ (8003c90 <Enum_State_s+0x208>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c08:	4b21      	ldr	r3, [pc, #132]	@ (8003c90 <Enum_State_s+0x208>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	721a      	strb	r2, [r3, #8]
    	break;
 8003c0e:	e037      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 6:
    	enum_s[0]='M';
 8003c10:	4b1f      	ldr	r3, [pc, #124]	@ (8003c90 <Enum_State_s+0x208>)
 8003c12:	224d      	movs	r2, #77	@ 0x4d
 8003c14:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <Enum_State_s+0x208>)
 8003c18:	2241      	movs	r2, #65	@ 0x41
 8003c1a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='I';
 8003c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c90 <Enum_State_s+0x208>)
 8003c1e:	2249      	movs	r2, #73	@ 0x49
 8003c20:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='N';
 8003c22:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <Enum_State_s+0x208>)
 8003c24:	224e      	movs	r2, #78	@ 0x4e
 8003c26:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003c28:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <Enum_State_s+0x208>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003c2e:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <Enum_State_s+0x208>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003c34:	4b16      	ldr	r3, [pc, #88]	@ (8003c90 <Enum_State_s+0x208>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <Enum_State_s+0x208>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c40:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <Enum_State_s+0x208>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	721a      	strb	r2, [r3, #8]
    	break;
 8003c46:	e01b      	b.n	8003c80 <Enum_State_s+0x1f8>
    case 7:
    	enum_s[0]='F';
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <Enum_State_s+0x208>)
 8003c4a:	2246      	movs	r2, #70	@ 0x46
 8003c4c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='I';
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <Enum_State_s+0x208>)
 8003c50:	2249      	movs	r2, #73	@ 0x49
 8003c52:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='N';
 8003c54:	4b0e      	ldr	r3, [pc, #56]	@ (8003c90 <Enum_State_s+0x208>)
 8003c56:	224e      	movs	r2, #78	@ 0x4e
 8003c58:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <Enum_State_s+0x208>)
 8003c5c:	2249      	movs	r2, #73	@ 0x49
 8003c5e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='S';
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <Enum_State_s+0x208>)
 8003c62:	2253      	movs	r2, #83	@ 0x53
 8003c64:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='H';
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <Enum_State_s+0x208>)
 8003c68:	2248      	movs	r2, #72	@ 0x48
 8003c6a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003c6c:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <Enum_State_s+0x208>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <Enum_State_s+0x208>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <Enum_State_s+0x208>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	721a      	strb	r2, [r3, #8]
    	break;
 8003c7e:	bf00      	nop



    	 }

    NEXTION_SendString("s10", &enum_s);
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <Enum_State_s+0x208>)
 8003c82:	4804      	ldr	r0, [pc, #16]	@ (8003c94 <Enum_State_s+0x20c>)
 8003c84:	f7ff fc74 	bl	8003570 <NEXTION_SendString>


}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200006e8 	.word	0x200006e8
 8003c90:	20000780 	.word	0x20000780
 8003c94:	08014728 	.word	0x08014728

08003c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c9c:	b672      	cpsid	i
}
 8003c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <Error_Handler+0x8>

08003ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_MspInit+0x4c>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_ADC_MspInit+0x8c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d12f      	bne.n	8003d76 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	4a19      	ldr	r2, [pc, #100]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d26:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_ADC_MspInit+0x90>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d52:	2303      	movs	r3, #3
 8003d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4809      	ldr	r0, [pc, #36]	@ (8003d88 <HAL_ADC_MspInit+0x94>)
 8003d62:	f001 f9d7 	bl	8005114 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2012      	movs	r0, #18
 8003d6c:	f001 f909 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d70:	2012      	movs	r0, #18
 8003d72:	f001 f922 	bl	8004fba <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003d76:	bf00      	nop
 8003d78:	3728      	adds	r7, #40	@ 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40012000 	.word	0x40012000
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020800 	.word	0x40020800

08003d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <HAL_I2C_MspInit+0x84>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12b      	bne.n	8003e06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b18      	ldr	r3, [pc, #96]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbe:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dca:	23c0      	movs	r3, #192	@ 0xc0
 8003dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dce:	2312      	movs	r3, #18
 8003dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	480c      	ldr	r0, [pc, #48]	@ (8003e18 <HAL_I2C_MspInit+0x8c>)
 8003de6:	f001 f995 	bl	8005114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a08      	ldr	r2, [pc, #32]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_I2C_MspInit+0x88>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	@ 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400

08003e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_SPI_MspInit+0x84>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d12b      	bne.n	8003e96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <HAL_SPI_MspInit+0x88>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e76:	23e0      	movs	r3, #224	@ 0xe0
 8003e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e86:	2305      	movs	r3, #5
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4805      	ldr	r0, [pc, #20]	@ (8003ea8 <HAL_SPI_MspInit+0x8c>)
 8003e92:	f001 f93f 	bl	8005114 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003e96:	bf00      	nop
 8003e98:	3728      	adds	r7, #40	@ 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40013000 	.word	0x40013000
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000

08003eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <HAL_TIM_Base_MspInit+0x48>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d115      	bne.n	8003eea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ece:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2100      	movs	r1, #0
 8003ede:	201a      	movs	r0, #26
 8003ee0:	f001 f84f 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ee4:	201a      	movs	r0, #26
 8003ee6:	f001 f868 	bl	8004fba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40014800 	.word	0x40014800
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	@ 0x38
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a62      	ldr	r2, [pc, #392]	@ (80040a4 <HAL_UART_MspInit+0x1a8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12c      	bne.n	8003f78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	4b61      	ldr	r3, [pc, #388]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a60      	ldr	r2, [pc, #384]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	4a59      	ldr	r2, [pc, #356]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4a:	4b57      	ldr	r3, [pc, #348]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f56:	2303      	movs	r3, #3
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f62:	2303      	movs	r3, #3
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f66:	2308      	movs	r3, #8
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	484e      	ldr	r0, [pc, #312]	@ (80040ac <HAL_UART_MspInit+0x1b0>)
 8003f72:	f001 f8cf 	bl	8005114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f76:	e091      	b.n	800409c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80040b0 <HAL_UART_MspInit+0x1b4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d134      	bne.n	8003fec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	4b48      	ldr	r3, [pc, #288]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a47      	ldr	r2, [pc, #284]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b45      	ldr	r3, [pc, #276]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	4b41      	ldr	r3, [pc, #260]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4a40      	ldr	r2, [pc, #256]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fae:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8003fba:	230c      	movs	r3, #12
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fca:	2307      	movs	r3, #7
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4835      	ldr	r0, [pc, #212]	@ (80040ac <HAL_UART_MspInit+0x1b0>)
 8003fd6:	f001 f89d 	bl	8005114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	2026      	movs	r0, #38	@ 0x26
 8003fe0:	f000 ffcf 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fe4:	2026      	movs	r0, #38	@ 0x26
 8003fe6:	f000 ffe8 	bl	8004fba <HAL_NVIC_EnableIRQ>
}
 8003fea:	e057      	b.n	800409c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <HAL_UART_MspInit+0x1b8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d152      	bne.n	800409c <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004004:	6413      	str	r3, [r2, #64]	@ 0x40
 8004006:	4b28      	ldr	r3, [pc, #160]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	4a23      	ldr	r2, [pc, #140]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	6313      	str	r3, [r2, #48]	@ 0x30
 8004022:	4b21      	ldr	r3, [pc, #132]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	6313      	str	r3, [r2, #48]	@ 0x30
 800403e:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <HAL_UART_MspInit+0x1ac>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 800404a:	2320      	movs	r3, #32
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004056:	2303      	movs	r3, #3
 8004058:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800405a:	2307      	movs	r3, #7
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004062:	4619      	mov	r1, r3
 8004064:	4814      	ldr	r0, [pc, #80]	@ (80040b8 <HAL_UART_MspInit+0x1bc>)
 8004066:	f001 f855 	bl	8005114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 800406a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800407c:	2307      	movs	r3, #7
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8004080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004084:	4619      	mov	r1, r3
 8004086:	480d      	ldr	r0, [pc, #52]	@ (80040bc <HAL_UART_MspInit+0x1c0>)
 8004088:	f001 f844 	bl	8005114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800408c:	2200      	movs	r2, #0
 800408e:	2100      	movs	r1, #0
 8004090:	2027      	movs	r0, #39	@ 0x27
 8004092:	f000 ff76 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004096:	2027      	movs	r0, #39	@ 0x27
 8004098:	f000 ff8f 	bl	8004fba <HAL_NVIC_EnableIRQ>
}
 800409c:	bf00      	nop
 800409e:	3738      	adds	r7, #56	@ 0x38
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40004c00 	.word	0x40004c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	40004800 	.word	0x40004800
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020400 	.word	0x40020400

080040c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <NMI_Handler+0x4>

080040c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <HardFault_Handler+0x4>

080040d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <MemManage_Handler+0x4>

080040d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <BusFault_Handler+0x4>

080040e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <UsageFault_Handler+0x4>

080040e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004116:	f000 f989 	bl	800442c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004124:	4802      	ldr	r0, [pc, #8]	@ (8004130 <ADC_IRQHandler+0x10>)
 8004126:	f000 fae7 	bl	80046f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000031c 	.word	0x2000031c

08004134 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004138:	4802      	ldr	r0, [pc, #8]	@ (8004144 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800413a:	f004 f801 	bl	8008140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000410 	.word	0x20000410

08004148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800414c:	4802      	ldr	r0, [pc, #8]	@ (8004158 <USART2_IRQHandler+0x10>)
 800414e:	f004 faeb 	bl	8008728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000049c 	.word	0x2000049c

0800415c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004160:	4802      	ldr	r0, [pc, #8]	@ (800416c <USART3_IRQHandler+0x10>)
 8004162:	f004 fae1 	bl	8008728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200004e0 	.word	0x200004e0

08004170 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004174:	4802      	ldr	r0, [pc, #8]	@ (8004180 <OTG_FS_IRQHandler+0x10>)
 8004176:	f001 fc16 	bl	80059a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001e0c 	.word	0x20001e0c

08004184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return 1;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_kill>:

int _kill(int pid, int sig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800419e:	f00b fb8b 	bl	800f8b8 <__errno>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2216      	movs	r2, #22
 80041a6:	601a      	str	r2, [r3, #0]
  return -1;
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_exit>:

void _exit (int status)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041bc:	f04f 31ff 	mov.w	r1, #4294967295
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ffe7 	bl	8004194 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <_exit+0x12>

080041ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e00a      	b.n	80041f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041dc:	f3af 8000 	nop.w
 80041e0:	4601      	mov	r1, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	60ba      	str	r2, [r7, #8]
 80041e8:	b2ca      	uxtb	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	dbf0      	blt.n	80041dc <_read+0x12>
  }

  return len;
 80041fa:	687b      	ldr	r3, [r7, #4]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e009      	b.n	800422a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	60ba      	str	r2, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3301      	adds	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	dbf1      	blt.n	8004216 <_write+0x12>
  }
  return len;
 8004232:	687b      	ldr	r3, [r7, #4]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_close>:

int _close(int file)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004264:	605a      	str	r2, [r3, #4]
  return 0;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_isatty>:

int _isatty(int file)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800427c:	2301      	movs	r3, #1
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042ac:	4a14      	ldr	r2, [pc, #80]	@ (8004300 <_sbrk+0x5c>)
 80042ae:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <_sbrk+0x60>)
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <_sbrk+0x64>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <_sbrk+0x64>)
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <_sbrk+0x68>)
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <_sbrk+0x64>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d207      	bcs.n	80042e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042d4:	f00b faf0 	bl	800f8b8 <__errno>
 80042d8:	4603      	mov	r3, r0
 80042da:	220c      	movs	r2, #12
 80042dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	e009      	b.n	80042f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <_sbrk+0x64>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ea:	4b07      	ldr	r3, [pc, #28]	@ (8004308 <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <_sbrk+0x64>)
 80042f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20020000 	.word	0x20020000
 8004304:	00000400 	.word	0x00000400
 8004308:	20000910 	.word	0x20000910
 800430c:	20002688 	.word	0x20002688

08004310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <SystemInit+0x20>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	4a05      	ldr	r2, [pc, #20]	@ (8004330 <SystemInit+0x20>)
 800431c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800436c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004338:	480d      	ldr	r0, [pc, #52]	@ (8004370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800433a:	490e      	ldr	r1, [pc, #56]	@ (8004374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800433c:	4a0e      	ldr	r2, [pc, #56]	@ (8004378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800433e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004340:	e002      	b.n	8004348 <LoopCopyDataInit>

08004342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004346:	3304      	adds	r3, #4

08004348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800434a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800434c:	d3f9      	bcc.n	8004342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434e:	4a0b      	ldr	r2, [pc, #44]	@ (800437c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004350:	4c0b      	ldr	r4, [pc, #44]	@ (8004380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004354:	e001      	b.n	800435a <LoopFillZerobss>

08004356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004358:	3204      	adds	r2, #4

0800435a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800435a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800435c:	d3fb      	bcc.n	8004356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800435e:	f7ff ffd7 	bl	8004310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004362:	f00b faaf 	bl	800f8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004366:	f7fd fc6b 	bl	8001c40 <main>
  bx  lr    
 800436a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800436c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004374:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8004378:	08014e40 	.word	0x08014e40
  ldr r2, =_sbss
 800437c:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8004380:	20002684 	.word	0x20002684

08004384 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004384:	e7fe      	b.n	8004384 <CAN1_RX0_IRQHandler>
	...

08004388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800438c:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0d      	ldr	r2, [pc, #52]	@ (80043c8 <HAL_Init+0x40>)
 8004392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <HAL_Init+0x40>)
 800439e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <HAL_Init+0x40>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b0:	2003      	movs	r0, #3
 80043b2:	f000 fddb 	bl	8004f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b6:	200f      	movs	r0, #15
 80043b8:	f000 f808 	bl	80043cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043bc:	f7ff fc72 	bl	8003ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00

080043cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_InitTick+0x54>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_InitTick+0x58>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fdf3 	bl	8004fd6 <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00e      	b.n	8004418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d80a      	bhi.n	8004416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004400:	2200      	movs	r2, #0
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	f000 fdbb 	bl	8004f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800440c:	4a06      	ldr	r2, [pc, #24]	@ (8004428 <HAL_InitTick+0x5c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000004 	.word	0x20000004
 8004424:	2000000c 	.word	0x2000000c
 8004428:	20000008 	.word	0x20000008

0800442c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_IncTick+0x20>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_IncTick+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_IncTick+0x24>)
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c
 8004450:	20000914 	.word	0x20000914

08004454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return uwTick;
 8004458:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <HAL_GetTick+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000914 	.word	0x20000914

0800446c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff ffee 	bl	8004454 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d005      	beq.n	8004492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_Delay+0x44>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004492:	bf00      	nop
 8004494:	f7ff ffde 	bl	8004454 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f7      	bhi.n	8004494 <HAL_Delay+0x28>
  {
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000000c 	.word	0x2000000c

080044b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e033      	b.n	8004532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fc0e 	bl	8003cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fb5a 	bl	8004bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40
 8004522:	e001      	b.n	8004528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_ADC_Start_IT+0x1a>
 8004552:	2302      	movs	r3, #2
 8004554:	e0bd      	b.n	80046d2 <HAL_ADC_Start_IT+0x196>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d018      	beq.n	800459e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800457c:	4b58      	ldr	r3, [pc, #352]	@ (80046e0 <HAL_ADC_Start_IT+0x1a4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a58      	ldr	r2, [pc, #352]	@ (80046e4 <HAL_ADC_Start_IT+0x1a8>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0c9a      	lsrs	r2, r3, #18
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004590:	e002      	b.n	8004598 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f9      	bne.n	8004592 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 8085 	bne.w	80046b8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ec:	d106      	bne.n	80045fc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f023 0206 	bic.w	r2, r3, #6
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80045fa:	e002      	b.n	8004602 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <HAL_ADC_Start_IT+0x1ac>)
 800460c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004616:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004626:	f043 0320 	orr.w	r3, r3, #32
 800462a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2b00      	cmp	r3, #0
 8004636:	d12a      	bne.n	800468e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2b      	ldr	r2, [pc, #172]	@ (80046ec <HAL_ADC_Start_IT+0x1b0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d015      	beq.n	800466e <HAL_ADC_Start_IT+0x132>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2a      	ldr	r2, [pc, #168]	@ (80046f0 <HAL_ADC_Start_IT+0x1b4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d105      	bne.n	8004658 <HAL_ADC_Start_IT+0x11c>
 800464c:	4b26      	ldr	r3, [pc, #152]	@ (80046e8 <HAL_ADC_Start_IT+0x1ac>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a25      	ldr	r2, [pc, #148]	@ (80046f4 <HAL_ADC_Start_IT+0x1b8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d136      	bne.n	80046d0 <HAL_ADC_Start_IT+0x194>
 8004662:	4b21      	ldr	r3, [pc, #132]	@ (80046e8 <HAL_ADC_Start_IT+0x1ac>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d130      	bne.n	80046d0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d129      	bne.n	80046d0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	e020      	b.n	80046d0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <HAL_ADC_Start_IT+0x1b0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d11b      	bne.n	80046d0 <HAL_ADC_Start_IT+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d114      	bne.n	80046d0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	e00b      	b.n	80046d0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0210 	orr.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000004 	.word	0x20000004
 80046e4:	431bde83 	.word	0x431bde83
 80046e8:	40012300 	.word	0x40012300
 80046ec:	40012000 	.word	0x40012000
 80046f0:	40012100 	.word	0x40012100
 80046f4:	40012200 	.word	0x40012200

080046f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d049      	beq.n	80047c2 <HAL_ADC_IRQHandler+0xca>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d046      	beq.n	80047c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12b      	bne.n	80047b2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	d127      	bne.n	80047b2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800477a:	2b00      	cmp	r3, #0
 800477c:	d119      	bne.n	80047b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0220 	bic.w	r2, r2, #32
 800478c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd fa24 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0212 	mvn.w	r2, #18
 80047c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d057      	beq.n	8004888 <HAL_ADC_IRQHandler+0x190>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d054      	beq.n	8004888 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d139      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800481c:	2b00      	cmp	r3, #0
 800481e:	d12b      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800482a:	2b00      	cmp	r3, #0
 800482c:	d124      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11d      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004840:	2b00      	cmp	r3, #0
 8004842:	d119      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004852:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	f043 0201 	orr.w	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa9d 	bl	8004db8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 020c 	mvn.w	r2, #12
 8004886:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d017      	beq.n	80048ce <HAL_ADC_IRQHandler+0x1d6>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d014      	beq.n	80048ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10d      	bne.n	80048ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f837 	bl	8004932 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0201 	mvn.w	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d015      	beq.n	8004910 <HAL_ADC_IRQHandler+0x218>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0220 	mvn.w	r2, #32
 80048fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f820 	bl	8004946 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0220 	mvn.w	r2, #32
 800490e:	601a      	str	r2, [r3, #0]
  }
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x1c>
 8004974:	2302      	movs	r3, #2
 8004976:	e113      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x244>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b09      	cmp	r3, #9
 8004986:	d925      	bls.n	80049d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	3b1e      	subs	r3, #30
 800499e:	2207      	movs	r2, #7
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43da      	mvns	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	400a      	ands	r2, r1
 80049ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68d9      	ldr	r1, [r3, #12]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4403      	add	r3, r0
 80049c6:	3b1e      	subs	r3, #30
 80049c8:	409a      	lsls	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e022      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6919      	ldr	r1, [r3, #16]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	2207      	movs	r2, #7
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43da      	mvns	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	400a      	ands	r2, r1
 80049f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4403      	add	r3, r0
 8004a10:	409a      	lsls	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d824      	bhi.n	8004a6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	3b05      	subs	r3, #5
 8004a34:	221f      	movs	r2, #31
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	400a      	ands	r2, r1
 8004a42:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4618      	mov	r0, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3b05      	subs	r3, #5
 8004a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a6a:	e04c      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	d824      	bhi.n	8004abe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	3b23      	subs	r3, #35	@ 0x23
 8004a86:	221f      	movs	r2, #31
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	400a      	ands	r2, r1
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	3b23      	subs	r3, #35	@ 0x23
 8004ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8004abc:	e023      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	3b41      	subs	r3, #65	@ 0x41
 8004ad0:	221f      	movs	r2, #31
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	400a      	ands	r2, r1
 8004ade:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4618      	mov	r0, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	3b41      	subs	r3, #65	@ 0x41
 8004afa:	fa00 f203 	lsl.w	r2, r0, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b06:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <HAL_ADC_ConfigChannel+0x250>)
 8004b08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a28      	ldr	r2, [pc, #160]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x254>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10f      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x1d8>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b12      	cmp	r3, #18
 8004b1a:	d10b      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x254>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12b      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x23a>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x258>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <HAL_ADC_ConfigChannel+0x1f4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b11      	cmp	r3, #17
 8004b4e:	d122      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a11      	ldr	r2, [pc, #68]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x258>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d111      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b72:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x25c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <HAL_ADC_ConfigChannel+0x260>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	0c9a      	lsrs	r2, r3, #18
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b88:	e002      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f9      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012300 	.word	0x40012300
 8004bb0:	40012000 	.word	0x40012000
 8004bb4:	10000012 	.word	0x10000012
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	431bde83 	.word	0x431bde83

08004bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bc8:	4b79      	ldr	r3, [pc, #484]	@ (8004db0 <ADC_Init+0x1f0>)
 8004bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6859      	ldr	r1, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	4a58      	ldr	r2, [pc, #352]	@ (8004db4 <ADC_Init+0x1f4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6899      	ldr	r1, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	e00f      	b.n	8004cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0202 	bic.w	r2, r2, #2
 8004ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7e1b      	ldrb	r3, [r3, #24]
 8004cd8:	005a      	lsls	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	3b01      	subs	r3, #1
 8004d18:	035a      	lsls	r2, r3, #13
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	e007      	b.n	8004d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	051a      	lsls	r2, r3, #20
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d76:	025a      	lsls	r2, r3, #9
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	029a      	lsls	r2, r3, #10
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40012300 	.word	0x40012300
 8004db4:	0f000001 	.word	0x0f000001

08004db8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e10 <__NVIC_SetPriorityGrouping+0x44>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dfe:	4a04      	ldr	r2, [pc, #16]	@ (8004e10 <__NVIC_SetPriorityGrouping+0x44>)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	60d3      	str	r3, [r2, #12]
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	e000ed00 	.word	0xe000ed00

08004e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e18:	4b04      	ldr	r3, [pc, #16]	@ (8004e2c <__NVIC_GetPriorityGrouping+0x18>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	f003 0307 	and.w	r3, r3, #7
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db0b      	blt.n	8004e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 021f 	and.w	r2, r3, #31
 8004e48:	4907      	ldr	r1, [pc, #28]	@ (8004e68 <__NVIC_EnableIRQ+0x38>)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2001      	movs	r0, #1
 8004e52:	fa00 f202 	lsl.w	r2, r0, r2
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000e100 	.word	0xe000e100

08004e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	db0a      	blt.n	8004e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	490c      	ldr	r1, [pc, #48]	@ (8004eb8 <__NVIC_SetPriority+0x4c>)
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e94:	e00a      	b.n	8004eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4908      	ldr	r1, [pc, #32]	@ (8004ebc <__NVIC_SetPriority+0x50>)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	3b04      	subs	r3, #4
 8004ea4:	0112      	lsls	r2, r2, #4
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	761a      	strb	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000e100 	.word	0xe000e100
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	@ 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f1c3 0307 	rsb	r3, r3, #7
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf28      	it	cs
 8004ede:	2304      	movcs	r3, #4
 8004ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d902      	bls.n	8004ef0 <NVIC_EncodePriority+0x30>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3b03      	subs	r3, #3
 8004eee:	e000      	b.n	8004ef2 <NVIC_EncodePriority+0x32>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	401a      	ands	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f08:	f04f 31ff 	mov.w	r1, #4294967295
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	43d9      	mvns	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f18:	4313      	orrs	r3, r2
         );
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f38:	d301      	bcc.n	8004f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e00f      	b.n	8004f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f68 <SysTick_Config+0x40>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f46:	210f      	movs	r1, #15
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	f7ff ff8e 	bl	8004e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <SysTick_Config+0x40>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f56:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <SysTick_Config+0x40>)
 8004f58:	2207      	movs	r2, #7
 8004f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	e000e010 	.word	0xe000e010

08004f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff29 	bl	8004dcc <__NVIC_SetPriorityGrouping>
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	4603      	mov	r3, r0
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f94:	f7ff ff3e 	bl	8004e14 <__NVIC_GetPriorityGrouping>
 8004f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f7ff ff8e 	bl	8004ec0 <NVIC_EncodePriority>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff5d 	bl	8004e6c <__NVIC_SetPriority>
}
 8004fb2:	bf00      	nop
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff31 	bl	8004e30 <__NVIC_EnableIRQ>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff ffa2 	bl	8004f28 <SysTick_Config>
 8004fe4:	4603      	mov	r3, r0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ffc:	f7ff fa2a 	bl	8004454 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d008      	beq.n	8005020 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2280      	movs	r2, #128	@ 0x80
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e052      	b.n	80050c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0216 	bic.w	r2, r2, #22
 800502e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <HAL_DMA_Abort+0x62>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0208 	bic.w	r2, r2, #8
 800505e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005070:	e013      	b.n	800509a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005072:	f7ff f9ef 	bl	8004454 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b05      	cmp	r3, #5
 800507e:	d90c      	bls.n	800509a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e015      	b.n	80050c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e4      	bne.n	8005072 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	223f      	movs	r2, #63	@ 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d004      	beq.n	80050ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2280      	movs	r2, #128	@ 0x80
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e00c      	b.n	8005106 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2205      	movs	r2, #5
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	@ 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e165      	b.n	80053fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 8154 	bne.w	80053f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d005      	beq.n	8005166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005162:	2b02      	cmp	r3, #2
 8005164:	d130      	bne.n	80051c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2203      	movs	r2, #3
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800519c:	2201      	movs	r2, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 0201 	and.w	r2, r3, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d017      	beq.n	8005204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d123      	bne.n	8005258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	08da      	lsrs	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3208      	adds	r2, #8
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	220f      	movs	r2, #15
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	08da      	lsrs	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3208      	adds	r2, #8
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0203 	and.w	r2, r3, #3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80ae 	beq.w	80053f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	4b5d      	ldr	r3, [pc, #372]	@ (8005414 <HAL_GPIO_Init+0x300>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005414 <HAL_GPIO_Init+0x300>)
 80052a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80052aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005414 <HAL_GPIO_Init+0x300>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b6:	4a58      	ldr	r2, [pc, #352]	@ (8005418 <HAL_GPIO_Init+0x304>)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	3302      	adds	r3, #2
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	220f      	movs	r2, #15
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4f      	ldr	r2, [pc, #316]	@ (800541c <HAL_GPIO_Init+0x308>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d025      	beq.n	800532e <HAL_GPIO_Init+0x21a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005420 <HAL_GPIO_Init+0x30c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01f      	beq.n	800532a <HAL_GPIO_Init+0x216>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005424 <HAL_GPIO_Init+0x310>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d019      	beq.n	8005326 <HAL_GPIO_Init+0x212>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a4c      	ldr	r2, [pc, #304]	@ (8005428 <HAL_GPIO_Init+0x314>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <HAL_GPIO_Init+0x20e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a4b      	ldr	r2, [pc, #300]	@ (800542c <HAL_GPIO_Init+0x318>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00d      	beq.n	800531e <HAL_GPIO_Init+0x20a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a4a      	ldr	r2, [pc, #296]	@ (8005430 <HAL_GPIO_Init+0x31c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <HAL_GPIO_Init+0x206>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a49      	ldr	r2, [pc, #292]	@ (8005434 <HAL_GPIO_Init+0x320>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_GPIO_Init+0x202>
 8005312:	2306      	movs	r3, #6
 8005314:	e00c      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 8005316:	2307      	movs	r3, #7
 8005318:	e00a      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 800531a:	2305      	movs	r3, #5
 800531c:	e008      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 800531e:	2304      	movs	r3, #4
 8005320:	e006      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 8005322:	2303      	movs	r3, #3
 8005324:	e004      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 8005326:	2302      	movs	r3, #2
 8005328:	e002      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_GPIO_Init+0x21c>
 800532e:	2300      	movs	r3, #0
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	f002 0203 	and.w	r2, r2, #3
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	4093      	lsls	r3, r2
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005340:	4935      	ldr	r1, [pc, #212]	@ (8005418 <HAL_GPIO_Init+0x304>)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	3302      	adds	r3, #2
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800534e:	4b3a      	ldr	r3, [pc, #232]	@ (8005438 <HAL_GPIO_Init+0x324>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005372:	4a31      	ldr	r2, [pc, #196]	@ (8005438 <HAL_GPIO_Init+0x324>)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005378:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <HAL_GPIO_Init+0x324>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800539c:	4a26      	ldr	r2, [pc, #152]	@ (8005438 <HAL_GPIO_Init+0x324>)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053a2:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <HAL_GPIO_Init+0x324>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <HAL_GPIO_Init+0x324>)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <HAL_GPIO_Init+0x324>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053f0:	4a11      	ldr	r2, [pc, #68]	@ (8005438 <HAL_GPIO_Init+0x324>)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	3301      	adds	r3, #1
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	f67f ae96 	bls.w	8005130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3724      	adds	r7, #36	@ 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800
 8005418:	40013800 	.word	0x40013800
 800541c:	40020000 	.word	0x40020000
 8005420:	40020400 	.word	0x40020400
 8005424:	40020800 	.word	0x40020800
 8005428:	40020c00 	.word	0x40020c00
 800542c:	40021000 	.word	0x40021000
 8005430:	40021400 	.word	0x40021400
 8005434:	40021800 	.word	0x40021800
 8005438:	40013c00 	.word	0x40013c00

0800543c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
 8005448:	4613      	mov	r3, r2
 800544a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800544c:	787b      	ldrb	r3, [r7, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005452:	887a      	ldrh	r2, [r7, #2]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005458:	e003      	b.n	8005462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	041a      	lsls	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	619a      	str	r2, [r3, #24]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e12b      	b.n	80056da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe fc78 	bl	8003d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2224      	movs	r2, #36	@ 0x24
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054d4:	f001 fccc 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 80054d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4a81      	ldr	r2, [pc, #516]	@ (80056e4 <HAL_I2C_Init+0x274>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d807      	bhi.n	80054f4 <HAL_I2C_Init+0x84>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a80      	ldr	r2, [pc, #512]	@ (80056e8 <HAL_I2C_Init+0x278>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	bf94      	ite	ls
 80054ec:	2301      	movls	r3, #1
 80054ee:	2300      	movhi	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e006      	b.n	8005502 <HAL_I2C_Init+0x92>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a7d      	ldr	r2, [pc, #500]	@ (80056ec <HAL_I2C_Init+0x27c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	bf94      	ite	ls
 80054fc:	2301      	movls	r3, #1
 80054fe:	2300      	movhi	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0e7      	b.n	80056da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a78      	ldr	r2, [pc, #480]	@ (80056f0 <HAL_I2C_Init+0x280>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0c9b      	lsrs	r3, r3, #18
 8005514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a6a      	ldr	r2, [pc, #424]	@ (80056e4 <HAL_I2C_Init+0x274>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d802      	bhi.n	8005544 <HAL_I2C_Init+0xd4>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3301      	adds	r3, #1
 8005542:	e009      	b.n	8005558 <HAL_I2C_Init+0xe8>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800554a:	fb02 f303 	mul.w	r3, r2, r3
 800554e:	4a69      	ldr	r2, [pc, #420]	@ (80056f4 <HAL_I2C_Init+0x284>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	3301      	adds	r3, #1
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	430b      	orrs	r3, r1
 800555e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800556a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	495c      	ldr	r1, [pc, #368]	@ (80056e4 <HAL_I2C_Init+0x274>)
 8005574:	428b      	cmp	r3, r1
 8005576:	d819      	bhi.n	80055ac <HAL_I2C_Init+0x13c>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1e59      	subs	r1, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	fbb1 f3f3 	udiv	r3, r1, r3
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800558c:	400b      	ands	r3, r1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_I2C_Init+0x138>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1e59      	subs	r1, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a0:	3301      	adds	r3, #1
 80055a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a6:	e051      	b.n	800564c <HAL_I2C_Init+0x1dc>
 80055a8:	2304      	movs	r3, #4
 80055aa:	e04f      	b.n	800564c <HAL_I2C_Init+0x1dc>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d111      	bne.n	80055d8 <HAL_I2C_Init+0x168>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	440b      	add	r3, r1
 80055c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e012      	b.n	80055fe <HAL_I2C_Init+0x18e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1e58      	subs	r0, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	0099      	lsls	r1, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ee:	3301      	adds	r3, #1
 80055f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Init+0x196>
 8005602:	2301      	movs	r3, #1
 8005604:	e022      	b.n	800564c <HAL_I2C_Init+0x1dc>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10e      	bne.n	800562c <HAL_I2C_Init+0x1bc>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1e58      	subs	r0, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	440b      	add	r3, r1
 800561c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562a:	e00f      	b.n	800564c <HAL_I2C_Init+0x1dc>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1e58      	subs	r0, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	0099      	lsls	r1, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005642:	3301      	adds	r3, #1
 8005644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	6809      	ldr	r1, [r1, #0]
 8005650:	4313      	orrs	r3, r2
 8005652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800567a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6911      	ldr	r1, [r2, #16]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68d2      	ldr	r2, [r2, #12]
 8005686:	4311      	orrs	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	430b      	orrs	r3, r1
 800568e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	000186a0 	.word	0x000186a0
 80056e8:	001e847f 	.word	0x001e847f
 80056ec:	003d08ff 	.word	0x003d08ff
 80056f0:	431bde83 	.word	0x431bde83
 80056f4:	10624dd3 	.word	0x10624dd3

080056f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fa:	b08f      	sub	sp, #60	@ 0x3c
 80056fc:	af0a      	add	r7, sp, #40	@ 0x28
 80056fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e116      	b.n	8005938 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f007 fe7d 	bl	800d424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2203      	movs	r2, #3
 800572e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f004 f86a 	bl	8009822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	687e      	ldr	r6, [r7, #4]
 8005756:	466d      	mov	r5, sp
 8005758:	f106 0410 	add.w	r4, r6, #16
 800575c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005764:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005768:	e885 0003 	stmia.w	r5, {r0, r1}
 800576c:	1d33      	adds	r3, r6, #4
 800576e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005770:	6838      	ldr	r0, [r7, #0]
 8005772:	f003 ff41 	bl	80095f8 <USB_CoreInit>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0d7      	b.n	8005938 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f004 f858 	bl	8009844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	e04a      	b.n	8005830 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800579a:	7bfa      	ldrb	r2, [r7, #15]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	333d      	adds	r3, #61	@ 0x3d
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057ae:	7bfa      	ldrb	r2, [r7, #15]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	333c      	adds	r3, #60	@ 0x3c
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	b298      	uxth	r0, r3
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3344      	adds	r3, #68	@ 0x44
 80057d6:	4602      	mov	r2, r0
 80057d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057da:	7bfa      	ldrb	r2, [r7, #15]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3340      	adds	r3, #64	@ 0x40
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3348      	adds	r3, #72	@ 0x48
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	334c      	adds	r3, #76	@ 0x4c
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3354      	adds	r3, #84	@ 0x54
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	3301      	adds	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d3af      	bcc.n	800579a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
 800583e:	e044      	b.n	80058ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005840:	7bfa      	ldrb	r2, [r7, #15]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005856:	7bfa      	ldrb	r2, [r7, #15]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800586c:	7bfa      	ldrb	r2, [r7, #15]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058ae:	7bfa      	ldrb	r2, [r7, #15]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	3301      	adds	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3b5      	bcc.n	8005840 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	687e      	ldr	r6, [r7, #4]
 80058dc:	466d      	mov	r5, sp
 80058de:	f106 0410 	add.w	r4, r6, #16
 80058e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80058f2:	1d33      	adds	r3, r6, #4
 80058f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f6:	6838      	ldr	r0, [r7, #0]
 80058f8:	f003 fff0 	bl	80098dc <USB_DevInit>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e014      	b.n	8005938 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f98c 	bl	8006c44 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 f932 	bl	800ab9a <USB_DevDisconnect>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005940 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_PCD_Start+0x1c>
 8005958:	2302      	movs	r3, #2
 800595a:	e020      	b.n	800599e <HAL_PCD_Start+0x5e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	2b01      	cmp	r3, #1
 800596a:	d109      	bne.n	8005980 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005970:	2b01      	cmp	r3, #1
 8005972:	d005      	beq.n	8005980 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f003 ff3b 	bl	8009800 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f005 f8e2 	bl	800ab58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059a6:	b590      	push	{r4, r7, lr}
 80059a8:	b08d      	sub	sp, #52	@ 0x34
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f005 f9a0 	bl	800ad02 <USB_GetMode>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 84b7 	bne.w	8006338 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f005 f904 	bl	800abdc <USB_ReadInterrupts>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 84ad 	beq.w	8006336 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f005 f8f1 	bl	800abdc <USB_ReadInterrupts>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d107      	bne.n	8005a14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f002 0202 	and.w	r2, r2, #2
 8005a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f005 f8df 	bl	800abdc <USB_ReadInterrupts>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d161      	bne.n	8005aec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0210 	bic.w	r2, r2, #16
 8005a36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	3304      	adds	r3, #4
 8005a56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	0c5b      	lsrs	r3, r3, #17
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d124      	bne.n	8005aae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d035      	beq.n	8005adc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	6a38      	ldr	r0, [r7, #32]
 8005a84:	f004 ff16 	bl	800a8b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a94:	441a      	add	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aa6:	441a      	add	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
 8005aac:	e016      	b.n	8005adc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	0c5b      	lsrs	r3, r3, #17
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d110      	bne.n	8005adc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6a38      	ldr	r0, [r7, #32]
 8005ac6:	f004 fef5 	bl	800a8b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6a1a      	ldr	r2, [r3, #32]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad6:	441a      	add	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0210 	orr.w	r2, r2, #16
 8005aea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f005 f873 	bl	800abdc <USB_ReadInterrupts>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005afc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b00:	f040 80a7 	bne.w	8005c52 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f005 f878 	bl	800ac02 <USB_ReadDevAllOutEpInterrupt>
 8005b12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005b14:	e099      	b.n	8005c4a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 808e 	beq.w	8005c3e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f005 f89c 	bl	800ac6a <USB_ReadDevOutEPInterrupt>
 8005b32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fef0 	bl	8006938 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2308      	movs	r3, #8
 8005b72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 ffc6 	bl	8006b08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b92:	461a      	mov	r2, r3
 8005b94:	2310      	movs	r3, #16
 8005b96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d030      	beq.n	8005c04 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b80      	cmp	r3, #128	@ 0x80
 8005bac:	d109      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bc0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d108      	bne.n	8005bf2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2200      	movs	r2, #0
 8005be4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f007 fd35 	bl	800d65c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2302      	movs	r3, #2
 8005c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c36:	461a      	mov	r2, r3
 8005c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	3301      	adds	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f af62 	bne.w	8005b16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f004 ffc0 	bl	800abdc <USB_ReadInterrupts>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c66:	f040 80db 	bne.w	8005e20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f004 ffe1 	bl	800ac36 <USB_ReadDevAllInEpInterrupt>
 8005c74:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005c7a:	e0cd      	b.n	8005e18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80c2 	beq.w	8005e0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f005 f807 	bl	800aca6 <USB_ReadDevInEPInterrupt>
 8005c98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d057      	beq.n	8005d54 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	69f9      	ldr	r1, [r7, #28]
 8005cc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d132      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	334c      	adds	r3, #76	@ 0x4c
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4403      	add	r3, r0
 8005d02:	3348      	adds	r3, #72	@ 0x48
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4419      	add	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4403      	add	r3, r0
 8005d16:	334c      	adds	r3, #76	@ 0x4c
 8005d18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d113      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x3a2>
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3354      	adds	r3, #84	@ 0x54
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d108      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005d40:	461a      	mov	r2, r3
 8005d42:	2101      	movs	r1, #1
 8005d44:	f005 f80e 	bl	800ad64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f007 fbff 	bl	800d552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d86:	461a      	mov	r2, r3
 8005d88:	2310      	movs	r3, #16
 8005d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da2:	461a      	mov	r2, r3
 8005da4:	2340      	movs	r3, #64	@ 0x40
 8005da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d023      	beq.n	8005dfa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005db4:	6a38      	ldr	r0, [r7, #32]
 8005db6:	f003 feef 	bl	8009b98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	3338      	adds	r3, #56	@ 0x38
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d108      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f007 fc4c 	bl	800d680 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	2302      	movs	r3, #2
 8005df8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fd08 	bl	800681c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	3301      	adds	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f47f af2e 	bne.w	8005c7c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f004 fed9 	bl	800abdc <USB_ReadInterrupts>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e34:	d122      	bne.n	8005e7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d108      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f007 fdc6 	bl	800d9f0 <HAL_PCDEx_LPM_Callback>
 8005e64:	e002      	b.n	8005e6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f007 fbea 	bl	800d640 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f004 feab 	bl	800abdc <USB_ReadInterrupts>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e90:	d112      	bne.n	8005eb8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d102      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f007 fba6 	bl	800d5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005eb6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f004 fe8d 	bl	800abdc <USB_ReadInterrupts>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ecc:	d121      	bne.n	8005f12 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005edc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d111      	bne.n	8005f0c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f02:	2101      	movs	r1, #1
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f007 fd73 	bl	800d9f0 <HAL_PCDEx_LPM_Callback>
 8005f0a:	e002      	b.n	8005f12 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f007 fb71 	bl	800d5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f004 fe60 	bl	800abdc <USB_ReadInterrupts>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f26:	f040 80b7 	bne.w	8006098 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2110      	movs	r1, #16
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 fe27 	bl	8009b98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f4e:	e046      	b.n	8005fde <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fda:	3301      	adds	r3, #1
 8005fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d3b3      	bcc.n	8005f50 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005ffa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	2b00      	cmp	r3, #0
 8006002:	d016      	beq.n	8006032 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006014:	f043 030b 	orr.w	r3, r3, #11
 8006018:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800602a:	f043 030b 	orr.w	r3, r3, #11
 800602e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006030:	e015      	b.n	800605e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006040:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006044:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006048:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006058:	f043 030b 	orr.w	r3, r3, #11
 800605c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800606c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006070:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006082:	461a      	mov	r2, r3
 8006084:	f004 fe6e 	bl	800ad64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f004 fd9d 	bl	800abdc <USB_ReadInterrupts>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ac:	d124      	bne.n	80060f8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f004 fe33 	bl	800ad1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 fde8 	bl	8009c92 <USB_GetDevSpeed>
 80060c2:	4603      	mov	r3, r0
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681c      	ldr	r4, [r3, #0]
 80060ce:	f000 fec3 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 80060d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	4620      	mov	r0, r4
 80060de:	f003 faed 	bl	80096bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f007 fa5d 	bl	800d5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80060f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f004 fd6d 	bl	800abdc <USB_ReadInterrupts>
 8006102:	4603      	mov	r3, r0
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10a      	bne.n	8006122 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f007 fa3a 	bl	800d586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f002 0208 	and.w	r2, r2, #8
 8006120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f004 fd58 	bl	800abdc <USB_ReadInterrupts>
 800612c:	4603      	mov	r3, r0
 800612e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006132:	2b80      	cmp	r3, #128	@ 0x80
 8006134:	d122      	bne.n	800617c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006142:	2301      	movs	r3, #1
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
 8006146:	e014      	b.n	8006172 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d105      	bne.n	800616c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb27 	bl	80067ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	3301      	adds	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	@ 0x24
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006178:	429a      	cmp	r2, r3
 800617a:	d3e5      	bcc.n	8006148 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f004 fd2b 	bl	800abdc <USB_ReadInterrupts>
 8006186:	4603      	mov	r3, r0
 8006188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800618c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006190:	d13b      	bne.n	800620a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006192:	2301      	movs	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
 8006196:	e02b      	b.n	80061f0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ac:	4613      	mov	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3340      	adds	r3, #64	@ 0x40
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d115      	bne.n	80061ea <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80061be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da12      	bge.n	80061ea <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	333f      	adds	r3, #63	@ 0x3f
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fae8 	bl	80067ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3ce      	bcc.n	8006198 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f004 fce4 	bl	800abdc <USB_ReadInterrupts>
 8006214:	4603      	mov	r3, r0
 8006216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800621a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800621e:	d155      	bne.n	80062cc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006220:	2301      	movs	r3, #1
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
 8006224:	e045      	b.n	80062b2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d12e      	bne.n	80062ac <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800624e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006250:	2b00      	cmp	r3, #0
 8006252:	da2b      	bge.n	80062ac <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8006260:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006264:	429a      	cmp	r2, r3
 8006266:	d121      	bne.n	80062ac <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800627a:	2201      	movs	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062a8:	6053      	str	r3, [r2, #4]
            break;
 80062aa:	e007      	b.n	80062bc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	3301      	adds	r3, #1
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d3b4      	bcc.n	8006226 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80062ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f004 fc83 	bl	800abdc <USB_ReadInterrupts>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d10a      	bne.n	80062f8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f007 f9de 	bl	800d6a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80062f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f004 fc6d 	bl	800abdc <USB_ReadInterrupts>
 8006302:	4603      	mov	r3, r0
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d115      	bne.n	8006338 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f007 f9ce 	bl	800d6c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	e000      	b.n	8006338 <HAL_PCD_IRQHandler+0x992>
      return;
 8006336:	bf00      	nop
    }
  }
}
 8006338:	3734      	adds	r7, #52	@ 0x34
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}

0800633e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_PCD_SetAddress+0x1a>
 8006354:	2302      	movs	r3, #2
 8006356:	e013      	b.n	8006380 <HAL_PCD_SetAddress+0x42>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f004 fbcb 	bl	800ab0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	70fb      	strb	r3, [r7, #3]
 800639a:	460b      	mov	r3, r1
 800639c:	803b      	strh	r3, [r7, #0]
 800639e:	4613      	mov	r3, r2
 80063a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da0f      	bge.n	80063ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	3338      	adds	r3, #56	@ 0x38
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	3304      	adds	r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	705a      	strb	r2, [r3, #1]
 80063cc:	e00f      	b.n	80063ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	3304      	adds	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80063fa:	883a      	ldrh	r2, [r7, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	78ba      	ldrb	r2, [r7, #2]
 8006404:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006418:	78bb      	ldrb	r3, [r7, #2]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d102      	bne.n	8006424 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_PCD_EP_Open+0xaa>
 800642e:	2302      	movs	r3, #2
 8006430:	e00e      	b.n	8006450 <HAL_PCD_EP_Open+0xc8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	4618      	mov	r0, r3
 8006442:	f003 fc4b 	bl	8009cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800644e:	7afb      	ldrb	r3, [r7, #11]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006468:	2b00      	cmp	r3, #0
 800646a:	da0f      	bge.n	800648c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	f003 020f 	and.w	r2, r3, #15
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	3338      	adds	r3, #56	@ 0x38
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	705a      	strb	r2, [r3, #1]
 800648a:	e00f      	b.n	80064ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	4613      	mov	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_PCD_EP_Close+0x6e>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e00e      	b.n	80064e4 <HAL_PCD_EP_Close+0x8c>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68f9      	ldr	r1, [r7, #12]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f003 fc89 	bl	8009dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	460b      	mov	r3, r1
 80064fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	3304      	adds	r3, #4
 8006514:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	b2da      	uxtb	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d102      	bne.n	8006548 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	6979      	ldr	r1, [r7, #20]
 8006560:	f003 ff68 	bl	800a434 <USB_EP0StartXfer>
 8006564:	e008      	b.n	8006578 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	f003 fd16 	bl	8009fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80065a4:	681b      	ldr	r3, [r3, #0]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	460b      	mov	r3, r1
 80065c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	3338      	adds	r3, #56	@ 0x38
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	3304      	adds	r3, #4
 80065d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2201      	movs	r2, #1
 80065f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d102      	bne.n	800660c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	f003 ff06 	bl	800a434 <USB_EP0StartXfer>
 8006628:	e008      	b.n	800663c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	f003 fcb4 	bl	8009fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	f003 020f 	and.w	r2, r3, #15
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d901      	bls.n	8006664 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e050      	b.n	8006706 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006668:	2b00      	cmp	r3, #0
 800666a:	da0f      	bge.n	800668c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 020f 	and.w	r2, r3, #15
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	3338      	adds	r3, #56	@ 0x38
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4413      	add	r3, r2
 8006680:	3304      	adds	r3, #4
 8006682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	705a      	strb	r2, [r3, #1]
 800668a:	e00d      	b.n	80066a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_PCD_EP_SetStall+0x82>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e01e      	b.n	8006706 <HAL_PCD_EP_SetStall+0xc0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 f944 	bl	800a964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	b2d9      	uxtb	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80066f6:	461a      	mov	r2, r3
 80066f8:	f004 fb34 	bl	800ad64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d901      	bls.n	800672c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e042      	b.n	80067b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800672c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	da0f      	bge.n	8006754 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	3338      	adds	r3, #56	@ 0x38
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4413      	add	r3, r2
 8006748:	3304      	adds	r3, #4
 800674a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	705a      	strb	r2, [r3, #1]
 8006752:	e00f      	b.n	8006774 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	f003 020f 	and.w	r2, r3, #15
 800675a:	4613      	mov	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	3304      	adds	r3, #4
 800676c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	b2da      	uxtb	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_PCD_EP_ClrStall+0x86>
 8006790:	2302      	movs	r3, #2
 8006792:	e00e      	b.n	80067b2 <HAL_PCD_EP_ClrStall+0xa4>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68f9      	ldr	r1, [r7, #12]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f004 f94c 	bl	800aa40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da0c      	bge.n	80067e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	4613      	mov	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	3338      	adds	r3, #56	@ 0x38
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4413      	add	r3, r2
 80067e2:	3304      	adds	r3, #4
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e00c      	b.n	8006802 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	4618      	mov	r0, r3
 800680a:	f003 ff6b 	bl	800a6e4 <USB_EPStopXfer>
 800680e:	4603      	mov	r3, r0
 8006810:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006812:	7afb      	ldrb	r3, [r7, #11]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	@ 0x28
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	3338      	adds	r3, #56	@ 0x38
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	429a      	cmp	r2, r3
 800684e:	d901      	bls.n	8006854 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e06c      	b.n	800692e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	429a      	cmp	r2, r3
 8006868:	d902      	bls.n	8006870 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3303      	adds	r3, #3
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006878:	e02b      	b.n	80068d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	429a      	cmp	r2, r3
 800688e:	d902      	bls.n	8006896 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3303      	adds	r3, #3
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6919      	ldr	r1, [r3, #16]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4603      	mov	r3, r0
 80068b4:	6978      	ldr	r0, [r7, #20]
 80068b6:	f003 ffbf 	bl	800a838 <USB_WritePacket>

    ep->xfer_buff  += len;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	441a      	add	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d809      	bhi.n	80068fc <PCD_WriteEmptyTxFifo+0xe0>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d203      	bcs.n	80068fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1be      	bne.n	800687a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	429a      	cmp	r2, r3
 8006906:	d811      	bhi.n	800692c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	2201      	movs	r2, #1
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	43db      	mvns	r3, r3
 8006922:	6939      	ldr	r1, [r7, #16]
 8006924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006928:	4013      	ands	r3, r2
 800692a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	333c      	adds	r3, #60	@ 0x3c
 8006950:	3304      	adds	r3, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d17b      	bne.n	8006a66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d015      	beq.n	80069a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4a61      	ldr	r2, [pc, #388]	@ (8006b00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	f240 80b9 	bls.w	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80b3 	beq.w	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699a:	461a      	mov	r2, r3
 800699c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	e0a7      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	461a      	mov	r2, r3
 80069bc:	2320      	movs	r3, #32
 80069be:	6093      	str	r3, [r2, #8]
 80069c0:	e098      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8093 	bne.w	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006b00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d90f      	bls.n	80069f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f2:	6093      	str	r3, [r2, #8]
 80069f4:	e07e      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	3304      	adds	r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	0159      	lsls	r1, r3, #5
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	440b      	add	r3, r1
 8006a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d114      	bne.n	8006a58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006a40:	461a      	mov	r2, r3
 8006a42:	2101      	movs	r1, #1
 8006a44:	f004 f98e 	bl	800ad64 <USB_EP0_OutStart>
 8006a48:	e006      	b.n	8006a58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	441a      	add	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f006 fd5c 	bl	800d51c <HAL_PCD_DataOutStageCallback>
 8006a64:	e046      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d124      	bne.n	8006ab8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a84:	461a      	mov	r2, r3
 8006a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8a:	6093      	str	r3, [r2, #8]
 8006a8c:	e032      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f006 fd33 	bl	800d51c <HAL_PCD_DataOutStageCallback>
 8006ab6:	e01d      	b.n	8006af4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d114      	bne.n	8006ae8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f004 f93e 	bl	800ad64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f006 fd14 	bl	800d51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	4f54300a 	.word	0x4f54300a
 8006b04:	4f54310a 	.word	0x4f54310a

08006b08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	333c      	adds	r3, #60	@ 0x3c
 8006b20:	3304      	adds	r3, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d90e      	bls.n	8006b5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b54:	461a      	mov	r2, r3
 8006b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f006 fccb 	bl	800d4f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a0a      	ldr	r2, [pc, #40]	@ (8006b90 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d90c      	bls.n	8006b84 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d108      	bne.n	8006b84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2101      	movs	r1, #1
 8006b80:	f004 f8f0 	bl	800ad64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	4f54300a 	.word	0x4f54300a

08006b94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d107      	bne.n	8006bc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bb2:	883b      	ldrh	r3, [r7, #0]
 8006bb4:	0419      	lsls	r1, r3, #16
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bc0:	e028      	b.n	8006c14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	e00d      	b.n	8006bf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	3340      	adds	r3, #64	@ 0x40
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	4413      	add	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	7bfa      	ldrb	r2, [r7, #15]
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d3ec      	bcc.n	8006bd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006bfc:	883b      	ldrh	r3, [r7, #0]
 8006bfe:	0418      	lsls	r0, r3, #16
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	4302      	orrs	r2, r0
 8006c0c:	3340      	adds	r3, #64	@ 0x40
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c76:	f043 0303 	orr.w	r3, r3, #3
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0cc      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b68      	ldr	r3, [pc, #416]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90c      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b65      	ldr	r3, [pc, #404]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	4b63      	ldr	r3, [pc, #396]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0b8      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d020      	beq.n	8006d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce0:	4b59      	ldr	r3, [pc, #356]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a58      	ldr	r2, [pc, #352]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf8:	4b53      	ldr	r3, [pc, #332]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4a52      	ldr	r2, [pc, #328]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d04:	4b50      	ldr	r3, [pc, #320]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	494d      	ldr	r1, [pc, #308]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d044      	beq.n	8006dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2a:	4b47      	ldr	r3, [pc, #284]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d119      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e07f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d003      	beq.n	8006d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e06f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e067      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b37      	ldr	r3, [pc, #220]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4934      	ldr	r1, [pc, #208]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d7c:	f7fd fb6a 	bl	8004454 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d84:	f7fd fb66 	bl	8004454 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e04f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 020c 	and.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1eb      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dac:	4b25      	ldr	r3, [pc, #148]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20c      	bcs.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b22      	ldr	r3, [pc, #136]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e032      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de0:	4b19      	ldr	r3, [pc, #100]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4916      	ldr	r1, [pc, #88]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfe:	4b12      	ldr	r3, [pc, #72]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	490e      	ldr	r1, [pc, #56]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e12:	f000 fb7f 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b0b      	ldr	r3, [pc, #44]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	490a      	ldr	r1, [pc, #40]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	5ccb      	ldrb	r3, [r1, r3]
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	4a09      	ldr	r2, [pc, #36]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e2e:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fd faca 	bl	80043cc <HAL_InitTick>

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40023c00 	.word	0x40023c00
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	08014774 	.word	0x08014774
 8006e50:	20000004 	.word	0x20000004
 8006e54:	20000008 	.word	0x20000008

08006e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000004 	.word	0x20000004

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e74:	f7ff fff0 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40023800 	.word	0x40023800
 8006e94:	08014784 	.word	0x08014784

08006e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e9c:	f7ff ffdc 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	0b5b      	lsrs	r3, r3, #13
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4903      	ldr	r1, [pc, #12]	@ (8006ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	08014784 	.word	0x08014784

08006ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	@ 0x30
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006efe:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	496c      	ldr	r1, [pc, #432]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006f16:	2301      	movs	r3, #1
 8006f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006f26:	4b64      	ldr	r3, [pc, #400]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f2c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f34:	4960      	ldr	r1, [pc, #384]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006f44:	2301      	movs	r3, #1
 8006f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d017      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f54:	4b58      	ldr	r3, [pc, #352]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	4955      	ldr	r1, [pc, #340]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f72:	d101      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006f74:	2301      	movs	r3, #1
 8006f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006f80:	2301      	movs	r3, #1
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f90:	4b49      	ldr	r3, [pc, #292]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	4946      	ldr	r1, [pc, #280]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 808a 	beq.w	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	4b39      	ldr	r3, [pc, #228]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	4a38      	ldr	r2, [pc, #224]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fde:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fea:	4b34      	ldr	r3, [pc, #208]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a33      	ldr	r2, [pc, #204]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff6:	f7fd fa2d 	bl	8004454 <HAL_GetTick>
 8006ffa:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ffe:	f7fd fa29 	bl	8004454 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e278      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007010:	4b2a      	ldr	r3, [pc, #168]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800701c:	4b26      	ldr	r3, [pc, #152]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007024:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02f      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	429a      	cmp	r2, r3
 8007038:	d028      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007042:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007044:	4b1e      	ldr	r3, [pc, #120]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800704a:	4b1d      	ldr	r3, [pc, #116]	@ (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007050:	4a19      	ldr	r2, [pc, #100]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007056:	4b18      	ldr	r3, [pc, #96]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b01      	cmp	r3, #1
 8007060:	d114      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007062:	f7fd f9f7 	bl	8004454 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fd f9f3 	bl	8004454 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e240      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007080:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ee      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007098:	d114      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800709a:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ae:	4902      	ldr	r1, [pc, #8]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	608b      	str	r3, [r1, #8]
 80070b4:	e00c      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80070b6:	bf00      	nop
 80070b8:	40023800 	.word	0x40023800
 80070bc:	40007000 	.word	0x40007000
 80070c0:	42470e40 	.word	0x42470e40
 80070c4:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a49      	ldr	r2, [pc, #292]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80070ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80070ce:	6093      	str	r3, [r2, #8]
 80070d0:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80070d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070dc:	4944      	ldr	r1, [pc, #272]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80070f4:	4b3f      	ldr	r3, [pc, #252]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80070f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007104:	4b3a      	ldr	r3, [pc, #232]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800710a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007112:	4937      	ldr	r1, [pc, #220]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007126:	4b32      	ldr	r3, [pc, #200]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800712c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007134:	492e      	ldr	r1, [pc, #184]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d011      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007148:	4b29      	ldr	r3, [pc, #164]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800714a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800714e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007156:	4926      	ldr	r1, [pc, #152]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007166:	d101      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007168:	2301      	movs	r3, #1
 800716a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007178:	4b1d      	ldr	r3, [pc, #116]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800717a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800717e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007186:	491a      	ldr	r1, [pc, #104]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007196:	2b00      	cmp	r3, #0
 8007198:	d011      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800719a:	4b15      	ldr	r3, [pc, #84]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800719c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071a0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a8:	4911      	ldr	r1, [pc, #68]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b8:	d101      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d005      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071cc:	f040 80ff 	bne.w	80073ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071d0:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071d6:	f7fd f93d 	bl	8004454 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071dc:	e00e      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071de:	f7fd f939 	bl	8004454 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d907      	bls.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e188      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80071f0:	40023800 	.word	0x40023800
 80071f4:	424711e0 	.word	0x424711e0
 80071f8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071fc:	4b7e      	ldr	r3, [pc, #504]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1ea      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007224:	2b00      	cmp	r3, #0
 8007226:	d028      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d124      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007230:	4b71      	ldr	r3, [pc, #452]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	3301      	adds	r3, #1
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007242:	4b6d      	ldr	r3, [pc, #436]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007248:	0e1b      	lsrs	r3, r3, #24
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	019b      	lsls	r3, r3, #6
 800725a:	431a      	orrs	r2, r3
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	3b01      	subs	r3, #1
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	431a      	orrs	r2, r3
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	071b      	lsls	r3, r3, #28
 8007272:	4961      	ldr	r1, [pc, #388]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728e:	d00a      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007298:	2b00      	cmp	r3, #0
 800729a:	d035      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072a4:	d130      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80072a6:	4b54      	ldr	r3, [pc, #336]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	3301      	adds	r3, #1
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072b8:	4b4f      	ldr	r3, [pc, #316]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80072ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	019b      	lsls	r3, r3, #6
 80072d0:	431a      	orrs	r2, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	3b01      	subs	r3, #1
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	061b      	lsls	r3, r3, #24
 80072e2:	431a      	orrs	r2, r3
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	071b      	lsls	r3, r3, #28
 80072e8:	4943      	ldr	r1, [pc, #268]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072f0:	4b41      	ldr	r3, [pc, #260]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80072f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f6:	f023 021f 	bic.w	r2, r3, #31
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	3b01      	subs	r3, #1
 8007300:	493d      	ldr	r1, [pc, #244]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007310:	2b00      	cmp	r3, #0
 8007312:	d029      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731c:	d124      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800731e:	4b36      	ldr	r3, [pc, #216]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	3301      	adds	r3, #1
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007330:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007336:	0f1b      	lsrs	r3, r3, #28
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	019b      	lsls	r3, r3, #6
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	3b01      	subs	r3, #1
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	431a      	orrs	r2, r3
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	431a      	orrs	r2, r3
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	071b      	lsls	r3, r3, #28
 8007360:	4925      	ldr	r1, [pc, #148]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	019b      	lsls	r3, r3, #6
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	071b      	lsls	r3, r3, #28
 800739a:	4917      	ldr	r1, [pc, #92]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800739c:	4313      	orrs	r3, r2
 800739e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073a2:	4b16      	ldr	r3, [pc, #88]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073a8:	f7fd f854 	bl	8004454 <HAL_GetTick>
 80073ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073b0:	f7fd f850 	bl	8004454 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e09f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073c2:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	f040 8095 	bne.w	8007500 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073dc:	f7fd f83a 	bl	8004454 <HAL_GetTick>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073e2:	e00f      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073e4:	f7fd f836 	bl	8004454 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d908      	bls.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e085      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800
 80073fc:	42470068 	.word	0x42470068
 8007400:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007404:	4b41      	ldr	r3, [pc, #260]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800740c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007410:	d0e8      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02b      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d127      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800743a:	4b34      	ldr	r3, [pc, #208]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	3301      	adds	r3, #1
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	431a      	orrs	r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	3b01      	subs	r3, #1
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	4928      	ldr	r1, [pc, #160]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007470:	4b26      	ldr	r3, [pc, #152]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007476:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747e:	3b01      	subs	r3, #1
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	4922      	ldr	r1, [pc, #136]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01d      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800749e:	d118      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074a0:	4b1a      	ldr	r3, [pc, #104]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	019b      	lsls	r3, r3, #6
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	085b      	lsrs	r3, r3, #1
 80074c0:	3b01      	subs	r3, #1
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	431a      	orrs	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	061b      	lsls	r3, r3, #24
 80074ca:	4910      	ldr	r1, [pc, #64]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007510 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074d8:	f7fc ffbc 	bl	8004454 <HAL_GetTick>
 80074dc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80074e0:	f7fc ffb8 	bl	8004454 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e007      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fe:	d1ef      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3730      	adds	r7, #48	@ 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023800 	.word	0x40023800
 8007510:	42470070 	.word	0x42470070

08007514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b0ae      	sub	sp, #184	@ 0xb8
 800751a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800753a:	4bcb      	ldr	r3, [pc, #812]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b0c      	cmp	r3, #12
 8007544:	f200 8206 	bhi.w	8007954 <HAL_RCC_GetSysClockFreq+0x440>
 8007548:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007585 	.word	0x08007585
 8007554:	08007955 	.word	0x08007955
 8007558:	08007955 	.word	0x08007955
 800755c:	08007955 	.word	0x08007955
 8007560:	0800758d 	.word	0x0800758d
 8007564:	08007955 	.word	0x08007955
 8007568:	08007955 	.word	0x08007955
 800756c:	08007955 	.word	0x08007955
 8007570:	08007595 	.word	0x08007595
 8007574:	08007955 	.word	0x08007955
 8007578:	08007955 	.word	0x08007955
 800757c:	08007955 	.word	0x08007955
 8007580:	08007785 	.word	0x08007785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007584:	4bb9      	ldr	r3, [pc, #740]	@ (800786c <HAL_RCC_GetSysClockFreq+0x358>)
 8007586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800758a:	e1e7      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800758c:	4bb8      	ldr	r3, [pc, #736]	@ (8007870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800758e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007592:	e1e3      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007594:	4bb4      	ldr	r3, [pc, #720]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075a0:	4bb1      	ldr	r3, [pc, #708]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d071      	beq.n	8007690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075ac:	4bae      	ldr	r3, [pc, #696]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	099b      	lsrs	r3, r3, #6
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80075bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075c8:	2300      	movs	r3, #0
 80075ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f04f 0000 	mov.w	r0, #0
 80075da:	f04f 0100 	mov.w	r1, #0
 80075de:	0159      	lsls	r1, r3, #5
 80075e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075e4:	0150      	lsls	r0, r2, #5
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4621      	mov	r1, r4
 80075ec:	1a51      	subs	r1, r2, r1
 80075ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80075f0:	4629      	mov	r1, r5
 80075f2:	eb63 0301 	sbc.w	r3, r3, r1
 80075f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007604:	4649      	mov	r1, r9
 8007606:	018b      	lsls	r3, r1, #6
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800760e:	4641      	mov	r1, r8
 8007610:	018a      	lsls	r2, r1, #6
 8007612:	4641      	mov	r1, r8
 8007614:	1a51      	subs	r1, r2, r1
 8007616:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007618:	4649      	mov	r1, r9
 800761a:	eb63 0301 	sbc.w	r3, r3, r1
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800762c:	4649      	mov	r1, r9
 800762e:	00cb      	lsls	r3, r1, #3
 8007630:	4641      	mov	r1, r8
 8007632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007636:	4641      	mov	r1, r8
 8007638:	00ca      	lsls	r2, r1, #3
 800763a:	4610      	mov	r0, r2
 800763c:	4619      	mov	r1, r3
 800763e:	4603      	mov	r3, r0
 8007640:	4622      	mov	r2, r4
 8007642:	189b      	adds	r3, r3, r2
 8007644:	633b      	str	r3, [r7, #48]	@ 0x30
 8007646:	462b      	mov	r3, r5
 8007648:	460a      	mov	r2, r1
 800764a:	eb42 0303 	adc.w	r3, r2, r3
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800765c:	4629      	mov	r1, r5
 800765e:	024b      	lsls	r3, r1, #9
 8007660:	4621      	mov	r1, r4
 8007662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007666:	4621      	mov	r1, r4
 8007668:	024a      	lsls	r2, r1, #9
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007672:	2200      	movs	r2, #0
 8007674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800767c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007680:	f7f9 fb22 	bl	8000cc8 <__aeabi_uldivmod>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4613      	mov	r3, r2
 800768a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800768e:	e067      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007690:	4b75      	ldr	r3, [pc, #468]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	099b      	lsrs	r3, r3, #6
 8007696:	2200      	movs	r2, #0
 8007698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800769c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80076a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80076a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076aa:	2300      	movs	r3, #0
 80076ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	f04f 0000 	mov.w	r0, #0
 80076ba:	f04f 0100 	mov.w	r1, #0
 80076be:	0159      	lsls	r1, r3, #5
 80076c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076c4:	0150      	lsls	r0, r2, #5
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4621      	mov	r1, r4
 80076cc:	1a51      	subs	r1, r2, r1
 80076ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80076d0:	4629      	mov	r1, r5
 80076d2:	eb63 0301 	sbc.w	r3, r3, r1
 80076d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80076e4:	4649      	mov	r1, r9
 80076e6:	018b      	lsls	r3, r1, #6
 80076e8:	4641      	mov	r1, r8
 80076ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076ee:	4641      	mov	r1, r8
 80076f0:	018a      	lsls	r2, r1, #6
 80076f2:	4641      	mov	r1, r8
 80076f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80076f8:	4649      	mov	r1, r9
 80076fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800770a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800770e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007712:	4692      	mov	sl, r2
 8007714:	469b      	mov	fp, r3
 8007716:	4623      	mov	r3, r4
 8007718:	eb1a 0303 	adds.w	r3, sl, r3
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	462b      	mov	r3, r5
 8007720:	eb4b 0303 	adc.w	r3, fp, r3
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007732:	4629      	mov	r1, r5
 8007734:	028b      	lsls	r3, r1, #10
 8007736:	4621      	mov	r1, r4
 8007738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800773c:	4621      	mov	r1, r4
 800773e:	028a      	lsls	r2, r1, #10
 8007740:	4610      	mov	r0, r2
 8007742:	4619      	mov	r1, r3
 8007744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007748:	2200      	movs	r2, #0
 800774a:	673b      	str	r3, [r7, #112]	@ 0x70
 800774c:	677a      	str	r2, [r7, #116]	@ 0x74
 800774e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007752:	f7f9 fab9 	bl	8000cc8 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4613      	mov	r3, r2
 800775c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007760:	4b41      	ldr	r3, [pc, #260]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	3301      	adds	r3, #1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007782:	e0eb      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007784:	4b38      	ldr	r3, [pc, #224]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800778c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007790:	4b35      	ldr	r3, [pc, #212]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d06b      	beq.n	8007874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779c:	4b32      	ldr	r3, [pc, #200]	@ (8007868 <HAL_RCC_GetSysClockFreq+0x354>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	099b      	lsrs	r3, r3, #6
 80077a2:	2200      	movs	r2, #0
 80077a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b0:	2300      	movs	r3, #0
 80077b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80077b8:	4622      	mov	r2, r4
 80077ba:	462b      	mov	r3, r5
 80077bc:	f04f 0000 	mov.w	r0, #0
 80077c0:	f04f 0100 	mov.w	r1, #0
 80077c4:	0159      	lsls	r1, r3, #5
 80077c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077ca:	0150      	lsls	r0, r2, #5
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4621      	mov	r1, r4
 80077d2:	1a51      	subs	r1, r2, r1
 80077d4:	61b9      	str	r1, [r7, #24]
 80077d6:	4629      	mov	r1, r5
 80077d8:	eb63 0301 	sbc.w	r3, r3, r1
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80077ea:	4659      	mov	r1, fp
 80077ec:	018b      	lsls	r3, r1, #6
 80077ee:	4651      	mov	r1, sl
 80077f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077f4:	4651      	mov	r1, sl
 80077f6:	018a      	lsls	r2, r1, #6
 80077f8:	4651      	mov	r1, sl
 80077fa:	ebb2 0801 	subs.w	r8, r2, r1
 80077fe:	4659      	mov	r1, fp
 8007800:	eb63 0901 	sbc.w	r9, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007818:	4690      	mov	r8, r2
 800781a:	4699      	mov	r9, r3
 800781c:	4623      	mov	r3, r4
 800781e:	eb18 0303 	adds.w	r3, r8, r3
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	462b      	mov	r3, r5
 8007826:	eb49 0303 	adc.w	r3, r9, r3
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007838:	4629      	mov	r1, r5
 800783a:	024b      	lsls	r3, r1, #9
 800783c:	4621      	mov	r1, r4
 800783e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007842:	4621      	mov	r1, r4
 8007844:	024a      	lsls	r2, r1, #9
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800784e:	2200      	movs	r2, #0
 8007850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007852:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007858:	f7f9 fa36 	bl	8000cc8 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4613      	mov	r3, r2
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007866:	e065      	b.n	8007934 <HAL_RCC_GetSysClockFreq+0x420>
 8007868:	40023800 	.word	0x40023800
 800786c:	00f42400 	.word	0x00f42400
 8007870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007874:	4b3d      	ldr	r3, [pc, #244]	@ (800796c <HAL_RCC_GetSysClockFreq+0x458>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	099b      	lsrs	r3, r3, #6
 800787a:	2200      	movs	r2, #0
 800787c:	4618      	mov	r0, r3
 800787e:	4611      	mov	r1, r2
 8007880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007884:	653b      	str	r3, [r7, #80]	@ 0x50
 8007886:	2300      	movs	r3, #0
 8007888:	657b      	str	r3, [r7, #84]	@ 0x54
 800788a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f04f 0100 	mov.w	r1, #0
 800789a:	0159      	lsls	r1, r3, #5
 800789c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078a0:	0150      	lsls	r0, r2, #5
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4641      	mov	r1, r8
 80078a8:	1a51      	subs	r1, r2, r1
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	4649      	mov	r1, r9
 80078ae:	eb63 0301 	sbc.w	r3, r3, r1
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80078c0:	4659      	mov	r1, fp
 80078c2:	018b      	lsls	r3, r1, #6
 80078c4:	4651      	mov	r1, sl
 80078c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078ca:	4651      	mov	r1, sl
 80078cc:	018a      	lsls	r2, r1, #6
 80078ce:	4651      	mov	r1, sl
 80078d0:	1a54      	subs	r4, r2, r1
 80078d2:	4659      	mov	r1, fp
 80078d4:	eb63 0501 	sbc.w	r5, r3, r1
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	00eb      	lsls	r3, r5, #3
 80078e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078e6:	00e2      	lsls	r2, r4, #3
 80078e8:	4614      	mov	r4, r2
 80078ea:	461d      	mov	r5, r3
 80078ec:	4643      	mov	r3, r8
 80078ee:	18e3      	adds	r3, r4, r3
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	464b      	mov	r3, r9
 80078f4:	eb45 0303 	adc.w	r3, r5, r3
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007906:	4629      	mov	r1, r5
 8007908:	028b      	lsls	r3, r1, #10
 800790a:	4621      	mov	r1, r4
 800790c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007910:	4621      	mov	r1, r4
 8007912:	028a      	lsls	r2, r1, #10
 8007914:	4610      	mov	r0, r2
 8007916:	4619      	mov	r1, r3
 8007918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800791c:	2200      	movs	r2, #0
 800791e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007920:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007926:	f7f9 f9cf 	bl	8000cc8 <__aeabi_uldivmod>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4613      	mov	r3, r2
 8007930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007934:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <HAL_RCC_GetSysClockFreq+0x458>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	0f1b      	lsrs	r3, r3, #28
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007952:	e003      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007954:	4b06      	ldr	r3, [pc, #24]	@ (8007970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800795a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800795c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007960:	4618      	mov	r0, r3
 8007962:	37b8      	adds	r7, #184	@ 0xb8
 8007964:	46bd      	mov	sp, r7
 8007966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800
 8007970:	00f42400 	.word	0x00f42400

08007974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e28d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8083 	beq.w	8007a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007994:	4b94      	ldr	r3, [pc, #592]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b04      	cmp	r3, #4
 800799e:	d019      	beq.n	80079d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079a0:	4b91      	ldr	r3, [pc, #580]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d106      	bne.n	80079ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079ac:	4b8e      	ldr	r3, [pc, #568]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079b8:	d00c      	beq.n	80079d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ba:	4b8b      	ldr	r3, [pc, #556]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	d112      	bne.n	80079ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079c6:	4b88      	ldr	r3, [pc, #544]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079d2:	d10b      	bne.n	80079ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d4:	4b84      	ldr	r3, [pc, #528]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05b      	beq.n	8007a98 <HAL_RCC_OscConfig+0x124>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d157      	bne.n	8007a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e25a      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f4:	d106      	bne.n	8007a04 <HAL_RCC_OscConfig+0x90>
 80079f6:	4b7c      	ldr	r3, [pc, #496]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a7b      	ldr	r2, [pc, #492]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e01d      	b.n	8007a40 <HAL_RCC_OscConfig+0xcc>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCC_OscConfig+0xb4>
 8007a0e:	4b76      	ldr	r3, [pc, #472]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a75      	ldr	r2, [pc, #468]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	4b73      	ldr	r3, [pc, #460]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a72      	ldr	r2, [pc, #456]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e00b      	b.n	8007a40 <HAL_RCC_OscConfig+0xcc>
 8007a28:	4b6f      	ldr	r3, [pc, #444]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	4b6c      	ldr	r3, [pc, #432]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a6b      	ldr	r2, [pc, #428]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d013      	beq.n	8007a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fc fd04 	bl	8004454 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a50:	f7fc fd00 	bl	8004454 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b64      	cmp	r3, #100	@ 0x64
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e21f      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a62:	4b61      	ldr	r3, [pc, #388]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0xdc>
 8007a6e:	e014      	b.n	8007a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fc fcf0 	bl	8004454 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a78:	f7fc fcec 	bl	8004454 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b64      	cmp	r3, #100	@ 0x64
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e20b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8a:	4b57      	ldr	r3, [pc, #348]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f0      	bne.n	8007a78 <HAL_RCC_OscConfig+0x104>
 8007a96:	e000      	b.n	8007a9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d06f      	beq.n	8007b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007aa6:	4b50      	ldr	r3, [pc, #320]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 030c 	and.w	r3, r3, #12
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d017      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d105      	bne.n	8007aca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007abe:	4b4a      	ldr	r3, [pc, #296]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aca:	4b47      	ldr	r3, [pc, #284]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	d11c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ad6:	4b44      	ldr	r3, [pc, #272]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d116      	bne.n	8007b10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae2:	4b41      	ldr	r3, [pc, #260]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_RCC_OscConfig+0x186>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e1d3      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	4b3b      	ldr	r3, [pc, #236]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4937      	ldr	r1, [pc, #220]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0e:	e03a      	b.n	8007b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d020      	beq.n	8007b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b18:	4b34      	ldr	r3, [pc, #208]	@ (8007bec <HAL_RCC_OscConfig+0x278>)
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1e:	f7fc fc99 	bl	8004454 <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b24:	e008      	b.n	8007b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b26:	f7fc fc95 	bl	8004454 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e1b4      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b38:	4b2b      	ldr	r3, [pc, #172]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0f0      	beq.n	8007b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b44:	4b28      	ldr	r3, [pc, #160]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4925      	ldr	r1, [pc, #148]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	e015      	b.n	8007b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b5a:	4b24      	ldr	r3, [pc, #144]	@ (8007bec <HAL_RCC_OscConfig+0x278>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fc fc78 	bl	8004454 <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b68:	f7fc fc74 	bl	8004454 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e193      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d036      	beq.n	8007c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b9a:	4b15      	ldr	r3, [pc, #84]	@ (8007bf0 <HAL_RCC_OscConfig+0x27c>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba0:	f7fc fc58 	bl	8004454 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba8:	f7fc fc54 	bl	8004454 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e173      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <HAL_RCC_OscConfig+0x274>)
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f0      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x234>
 8007bc6:	e01b      	b.n	8007c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bc8:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <HAL_RCC_OscConfig+0x27c>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bce:	f7fc fc41 	bl	8004454 <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd4:	e00e      	b.n	8007bf4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bd6:	f7fc fc3d 	bl	8004454 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d907      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e15c      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
 8007be8:	40023800 	.word	0x40023800
 8007bec:	42470000 	.word	0x42470000
 8007bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1ea      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8097 	beq.w	8007d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c12:	4b83      	ldr	r3, [pc, #524]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10f      	bne.n	8007c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	4b7f      	ldr	r3, [pc, #508]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	4a7e      	ldr	r2, [pc, #504]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c36:	60bb      	str	r3, [r7, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c3e:	4b79      	ldr	r3, [pc, #484]	@ (8007e24 <HAL_RCC_OscConfig+0x4b0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d118      	bne.n	8007c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c4a:	4b76      	ldr	r3, [pc, #472]	@ (8007e24 <HAL_RCC_OscConfig+0x4b0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a75      	ldr	r2, [pc, #468]	@ (8007e24 <HAL_RCC_OscConfig+0x4b0>)
 8007c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c56:	f7fc fbfd 	bl	8004454 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5e:	f7fc fbf9 	bl	8004454 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e118      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c70:	4b6c      	ldr	r3, [pc, #432]	@ (8007e24 <HAL_RCC_OscConfig+0x4b0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <HAL_RCC_OscConfig+0x31e>
 8007c84:	4b66      	ldr	r3, [pc, #408]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c88:	4a65      	ldr	r2, [pc, #404]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c90:	e01c      	b.n	8007ccc <HAL_RCC_OscConfig+0x358>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x340>
 8007c9a:	4b61      	ldr	r3, [pc, #388]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9e:	4a60      	ldr	r2, [pc, #384]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007ca0:	f043 0304 	orr.w	r3, r3, #4
 8007ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	4a5d      	ldr	r2, [pc, #372]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCC_OscConfig+0x358>
 8007cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb8:	4a59      	ldr	r2, [pc, #356]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cc0:	4b57      	ldr	r3, [pc, #348]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc4:	4a56      	ldr	r2, [pc, #344]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd4:	f7fc fbbe 	bl	8004454 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cda:	e00a      	b.n	8007cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fc fbba 	bl	8004454 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e0d7      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ee      	beq.n	8007cdc <HAL_RCC_OscConfig+0x368>
 8007cfe:	e014      	b.n	8007d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d00:	f7fc fba8 	bl	8004454 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d06:	e00a      	b.n	8007d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d08:	f7fc fba4 	bl	8004454 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e0c1      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d1e:	4b40      	ldr	r3, [pc, #256]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1ee      	bne.n	8007d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d105      	bne.n	8007d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d30:	4b3b      	ldr	r3, [pc, #236]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d34:	4a3a      	ldr	r2, [pc, #232]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80ad 	beq.w	8007ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d46:	4b36      	ldr	r3, [pc, #216]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d060      	beq.n	8007e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d145      	bne.n	8007de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d5a:	4b33      	ldr	r3, [pc, #204]	@ (8007e28 <HAL_RCC_OscConfig+0x4b4>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7fc fb78 	bl	8004454 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d68:	f7fc fb74 	bl	8004454 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e093      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7a:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1f0      	bne.n	8007d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d94:	019b      	lsls	r3, r3, #6
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db0:	071b      	lsls	r3, r3, #28
 8007db2:	491b      	ldr	r1, [pc, #108]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007db8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <HAL_RCC_OscConfig+0x4b4>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbe:	f7fc fb49 	bl	8004454 <HAL_GetTick>
 8007dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dc4:	e008      	b.n	8007dd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc6:	f7fc fb45 	bl	8004454 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e064      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd8:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0f0      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x452>
 8007de4:	e05c      	b.n	8007ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007de6:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <HAL_RCC_OscConfig+0x4b4>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fc fb32 	bl	8004454 <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df4:	f7fc fb2e 	bl	8004454 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e04d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <HAL_RCC_OscConfig+0x4ac>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x480>
 8007e12:	e045      	b.n	8007ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e040      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
 8007e20:	40023800 	.word	0x40023800
 8007e24:	40007000 	.word	0x40007000
 8007e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007eac <HAL_RCC_OscConfig+0x538>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d030      	beq.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d129      	bne.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d122      	bne.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d119      	bne.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	3b01      	subs	r3, #1
 8007e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d10f      	bne.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d107      	bne.n	8007e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d001      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800

08007eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e07b      	b.n	8007fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d108      	bne.n	8007edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed2:	d009      	beq.n	8007ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	61da      	str	r2, [r3, #28]
 8007eda:	e005      	b.n	8007ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fb ff8a 	bl	8003e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6c:	ea42 0103 	orr.w	r1, r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	f003 0104 	and.w	r1, r3, #4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	f003 0210 	and.w	r2, r3, #16
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e041      	b.n	8008058 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fb ff5f 	bl	8003eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f000 f9cd 	bl	80083a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b01      	cmp	r3, #1
 8008072:	d001      	beq.n	8008078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e04e      	b.n	8008116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a23      	ldr	r2, [pc, #140]	@ (8008124 <HAL_TIM_Base_Start_IT+0xc4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d022      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a2:	d01d      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008128 <HAL_TIM_Base_Start_IT+0xc8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d018      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1e      	ldr	r2, [pc, #120]	@ (800812c <HAL_TIM_Base_Start_IT+0xcc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d013      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008130 <HAL_TIM_Base_Start_IT+0xd0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00e      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008134 <HAL_TIM_Base_Start_IT+0xd4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d009      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a19      	ldr	r2, [pc, #100]	@ (8008138 <HAL_TIM_Base_Start_IT+0xd8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d004      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x80>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a18      	ldr	r2, [pc, #96]	@ (800813c <HAL_TIM_Base_Start_IT+0xdc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d111      	bne.n	8008104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b06      	cmp	r3, #6
 80080f0:	d010      	beq.n	8008114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 0201 	orr.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008102:	e007      	b.n	8008114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40010400 	.word	0x40010400
 8008138:	40014000 	.word	0x40014000
 800813c:	40001800 	.word	0x40001800

08008140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d122      	bne.n	800819c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b02      	cmp	r3, #2
 8008162:	d11b      	bne.n	800819c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0202 	mvn.w	r2, #2
 800816c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8ee 	bl	8008364 <HAL_TIM_IC_CaptureCallback>
 8008188:	e005      	b.n	8008196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8e0 	bl	8008350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8f1 	bl	8008378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d122      	bne.n	80081f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d11b      	bne.n	80081f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0204 	mvn.w	r2, #4
 80081c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f8c4 	bl	8008364 <HAL_TIM_IC_CaptureCallback>
 80081dc:	e005      	b.n	80081ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8b6 	bl	8008350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f8c7 	bl	8008378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d122      	bne.n	8008244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b08      	cmp	r3, #8
 800820a:	d11b      	bne.n	8008244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0208 	mvn.w	r2, #8
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f89a 	bl	8008364 <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f88c 	bl	8008350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f89d 	bl	8008378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b10      	cmp	r3, #16
 8008250:	d122      	bne.n	8008298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b10      	cmp	r3, #16
 800825e:	d11b      	bne.n	8008298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0210 	mvn.w	r2, #16
 8008268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2208      	movs	r2, #8
 800826e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f870 	bl	8008364 <HAL_TIM_IC_CaptureCallback>
 8008284:	e005      	b.n	8008292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f862 	bl	8008350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f873 	bl	8008378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d10e      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d107      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0201 	mvn.w	r2, #1
 80082bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7f9 fc88 	bl	8001bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ce:	2b80      	cmp	r3, #128	@ 0x80
 80082d0:	d10e      	bne.n	80082f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b80      	cmp	r3, #128	@ 0x80
 80082de:	d107      	bne.n	80082f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f902 	bl	80084f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fa:	2b40      	cmp	r3, #64	@ 0x40
 80082fc:	d10e      	bne.n	800831c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008308:	2b40      	cmp	r3, #64	@ 0x40
 800830a:	d107      	bne.n	800831c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f838 	bl	800838c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b20      	cmp	r3, #32
 8008328:	d10e      	bne.n	8008348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b20      	cmp	r3, #32
 8008336:	d107      	bne.n	8008348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0220 	mvn.w	r2, #32
 8008340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8cc 	bl	80084e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a40      	ldr	r2, [pc, #256]	@ (80084b4 <TIM_Base_SetConfig+0x114>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083be:	d00f      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3d      	ldr	r2, [pc, #244]	@ (80084b8 <TIM_Base_SetConfig+0x118>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a3c      	ldr	r2, [pc, #240]	@ (80084bc <TIM_Base_SetConfig+0x11c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a3b      	ldr	r2, [pc, #236]	@ (80084c0 <TIM_Base_SetConfig+0x120>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a3a      	ldr	r2, [pc, #232]	@ (80084c4 <TIM_Base_SetConfig+0x124>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d108      	bne.n	80083f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2f      	ldr	r2, [pc, #188]	@ (80084b4 <TIM_Base_SetConfig+0x114>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d02b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008400:	d027      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2c      	ldr	r2, [pc, #176]	@ (80084b8 <TIM_Base_SetConfig+0x118>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d023      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2b      	ldr	r2, [pc, #172]	@ (80084bc <TIM_Base_SetConfig+0x11c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01f      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2a      	ldr	r2, [pc, #168]	@ (80084c0 <TIM_Base_SetConfig+0x120>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a29      	ldr	r2, [pc, #164]	@ (80084c4 <TIM_Base_SetConfig+0x124>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d017      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a28      	ldr	r2, [pc, #160]	@ (80084c8 <TIM_Base_SetConfig+0x128>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a27      	ldr	r2, [pc, #156]	@ (80084cc <TIM_Base_SetConfig+0x12c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00f      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a26      	ldr	r2, [pc, #152]	@ (80084d0 <TIM_Base_SetConfig+0x130>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00b      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a25      	ldr	r2, [pc, #148]	@ (80084d4 <TIM_Base_SetConfig+0x134>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d007      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a24      	ldr	r2, [pc, #144]	@ (80084d8 <TIM_Base_SetConfig+0x138>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d003      	beq.n	8008452 <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a23      	ldr	r2, [pc, #140]	@ (80084dc <TIM_Base_SetConfig+0x13c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d108      	bne.n	8008464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0a      	ldr	r2, [pc, #40]	@ (80084b4 <TIM_Base_SetConfig+0x114>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0xf8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a0c      	ldr	r2, [pc, #48]	@ (80084c4 <TIM_Base_SetConfig+0x124>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d103      	bne.n	80084a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	615a      	str	r2, [r3, #20]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40010000 	.word	0x40010000
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800
 80084c0:	40000c00 	.word	0x40000c00
 80084c4:	40010400 	.word	0x40010400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800
 80084d4:	40001800 	.word	0x40001800
 80084d8:	40001c00 	.word	0x40001c00
 80084dc:	40002000 	.word	0x40002000

080084e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e03f      	b.n	800859a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fb fce4 	bl	8003efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2224      	movs	r2, #36	@ 0x24
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800854a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fddf 	bl	8009110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	695a      	ldr	r2, [r3, #20]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b08a      	sub	sp, #40	@ 0x28
 80085a6:	af02      	add	r7, sp, #8
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d17c      	bne.n	80086bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_UART_Transmit+0x2c>
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e075      	b.n	80086be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Transmit+0x3e>
 80085dc:	2302      	movs	r3, #2
 80085de:	e06e      	b.n	80086be <HAL_UART_Transmit+0x11c>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2221      	movs	r2, #33	@ 0x21
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085f6:	f7fb ff2d 	bl	8004454 <HAL_GetTick>
 80085fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	88fa      	ldrh	r2, [r7, #6]
 8008606:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008610:	d108      	bne.n	8008624 <HAL_UART_Transmit+0x82>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d104      	bne.n	8008624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e003      	b.n	800862c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008634:	e02a      	b.n	800868c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2200      	movs	r2, #0
 800863e:	2180      	movs	r1, #128	@ 0x80
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fb1f 	bl	8008c84 <UART_WaitOnFlagUntilTimeout>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e036      	b.n	80086be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	3302      	adds	r3, #2
 800866a:	61bb      	str	r3, [r7, #24]
 800866c:	e007      	b.n	800867e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	3301      	adds	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1cf      	bne.n	8008636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2200      	movs	r2, #0
 800869e:	2140      	movs	r1, #64	@ 0x40
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 faef 	bl	8008c84 <UART_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e006      	b.n	80086be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2220      	movs	r2, #32
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e000      	b.n	80086be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80086bc:	2302      	movs	r3, #2
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	4613      	mov	r3, r2
 80086d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b20      	cmp	r3, #32
 80086de:	d11d      	bne.n	800871c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <HAL_UART_Receive_IT+0x26>
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e016      	b.n	800871e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Receive_IT+0x38>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e00f      	b.n	800871e <HAL_UART_Receive_IT+0x58>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800870c:	88fb      	ldrh	r3, [r7, #6]
 800870e:	461a      	mov	r2, r3
 8008710:	68b9      	ldr	r1, [r7, #8]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 fb24 	bl	8008d60 <UART_Start_Receive_IT>
 8008718:	4603      	mov	r3, r0
 800871a:	e000      	b.n	800871e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800871c:	2302      	movs	r3, #2
  }
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b0ba      	sub	sp, #232	@ 0xe8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800874e:	2300      	movs	r3, #0
 8008750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008754:	2300      	movs	r3, #0
 8008756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <HAL_UART_IRQHandler+0x66>
 800877a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fc07 	bl	8008f9a <UART_Receive_IT>
      return;
 800878c:	e256      	b.n	8008c3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800878e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 80de 	beq.w	8008954 <HAL_UART_IRQHandler+0x22c>
 8008798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80d1 	beq.w	8008954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <HAL_UART_IRQHandler+0xae>
 80087be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	f043 0201 	orr.w	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <HAL_UART_IRQHandler+0xd2>
 80087e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f2:	f043 0202 	orr.w	r2, r3, #2
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_UART_IRQHandler+0xf6>
 8008806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	f043 0204 	orr.w	r2, r3, #4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d011      	beq.n	800884e <HAL_UART_IRQHandler+0x126>
 800882a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008846:	f043 0208 	orr.w	r2, r3, #8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 81ed 	beq.w	8008c32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <HAL_UART_IRQHandler+0x14e>
 8008864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008868:	f003 0320 	and.w	r3, r3, #32
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fb92 	bl	8008f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008880:	2b40      	cmp	r3, #64	@ 0x40
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <HAL_UART_IRQHandler+0x17a>
 800889a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d04f      	beq.n	8008942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa9a 	bl	8008ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b2:	2b40      	cmp	r3, #64	@ 0x40
 80088b4:	d141      	bne.n	800893a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3314      	adds	r3, #20
 80088bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3314      	adds	r3, #20
 80088de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80088ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1d9      	bne.n	80088b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d013      	beq.n	8008932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890e:	4a7d      	ldr	r2, [pc, #500]	@ (8008b04 <HAL_UART_IRQHandler+0x3dc>)
 8008910:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008916:	4618      	mov	r0, r3
 8008918:	f7fc fbd9 	bl	80050ce <HAL_DMA_Abort_IT>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d016      	beq.n	8008950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800892c:	4610      	mov	r0, r2
 800892e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	e00e      	b.n	8008950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f990 	bl	8008c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008938:	e00a      	b.n	8008950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f98c 	bl	8008c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008940:	e006      	b.n	8008950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f988 	bl	8008c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800894e:	e170      	b.n	8008c32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008950:	bf00      	nop
    return;
 8008952:	e16e      	b.n	8008c32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008958:	2b01      	cmp	r3, #1
 800895a:	f040 814a 	bne.w	8008bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8143 	beq.w	8008bf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800896c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 813c 	beq.w	8008bf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899a:	2b40      	cmp	r3, #64	@ 0x40
 800899c:	f040 80b4 	bne.w	8008b08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8140 	beq.w	8008c36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089be:	429a      	cmp	r2, r3
 80089c0:	f080 8139 	bcs.w	8008c36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	f000 8088 	beq.w	8008aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	330c      	adds	r3, #12
 80089e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1d9      	bne.n	80089da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3314      	adds	r3, #20
 8008a2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a38:	f023 0301 	bic.w	r3, r3, #1
 8008a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3314      	adds	r3, #20
 8008a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e1      	bne.n	8008a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3314      	adds	r3, #20
 8008a68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e3      	bne.n	8008a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008acc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008ace:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e3      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fc fa82 	bl	8004fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8b6 	bl	8008c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b00:	e099      	b.n	8008c36 <HAL_UART_IRQHandler+0x50e>
 8008b02:	bf00      	nop
 8008b04:	08008ea3 	.word	0x08008ea3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 808b 	beq.w	8008c3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8086 	beq.w	8008c3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b52:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	623b      	str	r3, [r7, #32]
   return(result);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e3      	bne.n	8008b66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008bd0:	61fa      	str	r2, [r7, #28]
 8008bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e3      	bne.n	8008bac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f83e 	bl	8008c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bf0:	e023      	b.n	8008c3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <HAL_UART_IRQHandler+0x4ea>
 8008bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f95d 	bl	8008eca <UART_Transmit_IT>
    return;
 8008c10:	e014      	b.n	8008c3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <HAL_UART_IRQHandler+0x514>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d008      	beq.n	8008c3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f99d 	bl	8008f6a <UART_EndTransmit_IT>
    return;
 8008c30:	e004      	b.n	8008c3c <HAL_UART_IRQHandler+0x514>
    return;
 8008c32:	bf00      	nop
 8008c34:	e002      	b.n	8008c3c <HAL_UART_IRQHandler+0x514>
      return;
 8008c36:	bf00      	nop
 8008c38:	e000      	b.n	8008c3c <HAL_UART_IRQHandler+0x514>
      return;
 8008c3a:	bf00      	nop
  }
}
 8008c3c:	37e8      	adds	r7, #232	@ 0xe8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop

08008c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b090      	sub	sp, #64	@ 0x40
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	4613      	mov	r3, r2
 8008c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c94:	e050      	b.n	8008d38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d04c      	beq.n	8008d38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ca4:	f7fb fbd6 	bl	8004454 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d241      	bcs.n	8008d38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	330c      	adds	r3, #12
 8008cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cd4:	637a      	str	r2, [r7, #52]	@ 0x34
 8008cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e5      	bne.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3314      	adds	r3, #20
 8008cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f023 0301 	bic.w	r3, r3, #1
 8008cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3314      	adds	r3, #20
 8008d06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d08:	623a      	str	r2, [r7, #32]
 8008d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	69f9      	ldr	r1, [r7, #28]
 8008d0e:	6a3a      	ldr	r2, [r7, #32]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e5      	bne.n	8008ce8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e00f      	b.n	8008d58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	4013      	ands	r3, r2
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d09f      	beq.n	8008c96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3740      	adds	r7, #64	@ 0x40
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	88fa      	ldrh	r2, [r7, #6]
 8008d78:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2222      	movs	r2, #34	@ 0x22
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0201 	orr.w	r2, r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0220 	orr.w	r2, r2, #32
 8008dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b095      	sub	sp, #84	@ 0x54
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e04:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d119      	bne.n	8008e88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0310 	bic.w	r3, r3, #16
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e74:	61ba      	str	r2, [r7, #24]
 8008e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e96:	bf00      	nop
 8008e98:	3754      	adds	r7, #84	@ 0x54
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fecb 	bl	8008c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b21      	cmp	r3, #33	@ 0x21
 8008edc:	d13e      	bne.n	8008f5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee6:	d114      	bne.n	8008f12 <UART_Transmit_IT+0x48>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d110      	bne.n	8008f12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	621a      	str	r2, [r3, #32]
 8008f10:	e008      	b.n	8008f24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	1c59      	adds	r1, r3, #1
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6211      	str	r1, [r2, #32]
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4619      	mov	r1, r3
 8008f32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10f      	bne.n	8008f58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e000      	b.n	8008f5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f5c:	2302      	movs	r3, #2
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe5a 	bl	8008c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08c      	sub	sp, #48	@ 0x30
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b22      	cmp	r3, #34	@ 0x22
 8008fac:	f040 80ab 	bne.w	8009106 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb8:	d117      	bne.n	8008fea <UART_Receive_IT+0x50>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d113      	bne.n	8008fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fe8:	e026      	b.n	8009038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ffc:	d007      	beq.n	800900e <UART_Receive_IT+0x74>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <UART_Receive_IT+0x82>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e008      	b.n	800902e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009028:	b2da      	uxtb	r2, r3
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009048:	2b00      	cmp	r3, #0
 800904a:	d15a      	bne.n	8009102 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0220 	bic.w	r2, r2, #32
 800905a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800906a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009088:	2b01      	cmp	r3, #1
 800908a:	d135      	bne.n	80090f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	613b      	str	r3, [r7, #16]
   return(result);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090b2:	623a      	str	r2, [r7, #32]
 80090b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e5      	bne.n	8009092 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	d10a      	bne.n	80090ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fdbb 	bl	8008c6c <HAL_UARTEx_RxEventCallback>
 80090f6:	e002      	b.n	80090fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7f8 fd01 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	e002      	b.n	8009108 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	e000      	b.n	8009108 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3730      	adds	r7, #48	@ 0x30
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009114:	b0c0      	sub	sp, #256	@ 0x100
 8009116:	af00      	add	r7, sp, #0
 8009118:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	ea40 0301 	orr.w	r3, r0, r1
 8009138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	431a      	orrs	r2, r3
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	431a      	orrs	r2, r3
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009168:	f021 010c 	bic.w	r1, r1, #12
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009176:	430b      	orrs	r3, r1
 8009178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918a:	6999      	ldr	r1, [r3, #24]
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	ea40 0301 	orr.w	r3, r0, r1
 8009196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b8f      	ldr	r3, [pc, #572]	@ (80093dc <UART_SetConfig+0x2cc>)
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d005      	beq.n	80091b0 <UART_SetConfig+0xa0>
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b8d      	ldr	r3, [pc, #564]	@ (80093e0 <UART_SetConfig+0x2d0>)
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d104      	bne.n	80091ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091b0:	f7fd fe72 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 80091b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80091b8:	e003      	b.n	80091c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091ba:	f7fd fe59 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 80091be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091cc:	f040 810c 	bne.w	80093e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80091de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80091e2:	4622      	mov	r2, r4
 80091e4:	462b      	mov	r3, r5
 80091e6:	1891      	adds	r1, r2, r2
 80091e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80091ea:	415b      	adcs	r3, r3
 80091ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091f2:	4621      	mov	r1, r4
 80091f4:	eb12 0801 	adds.w	r8, r2, r1
 80091f8:	4629      	mov	r1, r5
 80091fa:	eb43 0901 	adc.w	r9, r3, r1
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800920a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800920e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009212:	4690      	mov	r8, r2
 8009214:	4699      	mov	r9, r3
 8009216:	4623      	mov	r3, r4
 8009218:	eb18 0303 	adds.w	r3, r8, r3
 800921c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009220:	462b      	mov	r3, r5
 8009222:	eb49 0303 	adc.w	r3, r9, r3
 8009226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009236:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800923a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800923e:	460b      	mov	r3, r1
 8009240:	18db      	adds	r3, r3, r3
 8009242:	653b      	str	r3, [r7, #80]	@ 0x50
 8009244:	4613      	mov	r3, r2
 8009246:	eb42 0303 	adc.w	r3, r2, r3
 800924a:	657b      	str	r3, [r7, #84]	@ 0x54
 800924c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009254:	f7f7 fd38 	bl	8000cc8 <__aeabi_uldivmod>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4b61      	ldr	r3, [pc, #388]	@ (80093e4 <UART_SetConfig+0x2d4>)
 800925e:	fba3 2302 	umull	r2, r3, r3, r2
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	011c      	lsls	r4, r3, #4
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009270:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	1891      	adds	r1, r2, r2
 800927e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009280:	415b      	adcs	r3, r3
 8009282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009288:	4641      	mov	r1, r8
 800928a:	eb12 0a01 	adds.w	sl, r2, r1
 800928e:	4649      	mov	r1, r9
 8009290:	eb43 0b01 	adc.w	fp, r3, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092a8:	4692      	mov	sl, r2
 80092aa:	469b      	mov	fp, r3
 80092ac:	4643      	mov	r3, r8
 80092ae:	eb1a 0303 	adds.w	r3, sl, r3
 80092b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092b6:	464b      	mov	r3, r9
 80092b8:	eb4b 0303 	adc.w	r3, fp, r3
 80092bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80092d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092d4:	460b      	mov	r3, r1
 80092d6:	18db      	adds	r3, r3, r3
 80092d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80092da:	4613      	mov	r3, r2
 80092dc:	eb42 0303 	adc.w	r3, r2, r3
 80092e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80092ea:	f7f7 fced 	bl	8000cc8 <__aeabi_uldivmod>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	4b3b      	ldr	r3, [pc, #236]	@ (80093e4 <UART_SetConfig+0x2d4>)
 80092f6:	fba3 2301 	umull	r2, r3, r3, r1
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	2264      	movs	r2, #100	@ 0x64
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	1acb      	subs	r3, r1, r3
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800930a:	4b36      	ldr	r3, [pc, #216]	@ (80093e4 <UART_SetConfig+0x2d4>)
 800930c:	fba3 2302 	umull	r2, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009318:	441c      	add	r4, r3
 800931a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800931e:	2200      	movs	r2, #0
 8009320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009324:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800932c:	4642      	mov	r2, r8
 800932e:	464b      	mov	r3, r9
 8009330:	1891      	adds	r1, r2, r2
 8009332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009334:	415b      	adcs	r3, r3
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800933c:	4641      	mov	r1, r8
 800933e:	1851      	adds	r1, r2, r1
 8009340:	6339      	str	r1, [r7, #48]	@ 0x30
 8009342:	4649      	mov	r1, r9
 8009344:	414b      	adcs	r3, r1
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009354:	4659      	mov	r1, fp
 8009356:	00cb      	lsls	r3, r1, #3
 8009358:	4651      	mov	r1, sl
 800935a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935e:	4651      	mov	r1, sl
 8009360:	00ca      	lsls	r2, r1, #3
 8009362:	4610      	mov	r0, r2
 8009364:	4619      	mov	r1, r3
 8009366:	4603      	mov	r3, r0
 8009368:	4642      	mov	r2, r8
 800936a:	189b      	adds	r3, r3, r2
 800936c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009370:	464b      	mov	r3, r9
 8009372:	460a      	mov	r2, r1
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009388:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800938c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009390:	460b      	mov	r3, r1
 8009392:	18db      	adds	r3, r3, r3
 8009394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009396:	4613      	mov	r3, r2
 8009398:	eb42 0303 	adc.w	r3, r2, r3
 800939c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800939e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80093a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80093a6:	f7f7 fc8f 	bl	8000cc8 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <UART_SetConfig+0x2d4>)
 80093b0:	fba3 1302 	umull	r1, r3, r3, r2
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	2164      	movs	r1, #100	@ 0x64
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	3332      	adds	r3, #50	@ 0x32
 80093c2:	4a08      	ldr	r2, [pc, #32]	@ (80093e4 <UART_SetConfig+0x2d4>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	f003 0207 	and.w	r2, r3, #7
 80093ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4422      	add	r2, r4
 80093d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093d8:	e106      	b.n	80095e8 <UART_SetConfig+0x4d8>
 80093da:	bf00      	nop
 80093dc:	40011000 	.word	0x40011000
 80093e0:	40011400 	.word	0x40011400
 80093e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	1891      	adds	r1, r2, r2
 8009400:	6239      	str	r1, [r7, #32]
 8009402:	415b      	adcs	r3, r3
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
 8009406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800940a:	4641      	mov	r1, r8
 800940c:	1854      	adds	r4, r2, r1
 800940e:	4649      	mov	r1, r9
 8009410:	eb43 0501 	adc.w	r5, r3, r1
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	00eb      	lsls	r3, r5, #3
 800941e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009422:	00e2      	lsls	r2, r4, #3
 8009424:	4614      	mov	r4, r2
 8009426:	461d      	mov	r5, r3
 8009428:	4643      	mov	r3, r8
 800942a:	18e3      	adds	r3, r4, r3
 800942c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009430:	464b      	mov	r3, r9
 8009432:	eb45 0303 	adc.w	r3, r5, r3
 8009436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800943a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009456:	4629      	mov	r1, r5
 8009458:	008b      	lsls	r3, r1, #2
 800945a:	4621      	mov	r1, r4
 800945c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009460:	4621      	mov	r1, r4
 8009462:	008a      	lsls	r2, r1, #2
 8009464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009468:	f7f7 fc2e 	bl	8000cc8 <__aeabi_uldivmod>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4b60      	ldr	r3, [pc, #384]	@ (80095f4 <UART_SetConfig+0x4e4>)
 8009472:	fba3 2302 	umull	r2, r3, r3, r2
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	011c      	lsls	r4, r3, #4
 800947a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800947e:	2200      	movs	r2, #0
 8009480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	1891      	adds	r1, r2, r2
 8009492:	61b9      	str	r1, [r7, #24]
 8009494:	415b      	adcs	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800949c:	4641      	mov	r1, r8
 800949e:	1851      	adds	r1, r2, r1
 80094a0:	6139      	str	r1, [r7, #16]
 80094a2:	4649      	mov	r1, r9
 80094a4:	414b      	adcs	r3, r1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094b4:	4659      	mov	r1, fp
 80094b6:	00cb      	lsls	r3, r1, #3
 80094b8:	4651      	mov	r1, sl
 80094ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094be:	4651      	mov	r1, sl
 80094c0:	00ca      	lsls	r2, r1, #3
 80094c2:	4610      	mov	r0, r2
 80094c4:	4619      	mov	r1, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	4642      	mov	r2, r8
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094d0:	464b      	mov	r3, r9
 80094d2:	460a      	mov	r2, r1
 80094d4:	eb42 0303 	adc.w	r3, r2, r3
 80094d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80094f4:	4649      	mov	r1, r9
 80094f6:	008b      	lsls	r3, r1, #2
 80094f8:	4641      	mov	r1, r8
 80094fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fe:	4641      	mov	r1, r8
 8009500:	008a      	lsls	r2, r1, #2
 8009502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009506:	f7f7 fbdf 	bl	8000cc8 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4611      	mov	r1, r2
 8009510:	4b38      	ldr	r3, [pc, #224]	@ (80095f4 <UART_SetConfig+0x4e4>)
 8009512:	fba3 2301 	umull	r2, r3, r3, r1
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	2264      	movs	r2, #100	@ 0x64
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	1acb      	subs	r3, r1, r3
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	3332      	adds	r3, #50	@ 0x32
 8009524:	4a33      	ldr	r2, [pc, #204]	@ (80095f4 <UART_SetConfig+0x4e4>)
 8009526:	fba2 2303 	umull	r2, r3, r2, r3
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009530:	441c      	add	r4, r3
 8009532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009536:	2200      	movs	r2, #0
 8009538:	673b      	str	r3, [r7, #112]	@ 0x70
 800953a:	677a      	str	r2, [r7, #116]	@ 0x74
 800953c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009540:	4642      	mov	r2, r8
 8009542:	464b      	mov	r3, r9
 8009544:	1891      	adds	r1, r2, r2
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	415b      	adcs	r3, r3
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009550:	4641      	mov	r1, r8
 8009552:	1851      	adds	r1, r2, r1
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	4649      	mov	r1, r9
 8009558:	414b      	adcs	r3, r1
 800955a:	607b      	str	r3, [r7, #4]
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009568:	4659      	mov	r1, fp
 800956a:	00cb      	lsls	r3, r1, #3
 800956c:	4651      	mov	r1, sl
 800956e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009572:	4651      	mov	r1, sl
 8009574:	00ca      	lsls	r2, r1, #3
 8009576:	4610      	mov	r0, r2
 8009578:	4619      	mov	r1, r3
 800957a:	4603      	mov	r3, r0
 800957c:	4642      	mov	r2, r8
 800957e:	189b      	adds	r3, r3, r2
 8009580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009582:	464b      	mov	r3, r9
 8009584:	460a      	mov	r2, r1
 8009586:	eb42 0303 	adc.w	r3, r2, r3
 800958a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	663b      	str	r3, [r7, #96]	@ 0x60
 8009596:	667a      	str	r2, [r7, #100]	@ 0x64
 8009598:	f04f 0200 	mov.w	r2, #0
 800959c:	f04f 0300 	mov.w	r3, #0
 80095a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80095a4:	4649      	mov	r1, r9
 80095a6:	008b      	lsls	r3, r1, #2
 80095a8:	4641      	mov	r1, r8
 80095aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ae:	4641      	mov	r1, r8
 80095b0:	008a      	lsls	r2, r1, #2
 80095b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80095b6:	f7f7 fb87 	bl	8000cc8 <__aeabi_uldivmod>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4b0d      	ldr	r3, [pc, #52]	@ (80095f4 <UART_SetConfig+0x4e4>)
 80095c0:	fba3 1302 	umull	r1, r3, r3, r2
 80095c4:	095b      	lsrs	r3, r3, #5
 80095c6:	2164      	movs	r1, #100	@ 0x64
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	3332      	adds	r3, #50	@ 0x32
 80095d2:	4a08      	ldr	r2, [pc, #32]	@ (80095f4 <UART_SetConfig+0x4e4>)
 80095d4:	fba2 2303 	umull	r2, r3, r2, r3
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4422      	add	r2, r4
 80095e6:	609a      	str	r2, [r3, #8]
}
 80095e8:	bf00      	nop
 80095ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095ee:	46bd      	mov	sp, r7
 80095f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095f4:	51eb851f 	.word	0x51eb851f

080095f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095f8:	b084      	sub	sp, #16
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	f107 001c 	add.w	r0, r7, #28
 8009606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	2b01      	cmp	r3, #1
 800960e:	d122      	bne.n	8009656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009614:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d105      	bne.n	800964a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fbe8 	bl	800ae20 <USB_CoreReset>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
 8009654:	e01a      	b.n	800968c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fbdc 	bl	800ae20 <USB_CoreReset>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800966c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d106      	bne.n	8009680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009676:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	639a      	str	r2, [r3, #56]	@ 0x38
 800967e:	e005      	b.n	800968c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	2b01      	cmp	r3, #1
 8009690:	d10b      	bne.n	80096aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f043 0206 	orr.w	r2, r3, #6
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f043 0220 	orr.w	r2, r3, #32
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096b6:	b004      	add	sp, #16
 80096b8:	4770      	bx	lr
	...

080096bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d165      	bne.n	800979c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a41      	ldr	r2, [pc, #260]	@ (80097d8 <USB_SetTurnaroundTime+0x11c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d906      	bls.n	80096e6 <USB_SetTurnaroundTime+0x2a>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4a40      	ldr	r2, [pc, #256]	@ (80097dc <USB_SetTurnaroundTime+0x120>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d202      	bcs.n	80096e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80096e0:	230f      	movs	r3, #15
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e062      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a3c      	ldr	r2, [pc, #240]	@ (80097dc <USB_SetTurnaroundTime+0x120>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d306      	bcc.n	80096fc <USB_SetTurnaroundTime+0x40>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4a3b      	ldr	r2, [pc, #236]	@ (80097e0 <USB_SetTurnaroundTime+0x124>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d202      	bcs.n	80096fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80096f6:	230e      	movs	r3, #14
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	e057      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4a38      	ldr	r2, [pc, #224]	@ (80097e0 <USB_SetTurnaroundTime+0x124>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d306      	bcc.n	8009712 <USB_SetTurnaroundTime+0x56>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <USB_SetTurnaroundTime+0x128>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d202      	bcs.n	8009712 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800970c:	230d      	movs	r3, #13
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	e04c      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	4a33      	ldr	r2, [pc, #204]	@ (80097e4 <USB_SetTurnaroundTime+0x128>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d306      	bcc.n	8009728 <USB_SetTurnaroundTime+0x6c>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	4a32      	ldr	r2, [pc, #200]	@ (80097e8 <USB_SetTurnaroundTime+0x12c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d802      	bhi.n	8009728 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009722:	230c      	movs	r3, #12
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	e041      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4a2f      	ldr	r2, [pc, #188]	@ (80097e8 <USB_SetTurnaroundTime+0x12c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d906      	bls.n	800973e <USB_SetTurnaroundTime+0x82>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4a2e      	ldr	r2, [pc, #184]	@ (80097ec <USB_SetTurnaroundTime+0x130>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d802      	bhi.n	800973e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009738:	230b      	movs	r3, #11
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e036      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	4a2a      	ldr	r2, [pc, #168]	@ (80097ec <USB_SetTurnaroundTime+0x130>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d906      	bls.n	8009754 <USB_SetTurnaroundTime+0x98>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4a29      	ldr	r2, [pc, #164]	@ (80097f0 <USB_SetTurnaroundTime+0x134>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d802      	bhi.n	8009754 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800974e:	230a      	movs	r3, #10
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e02b      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a26      	ldr	r2, [pc, #152]	@ (80097f0 <USB_SetTurnaroundTime+0x134>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d906      	bls.n	800976a <USB_SetTurnaroundTime+0xae>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4a25      	ldr	r2, [pc, #148]	@ (80097f4 <USB_SetTurnaroundTime+0x138>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d202      	bcs.n	800976a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009764:	2309      	movs	r3, #9
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e020      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4a21      	ldr	r2, [pc, #132]	@ (80097f4 <USB_SetTurnaroundTime+0x138>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d306      	bcc.n	8009780 <USB_SetTurnaroundTime+0xc4>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4a20      	ldr	r2, [pc, #128]	@ (80097f8 <USB_SetTurnaroundTime+0x13c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d802      	bhi.n	8009780 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800977a:	2308      	movs	r3, #8
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e015      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a1d      	ldr	r2, [pc, #116]	@ (80097f8 <USB_SetTurnaroundTime+0x13c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d906      	bls.n	8009796 <USB_SetTurnaroundTime+0xda>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a1c      	ldr	r2, [pc, #112]	@ (80097fc <USB_SetTurnaroundTime+0x140>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d202      	bcs.n	8009796 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009790:	2307      	movs	r3, #7
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e00a      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009796:	2306      	movs	r3, #6
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e007      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80097a2:	2309      	movs	r3, #9
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e001      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097a8:	2309      	movs	r3, #9
 80097aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	029b      	lsls	r3, r3, #10
 80097c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	371c      	adds	r7, #28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	00d8acbf 	.word	0x00d8acbf
 80097dc:	00e4e1c0 	.word	0x00e4e1c0
 80097e0:	00f42400 	.word	0x00f42400
 80097e4:	01067380 	.word	0x01067380
 80097e8:	011a499f 	.word	0x011a499f
 80097ec:	01312cff 	.word	0x01312cff
 80097f0:	014ca43f 	.word	0x014ca43f
 80097f4:	016e3600 	.word	0x016e3600
 80097f8:	01a6ab1f 	.word	0x01a6ab1f
 80097fc:	01e84800 	.word	0x01e84800

08009800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f043 0201 	orr.w	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f023 0201 	bic.w	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d115      	bne.n	8009892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009872:	2001      	movs	r0, #1
 8009874:	f7fa fdfa 	bl	800446c <HAL_Delay>
      ms++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fa3f 	bl	800ad02 <USB_GetMode>
 8009884:	4603      	mov	r3, r0
 8009886:	2b01      	cmp	r3, #1
 8009888:	d01e      	beq.n	80098c8 <USB_SetCurrentMode+0x84>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b31      	cmp	r3, #49	@ 0x31
 800988e:	d9f0      	bls.n	8009872 <USB_SetCurrentMode+0x2e>
 8009890:	e01a      	b.n	80098c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d115      	bne.n	80098c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098a4:	2001      	movs	r0, #1
 80098a6:	f7fa fde1 	bl	800446c <HAL_Delay>
      ms++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fa26 	bl	800ad02 <USB_GetMode>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <USB_SetCurrentMode+0x84>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b31      	cmp	r3, #49	@ 0x31
 80098c0:	d9f0      	bls.n	80098a4 <USB_SetCurrentMode+0x60>
 80098c2:	e001      	b.n	80098c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e005      	b.n	80098d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b32      	cmp	r3, #50	@ 0x32
 80098cc:	d101      	bne.n	80098d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098dc:	b084      	sub	sp, #16
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	e009      	b.n	8009910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	3340      	adds	r3, #64	@ 0x40
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	2200      	movs	r2, #0
 8009908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3301      	adds	r3, #1
 800990e:	613b      	str	r3, [r7, #16]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b0e      	cmp	r3, #14
 8009914:	d9f2      	bls.n	80098fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11c      	bne.n	8009956 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800992a:	f043 0302 	orr.w	r3, r3, #2
 800992e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009934:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e005      	b.n	8009962 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009968:	461a      	mov	r2, r3
 800996a:	2300      	movs	r3, #0
 800996c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009974:	4619      	mov	r1, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997c:	461a      	mov	r2, r3
 800997e:	680b      	ldr	r3, [r1, #0]
 8009980:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	2b01      	cmp	r3, #1
 8009986:	d10c      	bne.n	80099a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800998e:	2100      	movs	r1, #0
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f965 	bl	8009c60 <USB_SetDevSpeed>
 8009996:	e008      	b.n	80099aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009998:	2101      	movs	r1, #1
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f960 	bl	8009c60 <USB_SetDevSpeed>
 80099a0:	e003      	b.n	80099aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099a2:	2103      	movs	r1, #3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f95b 	bl	8009c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099aa:	2110      	movs	r1, #16
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f8f3 	bl	8009b98 <USB_FlushTxFifo>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f91f 	bl	8009c00 <USB_FlushRxFifo>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d2:	461a      	mov	r2, r3
 80099d4:	2300      	movs	r3, #0
 80099d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099de:	461a      	mov	r2, r3
 80099e0:	2300      	movs	r3, #0
 80099e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ea:	461a      	mov	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	e043      	b.n	8009a7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a0c:	d118      	bne.n	8009a40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a20:	461a      	mov	r2, r3
 8009a22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	e013      	b.n	8009a52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a36:	461a      	mov	r2, r3
 8009a38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	e008      	b.n	8009a52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5e:	461a      	mov	r2, r3
 8009a60:	2300      	movs	r3, #0
 8009a62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a70:	461a      	mov	r2, r3
 8009a72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	613b      	str	r3, [r7, #16]
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d3b7      	bcc.n	80099f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	e043      	b.n	8009b14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aa2:	d118      	bne.n	8009ad6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	e013      	b.n	8009ae8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009acc:	461a      	mov	r2, r3
 8009ace:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	e008      	b.n	8009ae8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af4:	461a      	mov	r2, r3
 8009af6:	2300      	movs	r3, #0
 8009af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b06:	461a      	mov	r2, r3
 8009b08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3301      	adds	r3, #1
 8009b12:	613b      	str	r3, [r7, #16]
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d3b7      	bcc.n	8009a8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009b3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	f043 0210 	orr.w	r2, r3, #16
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699a      	ldr	r2, [r3, #24]
 8009b54:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <USB_DevInit+0x2b8>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	f043 0208 	orr.w	r2, r3, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d107      	bne.n	8009b84 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b7c:	f043 0304 	orr.w	r3, r3, #4
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b90:	b004      	add	sp, #16
 8009b92:	4770      	bx	lr
 8009b94:	803c3800 	.word	0x803c3800

08009b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a13      	ldr	r2, [pc, #76]	@ (8009bfc <USB_FlushTxFifo+0x64>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d901      	bls.n	8009bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e01b      	b.n	8009bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	daf2      	bge.n	8009ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	019b      	lsls	r3, r3, #6
 8009bc8:	f043 0220 	orr.w	r2, r3, #32
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <USB_FlushTxFifo+0x64>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d901      	bls.n	8009be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e006      	b.n	8009bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	d0f0      	beq.n	8009bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	00030d40 	.word	0x00030d40

08009c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4a11      	ldr	r2, [pc, #68]	@ (8009c5c <USB_FlushRxFifo+0x5c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d901      	bls.n	8009c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e018      	b.n	8009c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	daf2      	bge.n	8009c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2210      	movs	r2, #16
 8009c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4a08      	ldr	r2, [pc, #32]	@ (8009c5c <USB_FlushRxFifo+0x5c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d901      	bls.n	8009c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e006      	b.n	8009c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f003 0310 	and.w	r3, r3, #16
 8009c4a:	2b10      	cmp	r3, #16
 8009c4c:	d0f0      	beq.n	8009c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	00030d40 	.word	0x00030d40

08009c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c80:	4313      	orrs	r3, r2
 8009c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b087      	sub	sp, #28
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0306 	and.w	r3, r3, #6
 8009caa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d102      	bne.n	8009cb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]
 8009cb6:	e00a      	b.n	8009cce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d002      	beq.n	8009cc4 <USB_GetDevSpeed+0x32>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b06      	cmp	r3, #6
 8009cc2:	d102      	bne.n	8009cca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	e001      	b.n	8009cce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009cca:	230f      	movs	r3, #15
 8009ccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d13a      	bne.n	8009d6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cfe:	69da      	ldr	r2, [r3, #28]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	2101      	movs	r1, #1
 8009d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	68f9      	ldr	r1, [r7, #12]
 8009d12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d16:	4313      	orrs	r3, r2
 8009d18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d155      	bne.n	8009ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	791b      	ldrb	r3, [r3, #4]
 8009d4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	059b      	lsls	r3, r3, #22
 8009d52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d54:	4313      	orrs	r3, r2
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	e036      	b.n	8009ddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d74:	69da      	ldr	r2, [r3, #28]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	2101      	movs	r1, #1
 8009d80:	fa01 f303 	lsl.w	r3, r1, r3
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11a      	bne.n	8009ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	791b      	ldrb	r3, [r3, #4]
 8009dc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
	...

08009dec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d161      	bne.n	8009ecc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e1e:	d11f      	bne.n	8009e60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 030f 	and.w	r3, r3, #15
 8009e70:	2101      	movs	r1, #1
 8009e72:	fa01 f303 	lsl.w	r3, r1, r3
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	43db      	mvns	r3, r3
 8009e7a:	68f9      	ldr	r1, [r7, #12]
 8009e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e80:	4013      	ands	r3, r2
 8009e82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	2101      	movs	r1, #1
 8009e96:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	0159      	lsls	r1, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	440b      	add	r3, r1
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4b35      	ldr	r3, [pc, #212]	@ (8009f9c <USB_DeactivateEndpoint+0x1b0>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	600b      	str	r3, [r1, #0]
 8009eca:	e060      	b.n	8009f8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ee2:	d11f      	bne.n	8009f24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009efe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 030f 	and.w	r3, r3, #15
 8009f34:	2101      	movs	r1, #1
 8009f36:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f44:	4013      	ands	r3, r2
 8009f46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f4e:	69da      	ldr	r2, [r3, #28]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	2101      	movs	r1, #1
 8009f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	43db      	mvns	r3, r3
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f68:	4013      	ands	r3, r2
 8009f6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	0159      	lsls	r1, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	4619      	mov	r1, r3
 8009f88:	4b05      	ldr	r3, [pc, #20]	@ (8009fa0 <USB_DeactivateEndpoint+0x1b4>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	ec337800 	.word	0xec337800
 8009fa0:	eff37800 	.word	0xeff37800

08009fa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	785b      	ldrb	r3, [r3, #1]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	f040 815c 	bne.w	800a27e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d132      	bne.n	800a034 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009fec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	0151      	lsls	r1, r2, #5
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	440a      	add	r2, r1
 800a008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a00c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	440a      	add	r2, r1
 800a028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a02c:	0cdb      	lsrs	r3, r3, #19
 800a02e:	04db      	lsls	r3, r3, #19
 800a030:	6113      	str	r3, [r2, #16]
 800a032:	e074      	b.n	800a11e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04e:	0cdb      	lsrs	r3, r3, #19
 800a050:	04db      	lsls	r3, r3, #19
 800a052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a072:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a084:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	6999      	ldr	r1, [r3, #24]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	440b      	add	r3, r1
 800a090:	1e59      	subs	r1, r3, #1
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	fbb1 f3f3 	udiv	r3, r1, r3
 800a09a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a09c:	4b9d      	ldr	r3, [pc, #628]	@ (800a314 <USB_EPStartXfer+0x370>)
 800a09e:	400b      	ands	r3, r1
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	0148      	lsls	r0, r1, #5
 800a0a4:	69f9      	ldr	r1, [r7, #28]
 800a0a6:	4401      	add	r1, r0
 800a0a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0c6:	69b9      	ldr	r1, [r7, #24]
 800a0c8:	0148      	lsls	r0, r1, #5
 800a0ca:	69f9      	ldr	r1, [r7, #28]
 800a0cc:	4401      	add	r1, r0
 800a0ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	791b      	ldrb	r3, [r3, #4]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d11f      	bne.n	800a11e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	69ba      	ldr	r2, [r7, #24]
 800a0ee:	0151      	lsls	r1, r2, #5
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	440a      	add	r2, r1
 800a0f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a0fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	0151      	lsls	r1, r2, #5
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	440a      	add	r2, r1
 800a114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a11c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d14b      	bne.n	800a1bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d009      	beq.n	800a140 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a138:	461a      	mov	r2, r3
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	791b      	ldrb	r3, [r3, #4]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d128      	bne.n	800a19a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a154:	2b00      	cmp	r3, #0
 800a156:	d110      	bne.n	800a17a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a172:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	e00f      	b.n	800a19a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	4413      	add	r3, r2
 800a182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a198:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	0151      	lsls	r1, r2, #5
 800a1ac:	69fa      	ldr	r2, [r7, #28]
 800a1ae:	440a      	add	r2, r1
 800a1b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	e133      	b.n	800a424 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	791b      	ldrb	r3, [r3, #4]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d015      	beq.n	800a210 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 811b 	beq.w	800a424 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	2101      	movs	r1, #1
 800a200:	fa01 f303 	lsl.w	r3, r1, r3
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a20a:	4313      	orrs	r3, r2
 800a20c:	634b      	str	r3, [r1, #52]	@ 0x34
 800a20e:	e109      	b.n	800a424 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d110      	bne.n	800a242 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a23a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	e00f      	b.n	800a262 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a25c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a260:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6919      	ldr	r1, [r3, #16]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	b298      	uxth	r0, r3
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	4603      	mov	r3, r0
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fade 	bl	800a838 <USB_WritePacket>
 800a27c:	e0d2      	b.n	800a424 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a298:	0cdb      	lsrs	r3, r3, #19
 800a29a:	04db      	lsls	r3, r3, #19
 800a29c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a2bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a2c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d126      	bne.n	800a318 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2e0:	69b9      	ldr	r1, [r7, #24]
 800a2e2:	0148      	lsls	r0, r1, #5
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	4401      	add	r1, r0
 800a2e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a30a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a30e:	6113      	str	r3, [r2, #16]
 800a310:	e03a      	b.n	800a388 <USB_EPStartXfer+0x3e4>
 800a312:	bf00      	nop
 800a314:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4413      	add	r3, r2
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	8afa      	ldrh	r2, [r7, #22]
 800a334:	fb03 f202 	mul.w	r2, r3, r2
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	8afb      	ldrh	r3, [r7, #22]
 800a34c:	04d9      	lsls	r1, r3, #19
 800a34e:	4b38      	ldr	r3, [pc, #224]	@ (800a430 <USB_EPStartXfer+0x48c>)
 800a350:	400b      	ands	r3, r1
 800a352:	69b9      	ldr	r1, [r7, #24]
 800a354:	0148      	lsls	r0, r1, #5
 800a356:	69f9      	ldr	r1, [r7, #28]
 800a358:	4401      	add	r1, r0
 800a35a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a35e:	4313      	orrs	r3, r2
 800a360:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a378:	69b9      	ldr	r1, [r7, #24]
 800a37a:	0148      	lsls	r0, r1, #5
 800a37c:	69f9      	ldr	r1, [r7, #28]
 800a37e:	4401      	add	r1, r0
 800a380:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a384:	4313      	orrs	r3, r2
 800a386:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10d      	bne.n	800a3aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d009      	beq.n	800a3aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	6919      	ldr	r1, [r3, #16]
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a6:	460a      	mov	r2, r1
 800a3a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	791b      	ldrb	r3, [r3, #4]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d128      	bne.n	800a404 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d110      	bne.n	800a3e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	e00f      	b.n	800a404 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a402:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	0151      	lsls	r1, r2, #5
 800a416:	69fa      	ldr	r2, [r7, #28]
 800a418:	440a      	add	r2, r1
 800a41a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a41e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	1ff80000 	.word	0x1ff80000

0800a434 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b01      	cmp	r3, #1
 800a452:	f040 80ce 	bne.w	800a5f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d132      	bne.n	800a4c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	440a      	add	r2, r1
 800a474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a478:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a47c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	0151      	lsls	r1, r2, #5
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	440a      	add	r2, r1
 800a498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a49c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	0151      	lsls	r1, r2, #5
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	440a      	add	r2, r1
 800a4b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4bc:	0cdb      	lsrs	r3, r3, #19
 800a4be:	04db      	lsls	r3, r3, #19
 800a4c0:	6113      	str	r3, [r2, #16]
 800a4c2:	e04e      	b.n	800a562 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4de:	0cdb      	lsrs	r3, r3, #19
 800a4e0:	04db      	lsls	r3, r3, #19
 800a4e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a506:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	d903      	bls.n	800a51c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	0151      	lsls	r1, r2, #5
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	440a      	add	r2, r1
 800a532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a536:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a53a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a548:	691a      	ldr	r2, [r3, #16]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a552:	6939      	ldr	r1, [r7, #16]
 800a554:	0148      	lsls	r0, r1, #5
 800a556:	6979      	ldr	r1, [r7, #20]
 800a558:	4401      	add	r1, r0
 800a55a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a55e:	4313      	orrs	r3, r2
 800a560:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d11e      	bne.n	800a5a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d009      	beq.n	800a584 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a57c:	461a      	mov	r2, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a59e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	e097      	b.n	800a6d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	0151      	lsls	r1, r2, #5
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	440a      	add	r2, r1
 800a5bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8083 	beq.w	800a6d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	f003 030f 	and.w	r3, r3, #15
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e6:	6979      	ldr	r1, [r7, #20]
 800a5e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5f0:	e071      	b.n	800a6d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a60c:	0cdb      	lsrs	r3, r3, #19
 800a60e:	04db      	lsls	r3, r3, #19
 800a610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	0151      	lsls	r1, r2, #5
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	440a      	add	r2, r1
 800a628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a62c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a630:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a634:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	0151      	lsls	r1, r2, #5
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	440a      	add	r2, r1
 800a664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a668:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a66c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	691a      	ldr	r2, [r3, #16]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a684:	6939      	ldr	r1, [r7, #16]
 800a686:	0148      	lsls	r0, r1, #5
 800a688:	6979      	ldr	r1, [r7, #20]
 800a68a:	4401      	add	r1, r0
 800a68c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a690:	4313      	orrs	r3, r2
 800a692:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d10d      	bne.n	800a6b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6919      	ldr	r1, [r3, #16]
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b2:	460a      	mov	r2, r1
 800a6b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d14a      	bne.n	800a798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a71a:	f040 8086 	bne.w	800a82a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	7812      	ldrb	r2, [r2, #0]
 800a732:	0151      	lsls	r1, r2, #5
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	440a      	add	r2, r1
 800a738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	0151      	lsls	r1, r2, #5
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	440a      	add	r2, r1
 800a75c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3301      	adds	r3, #1
 800a76a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a772:	4293      	cmp	r3, r2
 800a774:	d902      	bls.n	800a77c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	75fb      	strb	r3, [r7, #23]
          break;
 800a77a:	e056      	b.n	800a82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a794:	d0e7      	beq.n	800a766 <USB_EPStopXfer+0x82>
 800a796:	e048      	b.n	800a82a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b0:	d13b      	bne.n	800a82a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	7812      	ldrb	r2, [r2, #0]
 800a7c6:	0151      	lsls	r1, r2, #5
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	440a      	add	r2, r1
 800a7cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	7812      	ldrb	r2, [r2, #0]
 800a7ea:	0151      	lsls	r1, r2, #5
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	440a      	add	r2, r1
 800a7f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a806:	4293      	cmp	r3, r2
 800a808:	d902      	bls.n	800a810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	75fb      	strb	r3, [r7, #23]
          break;
 800a80e:	e00c      	b.n	800a82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a828:	d0e7      	beq.n	800a7fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a838:	b480      	push	{r7}
 800a83a:	b089      	sub	sp, #36	@ 0x24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4611      	mov	r1, r2
 800a844:	461a      	mov	r2, r3
 800a846:	460b      	mov	r3, r1
 800a848:	71fb      	strb	r3, [r7, #7]
 800a84a:	4613      	mov	r3, r2
 800a84c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d123      	bne.n	800a8a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a85e:	88bb      	ldrh	r3, [r7, #4]
 800a860:	3303      	adds	r3, #3
 800a862:	089b      	lsrs	r3, r3, #2
 800a864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a866:	2300      	movs	r3, #0
 800a868:	61bb      	str	r3, [r7, #24]
 800a86a:	e018      	b.n	800a89e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	031a      	lsls	r2, r3, #12
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	4413      	add	r3, r2
 800a874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a878:	461a      	mov	r2, r3
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	3301      	adds	r3, #1
 800a884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	3301      	adds	r3, #1
 800a88a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	3301      	adds	r3, #1
 800a890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	3301      	adds	r3, #1
 800a896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	3301      	adds	r3, #1
 800a89c:	61bb      	str	r3, [r7, #24]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d3e2      	bcc.n	800a86c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3724      	adds	r7, #36	@ 0x24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b08b      	sub	sp, #44	@ 0x2c
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	089b      	lsrs	r3, r3, #2
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8d2:	88fb      	ldrh	r3, [r7, #6]
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	623b      	str	r3, [r7, #32]
 800a8de:	e014      	b.n	800a90a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	3301      	adds	r3, #1
 800a902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	3301      	adds	r3, #1
 800a908:	623b      	str	r3, [r7, #32]
 800a90a:	6a3a      	ldr	r2, [r7, #32]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d3e6      	bcc.n	800a8e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a912:	8bfb      	ldrh	r3, [r7, #30]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01e      	beq.n	800a956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a922:	461a      	mov	r2, r3
 800a924:	f107 0310 	add.w	r3, r7, #16
 800a928:	6812      	ldr	r2, [r2, #0]
 800a92a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	701a      	strb	r2, [r3, #0]
      i++;
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	3301      	adds	r3, #1
 800a942:	623b      	str	r3, [r7, #32]
      pDest++;
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	3301      	adds	r3, #1
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a94a:	8bfb      	ldrh	r3, [r7, #30]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a950:	8bfb      	ldrh	r3, [r7, #30]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1ea      	bne.n	800a92c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a958:	4618      	mov	r0, r3
 800a95a:	372c      	adds	r7, #44	@ 0x2c
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785b      	ldrb	r3, [r3, #1]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d12c      	bne.n	800a9da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	db12      	blt.n	800a9b8 <USB_EPSetStall+0x54>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00f      	beq.n	800a9b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	0151      	lsls	r1, r2, #5
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	0151      	lsls	r1, r2, #5
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	440a      	add	r2, r1
 800a9ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	e02b      	b.n	800aa32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	db12      	blt.n	800aa12 <USB_EPSetStall+0xae>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00f      	beq.n	800aa12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	0151      	lsls	r1, r2, #5
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	440a      	add	r2, r1
 800aa08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	0151      	lsls	r1, r2, #5
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	440a      	add	r2, r1
 800aa28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	785b      	ldrb	r3, [r3, #1]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d128      	bne.n	800aaae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	791b      	ldrb	r3, [r3, #4]
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d003      	beq.n	800aa8c <USB_EPClearStall+0x4c>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	791b      	ldrb	r3, [r3, #4]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d138      	bne.n	800aafe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	0151      	lsls	r1, r2, #5
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	440a      	add	r2, r1
 800aaa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	e027      	b.n	800aafe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	0151      	lsls	r1, r2, #5
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	440a      	add	r2, r1
 800aac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aacc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	791b      	ldrb	r3, [r3, #4]
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d003      	beq.n	800aade <USB_EPClearStall+0x9e>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d10f      	bne.n	800aafe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aafc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ab2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab46:	4313      	orrs	r3, r2
 800ab48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab86:	f023 0302 	bic.w	r3, r3, #2
 800ab8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abc8:	f043 0302 	orr.w	r3, r3, #2
 800abcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4013      	ands	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abf4:	68fb      	ldr	r3, [r7, #12]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b085      	sub	sp, #20
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	4013      	ands	r3, r2
 800ac24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	0c1b      	lsrs	r3, r3, #16
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	4013      	ands	r3, r2
 800ac58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	b29b      	uxth	r3, r3
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac7a:	78fb      	ldrb	r3, [r7, #3]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	4013      	ands	r3, r2
 800ac96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac98:	68bb      	ldr	r3, [r7, #8]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b087      	sub	sp, #28
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acca:	78fb      	ldrb	r3, [r7, #3]
 800accc:	f003 030f 	and.w	r3, r3, #15
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	fa22 f303 	lsr.w	r3, r2, r3
 800acd6:	01db      	lsls	r3, r3, #7
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4013      	ands	r3, r2
 800acf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acf4:	68bb      	ldr	r3, [r7, #8]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	f003 0301 	and.w	r3, r3, #1
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ad3c:	f023 0307 	bic.w	r3, r3, #7
 800ad40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	333c      	adds	r3, #60	@ 0x3c
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	4a26      	ldr	r2, [pc, #152]	@ (800ae1c <USB_EP0_OutStart+0xb8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d90a      	bls.n	800ad9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad98:	d101      	bne.n	800ad9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e037      	b.n	800ae0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada4:	461a      	mov	r2, r3
 800ada6:	2300      	movs	r3, #0
 800ada8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adcc:	f043 0318 	orr.w	r3, r3, #24
 800add0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ade0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ade4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ade6:	7afb      	ldrb	r3, [r7, #11]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d10f      	bne.n	800ae0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ae0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	371c      	adds	r7, #28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	4f54300a 	.word	0x4f54300a

0800ae20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	4a13      	ldr	r2, [pc, #76]	@ (800ae84 <USB_CoreReset+0x64>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d901      	bls.n	800ae3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e01b      	b.n	800ae76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	daf2      	bge.n	800ae2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f043 0201 	orr.w	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4a09      	ldr	r2, [pc, #36]	@ (800ae84 <USB_CoreReset+0x64>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d901      	bls.n	800ae68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e006      	b.n	800ae76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d0f0      	beq.n	800ae56 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	00030d40 	.word	0x00030d40

0800ae88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae8c:	4904      	ldr	r1, [pc, #16]	@ (800aea0 <MX_FATFS_Init+0x18>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	@ (800aea4 <MX_FATFS_Init+0x1c>)
 800ae90:	f002 f8a0 	bl	800cfd4 <FATFS_LinkDriver>
 800ae94:	4603      	mov	r3, r0
 800ae96:	461a      	mov	r2, r3
 800ae98:	4b03      	ldr	r3, [pc, #12]	@ (800aea8 <MX_FATFS_Init+0x20>)
 800ae9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae9c:	bf00      	nop
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	2000091c 	.word	0x2000091c
 800aea4:	20000010 	.word	0x20000010
 800aea8:	20000918 	.word	0x20000918

0800aeac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800aeb6:	4b06      	ldr	r3, [pc, #24]	@ (800aed0 <USER_initialize+0x24>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aebc:	4b04      	ldr	r3, [pc, #16]	@ (800aed0 <USER_initialize+0x24>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	2000000d 	.word	0x2000000d

0800aed4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800aede:	4b06      	ldr	r3, [pc, #24]	@ (800aef8 <USER_status+0x24>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aee4:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <USER_status+0x24>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	2000000d 	.word	0x2000000d

0800aefc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800af0c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	4603      	mov	r3, r0
 800af28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800af2a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	603a      	str	r2, [r7, #0]
 800af42:	71fb      	strb	r3, [r7, #7]
 800af44:	460b      	mov	r3, r1
 800af46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
    return res;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
	...

0800af5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af6c:	f002 fd8e 	bl	800da8c <USBD_static_malloc>
 800af70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d109      	bne.n	800af8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	32b0      	adds	r2, #176	@ 0xb0
 800af82:	2100      	movs	r1, #0
 800af84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af88:	2302      	movs	r3, #2
 800af8a:	e0d4      	b.n	800b136 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af90:	2100      	movs	r1, #0
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f004 fc1b 	bl	800f7ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	32b0      	adds	r2, #176	@ 0xb0
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32b0      	adds	r2, #176	@ 0xb0
 800afb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7c1b      	ldrb	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d138      	bne.n	800b036 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afc4:	4b5e      	ldr	r3, [pc, #376]	@ (800b140 <USBD_CDC_Init+0x1e4>)
 800afc6:	7819      	ldrb	r1, [r3, #0]
 800afc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afcc:	2202      	movs	r2, #2
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f002 fbeb 	bl	800d7aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afd4:	4b5a      	ldr	r3, [pc, #360]	@ (800b140 <USBD_CDC_Init+0x1e4>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	f003 020f 	and.w	r2, r3, #15
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	440b      	add	r3, r1
 800afe8:	3324      	adds	r3, #36	@ 0x24
 800afea:	2201      	movs	r2, #1
 800afec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afee:	4b55      	ldr	r3, [pc, #340]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800aff0:	7819      	ldrb	r1, [r3, #0]
 800aff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aff6:	2202      	movs	r2, #2
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fbd6 	bl	800d7aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800affe:	4b51      	ldr	r3, [pc, #324]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	f003 020f 	and.w	r2, r3, #15
 800b006:	6879      	ldr	r1, [r7, #4]
 800b008:	4613      	mov	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	440b      	add	r3, r1
 800b012:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b016:	2201      	movs	r2, #1
 800b018:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b01a:	4b4b      	ldr	r3, [pc, #300]	@ (800b148 <USBD_CDC_Init+0x1ec>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 020f 	and.w	r2, r3, #15
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	3326      	adds	r3, #38	@ 0x26
 800b030:	2210      	movs	r2, #16
 800b032:	801a      	strh	r2, [r3, #0]
 800b034:	e035      	b.n	800b0a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b036:	4b42      	ldr	r3, [pc, #264]	@ (800b140 <USBD_CDC_Init+0x1e4>)
 800b038:	7819      	ldrb	r1, [r3, #0]
 800b03a:	2340      	movs	r3, #64	@ 0x40
 800b03c:	2202      	movs	r2, #2
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f002 fbb3 	bl	800d7aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b044:	4b3e      	ldr	r3, [pc, #248]	@ (800b140 <USBD_CDC_Init+0x1e4>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 020f 	and.w	r2, r3, #15
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3324      	adds	r3, #36	@ 0x24
 800b05a:	2201      	movs	r2, #1
 800b05c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b05e:	4b39      	ldr	r3, [pc, #228]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800b060:	7819      	ldrb	r1, [r3, #0]
 800b062:	2340      	movs	r3, #64	@ 0x40
 800b064:	2202      	movs	r2, #2
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f002 fb9f 	bl	800d7aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b06c:	4b35      	ldr	r3, [pc, #212]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 020f 	and.w	r2, r3, #15
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	440b      	add	r3, r1
 800b080:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b084:	2201      	movs	r2, #1
 800b086:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b088:	4b2f      	ldr	r3, [pc, #188]	@ (800b148 <USBD_CDC_Init+0x1ec>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	f003 020f 	and.w	r2, r3, #15
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	3326      	adds	r3, #38	@ 0x26
 800b09e:	2210      	movs	r2, #16
 800b0a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0a2:	4b29      	ldr	r3, [pc, #164]	@ (800b148 <USBD_CDC_Init+0x1ec>)
 800b0a4:	7819      	ldrb	r1, [r3, #0]
 800b0a6:	2308      	movs	r3, #8
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f002 fb7d 	bl	800d7aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b0b0:	4b25      	ldr	r3, [pc, #148]	@ (800b148 <USBD_CDC_Init+0x1ec>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	f003 020f 	and.w	r2, r3, #15
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	3324      	adds	r3, #36	@ 0x24
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	33b0      	adds	r3, #176	@ 0xb0
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b100:	2302      	movs	r3, #2
 800b102:	e018      	b.n	800b136 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7c1b      	ldrb	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b10c:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800b10e:	7819      	ldrb	r1, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f002 fc34 	bl	800d988 <USBD_LL_PrepareReceive>
 800b120:	e008      	b.n	800b134 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b122:	4b08      	ldr	r3, [pc, #32]	@ (800b144 <USBD_CDC_Init+0x1e8>)
 800b124:	7819      	ldrb	r1, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b12c:	2340      	movs	r3, #64	@ 0x40
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f002 fc2a 	bl	800d988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200000ab 	.word	0x200000ab
 800b144:	200000ac 	.word	0x200000ac
 800b148:	200000ad 	.word	0x200000ad

0800b14c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b158:	4b3a      	ldr	r3, [pc, #232]	@ (800b244 <USBD_CDC_DeInit+0xf8>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f002 fb49 	bl	800d7f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b164:	4b37      	ldr	r3, [pc, #220]	@ (800b244 <USBD_CDC_DeInit+0xf8>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 020f 	and.w	r2, r3, #15
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	3324      	adds	r3, #36	@ 0x24
 800b17a:	2200      	movs	r2, #0
 800b17c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b17e:	4b32      	ldr	r3, [pc, #200]	@ (800b248 <USBD_CDC_DeInit+0xfc>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f002 fb36 	bl	800d7f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b18a:	4b2f      	ldr	r3, [pc, #188]	@ (800b248 <USBD_CDC_DeInit+0xfc>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f003 020f 	and.w	r2, r3, #15
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	440b      	add	r3, r1
 800b19e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b1a6:	4b29      	ldr	r3, [pc, #164]	@ (800b24c <USBD_CDC_DeInit+0x100>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f002 fb22 	bl	800d7f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b1b2:	4b26      	ldr	r3, [pc, #152]	@ (800b24c <USBD_CDC_DeInit+0x100>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	f003 020f 	and.w	r2, r3, #15
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3324      	adds	r3, #36	@ 0x24
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1cc:	4b1f      	ldr	r3, [pc, #124]	@ (800b24c <USBD_CDC_DeInit+0x100>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	f003 020f 	and.w	r2, r3, #15
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	440b      	add	r3, r1
 800b1e0:	3326      	adds	r3, #38	@ 0x26
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	32b0      	adds	r2, #176	@ 0xb0
 800b1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01f      	beq.n	800b238 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	33b0      	adds	r3, #176	@ 0xb0
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	32b0      	adds	r2, #176	@ 0xb0
 800b216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f002 fc44 	bl	800daa8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32b0      	adds	r2, #176	@ 0xb0
 800b22a:	2100      	movs	r1, #0
 800b22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	200000ab 	.word	0x200000ab
 800b248:	200000ac 	.word	0x200000ac
 800b24c:	200000ad 	.word	0x200000ad

0800b250 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32b0      	adds	r2, #176	@ 0xb0
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e0bf      	b.n	800b400 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d050      	beq.n	800b32e <USBD_CDC_Setup+0xde>
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	f040 80af 	bne.w	800b3f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	88db      	ldrh	r3, [r3, #6]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d03a      	beq.n	800b310 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	b25b      	sxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	da1b      	bge.n	800b2dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	33b0      	adds	r3, #176	@ 0xb0
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	88d2      	ldrh	r2, [r2, #6]
 800b2c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	bf28      	it	cs
 800b2ca:	2307      	movcs	r3, #7
 800b2cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	89fa      	ldrh	r2, [r7, #14]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 fdb1 	bl	800ce3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2da:	e090      	b.n	800b3fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	785a      	ldrb	r2, [r3, #1]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88db      	ldrh	r3, [r3, #6]
 800b2ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2ec:	d803      	bhi.n	800b2f6 <USBD_CDC_Setup+0xa6>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	88db      	ldrh	r3, [r3, #6]
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	e000      	b.n	800b2f8 <USBD_CDC_Setup+0xa8>
 800b2f6:	2240      	movs	r2, #64	@ 0x40
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2fe:	6939      	ldr	r1, [r7, #16]
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b306:	461a      	mov	r2, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f001 fdc3 	bl	800ce94 <USBD_CtlPrepareRx>
      break;
 800b30e:	e076      	b.n	800b3fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	33b0      	adds	r3, #176	@ 0xb0
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	7850      	ldrb	r0, [r2, #1]
 800b326:	2200      	movs	r2, #0
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	4798      	blx	r3
      break;
 800b32c:	e067      	b.n	800b3fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	2b0b      	cmp	r3, #11
 800b334:	d851      	bhi.n	800b3da <USBD_CDC_Setup+0x18a>
 800b336:	a201      	add	r2, pc, #4	@ (adr r2, 800b33c <USBD_CDC_Setup+0xec>)
 800b338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33c:	0800b36d 	.word	0x0800b36d
 800b340:	0800b3e9 	.word	0x0800b3e9
 800b344:	0800b3db 	.word	0x0800b3db
 800b348:	0800b3db 	.word	0x0800b3db
 800b34c:	0800b3db 	.word	0x0800b3db
 800b350:	0800b3db 	.word	0x0800b3db
 800b354:	0800b3db 	.word	0x0800b3db
 800b358:	0800b3db 	.word	0x0800b3db
 800b35c:	0800b3db 	.word	0x0800b3db
 800b360:	0800b3db 	.word	0x0800b3db
 800b364:	0800b397 	.word	0x0800b397
 800b368:	0800b3c1 	.word	0x0800b3c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b03      	cmp	r3, #3
 800b376:	d107      	bne.n	800b388 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b378:	f107 030a 	add.w	r3, r7, #10
 800b37c:	2202      	movs	r2, #2
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 fd5b 	bl	800ce3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b386:	e032      	b.n	800b3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fce5 	bl	800cd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800b390:	2303      	movs	r3, #3
 800b392:	75fb      	strb	r3, [r7, #23]
          break;
 800b394:	e02b      	b.n	800b3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d107      	bne.n	800b3b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3a2:	f107 030d 	add.w	r3, r7, #13
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 fd46 	bl	800ce3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3b0:	e01d      	b.n	800b3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fcd0 	bl	800cd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b3be:	e016      	b.n	800b3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d00f      	beq.n	800b3ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f001 fcc3 	bl	800cd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3d8:	e008      	b.n	800b3ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 fcbc 	bl	800cd5a <USBD_CtlError>
          ret = USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b3e6:	e002      	b.n	800b3ee <USBD_CDC_Setup+0x19e>
          break;
 800b3e8:	bf00      	nop
 800b3ea:	e008      	b.n	800b3fe <USBD_CDC_Setup+0x1ae>
          break;
 800b3ec:	bf00      	nop
      }
      break;
 800b3ee:	e006      	b.n	800b3fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f001 fcb1 	bl	800cd5a <USBD_CtlError>
      ret = USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b3fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b41a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	32b0      	adds	r2, #176	@ 0xb0
 800b426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b42e:	2303      	movs	r3, #3
 800b430:	e065      	b.n	800b4fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	32b0      	adds	r2, #176	@ 0xb0
 800b43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	f003 020f 	and.w	r2, r3, #15
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	3318      	adds	r3, #24
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d02f      	beq.n	800b4bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	f003 020f 	and.w	r2, r3, #15
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	3318      	adds	r3, #24
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	f003 010f 	and.w	r1, r3, #15
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	460b      	mov	r3, r1
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	440b      	add	r3, r1
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4403      	add	r3, r0
 800b484:	3348      	adds	r3, #72	@ 0x48
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	fbb2 f1f3 	udiv	r1, r2, r3
 800b48c:	fb01 f303 	mul.w	r3, r1, r3
 800b490:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b492:	2b00      	cmp	r3, #0
 800b494:	d112      	bne.n	800b4bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	f003 020f 	and.w	r2, r3, #15
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	440b      	add	r3, r1
 800b4a8:	3318      	adds	r3, #24
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4ae:	78f9      	ldrb	r1, [r7, #3]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f002 fa46 	bl	800d946 <USBD_LL_Transmit>
 800b4ba:	e01f      	b.n	800b4fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	33b0      	adds	r3, #176	@ 0xb0
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d010      	beq.n	800b4fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	33b0      	adds	r3, #176	@ 0xb0
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4f8:	78fa      	ldrb	r2, [r7, #3]
 800b4fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	460b      	mov	r3, r1
 800b510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	32b0      	adds	r2, #176	@ 0xb0
 800b51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b520:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	32b0      	adds	r2, #176	@ 0xb0
 800b52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b534:	2303      	movs	r3, #3
 800b536:	e01a      	b.n	800b56e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f002 fa44 	bl	800d9ca <USBD_LL_GetRxDataSize>
 800b542:	4602      	mov	r2, r0
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	33b0      	adds	r3, #176	@ 0xb0
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b568:	4611      	mov	r1, r2
 800b56a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b084      	sub	sp, #16
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	32b0      	adds	r2, #176	@ 0xb0
 800b588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b594:	2303      	movs	r3, #3
 800b596:	e024      	b.n	800b5e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	33b0      	adds	r3, #176	@ 0xb0
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d019      	beq.n	800b5e0 <USBD_CDC_EP0_RxReady+0x6a>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5b2:	2bff      	cmp	r3, #255	@ 0xff
 800b5b4:	d014      	beq.n	800b5e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	33b0      	adds	r3, #176	@ 0xb0
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	22ff      	movs	r2, #255	@ 0xff
 800b5dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5f4:	2182      	movs	r1, #130	@ 0x82
 800b5f6:	4818      	ldr	r0, [pc, #96]	@ (800b658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5f8:	f000 fd4f 	bl	800c09a <USBD_GetEpDesc>
 800b5fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5fe:	2101      	movs	r1, #1
 800b600:	4815      	ldr	r0, [pc, #84]	@ (800b658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b602:	f000 fd4a 	bl	800c09a <USBD_GetEpDesc>
 800b606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b608:	2181      	movs	r1, #129	@ 0x81
 800b60a:	4813      	ldr	r0, [pc, #76]	@ (800b658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b60c:	f000 fd45 	bl	800c09a <USBD_GetEpDesc>
 800b610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2210      	movs	r2, #16
 800b61c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2200      	movs	r2, #0
 800b628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b62c:	711a      	strb	r2, [r3, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d006      	beq.n	800b646 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b640:	711a      	strb	r2, [r3, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2243      	movs	r2, #67	@ 0x43
 800b64a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b64c:	4b02      	ldr	r3, [pc, #8]	@ (800b658 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3718      	adds	r7, #24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000068 	.word	0x20000068

0800b65c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b664:	2182      	movs	r1, #130	@ 0x82
 800b666:	4818      	ldr	r0, [pc, #96]	@ (800b6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b668:	f000 fd17 	bl	800c09a <USBD_GetEpDesc>
 800b66c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b66e:	2101      	movs	r1, #1
 800b670:	4815      	ldr	r0, [pc, #84]	@ (800b6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b672:	f000 fd12 	bl	800c09a <USBD_GetEpDesc>
 800b676:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b678:	2181      	movs	r1, #129	@ 0x81
 800b67a:	4813      	ldr	r0, [pc, #76]	@ (800b6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b67c:	f000 fd0d 	bl	800c09a <USBD_GetEpDesc>
 800b680:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2210      	movs	r2, #16
 800b68c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	2200      	movs	r2, #0
 800b698:	711a      	strb	r2, [r3, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f042 0202 	orr.w	r2, r2, #2
 800b6a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d006      	beq.n	800b6b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	711a      	strb	r2, [r3, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f042 0202 	orr.w	r2, r2, #2
 800b6b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2243      	movs	r2, #67	@ 0x43
 800b6ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6bc:	4b02      	ldr	r3, [pc, #8]	@ (800b6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000068 	.word	0x20000068

0800b6cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6d4:	2182      	movs	r1, #130	@ 0x82
 800b6d6:	4818      	ldr	r0, [pc, #96]	@ (800b738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6d8:	f000 fcdf 	bl	800c09a <USBD_GetEpDesc>
 800b6dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4815      	ldr	r0, [pc, #84]	@ (800b738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6e2:	f000 fcda 	bl	800c09a <USBD_GetEpDesc>
 800b6e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6e8:	2181      	movs	r1, #129	@ 0x81
 800b6ea:	4813      	ldr	r0, [pc, #76]	@ (800b738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6ec:	f000 fcd5 	bl	800c09a <USBD_GetEpDesc>
 800b6f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d006      	beq.n	800b712 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2200      	movs	r2, #0
 800b708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b70c:	711a      	strb	r2, [r3, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b720:	711a      	strb	r2, [r3, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2243      	movs	r2, #67	@ 0x43
 800b72a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b72c:	4b02      	ldr	r3, [pc, #8]	@ (800b738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000068 	.word	0x20000068

0800b73c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	220a      	movs	r2, #10
 800b748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b74a:	4b03      	ldr	r3, [pc, #12]	@ (800b758 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	20000024 	.word	0x20000024

0800b75c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e009      	b.n	800b784 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	33b0      	adds	r3, #176	@ 0xb0
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	32b0      	adds	r2, #176	@ 0xb0
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e008      	b.n	800b7c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	32b0      	adds	r2, #176	@ 0xb0
 800b7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e004      	b.n	800b802 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	32b0      	adds	r2, #176	@ 0xb0
 800b822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b826:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b828:	2301      	movs	r3, #1
 800b82a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32b0      	adds	r2, #176	@ 0xb0
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	e025      	b.n	800b88e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d11f      	bne.n	800b88c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2201      	movs	r2, #1
 800b850:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b854:	4b10      	ldr	r3, [pc, #64]	@ (800b898 <USBD_CDC_TransmitPacket+0x88>)
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	f003 020f 	and.w	r2, r3, #15
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4403      	add	r3, r0
 800b86e:	3318      	adds	r3, #24
 800b870:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b872:	4b09      	ldr	r3, [pc, #36]	@ (800b898 <USBD_CDC_TransmitPacket+0x88>)
 800b874:	7819      	ldrb	r1, [r3, #0]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f002 f85f 	bl	800d946 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	200000ab 	.word	0x200000ab

0800b89c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	32b0      	adds	r2, #176	@ 0xb0
 800b8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	32b0      	adds	r2, #176	@ 0xb0
 800b8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e018      	b.n	800b8fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7c1b      	ldrb	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <USBD_CDC_ReceivePacket+0x68>)
 800b8d4:	7819      	ldrb	r1, [r3, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f002 f851 	bl	800d988 <USBD_LL_PrepareReceive>
 800b8e6:	e008      	b.n	800b8fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8e8:	4b06      	ldr	r3, [pc, #24]	@ (800b904 <USBD_CDC_ReceivePacket+0x68>)
 800b8ea:	7819      	ldrb	r1, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8f2:	2340      	movs	r3, #64	@ 0x40
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f002 f847 	bl	800d988 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	200000ac 	.word	0x200000ac

0800b908 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	4613      	mov	r3, r2
 800b914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e01f      	b.n	800b960 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	79fa      	ldrb	r2, [r7, #7]
 800b952:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f001 fec1 	bl	800d6dc <USBD_LL_Init>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e025      	b.n	800b9cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	@ 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00f      	beq.n	800b9bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	@ 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ac:	f107 020e 	add.w	r2, r7, #14
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9c2:	1c5a      	adds	r2, r3, #1
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 fec9 	bl	800d774 <USBD_LL_Start>
 800b9e2:	4603      	mov	r3, r0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d009      	beq.n	800ba30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	4611      	mov	r1, r2
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	78fa      	ldrb	r2, [r7, #3]
 800ba54:	4611      	mov	r1, r2
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba60:	2303      	movs	r3, #3
 800ba62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f001 f930 	bl	800cce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ba94:	461a      	mov	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800baa2:	f003 031f 	and.w	r3, r3, #31
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d01a      	beq.n	800bae0 <USBD_LL_SetupStage+0x72>
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d822      	bhi.n	800baf4 <USBD_LL_SetupStage+0x86>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <USBD_LL_SetupStage+0x4a>
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d00a      	beq.n	800bacc <USBD_LL_SetupStage+0x5e>
 800bab6:	e01d      	b.n	800baf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fb5d 	bl	800c180 <USBD_StdDevReq>
 800bac6:	4603      	mov	r3, r0
 800bac8:	73fb      	strb	r3, [r7, #15]
      break;
 800baca:	e020      	b.n	800bb0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fbc5 	bl	800c264 <USBD_StdItfReq>
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
      break;
 800bade:	e016      	b.n	800bb0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fc27 	bl	800c33c <USBD_StdEPReq>
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
      break;
 800baf2:	e00c      	b.n	800bb0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bafa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 fe96 	bl	800d834 <USBD_LL_StallEP>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb0c:	bf00      	nop
  }

  return ret;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	460b      	mov	r3, r1
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bb2a:	7afb      	ldrb	r3, [r7, #11]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d16e      	bne.n	800bc0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bb36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	f040 8098 	bne.w	800bc74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d913      	bls.n	800bb78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	1ad2      	subs	r2, r2, r3
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	68da      	ldr	r2, [r3, #12]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bf28      	it	cs
 800bb6a:	4613      	movcs	r3, r2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f001 f9ac 	bl	800cece <USBD_CtlContinueRx>
 800bb76:	e07d      	b.n	800bc74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb7e:	f003 031f 	and.w	r3, r3, #31
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d014      	beq.n	800bbb0 <USBD_LL_DataOutStage+0x98>
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d81d      	bhi.n	800bbc6 <USBD_LL_DataOutStage+0xae>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <USBD_LL_DataOutStage+0x7c>
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d003      	beq.n	800bb9a <USBD_LL_DataOutStage+0x82>
 800bb92:	e018      	b.n	800bbc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	75bb      	strb	r3, [r7, #22]
            break;
 800bb98:	e018      	b.n	800bbcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	4619      	mov	r1, r3
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f000 fa5e 	bl	800c066 <USBD_CoreFindIF>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	75bb      	strb	r3, [r7, #22]
            break;
 800bbae:	e00d      	b.n	800bbcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fa60 	bl	800c080 <USBD_CoreFindEP>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	75bb      	strb	r3, [r7, #22]
            break;
 800bbc4:	e002      	b.n	800bbcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75bb      	strb	r3, [r7, #22]
            break;
 800bbca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bbcc:	7dbb      	ldrb	r3, [r7, #22]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d119      	bne.n	800bc06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d113      	bne.n	800bc06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bbde:	7dba      	ldrb	r2, [r7, #22]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	32ae      	adds	r2, #174	@ 0xae
 800bbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bbee:	7dba      	ldrb	r2, [r7, #22]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bbf6:	7dba      	ldrb	r2, [r7, #22]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	32ae      	adds	r2, #174	@ 0xae
 800bbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f001 f972 	bl	800cef0 <USBD_CtlSendStatus>
 800bc0c:	e032      	b.n	800bc74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bc0e:	7afb      	ldrb	r3, [r7, #11]
 800bc10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	4619      	mov	r1, r3
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 fa31 	bl	800c080 <USBD_CoreFindEP>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc22:	7dbb      	ldrb	r3, [r7, #22]
 800bc24:	2bff      	cmp	r3, #255	@ 0xff
 800bc26:	d025      	beq.n	800bc74 <USBD_LL_DataOutStage+0x15c>
 800bc28:	7dbb      	ldrb	r3, [r7, #22]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d122      	bne.n	800bc74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d117      	bne.n	800bc6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc3a:	7dba      	ldrb	r2, [r7, #22]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	32ae      	adds	r2, #174	@ 0xae
 800bc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00f      	beq.n	800bc6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc4a:	7dba      	ldrb	r2, [r7, #22]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc52:	7dba      	ldrb	r2, [r7, #22]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	32ae      	adds	r2, #174	@ 0xae
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	7afa      	ldrb	r2, [r7, #11]
 800bc60:	4611      	mov	r1, r2
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	4798      	blx	r3
 800bc66:	4603      	mov	r3, r0
 800bc68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
 800bc72:	e000      	b.n	800bc76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b086      	sub	sp, #24
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	460b      	mov	r3, r1
 800bc88:	607a      	str	r2, [r7, #4]
 800bc8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc8c:	7afb      	ldrb	r3, [r7, #11]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d16f      	bne.n	800bd72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3314      	adds	r3, #20
 800bc96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d15a      	bne.n	800bd58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	689a      	ldr	r2, [r3, #8]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d914      	bls.n	800bcd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	1ad2      	subs	r2, r2, r3
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f001 f8d4 	bl	800ce72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcca:	2300      	movs	r3, #0
 800bccc:	2200      	movs	r2, #0
 800bcce:	2100      	movs	r1, #0
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f001 fe59 	bl	800d988 <USBD_LL_PrepareReceive>
 800bcd6:	e03f      	b.n	800bd58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	68da      	ldr	r2, [r3, #12]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d11c      	bne.n	800bd1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d316      	bcc.n	800bd1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d20f      	bcs.n	800bd1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2100      	movs	r1, #0
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f001 f8b5 	bl	800ce72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd10:	2300      	movs	r3, #0
 800bd12:	2200      	movs	r2, #0
 800bd14:	2100      	movs	r1, #0
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f001 fe36 	bl	800d988 <USBD_LL_PrepareReceive>
 800bd1c:	e01c      	b.n	800bd58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d10f      	bne.n	800bd4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd4a:	2180      	movs	r1, #128	@ 0x80
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f001 fd71 	bl	800d834 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f001 f8df 	bl	800cf16 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d03a      	beq.n	800bdd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff fe42 	bl	800b9ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd70:	e032      	b.n	800bdd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f000 f97f 	bl	800c080 <USBD_CoreFindEP>
 800bd82:	4603      	mov	r3, r0
 800bd84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	2bff      	cmp	r3, #255	@ 0xff
 800bd8a:	d025      	beq.n	800bdd8 <USBD_LL_DataInStage+0x15a>
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d122      	bne.n	800bdd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d11c      	bne.n	800bdd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd9e:	7dfa      	ldrb	r2, [r7, #23]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	32ae      	adds	r2, #174	@ 0xae
 800bda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d014      	beq.n	800bdd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bdae:	7dfa      	ldrb	r2, [r7, #23]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bdb6:	7dfa      	ldrb	r2, [r7, #23]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	32ae      	adds	r2, #174	@ 0xae
 800bdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	7afa      	ldrb	r2, [r7, #11]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	4798      	blx	r3
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bdce:	7dbb      	ldrb	r3, [r7, #22]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bdd4:	7dbb      	ldrb	r3, [r7, #22]
 800bdd6:	e000      	b.n	800bdda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b084      	sub	sp, #16
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d014      	beq.n	800be48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00e      	beq.n	800be48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6852      	ldr	r2, [r2, #4]
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	4611      	mov	r1, r2
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	4798      	blx	r3
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be44:	2303      	movs	r3, #3
 800be46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be48:	2340      	movs	r3, #64	@ 0x40
 800be4a:	2200      	movs	r2, #0
 800be4c:	2100      	movs	r1, #0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fcab 	bl	800d7aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2240      	movs	r2, #64	@ 0x40
 800be60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be64:	2340      	movs	r3, #64	@ 0x40
 800be66:	2200      	movs	r2, #0
 800be68:	2180      	movs	r1, #128	@ 0x80
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f001 fc9d 	bl	800d7aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2240      	movs	r2, #64	@ 0x40
 800be7a:	621a      	str	r2, [r3, #32]

  return ret;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be86:	b480      	push	{r7}
 800be88:	b083      	sub	sp, #12
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	460b      	mov	r3, r1
 800be90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2204      	movs	r2, #4
 800bec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b04      	cmp	r3, #4
 800bee4:	d106      	bne.n	800bef4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800beec:	b2da      	uxtb	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d110      	bne.n	800bf38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf26:	69db      	ldr	r3, [r3, #28]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d005      	beq.n	800bf38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	32ae      	adds	r2, #174	@ 0xae
 800bf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e01c      	b.n	800bf9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d115      	bne.n	800bf9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32ae      	adds	r2, #174	@ 0xae
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00b      	beq.n	800bf9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32ae      	adds	r2, #174	@ 0xae
 800bf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	4611      	mov	r1, r2
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	32ae      	adds	r2, #174	@ 0xae
 800bfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e01c      	b.n	800c002 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d115      	bne.n	800c000 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	32ae      	adds	r2, #174	@ 0xae
 800bfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	32ae      	adds	r2, #174	@ 0xae
 800bff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff8:	78fa      	ldrb	r2, [r7, #3]
 800bffa:	4611      	mov	r1, r2
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00e      	beq.n	800c05c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6852      	ldr	r2, [r2, #4]
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	4611      	mov	r1, r2
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	4798      	blx	r3
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c058:	2303      	movs	r3, #3
 800c05a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c072:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c08c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b086      	sub	sp, #24
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	885b      	ldrh	r3, [r3, #2]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	7812      	ldrb	r2, [r2, #0]
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d91f      	bls.n	800c100 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c0c6:	e013      	b.n	800c0f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c0c8:	f107 030a 	add.w	r3, r7, #10
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6978      	ldr	r0, [r7, #20]
 800c0d0:	f000 f81b 	bl	800c10a <USBD_GetNextDesc>
 800c0d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d108      	bne.n	800c0f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	789b      	ldrb	r3, [r3, #2]
 800c0e6:	78fa      	ldrb	r2, [r7, #3]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d008      	beq.n	800c0fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	885b      	ldrh	r3, [r3, #2]
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	897b      	ldrh	r3, [r7, #10]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d8e5      	bhi.n	800c0c8 <USBD_GetEpDesc+0x2e>
 800c0fc:	e000      	b.n	800c100 <USBD_GetEpDesc+0x66>
          break;
 800c0fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c100:	693b      	ldr	r3, [r7, #16]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b085      	sub	sp, #20
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	7812      	ldrb	r2, [r2, #0]
 800c120:	4413      	add	r3, r2
 800c122:	b29a      	uxth	r2, r3
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	461a      	mov	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4413      	add	r3, r2
 800c132:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c134:	68fb      	ldr	r3, [r7, #12]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c142:	b480      	push	{r7}
 800c144:	b087      	sub	sp, #28
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	3301      	adds	r3, #1
 800c158:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c160:	8a3b      	ldrh	r3, [r7, #16]
 800c162:	021b      	lsls	r3, r3, #8
 800c164:	b21a      	sxth	r2, r3
 800c166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	b21b      	sxth	r3, r3
 800c16e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c170:	89fb      	ldrh	r3, [r7, #14]
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c196:	2b40      	cmp	r3, #64	@ 0x40
 800c198:	d005      	beq.n	800c1a6 <USBD_StdDevReq+0x26>
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d857      	bhi.n	800c24e <USBD_StdDevReq+0xce>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00f      	beq.n	800c1c2 <USBD_StdDevReq+0x42>
 800c1a2:	2b20      	cmp	r3, #32
 800c1a4:	d153      	bne.n	800c24e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	32ae      	adds	r2, #174	@ 0xae
 800c1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	4798      	blx	r3
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c0:	e04a      	b.n	800c258 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	785b      	ldrb	r3, [r3, #1]
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	d83b      	bhi.n	800c242 <USBD_StdDevReq+0xc2>
 800c1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d0 <USBD_StdDevReq+0x50>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c225 	.word	0x0800c225
 800c1d4:	0800c239 	.word	0x0800c239
 800c1d8:	0800c243 	.word	0x0800c243
 800c1dc:	0800c22f 	.word	0x0800c22f
 800c1e0:	0800c243 	.word	0x0800c243
 800c1e4:	0800c203 	.word	0x0800c203
 800c1e8:	0800c1f9 	.word	0x0800c1f9
 800c1ec:	0800c243 	.word	0x0800c243
 800c1f0:	0800c21b 	.word	0x0800c21b
 800c1f4:	0800c20d 	.word	0x0800c20d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fa3c 	bl	800c678 <USBD_GetDescriptor>
          break;
 800c200:	e024      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fbcb 	bl	800c9a0 <USBD_SetAddress>
          break;
 800c20a:	e01f      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fc0a 	bl	800ca28 <USBD_SetConfig>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
          break;
 800c218:	e018      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fcad 	bl	800cb7c <USBD_GetConfig>
          break;
 800c222:	e013      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fcde 	bl	800cbe8 <USBD_GetStatus>
          break;
 800c22c:	e00e      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fd0d 	bl	800cc50 <USBD_SetFeature>
          break;
 800c236:	e009      	b.n	800c24c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fd31 	bl	800cca2 <USBD_ClrFeature>
          break;
 800c240:	e004      	b.n	800c24c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fd88 	bl	800cd5a <USBD_CtlError>
          break;
 800c24a:	bf00      	nop
      }
      break;
 800c24c:	e004      	b.n	800c258 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fd82 	bl	800cd5a <USBD_CtlError>
      break;
 800c256:	bf00      	nop
  }

  return ret;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop

0800c264 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c27a:	2b40      	cmp	r3, #64	@ 0x40
 800c27c:	d005      	beq.n	800c28a <USBD_StdItfReq+0x26>
 800c27e:	2b40      	cmp	r3, #64	@ 0x40
 800c280:	d852      	bhi.n	800c328 <USBD_StdItfReq+0xc4>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <USBD_StdItfReq+0x26>
 800c286:	2b20      	cmp	r3, #32
 800c288:	d14e      	bne.n	800c328 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c290:	b2db      	uxtb	r3, r3
 800c292:	3b01      	subs	r3, #1
 800c294:	2b02      	cmp	r3, #2
 800c296:	d840      	bhi.n	800c31a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	889b      	ldrh	r3, [r3, #4]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d836      	bhi.n	800c310 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	889b      	ldrh	r3, [r3, #4]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7ff fedb 	bl	800c066 <USBD_CoreFindIF>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	2bff      	cmp	r3, #255	@ 0xff
 800c2b8:	d01d      	beq.n	800c2f6 <USBD_StdItfReq+0x92>
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d11a      	bne.n	800c2f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c0:	7bba      	ldrb	r2, [r7, #14]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	32ae      	adds	r2, #174	@ 0xae
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00f      	beq.n	800c2f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2d0:	7bba      	ldrb	r2, [r7, #14]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2d8:	7bba      	ldrb	r2, [r7, #14]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	32ae      	adds	r2, #174	@ 0xae
 800c2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	4798      	blx	r3
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2ee:	e004      	b.n	800c2fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2f4:	e001      	b.n	800c2fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	88db      	ldrh	r3, [r3, #6]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d110      	bne.n	800c324 <USBD_StdItfReq+0xc0>
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10d      	bne.n	800c324 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fdf1 	bl	800cef0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c30e:	e009      	b.n	800c324 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fd21 	bl	800cd5a <USBD_CtlError>
          break;
 800c318:	e004      	b.n	800c324 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fd1c 	bl	800cd5a <USBD_CtlError>
          break;
 800c322:	e000      	b.n	800c326 <USBD_StdItfReq+0xc2>
          break;
 800c324:	bf00      	nop
      }
      break;
 800c326:	e004      	b.n	800c332 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fd15 	bl	800cd5a <USBD_CtlError>
      break;
 800c330:	bf00      	nop
  }

  return ret;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	889b      	ldrh	r3, [r3, #4]
 800c34e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c358:	2b40      	cmp	r3, #64	@ 0x40
 800c35a:	d007      	beq.n	800c36c <USBD_StdEPReq+0x30>
 800c35c:	2b40      	cmp	r3, #64	@ 0x40
 800c35e:	f200 817f 	bhi.w	800c660 <USBD_StdEPReq+0x324>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d02a      	beq.n	800c3bc <USBD_StdEPReq+0x80>
 800c366:	2b20      	cmp	r3, #32
 800c368:	f040 817a 	bne.w	800c660 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fe85 	bl	800c080 <USBD_CoreFindEP>
 800c376:	4603      	mov	r3, r0
 800c378:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c37a:	7b7b      	ldrb	r3, [r7, #13]
 800c37c:	2bff      	cmp	r3, #255	@ 0xff
 800c37e:	f000 8174 	beq.w	800c66a <USBD_StdEPReq+0x32e>
 800c382:	7b7b      	ldrb	r3, [r7, #13]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f040 8170 	bne.w	800c66a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c38a:	7b7a      	ldrb	r2, [r7, #13]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c392:	7b7a      	ldrb	r2, [r7, #13]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	32ae      	adds	r2, #174	@ 0xae
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 8163 	beq.w	800c66a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c3a4:	7b7a      	ldrb	r2, [r7, #13]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	32ae      	adds	r2, #174	@ 0xae
 800c3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	4798      	blx	r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c3ba:	e156      	b.n	800c66a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d008      	beq.n	800c3d6 <USBD_StdEPReq+0x9a>
 800c3c4:	2b03      	cmp	r3, #3
 800c3c6:	f300 8145 	bgt.w	800c654 <USBD_StdEPReq+0x318>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 809b 	beq.w	800c506 <USBD_StdEPReq+0x1ca>
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d03c      	beq.n	800c44e <USBD_StdEPReq+0x112>
 800c3d4:	e13e      	b.n	800c654 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d002      	beq.n	800c3e8 <USBD_StdEPReq+0xac>
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d016      	beq.n	800c414 <USBD_StdEPReq+0xd8>
 800c3e6:	e02c      	b.n	800c442 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00d      	beq.n	800c40a <USBD_StdEPReq+0xce>
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	2b80      	cmp	r3, #128	@ 0x80
 800c3f2:	d00a      	beq.n	800c40a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f001 fa1b 	bl	800d834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3fe:	2180      	movs	r1, #128	@ 0x80
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fa17 	bl	800d834 <USBD_LL_StallEP>
 800c406:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c408:	e020      	b.n	800c44c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fca4 	bl	800cd5a <USBD_CtlError>
              break;
 800c412:	e01b      	b.n	800c44c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	885b      	ldrh	r3, [r3, #2]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10e      	bne.n	800c43a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00b      	beq.n	800c43a <USBD_StdEPReq+0xfe>
 800c422:	7bbb      	ldrb	r3, [r7, #14]
 800c424:	2b80      	cmp	r3, #128	@ 0x80
 800c426:	d008      	beq.n	800c43a <USBD_StdEPReq+0xfe>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	88db      	ldrh	r3, [r3, #6]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d104      	bne.n	800c43a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f001 f9fd 	bl	800d834 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fd58 	bl	800cef0 <USBD_CtlSendStatus>

              break;
 800c440:	e004      	b.n	800c44c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fc88 	bl	800cd5a <USBD_CtlError>
              break;
 800c44a:	bf00      	nop
          }
          break;
 800c44c:	e107      	b.n	800c65e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b02      	cmp	r3, #2
 800c458:	d002      	beq.n	800c460 <USBD_StdEPReq+0x124>
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d016      	beq.n	800c48c <USBD_StdEPReq+0x150>
 800c45e:	e04b      	b.n	800c4f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00d      	beq.n	800c482 <USBD_StdEPReq+0x146>
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b80      	cmp	r3, #128	@ 0x80
 800c46a:	d00a      	beq.n	800c482 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	4619      	mov	r1, r3
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 f9df 	bl	800d834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c476:	2180      	movs	r1, #128	@ 0x80
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 f9db 	bl	800d834 <USBD_LL_StallEP>
 800c47e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c480:	e040      	b.n	800c504 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fc68 	bl	800cd5a <USBD_CtlError>
              break;
 800c48a:	e03b      	b.n	800c504 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d136      	bne.n	800c502 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d004      	beq.n	800c4a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 f9e5 	bl	800d872 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fd21 	bl	800cef0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fde4 	bl	800c080 <USBD_CoreFindEP>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4bc:	7b7b      	ldrb	r3, [r7, #13]
 800c4be:	2bff      	cmp	r3, #255	@ 0xff
 800c4c0:	d01f      	beq.n	800c502 <USBD_StdEPReq+0x1c6>
 800c4c2:	7b7b      	ldrb	r3, [r7, #13]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d11c      	bne.n	800c502 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c4c8:	7b7a      	ldrb	r2, [r7, #13]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4d0:	7b7a      	ldrb	r2, [r7, #13]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	32ae      	adds	r2, #174	@ 0xae
 800c4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d010      	beq.n	800c502 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4e0:	7b7a      	ldrb	r2, [r7, #13]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	32ae      	adds	r2, #174	@ 0xae
 800c4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	4798      	blx	r3
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c4f6:	e004      	b.n	800c502 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fc2d 	bl	800cd5a <USBD_CtlError>
              break;
 800c500:	e000      	b.n	800c504 <USBD_StdEPReq+0x1c8>
              break;
 800c502:	bf00      	nop
          }
          break;
 800c504:	e0ab      	b.n	800c65e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d002      	beq.n	800c518 <USBD_StdEPReq+0x1dc>
 800c512:	2b03      	cmp	r3, #3
 800c514:	d032      	beq.n	800c57c <USBD_StdEPReq+0x240>
 800c516:	e097      	b.n	800c648 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <USBD_StdEPReq+0x1f2>
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	2b80      	cmp	r3, #128	@ 0x80
 800c522:	d004      	beq.n	800c52e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fc17 	bl	800cd5a <USBD_CtlError>
                break;
 800c52c:	e091      	b.n	800c652 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c52e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c532:	2b00      	cmp	r3, #0
 800c534:	da0b      	bge.n	800c54e <USBD_StdEPReq+0x212>
 800c536:	7bbb      	ldrb	r3, [r7, #14]
 800c538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	3310      	adds	r3, #16
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	4413      	add	r3, r2
 800c54a:	3304      	adds	r3, #4
 800c54c:	e00b      	b.n	800c566 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	4413      	add	r3, r2
 800c564:	3304      	adds	r3, #4
 800c566:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2202      	movs	r2, #2
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fc61 	bl	800ce3c <USBD_CtlSendData>
              break;
 800c57a:	e06a      	b.n	800c652 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c57c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c580:	2b00      	cmp	r3, #0
 800c582:	da11      	bge.n	800c5a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	f003 020f 	and.w	r2, r3, #15
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	4613      	mov	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	440b      	add	r3, r1
 800c596:	3324      	adds	r3, #36	@ 0x24
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d117      	bne.n	800c5ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fbda 	bl	800cd5a <USBD_CtlError>
                  break;
 800c5a6:	e054      	b.n	800c652 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	f003 020f 	and.w	r2, r3, #15
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	440b      	add	r3, r1
 800c5ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fbc7 	bl	800cd5a <USBD_CtlError>
                  break;
 800c5cc:	e041      	b.n	800c652 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	da0b      	bge.n	800c5ee <USBD_StdEPReq+0x2b2>
 800c5d6:	7bbb      	ldrb	r3, [r7, #14]
 800c5d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	e00b      	b.n	800c606 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	4413      	add	r3, r2
 800c604:	3304      	adds	r3, #4
 800c606:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c608:	7bbb      	ldrb	r3, [r7, #14]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <USBD_StdEPReq+0x2d8>
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	2b80      	cmp	r3, #128	@ 0x80
 800c612:	d103      	bne.n	800c61c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e00e      	b.n	800c63a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c61c:	7bbb      	ldrb	r3, [r7, #14]
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f001 f945 	bl	800d8b0 <USBD_LL_IsStallEP>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2201      	movs	r2, #1
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	e002      	b.n	800c63a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2202      	movs	r2, #2
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fbfb 	bl	800ce3c <USBD_CtlSendData>
              break;
 800c646:	e004      	b.n	800c652 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fb85 	bl	800cd5a <USBD_CtlError>
              break;
 800c650:	bf00      	nop
          }
          break;
 800c652:	e004      	b.n	800c65e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fb7f 	bl	800cd5a <USBD_CtlError>
          break;
 800c65c:	bf00      	nop
      }
      break;
 800c65e:	e005      	b.n	800c66c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fb79 	bl	800cd5a <USBD_CtlError>
      break;
 800c668:	e000      	b.n	800c66c <USBD_StdEPReq+0x330>
      break;
 800c66a:	bf00      	nop
  }

  return ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
	...

0800c678 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	885b      	ldrh	r3, [r3, #2]
 800c692:	0a1b      	lsrs	r3, r3, #8
 800c694:	b29b      	uxth	r3, r3
 800c696:	3b01      	subs	r3, #1
 800c698:	2b0e      	cmp	r3, #14
 800c69a:	f200 8152 	bhi.w	800c942 <USBD_GetDescriptor+0x2ca>
 800c69e:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a4 <USBD_GetDescriptor+0x2c>)
 800c6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a4:	0800c715 	.word	0x0800c715
 800c6a8:	0800c72d 	.word	0x0800c72d
 800c6ac:	0800c76d 	.word	0x0800c76d
 800c6b0:	0800c943 	.word	0x0800c943
 800c6b4:	0800c943 	.word	0x0800c943
 800c6b8:	0800c8e3 	.word	0x0800c8e3
 800c6bc:	0800c90f 	.word	0x0800c90f
 800c6c0:	0800c943 	.word	0x0800c943
 800c6c4:	0800c943 	.word	0x0800c943
 800c6c8:	0800c943 	.word	0x0800c943
 800c6cc:	0800c943 	.word	0x0800c943
 800c6d0:	0800c943 	.word	0x0800c943
 800c6d4:	0800c943 	.word	0x0800c943
 800c6d8:	0800c943 	.word	0x0800c943
 800c6dc:	0800c6e1 	.word	0x0800c6e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00b      	beq.n	800c704 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	7c12      	ldrb	r2, [r2, #16]
 800c6f8:	f107 0108 	add.w	r1, r7, #8
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	4798      	blx	r3
 800c700:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c702:	e126      	b.n	800c952 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fb27 	bl	800cd5a <USBD_CtlError>
        err++;
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	3301      	adds	r3, #1
 800c710:	72fb      	strb	r3, [r7, #11]
      break;
 800c712:	e11e      	b.n	800c952 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	7c12      	ldrb	r2, [r2, #16]
 800c720:	f107 0108 	add.w	r1, r7, #8
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
 800c728:	60f8      	str	r0, [r7, #12]
      break;
 800c72a:	e112      	b.n	800c952 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7c1b      	ldrb	r3, [r3, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10d      	bne.n	800c750 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c73c:	f107 0208 	add.w	r2, r7, #8
 800c740:	4610      	mov	r0, r2
 800c742:	4798      	blx	r3
 800c744:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3301      	adds	r3, #1
 800c74a:	2202      	movs	r2, #2
 800c74c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c74e:	e100      	b.n	800c952 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c758:	f107 0208 	add.w	r2, r7, #8
 800c75c:	4610      	mov	r0, r2
 800c75e:	4798      	blx	r3
 800c760:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3301      	adds	r3, #1
 800c766:	2202      	movs	r2, #2
 800c768:	701a      	strb	r2, [r3, #0]
      break;
 800c76a:	e0f2      	b.n	800c952 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	885b      	ldrh	r3, [r3, #2]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b05      	cmp	r3, #5
 800c774:	f200 80ac 	bhi.w	800c8d0 <USBD_GetDescriptor+0x258>
 800c778:	a201      	add	r2, pc, #4	@ (adr r2, 800c780 <USBD_GetDescriptor+0x108>)
 800c77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77e:	bf00      	nop
 800c780:	0800c799 	.word	0x0800c799
 800c784:	0800c7cd 	.word	0x0800c7cd
 800c788:	0800c801 	.word	0x0800c801
 800c78c:	0800c835 	.word	0x0800c835
 800c790:	0800c869 	.word	0x0800c869
 800c794:	0800c89d 	.word	0x0800c89d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00b      	beq.n	800c7bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	7c12      	ldrb	r2, [r2, #16]
 800c7b0:	f107 0108 	add.w	r1, r7, #8
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	4798      	blx	r3
 800c7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7ba:	e091      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 facb 	bl	800cd5a <USBD_CtlError>
            err++;
 800c7c4:	7afb      	ldrb	r3, [r7, #11]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ca:	e089      	b.n	800c8e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00b      	beq.n	800c7f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	7c12      	ldrb	r2, [r2, #16]
 800c7e4:	f107 0108 	add.w	r1, r7, #8
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4798      	blx	r3
 800c7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7ee:	e077      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fab1 	bl	800cd5a <USBD_CtlError>
            err++;
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c7fe:	e06f      	b.n	800c8e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00b      	beq.n	800c824 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	7c12      	ldrb	r2, [r2, #16]
 800c818:	f107 0108 	add.w	r1, r7, #8
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
 800c820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c822:	e05d      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fa97 	bl	800cd5a <USBD_CtlError>
            err++;
 800c82c:	7afb      	ldrb	r3, [r7, #11]
 800c82e:	3301      	adds	r3, #1
 800c830:	72fb      	strb	r3, [r7, #11]
          break;
 800c832:	e055      	b.n	800c8e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00b      	beq.n	800c858 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	7c12      	ldrb	r2, [r2, #16]
 800c84c:	f107 0108 	add.w	r1, r7, #8
 800c850:	4610      	mov	r0, r2
 800c852:	4798      	blx	r3
 800c854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c856:	e043      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fa7d 	bl	800cd5a <USBD_CtlError>
            err++;
 800c860:	7afb      	ldrb	r3, [r7, #11]
 800c862:	3301      	adds	r3, #1
 800c864:	72fb      	strb	r3, [r7, #11]
          break;
 800c866:	e03b      	b.n	800c8e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	7c12      	ldrb	r2, [r2, #16]
 800c880:	f107 0108 	add.w	r1, r7, #8
 800c884:	4610      	mov	r0, r2
 800c886:	4798      	blx	r3
 800c888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c88a:	e029      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fa63 	bl	800cd5a <USBD_CtlError>
            err++;
 800c894:	7afb      	ldrb	r3, [r7, #11]
 800c896:	3301      	adds	r3, #1
 800c898:	72fb      	strb	r3, [r7, #11]
          break;
 800c89a:	e021      	b.n	800c8e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a2:	699b      	ldr	r3, [r3, #24]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00b      	beq.n	800c8c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	7c12      	ldrb	r2, [r2, #16]
 800c8b4:	f107 0108 	add.w	r1, r7, #8
 800c8b8:	4610      	mov	r0, r2
 800c8ba:	4798      	blx	r3
 800c8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8be:	e00f      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fa49 	bl	800cd5a <USBD_CtlError>
            err++;
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ce:	e007      	b.n	800c8e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa41 	bl	800cd5a <USBD_CtlError>
          err++;
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c8de:	bf00      	nop
      }
      break;
 800c8e0:	e037      	b.n	800c952 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	7c1b      	ldrb	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d109      	bne.n	800c8fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f2:	f107 0208 	add.w	r2, r7, #8
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4798      	blx	r3
 800c8fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8fc:	e029      	b.n	800c952 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fa2a 	bl	800cd5a <USBD_CtlError>
        err++;
 800c906:	7afb      	ldrb	r3, [r7, #11]
 800c908:	3301      	adds	r3, #1
 800c90a:	72fb      	strb	r3, [r7, #11]
      break;
 800c90c:	e021      	b.n	800c952 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7c1b      	ldrb	r3, [r3, #16]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10d      	bne.n	800c932 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c91e:	f107 0208 	add.w	r2, r7, #8
 800c922:	4610      	mov	r0, r2
 800c924:	4798      	blx	r3
 800c926:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	3301      	adds	r3, #1
 800c92c:	2207      	movs	r2, #7
 800c92e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c930:	e00f      	b.n	800c952 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 fa10 	bl	800cd5a <USBD_CtlError>
        err++;
 800c93a:	7afb      	ldrb	r3, [r7, #11]
 800c93c:	3301      	adds	r3, #1
 800c93e:	72fb      	strb	r3, [r7, #11]
      break;
 800c940:	e007      	b.n	800c952 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fa08 	bl	800cd5a <USBD_CtlError>
      err++;
 800c94a:	7afb      	ldrb	r3, [r7, #11]
 800c94c:	3301      	adds	r3, #1
 800c94e:	72fb      	strb	r3, [r7, #11]
      break;
 800c950:	bf00      	nop
  }

  if (err != 0U)
 800c952:	7afb      	ldrb	r3, [r7, #11]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d11e      	bne.n	800c996 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	88db      	ldrh	r3, [r3, #6]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d016      	beq.n	800c98e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c960:	893b      	ldrh	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00e      	beq.n	800c984 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	88da      	ldrh	r2, [r3, #6]
 800c96a:	893b      	ldrh	r3, [r7, #8]
 800c96c:	4293      	cmp	r3, r2
 800c96e:	bf28      	it	cs
 800c970:	4613      	movcs	r3, r2
 800c972:	b29b      	uxth	r3, r3
 800c974:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c976:	893b      	ldrh	r3, [r7, #8]
 800c978:	461a      	mov	r2, r3
 800c97a:	68f9      	ldr	r1, [r7, #12]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa5d 	bl	800ce3c <USBD_CtlSendData>
 800c982:	e009      	b.n	800c998 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f9e7 	bl	800cd5a <USBD_CtlError>
 800c98c:	e004      	b.n	800c998 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 faae 	bl	800cef0 <USBD_CtlSendStatus>
 800c994:	e000      	b.n	800c998 <USBD_GetDescriptor+0x320>
    return;
 800c996:	bf00      	nop
  }
}
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop

0800c9a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	889b      	ldrh	r3, [r3, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d131      	bne.n	800ca16 <USBD_SetAddress+0x76>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	88db      	ldrh	r3, [r3, #6]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d12d      	bne.n	800ca16 <USBD_SetAddress+0x76>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9c0:	d829      	bhi.n	800ca16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d104      	bne.n	800c9e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f9bc 	bl	800cd5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e2:	e01d      	b.n	800ca20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	7bfa      	ldrb	r2, [r7, #15]
 800c9e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 ff89 	bl	800d908 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa7a 	bl	800cef0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d004      	beq.n	800ca0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2202      	movs	r2, #2
 800ca06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0a:	e009      	b.n	800ca20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca14:	e004      	b.n	800ca20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f99e 	bl	800cd5a <USBD_CtlError>
  }
}
 800ca1e:	bf00      	nop
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	885b      	ldrh	r3, [r3, #2]
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	4b4e      	ldr	r3, [pc, #312]	@ (800cb78 <USBD_SetConfig+0x150>)
 800ca3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca40:	4b4d      	ldr	r3, [pc, #308]	@ (800cb78 <USBD_SetConfig+0x150>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d905      	bls.n	800ca54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f985 	bl	800cd5a <USBD_CtlError>
    return USBD_FAIL;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e08c      	b.n	800cb6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d002      	beq.n	800ca66 <USBD_SetConfig+0x3e>
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d029      	beq.n	800cab8 <USBD_SetConfig+0x90>
 800ca64:	e075      	b.n	800cb52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca66:	4b44      	ldr	r3, [pc, #272]	@ (800cb78 <USBD_SetConfig+0x150>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d020      	beq.n	800cab0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca6e:	4b42      	ldr	r3, [pc, #264]	@ (800cb78 <USBD_SetConfig+0x150>)
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	461a      	mov	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca78:	4b3f      	ldr	r3, [pc, #252]	@ (800cb78 <USBD_SetConfig+0x150>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7fe ffbf 	bl	800ba02 <USBD_SetClassConfig>
 800ca84:	4603      	mov	r3, r0
 800ca86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d008      	beq.n	800caa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f962 	bl	800cd5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca9e:	e065      	b.n	800cb6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa25 	bl	800cef0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2203      	movs	r2, #3
 800caaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800caae:	e05d      	b.n	800cb6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fa1d 	bl	800cef0 <USBD_CtlSendStatus>
      break;
 800cab6:	e059      	b.n	800cb6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cab8:	4b2f      	ldr	r3, [pc, #188]	@ (800cb78 <USBD_SetConfig+0x150>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d112      	bne.n	800cae6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2202      	movs	r2, #2
 800cac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cac8:	4b2b      	ldr	r3, [pc, #172]	@ (800cb78 <USBD_SetConfig+0x150>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	461a      	mov	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cad2:	4b29      	ldr	r3, [pc, #164]	@ (800cb78 <USBD_SetConfig+0x150>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7fe ffae 	bl	800ba3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa06 	bl	800cef0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cae4:	e042      	b.n	800cb6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cae6:	4b24      	ldr	r3, [pc, #144]	@ (800cb78 <USBD_SetConfig+0x150>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d02a      	beq.n	800cb4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7fe ff9c 	bl	800ba3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb02:	4b1d      	ldr	r3, [pc, #116]	@ (800cb78 <USBD_SetConfig+0x150>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb0c:	4b1a      	ldr	r3, [pc, #104]	@ (800cb78 <USBD_SetConfig+0x150>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7fe ff75 	bl	800ba02 <USBD_SetClassConfig>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00f      	beq.n	800cb42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f918 	bl	800cd5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7fe ff81 	bl	800ba3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb40:	e014      	b.n	800cb6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9d4 	bl	800cef0 <USBD_CtlSendStatus>
      break;
 800cb48:	e010      	b.n	800cb6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f9d0 	bl	800cef0 <USBD_CtlSendStatus>
      break;
 800cb50:	e00c      	b.n	800cb6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f900 	bl	800cd5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb5a:	4b07      	ldr	r3, [pc, #28]	@ (800cb78 <USBD_SetConfig+0x150>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7fe ff6a 	bl	800ba3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb66:	2303      	movs	r3, #3
 800cb68:	73fb      	strb	r3, [r7, #15]
      break;
 800cb6a:	bf00      	nop
  }

  return ret;
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20000920 	.word	0x20000920

0800cb7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	88db      	ldrh	r3, [r3, #6]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d004      	beq.n	800cb98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f8e2 	bl	800cd5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb96:	e023      	b.n	800cbe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	dc02      	bgt.n	800cbaa <USBD_GetConfig+0x2e>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dc03      	bgt.n	800cbb0 <USBD_GetConfig+0x34>
 800cba8:	e015      	b.n	800cbd6 <USBD_GetConfig+0x5a>
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d00b      	beq.n	800cbc6 <USBD_GetConfig+0x4a>
 800cbae:	e012      	b.n	800cbd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3308      	adds	r3, #8
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f93c 	bl	800ce3c <USBD_CtlSendData>
        break;
 800cbc4:	e00c      	b.n	800cbe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	2201      	movs	r2, #1
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f934 	bl	800ce3c <USBD_CtlSendData>
        break;
 800cbd4:	e004      	b.n	800cbe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f8be 	bl	800cd5a <USBD_CtlError>
        break;
 800cbde:	bf00      	nop
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d81e      	bhi.n	800cc3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	88db      	ldrh	r3, [r3, #6]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d004      	beq.n	800cc12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f8a5 	bl	800cd5a <USBD_CtlError>
        break;
 800cc10:	e01a      	b.n	800cc48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d005      	beq.n	800cc2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f043 0202 	orr.w	r2, r3, #2
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	330c      	adds	r3, #12
 800cc32:	2202      	movs	r2, #2
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f900 	bl	800ce3c <USBD_CtlSendData>
      break;
 800cc3c:	e004      	b.n	800cc48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f88a 	bl	800cd5a <USBD_CtlError>
      break;
 800cc46:	bf00      	nop
  }
}
 800cc48:	bf00      	nop
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	885b      	ldrh	r3, [r3, #2]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d107      	bne.n	800cc72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f940 	bl	800cef0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc70:	e013      	b.n	800cc9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	885b      	ldrh	r3, [r3, #2]
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d10b      	bne.n	800cc92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	889b      	ldrh	r3, [r3, #4]
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f930 	bl	800cef0 <USBD_CtlSendStatus>
}
 800cc90:	e003      	b.n	800cc9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f860 	bl	800cd5a <USBD_CtlError>
}
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b082      	sub	sp, #8
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d80b      	bhi.n	800ccd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	885b      	ldrh	r3, [r3, #2]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d10c      	bne.n	800ccdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f910 	bl	800cef0 <USBD_CtlSendStatus>
      }
      break;
 800ccd0:	e004      	b.n	800ccdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f840 	bl	800cd5a <USBD_CtlError>
      break;
 800ccda:	e000      	b.n	800ccde <USBD_ClrFeature+0x3c>
      break;
 800ccdc:	bf00      	nop
  }
}
 800ccde:	bf00      	nop
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f7ff fa16 	bl	800c142 <SWAPBYTE>
 800cd16:	4603      	mov	r3, r0
 800cd18:	461a      	mov	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3301      	adds	r3, #1
 800cd28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7ff fa09 	bl	800c142 <SWAPBYTE>
 800cd30:	4603      	mov	r3, r0
 800cd32:	461a      	mov	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3301      	adds	r3, #1
 800cd42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f7ff f9fc 	bl	800c142 <SWAPBYTE>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	80da      	strh	r2, [r3, #6]
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b082      	sub	sp, #8
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd64:	2180      	movs	r1, #128	@ 0x80
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fd64 	bl	800d834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fd60 	bl	800d834 <USBD_LL_StallEP>
}
 800cd74:	bf00      	nop
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d036      	beq.n	800ce00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd96:	6938      	ldr	r0, [r7, #16]
 800cd98:	f000 f836 	bl	800ce08 <USBD_GetLen>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	4413      	add	r3, r2
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	7812      	ldrb	r2, [r2, #0]
 800cdb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	2203      	movs	r2, #3
 800cdc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdcc:	e013      	b.n	800cdf6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	7812      	ldrb	r2, [r2, #0]
 800cdd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3301      	adds	r3, #1
 800cdde:	613b      	str	r3, [r7, #16]
    idx++;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	3301      	adds	r3, #1
 800cde4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	4413      	add	r3, r2
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1e7      	bne.n	800cdce <USBD_GetString+0x52>
 800cdfe:	e000      	b.n	800ce02 <USBD_GetString+0x86>
    return;
 800ce00:	bf00      	nop
  }
}
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce18:	e005      	b.n	800ce26 <USBD_GetLen+0x1e>
  {
    len++;
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	3301      	adds	r3, #1
 800ce24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1f5      	bne.n	800ce1a <USBD_GetLen+0x12>
  }

  return len;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	2100      	movs	r1, #0
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f000 fd6f 	bl	800d946 <USBD_LL_Transmit>

  return USBD_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	60f8      	str	r0, [r7, #12]
 800ce7a:	60b9      	str	r1, [r7, #8]
 800ce7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	2100      	movs	r1, #0
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 fd5e 	bl	800d946 <USBD_LL_Transmit>

  return USBD_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2203      	movs	r2, #3
 800cea4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	2100      	movs	r1, #0
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fd62 	bl	800d988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	60b9      	str	r1, [r7, #8]
 800ced8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	2100      	movs	r1, #0
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f000 fd51 	bl	800d988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2204      	movs	r2, #4
 800cefc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf00:	2300      	movs	r3, #0
 800cf02:	2200      	movs	r2, #0
 800cf04:	2100      	movs	r1, #0
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fd1d 	bl	800d946 <USBD_LL_Transmit>

  return USBD_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2205      	movs	r2, #5
 800cf22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf26:	2300      	movs	r3, #0
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fd2b 	bl	800d988 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf52:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf54:	7a5b      	ldrb	r3, [r3, #9]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d131      	bne.n	800cfc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf5e:	7a5b      	ldrb	r3, [r3, #9]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	461a      	mov	r2, r3
 800cf64:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf66:	2100      	movs	r1, #0
 800cf68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cf6a:	4b19      	ldr	r3, [pc, #100]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf6c:	7a5b      	ldrb	r3, [r3, #9]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	4a17      	ldr	r2, [pc, #92]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cf7a:	4b15      	ldr	r3, [pc, #84]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf7c:	7a5b      	ldrb	r3, [r3, #9]
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	461a      	mov	r2, r3
 800cf82:	4b13      	ldr	r3, [pc, #76]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf84:	4413      	add	r3, r2
 800cf86:	79fa      	ldrb	r2, [r7, #7]
 800cf88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf8a:	4b11      	ldr	r3, [pc, #68]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf8c:	7a5b      	ldrb	r3, [r3, #9]
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	1c5a      	adds	r2, r3, #1
 800cf92:	b2d1      	uxtb	r1, r2
 800cf94:	4a0e      	ldr	r2, [pc, #56]	@ (800cfd0 <FATFS_LinkDriverEx+0x94>)
 800cf96:	7251      	strb	r1, [r2, #9]
 800cf98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf9a:	7dbb      	ldrb	r3, [r7, #22]
 800cf9c:	3330      	adds	r3, #48	@ 0x30
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	223a      	movs	r2, #58	@ 0x3a
 800cfaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	3302      	adds	r3, #2
 800cfb0:	222f      	movs	r2, #47	@ 0x2f
 800cfb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	3303      	adds	r3, #3
 800cfb8:	2200      	movs	r2, #0
 800cfba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	20000924 	.word	0x20000924

0800cfd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff ffaa 	bl	800cf3c <FATFS_LinkDriverEx>
 800cfe8:	4603      	mov	r3, r0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4912      	ldr	r1, [pc, #72]	@ (800d044 <MX_USB_DEVICE_Init+0x50>)
 800cffc:	4812      	ldr	r0, [pc, #72]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800cffe:	f7fe fc83 	bl	800b908 <USBD_Init>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d008:	f7f6 fe46 	bl	8003c98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d00c:	490f      	ldr	r1, [pc, #60]	@ (800d04c <MX_USB_DEVICE_Init+0x58>)
 800d00e:	480e      	ldr	r0, [pc, #56]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d010:	f7fe fcaa 	bl	800b968 <USBD_RegisterClass>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d01a:	f7f6 fe3d 	bl	8003c98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d01e:	490c      	ldr	r1, [pc, #48]	@ (800d050 <MX_USB_DEVICE_Init+0x5c>)
 800d020:	4809      	ldr	r0, [pc, #36]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d022:	f7fe fb9b 	bl	800b75c <USBD_CDC_RegisterInterface>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d02c:	f7f6 fe34 	bl	8003c98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d030:	4805      	ldr	r0, [pc, #20]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d032:	f7fe fccf 	bl	800b9d4 <USBD_Start>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d03c:	f7f6 fe2c 	bl	8003c98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d040:	bf00      	nop
 800d042:	bd80      	pop	{r7, pc}
 800d044:	200000c4 	.word	0x200000c4
 800d048:	20000930 	.word	0x20000930
 800d04c:	20000030 	.word	0x20000030
 800d050:	200000b0 	.word	0x200000b0

0800d054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d058:	2200      	movs	r2, #0
 800d05a:	4905      	ldr	r1, [pc, #20]	@ (800d070 <CDC_Init_FS+0x1c>)
 800d05c:	4805      	ldr	r0, [pc, #20]	@ (800d074 <CDC_Init_FS+0x20>)
 800d05e:	f7fe fb97 	bl	800b790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d062:	4905      	ldr	r1, [pc, #20]	@ (800d078 <CDC_Init_FS+0x24>)
 800d064:	4803      	ldr	r0, [pc, #12]	@ (800d074 <CDC_Init_FS+0x20>)
 800d066:	f7fe fbb5 	bl	800b7d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d06a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	2000140c 	.word	0x2000140c
 800d074:	20000930 	.word	0x20000930
 800d078:	20000c0c 	.word	0x20000c0c

0800d07c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d082:	4618      	mov	r0, r3
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
 800d098:	4613      	mov	r3, r2
 800d09a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b23      	cmp	r3, #35	@ 0x23
 800d0a0:	d84a      	bhi.n	800d138 <CDC_Control_FS+0xac>
 800d0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a8 <CDC_Control_FS+0x1c>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d139 	.word	0x0800d139
 800d0ac:	0800d139 	.word	0x0800d139
 800d0b0:	0800d139 	.word	0x0800d139
 800d0b4:	0800d139 	.word	0x0800d139
 800d0b8:	0800d139 	.word	0x0800d139
 800d0bc:	0800d139 	.word	0x0800d139
 800d0c0:	0800d139 	.word	0x0800d139
 800d0c4:	0800d139 	.word	0x0800d139
 800d0c8:	0800d139 	.word	0x0800d139
 800d0cc:	0800d139 	.word	0x0800d139
 800d0d0:	0800d139 	.word	0x0800d139
 800d0d4:	0800d139 	.word	0x0800d139
 800d0d8:	0800d139 	.word	0x0800d139
 800d0dc:	0800d139 	.word	0x0800d139
 800d0e0:	0800d139 	.word	0x0800d139
 800d0e4:	0800d139 	.word	0x0800d139
 800d0e8:	0800d139 	.word	0x0800d139
 800d0ec:	0800d139 	.word	0x0800d139
 800d0f0:	0800d139 	.word	0x0800d139
 800d0f4:	0800d139 	.word	0x0800d139
 800d0f8:	0800d139 	.word	0x0800d139
 800d0fc:	0800d139 	.word	0x0800d139
 800d100:	0800d139 	.word	0x0800d139
 800d104:	0800d139 	.word	0x0800d139
 800d108:	0800d139 	.word	0x0800d139
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	0800d139 	.word	0x0800d139
 800d114:	0800d139 	.word	0x0800d139
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d139 	.word	0x0800d139
 800d120:	0800d139 	.word	0x0800d139
 800d124:	0800d139 	.word	0x0800d139
 800d128:	0800d139 	.word	0x0800d139
 800d12c:	0800d139 	.word	0x0800d139
 800d130:	0800d139 	.word	0x0800d139
 800d134:	0800d139 	.word	0x0800d139
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d138:	bf00      	nop
  }

  return (USBD_OK);
 800d13a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	4805      	ldr	r0, [pc, #20]	@ (800d16c <CDC_Receive_FS+0x24>)
 800d156:	f7fe fb3d 	bl	800b7d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d15a:	4804      	ldr	r0, [pc, #16]	@ (800d16c <CDC_Receive_FS+0x24>)
 800d15c:	f7fe fb9e 	bl	800b89c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d160:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20000930 	.word	0x20000930

0800d170 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d180:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <CDC_Transmit_FS+0x48>)
 800d182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d192:	2301      	movs	r3, #1
 800d194:	e00b      	b.n	800d1ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d196:	887b      	ldrh	r3, [r7, #2]
 800d198:	461a      	mov	r2, r3
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	4806      	ldr	r0, [pc, #24]	@ (800d1b8 <CDC_Transmit_FS+0x48>)
 800d19e:	f7fe faf7 	bl	800b790 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d1a2:	4805      	ldr	r0, [pc, #20]	@ (800d1b8 <CDC_Transmit_FS+0x48>)
 800d1a4:	f7fe fb34 	bl	800b810 <USBD_CDC_TransmitPacket>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20000930 	.word	0x20000930

0800d1bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	371c      	adds	r7, #28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	6039      	str	r1, [r7, #0]
 800d1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2212      	movs	r2, #18
 800d1f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d1f2:	4b03      	ldr	r3, [pc, #12]	@ (800d200 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	200000e4 	.word	0x200000e4

0800d204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2204      	movs	r2, #4
 800d214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d216:	4b03      	ldr	r3, [pc, #12]	@ (800d224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20000104 	.word	0x20000104

0800d228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	4907      	ldr	r1, [pc, #28]	@ (800d25c <USBD_FS_ProductStrDescriptor+0x34>)
 800d23e:	4808      	ldr	r0, [pc, #32]	@ (800d260 <USBD_FS_ProductStrDescriptor+0x38>)
 800d240:	f7ff fd9c 	bl	800cd7c <USBD_GetString>
 800d244:	e004      	b.n	800d250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4904      	ldr	r1, [pc, #16]	@ (800d25c <USBD_FS_ProductStrDescriptor+0x34>)
 800d24a:	4805      	ldr	r0, [pc, #20]	@ (800d260 <USBD_FS_ProductStrDescriptor+0x38>)
 800d24c:	f7ff fd96 	bl	800cd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d250:	4b02      	ldr	r3, [pc, #8]	@ (800d25c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	20001c0c 	.word	0x20001c0c
 800d260:	0801472c 	.word	0x0801472c

0800d264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	4904      	ldr	r1, [pc, #16]	@ (800d284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d274:	4804      	ldr	r0, [pc, #16]	@ (800d288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d276:	f7ff fd81 	bl	800cd7c <USBD_GetString>
  return USBD_StrDesc;
 800d27a:	4b02      	ldr	r3, [pc, #8]	@ (800d284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20001c0c 	.word	0x20001c0c
 800d288:	08014744 	.word	0x08014744

0800d28c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	6039      	str	r1, [r7, #0]
 800d296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	221a      	movs	r2, #26
 800d29c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d29e:	f000 f855 	bl	800d34c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2a2:	4b02      	ldr	r3, [pc, #8]	@ (800d2ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	20000108 	.word	0x20000108

0800d2b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6039      	str	r1, [r7, #0]
 800d2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d105      	bne.n	800d2ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	4907      	ldr	r1, [pc, #28]	@ (800d2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2c6:	4808      	ldr	r0, [pc, #32]	@ (800d2e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2c8:	f7ff fd58 	bl	800cd7c <USBD_GetString>
 800d2cc:	e004      	b.n	800d2d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	4904      	ldr	r1, [pc, #16]	@ (800d2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2d2:	4805      	ldr	r0, [pc, #20]	@ (800d2e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2d4:	f7ff fd52 	bl	800cd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2d8:	4b02      	ldr	r3, [pc, #8]	@ (800d2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20001c0c 	.word	0x20001c0c
 800d2e8:	08014758 	.word	0x08014758

0800d2ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	6039      	str	r1, [r7, #0]
 800d2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d105      	bne.n	800d30a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	4907      	ldr	r1, [pc, #28]	@ (800d320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d302:	4808      	ldr	r0, [pc, #32]	@ (800d324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d304:	f7ff fd3a 	bl	800cd7c <USBD_GetString>
 800d308:	e004      	b.n	800d314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	4904      	ldr	r1, [pc, #16]	@ (800d320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d30e:	4805      	ldr	r0, [pc, #20]	@ (800d324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d310:	f7ff fd34 	bl	800cd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d314:	4b02      	ldr	r3, [pc, #8]	@ (800d320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d316:	4618      	mov	r0, r3
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001c0c 	.word	0x20001c0c
 800d324:	08014764 	.word	0x08014764

0800d328 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	6039      	str	r1, [r7, #0]
 800d332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	220c      	movs	r2, #12
 800d338:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d33a:	4b03      	ldr	r3, [pc, #12]	@ (800d348 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	200000f8 	.word	0x200000f8

0800d34c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d352:	4b0f      	ldr	r3, [pc, #60]	@ (800d390 <Get_SerialNum+0x44>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d358:	4b0e      	ldr	r3, [pc, #56]	@ (800d394 <Get_SerialNum+0x48>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d35e:	4b0e      	ldr	r3, [pc, #56]	@ (800d398 <Get_SerialNum+0x4c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4413      	add	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d009      	beq.n	800d386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d372:	2208      	movs	r2, #8
 800d374:	4909      	ldr	r1, [pc, #36]	@ (800d39c <Get_SerialNum+0x50>)
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 f814 	bl	800d3a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d37c:	2204      	movs	r2, #4
 800d37e:	4908      	ldr	r1, [pc, #32]	@ (800d3a0 <Get_SerialNum+0x54>)
 800d380:	68b8      	ldr	r0, [r7, #8]
 800d382:	f000 f80f 	bl	800d3a4 <IntToUnicode>
  }
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	1fff7a10 	.word	0x1fff7a10
 800d394:	1fff7a14 	.word	0x1fff7a14
 800d398:	1fff7a18 	.word	0x1fff7a18
 800d39c:	2000010a 	.word	0x2000010a
 800d3a0:	2000011a 	.word	0x2000011a

0800d3a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75fb      	strb	r3, [r7, #23]
 800d3ba:	e027      	b.n	800d40c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	0f1b      	lsrs	r3, r3, #28
 800d3c0:	2b09      	cmp	r3, #9
 800d3c2:	d80b      	bhi.n	800d3dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0f1b      	lsrs	r3, r3, #28
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	3230      	adds	r2, #48	@ 0x30
 800d3d6:	b2d2      	uxtb	r2, r2
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	e00a      	b.n	800d3f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	0f1b      	lsrs	r3, r3, #28
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	440b      	add	r3, r1
 800d3ec:	3237      	adds	r2, #55	@ 0x37
 800d3ee:	b2d2      	uxtb	r2, r2
 800d3f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	011b      	lsls	r3, r3, #4
 800d3f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	4413      	add	r3, r2
 800d402:	2200      	movs	r2, #0
 800d404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	3301      	adds	r3, #1
 800d40a:	75fb      	strb	r3, [r7, #23]
 800d40c:	7dfa      	ldrb	r2, [r7, #23]
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	429a      	cmp	r2, r3
 800d412:	d3d3      	bcc.n	800d3bc <IntToUnicode+0x18>
  }
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b0a0      	sub	sp, #128	@ 0x80
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d42c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	605a      	str	r2, [r3, #4]
 800d436:	609a      	str	r2, [r3, #8]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d43c:	f107 0310 	add.w	r3, r7, #16
 800d440:	225c      	movs	r2, #92	@ 0x5c
 800d442:	2100      	movs	r1, #0
 800d444:	4618      	mov	r0, r3
 800d446:	f002 f9c2 	bl	800f7ce <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d452:	d149      	bne.n	800d4e8 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800d45a:	2300      	movs	r3, #0
 800d45c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d45e:	f107 0310 	add.w	r3, r7, #16
 800d462:	4618      	mov	r0, r3
 800d464:	f7f9 fd2c 	bl	8006ec0 <HAL_RCCEx_PeriphCLKConfig>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800d46e:	f7f6 fc13 	bl	8003c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	4b1e      	ldr	r3, [pc, #120]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47a:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d47c:	f043 0301 	orr.w	r3, r3, #1
 800d480:	6313      	str	r3, [r2, #48]	@ 0x30
 800d482:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d48e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d492:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d494:	2302      	movs	r3, #2
 800d496:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d49c:	2303      	movs	r3, #3
 800d49e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4a0:	230a      	movs	r3, #10
 800d4a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4812      	ldr	r0, [pc, #72]	@ (800d4f4 <HAL_PCD_MspInit+0xd0>)
 800d4ac:	f7f7 fe32 	bl	8005114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4b4:	4a0e      	ldr	r2, [pc, #56]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d4c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4c4:	4a0a      	ldr	r2, [pc, #40]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d4c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d4ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800d4cc:	4b08      	ldr	r3, [pc, #32]	@ (800d4f0 <HAL_PCD_MspInit+0xcc>)
 800d4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d4d4:	60bb      	str	r3, [r7, #8]
 800d4d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	2043      	movs	r0, #67	@ 0x43
 800d4de:	f7f7 fd50 	bl	8004f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d4e2:	2043      	movs	r0, #67	@ 0x43
 800d4e4:	f7f7 fd69 	bl	8004fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4e8:	bf00      	nop
 800d4ea:	3780      	adds	r7, #128	@ 0x80
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	40023800 	.word	0x40023800
 800d4f4:	40020000 	.word	0x40020000

0800d4f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d50c:	4619      	mov	r1, r3
 800d50e:	4610      	mov	r0, r2
 800d510:	f7fe faad 	bl	800ba6e <USBD_LL_SetupStage>
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d52e:	78fa      	ldrb	r2, [r7, #3]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	4619      	mov	r1, r3
 800d546:	f7fe fae7 	bl	800bb18 <USBD_LL_DataOutStage>
}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d564:	78fa      	ldrb	r2, [r7, #3]
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	4613      	mov	r3, r2
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	4413      	add	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	440b      	add	r3, r1
 800d572:	334c      	adds	r3, #76	@ 0x4c
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	78fb      	ldrb	r3, [r7, #3]
 800d578:	4619      	mov	r1, r3
 800d57a:	f7fe fb80 	bl	800bc7e <USBD_LL_DataInStage>
}
 800d57e:	bf00      	nop
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b082      	sub	sp, #8
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fcb4 	bl	800bf02 <USBD_LL_SOF>
}
 800d59a:	bf00      	nop
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
 800d5ba:	e008      	b.n	800d5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d102      	bne.n	800d5ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	73fb      	strb	r3, [r7, #15]
 800d5c8:	e001      	b.n	800d5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d5ca:	f7f6 fb65 	bl	8003c98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5d4:	7bfa      	ldrb	r2, [r7, #15]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe fc54 	bl	800be86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fbfc 	bl	800bde2 <USBD_LL_Reset>
}
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fc4f 	bl	800bea6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	6812      	ldr	r2, [r2, #0]
 800d616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d61a:	f043 0301 	orr.w	r3, r3, #1
 800d61e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a1b      	ldr	r3, [r3, #32]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d005      	beq.n	800d634 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d628:	4b04      	ldr	r3, [pc, #16]	@ (800d63c <HAL_PCD_SuspendCallback+0x48>)
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	4a03      	ldr	r2, [pc, #12]	@ (800d63c <HAL_PCD_SuspendCallback+0x48>)
 800d62e:	f043 0306 	orr.w	r3, r3, #6
 800d632:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d634:	bf00      	nop
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	e000ed00 	.word	0xe000ed00

0800d640 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fc3f 	bl	800bed2 <USBD_LL_Resume>
}
 800d654:	bf00      	nop
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	460b      	mov	r3, r1
 800d666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d66e:	78fa      	ldrb	r2, [r7, #3]
 800d670:	4611      	mov	r1, r2
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe fc97 	bl	800bfa6 <USBD_LL_IsoOUTIncomplete>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d692:	78fa      	ldrb	r2, [r7, #3]
 800d694:	4611      	mov	r1, r2
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fc53 	bl	800bf42 <USBD_LL_IsoINIncomplete>
}
 800d69c:	bf00      	nop
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fca9 	bl	800c00a <USBD_LL_DevConnected>
}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe fca6 	bl	800c020 <USBD_LL_DevDisconnected>
}
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d13c      	bne.n	800d766 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d6ec:	4a20      	ldr	r2, [pc, #128]	@ (800d770 <USBD_LL_Init+0x94>)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a1e      	ldr	r2, [pc, #120]	@ (800d770 <USBD_LL_Init+0x94>)
 800d6f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800d770 <USBD_LL_Init+0x94>)
 800d6fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d704:	4b1a      	ldr	r3, [pc, #104]	@ (800d770 <USBD_LL_Init+0x94>)
 800d706:	2206      	movs	r2, #6
 800d708:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d70a:	4b19      	ldr	r3, [pc, #100]	@ (800d770 <USBD_LL_Init+0x94>)
 800d70c:	2202      	movs	r2, #2
 800d70e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d710:	4b17      	ldr	r3, [pc, #92]	@ (800d770 <USBD_LL_Init+0x94>)
 800d712:	2200      	movs	r2, #0
 800d714:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d716:	4b16      	ldr	r3, [pc, #88]	@ (800d770 <USBD_LL_Init+0x94>)
 800d718:	2202      	movs	r2, #2
 800d71a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d71c:	4b14      	ldr	r3, [pc, #80]	@ (800d770 <USBD_LL_Init+0x94>)
 800d71e:	2200      	movs	r2, #0
 800d720:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d722:	4b13      	ldr	r3, [pc, #76]	@ (800d770 <USBD_LL_Init+0x94>)
 800d724:	2200      	movs	r2, #0
 800d726:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d728:	4b11      	ldr	r3, [pc, #68]	@ (800d770 <USBD_LL_Init+0x94>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d72e:	4b10      	ldr	r3, [pc, #64]	@ (800d770 <USBD_LL_Init+0x94>)
 800d730:	2200      	movs	r2, #0
 800d732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d734:	4b0e      	ldr	r3, [pc, #56]	@ (800d770 <USBD_LL_Init+0x94>)
 800d736:	2200      	movs	r2, #0
 800d738:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d73a:	480d      	ldr	r0, [pc, #52]	@ (800d770 <USBD_LL_Init+0x94>)
 800d73c:	f7f7 ffdc 	bl	80056f8 <HAL_PCD_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d746:	f7f6 faa7 	bl	8003c98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d74a:	2180      	movs	r1, #128	@ 0x80
 800d74c:	4808      	ldr	r0, [pc, #32]	@ (800d770 <USBD_LL_Init+0x94>)
 800d74e:	f7f9 fa68 	bl	8006c22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d752:	2240      	movs	r2, #64	@ 0x40
 800d754:	2100      	movs	r1, #0
 800d756:	4806      	ldr	r0, [pc, #24]	@ (800d770 <USBD_LL_Init+0x94>)
 800d758:	f7f9 fa1c 	bl	8006b94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d75c:	2280      	movs	r2, #128	@ 0x80
 800d75e:	2101      	movs	r1, #1
 800d760:	4803      	ldr	r0, [pc, #12]	@ (800d770 <USBD_LL_Init+0x94>)
 800d762:	f7f9 fa17 	bl	8006b94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20001e0c 	.word	0x20001e0c

0800d774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7f8 f8d8 	bl	8005940 <HAL_PCD_Start>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d794:	7bfb      	ldrb	r3, [r7, #15]
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f990 	bl	800dabc <USBD_Get_USB_Status>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	4608      	mov	r0, r1
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	70fb      	strb	r3, [r7, #3]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70bb      	strb	r3, [r7, #2]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7d2:	78bb      	ldrb	r3, [r7, #2]
 800d7d4:	883a      	ldrh	r2, [r7, #0]
 800d7d6:	78f9      	ldrb	r1, [r7, #3]
 800d7d8:	f7f8 fdd6 	bl	8006388 <HAL_PCD_EP_Open>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 f96a 	bl	800dabc <USBD_Get_USB_Status>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b084      	sub	sp, #16
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	460b      	mov	r3, r1
 800d800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d810:	78fa      	ldrb	r2, [r7, #3]
 800d812:	4611      	mov	r1, r2
 800d814:	4618      	mov	r0, r3
 800d816:	f7f8 fe1f 	bl	8006458 <HAL_PCD_EP_Close>
 800d81a:	4603      	mov	r3, r0
 800d81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	4618      	mov	r0, r3
 800d822:	f000 f94b 	bl	800dabc <USBD_Get_USB_Status>
 800d826:	4603      	mov	r3, r0
 800d828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d84e:	78fa      	ldrb	r2, [r7, #3]
 800d850:	4611      	mov	r1, r2
 800d852:	4618      	mov	r0, r3
 800d854:	f7f8 fef7 	bl	8006646 <HAL_PCD_EP_SetStall>
 800d858:	4603      	mov	r3, r0
 800d85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 f92c 	bl	800dabc <USBD_Get_USB_Status>
 800d864:	4603      	mov	r3, r0
 800d866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d868:	7bbb      	ldrb	r3, [r7, #14]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b084      	sub	sp, #16
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	460b      	mov	r3, r1
 800d87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d88c:	78fa      	ldrb	r2, [r7, #3]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f7f8 ff3c 	bl	800670e <HAL_PCD_EP_ClrStall>
 800d896:	4603      	mov	r3, r0
 800d898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 f90d 	bl	800dabc <USBD_Get_USB_Status>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d8c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	da0b      	bge.n	800d8e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8d2:	68f9      	ldr	r1, [r7, #12]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	4413      	add	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	440b      	add	r3, r1
 800d8de:	333e      	adds	r3, #62	@ 0x3e
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	e00b      	b.n	800d8fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8ea:	68f9      	ldr	r1, [r7, #12]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	440b      	add	r3, r1
 800d8f6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d8fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	4611      	mov	r1, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f7f8 fd09 	bl	800633e <HAL_PCD_SetAddress>
 800d92c:	4603      	mov	r3, r0
 800d92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 f8c2 	bl	800dabc <USBD_Get_USB_Status>
 800d938:	4603      	mov	r3, r0
 800d93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b086      	sub	sp, #24
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
 800d952:	460b      	mov	r3, r1
 800d954:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d964:	7af9      	ldrb	r1, [r7, #11]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	f7f8 fe22 	bl	80065b2 <HAL_PCD_EP_Transmit>
 800d96e:	4603      	mov	r3, r0
 800d970:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f8a1 	bl	800dabc <USBD_Get_USB_Status>
 800d97a:	4603      	mov	r3, r0
 800d97c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d97e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	607a      	str	r2, [r7, #4]
 800d992:	603b      	str	r3, [r7, #0]
 800d994:	460b      	mov	r3, r1
 800d996:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9a6:	7af9      	ldrb	r1, [r7, #11]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	f7f8 fd9e 	bl	80064ec <HAL_PCD_EP_Receive>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 f880 	bl	800dabc <USBD_Get_USB_Status>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3718      	adds	r7, #24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9dc:	78fa      	ldrb	r2, [r7, #3]
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f8 fdce 	bl	8006582 <HAL_PCD_EP_GetRxCount>
 800d9e6:	4603      	mov	r3, r0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9fc:	78fb      	ldrb	r3, [r7, #3]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <HAL_PCDEx_LPM_Callback+0x18>
 800da02:	2b01      	cmp	r3, #1
 800da04:	d01f      	beq.n	800da46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800da06:	e03b      	b.n	800da80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d007      	beq.n	800da20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800da10:	f7f5 f9b6 	bl	8002d80 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da14:	4b1c      	ldr	r3, [pc, #112]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x98>)
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	4a1b      	ldr	r2, [pc, #108]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x98>)
 800da1a:	f023 0306 	bic.w	r3, r3, #6
 800da1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da32:	f023 0301 	bic.w	r3, r3, #1
 800da36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fe fa47 	bl	800bed2 <USBD_LL_Resume>
    break;
 800da44:	e01c      	b.n	800da80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	6812      	ldr	r2, [r2, #0]
 800da54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da58:	f043 0301 	orr.w	r3, r3, #1
 800da5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fa1e 	bl	800bea6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da72:	4b05      	ldr	r3, [pc, #20]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x98>)
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	4a04      	ldr	r2, [pc, #16]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x98>)
 800da78:	f043 0306 	orr.w	r3, r3, #6
 800da7c:	6113      	str	r3, [r2, #16]
    break;
 800da7e:	bf00      	nop
}
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	e000ed00 	.word	0xe000ed00

0800da8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da94:	4b03      	ldr	r3, [pc, #12]	@ (800daa4 <USBD_static_malloc+0x18>)
}
 800da96:	4618      	mov	r0, r3
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	20002318 	.word	0x20002318

0800daa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]

}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d817      	bhi.n	800db00 <USBD_Get_USB_Status+0x44>
 800dad0:	a201      	add	r2, pc, #4	@ (adr r2, 800dad8 <USBD_Get_USB_Status+0x1c>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800dae9 	.word	0x0800dae9
 800dadc:	0800daef 	.word	0x0800daef
 800dae0:	0800daf5 	.word	0x0800daf5
 800dae4:	0800dafb 	.word	0x0800dafb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	73fb      	strb	r3, [r7, #15]
    break;
 800daec:	e00b      	b.n	800db06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daee:	2303      	movs	r3, #3
 800daf0:	73fb      	strb	r3, [r7, #15]
    break;
 800daf2:	e008      	b.n	800db06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800daf4:	2301      	movs	r3, #1
 800daf6:	73fb      	strb	r3, [r7, #15]
    break;
 800daf8:	e005      	b.n	800db06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dafa:	2303      	movs	r3, #3
 800dafc:	73fb      	strb	r3, [r7, #15]
    break;
 800dafe:	e002      	b.n	800db06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db00:	2303      	movs	r3, #3
 800db02:	73fb      	strb	r3, [r7, #15]
    break;
 800db04:	bf00      	nop
  }
  return usb_status;
 800db06:	7bfb      	ldrb	r3, [r7, #15]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <malloc>:
 800db14:	4b02      	ldr	r3, [pc, #8]	@ (800db20 <malloc+0xc>)
 800db16:	4601      	mov	r1, r0
 800db18:	6818      	ldr	r0, [r3, #0]
 800db1a:	f000 b825 	b.w	800db68 <_malloc_r>
 800db1e:	bf00      	nop
 800db20:	2000029c 	.word	0x2000029c

0800db24 <sbrk_aligned>:
 800db24:	b570      	push	{r4, r5, r6, lr}
 800db26:	4e0f      	ldr	r6, [pc, #60]	@ (800db64 <sbrk_aligned+0x40>)
 800db28:	460c      	mov	r4, r1
 800db2a:	6831      	ldr	r1, [r6, #0]
 800db2c:	4605      	mov	r5, r0
 800db2e:	b911      	cbnz	r1, 800db36 <sbrk_aligned+0x12>
 800db30:	f001 fea0 	bl	800f874 <_sbrk_r>
 800db34:	6030      	str	r0, [r6, #0]
 800db36:	4621      	mov	r1, r4
 800db38:	4628      	mov	r0, r5
 800db3a:	f001 fe9b 	bl	800f874 <_sbrk_r>
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	d103      	bne.n	800db4a <sbrk_aligned+0x26>
 800db42:	f04f 34ff 	mov.w	r4, #4294967295
 800db46:	4620      	mov	r0, r4
 800db48:	bd70      	pop	{r4, r5, r6, pc}
 800db4a:	1cc4      	adds	r4, r0, #3
 800db4c:	f024 0403 	bic.w	r4, r4, #3
 800db50:	42a0      	cmp	r0, r4
 800db52:	d0f8      	beq.n	800db46 <sbrk_aligned+0x22>
 800db54:	1a21      	subs	r1, r4, r0
 800db56:	4628      	mov	r0, r5
 800db58:	f001 fe8c 	bl	800f874 <_sbrk_r>
 800db5c:	3001      	adds	r0, #1
 800db5e:	d1f2      	bne.n	800db46 <sbrk_aligned+0x22>
 800db60:	e7ef      	b.n	800db42 <sbrk_aligned+0x1e>
 800db62:	bf00      	nop
 800db64:	20002538 	.word	0x20002538

0800db68 <_malloc_r>:
 800db68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db6c:	1ccd      	adds	r5, r1, #3
 800db6e:	f025 0503 	bic.w	r5, r5, #3
 800db72:	3508      	adds	r5, #8
 800db74:	2d0c      	cmp	r5, #12
 800db76:	bf38      	it	cc
 800db78:	250c      	movcc	r5, #12
 800db7a:	2d00      	cmp	r5, #0
 800db7c:	4606      	mov	r6, r0
 800db7e:	db01      	blt.n	800db84 <_malloc_r+0x1c>
 800db80:	42a9      	cmp	r1, r5
 800db82:	d904      	bls.n	800db8e <_malloc_r+0x26>
 800db84:	230c      	movs	r3, #12
 800db86:	6033      	str	r3, [r6, #0]
 800db88:	2000      	movs	r0, #0
 800db8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc64 <_malloc_r+0xfc>
 800db92:	f000 f869 	bl	800dc68 <__malloc_lock>
 800db96:	f8d8 3000 	ldr.w	r3, [r8]
 800db9a:	461c      	mov	r4, r3
 800db9c:	bb44      	cbnz	r4, 800dbf0 <_malloc_r+0x88>
 800db9e:	4629      	mov	r1, r5
 800dba0:	4630      	mov	r0, r6
 800dba2:	f7ff ffbf 	bl	800db24 <sbrk_aligned>
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	4604      	mov	r4, r0
 800dbaa:	d158      	bne.n	800dc5e <_malloc_r+0xf6>
 800dbac:	f8d8 4000 	ldr.w	r4, [r8]
 800dbb0:	4627      	mov	r7, r4
 800dbb2:	2f00      	cmp	r7, #0
 800dbb4:	d143      	bne.n	800dc3e <_malloc_r+0xd6>
 800dbb6:	2c00      	cmp	r4, #0
 800dbb8:	d04b      	beq.n	800dc52 <_malloc_r+0xea>
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	eb04 0903 	add.w	r9, r4, r3
 800dbc4:	f001 fe56 	bl	800f874 <_sbrk_r>
 800dbc8:	4581      	cmp	r9, r0
 800dbca:	d142      	bne.n	800dc52 <_malloc_r+0xea>
 800dbcc:	6821      	ldr	r1, [r4, #0]
 800dbce:	1a6d      	subs	r5, r5, r1
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7ff ffa6 	bl	800db24 <sbrk_aligned>
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d03a      	beq.n	800dc52 <_malloc_r+0xea>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	442b      	add	r3, r5
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	f8d8 3000 	ldr.w	r3, [r8]
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	bb62      	cbnz	r2, 800dc44 <_malloc_r+0xdc>
 800dbea:	f8c8 7000 	str.w	r7, [r8]
 800dbee:	e00f      	b.n	800dc10 <_malloc_r+0xa8>
 800dbf0:	6822      	ldr	r2, [r4, #0]
 800dbf2:	1b52      	subs	r2, r2, r5
 800dbf4:	d420      	bmi.n	800dc38 <_malloc_r+0xd0>
 800dbf6:	2a0b      	cmp	r2, #11
 800dbf8:	d917      	bls.n	800dc2a <_malloc_r+0xc2>
 800dbfa:	1961      	adds	r1, r4, r5
 800dbfc:	42a3      	cmp	r3, r4
 800dbfe:	6025      	str	r5, [r4, #0]
 800dc00:	bf18      	it	ne
 800dc02:	6059      	strne	r1, [r3, #4]
 800dc04:	6863      	ldr	r3, [r4, #4]
 800dc06:	bf08      	it	eq
 800dc08:	f8c8 1000 	streq.w	r1, [r8]
 800dc0c:	5162      	str	r2, [r4, r5]
 800dc0e:	604b      	str	r3, [r1, #4]
 800dc10:	4630      	mov	r0, r6
 800dc12:	f000 f82f 	bl	800dc74 <__malloc_unlock>
 800dc16:	f104 000b 	add.w	r0, r4, #11
 800dc1a:	1d23      	adds	r3, r4, #4
 800dc1c:	f020 0007 	bic.w	r0, r0, #7
 800dc20:	1ac2      	subs	r2, r0, r3
 800dc22:	bf1c      	itt	ne
 800dc24:	1a1b      	subne	r3, r3, r0
 800dc26:	50a3      	strne	r3, [r4, r2]
 800dc28:	e7af      	b.n	800db8a <_malloc_r+0x22>
 800dc2a:	6862      	ldr	r2, [r4, #4]
 800dc2c:	42a3      	cmp	r3, r4
 800dc2e:	bf0c      	ite	eq
 800dc30:	f8c8 2000 	streq.w	r2, [r8]
 800dc34:	605a      	strne	r2, [r3, #4]
 800dc36:	e7eb      	b.n	800dc10 <_malloc_r+0xa8>
 800dc38:	4623      	mov	r3, r4
 800dc3a:	6864      	ldr	r4, [r4, #4]
 800dc3c:	e7ae      	b.n	800db9c <_malloc_r+0x34>
 800dc3e:	463c      	mov	r4, r7
 800dc40:	687f      	ldr	r7, [r7, #4]
 800dc42:	e7b6      	b.n	800dbb2 <_malloc_r+0x4a>
 800dc44:	461a      	mov	r2, r3
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	42a3      	cmp	r3, r4
 800dc4a:	d1fb      	bne.n	800dc44 <_malloc_r+0xdc>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	6053      	str	r3, [r2, #4]
 800dc50:	e7de      	b.n	800dc10 <_malloc_r+0xa8>
 800dc52:	230c      	movs	r3, #12
 800dc54:	6033      	str	r3, [r6, #0]
 800dc56:	4630      	mov	r0, r6
 800dc58:	f000 f80c 	bl	800dc74 <__malloc_unlock>
 800dc5c:	e794      	b.n	800db88 <_malloc_r+0x20>
 800dc5e:	6005      	str	r5, [r0, #0]
 800dc60:	e7d6      	b.n	800dc10 <_malloc_r+0xa8>
 800dc62:	bf00      	nop
 800dc64:	2000253c 	.word	0x2000253c

0800dc68 <__malloc_lock>:
 800dc68:	4801      	ldr	r0, [pc, #4]	@ (800dc70 <__malloc_lock+0x8>)
 800dc6a:	f001 be50 	b.w	800f90e <__retarget_lock_acquire_recursive>
 800dc6e:	bf00      	nop
 800dc70:	20002680 	.word	0x20002680

0800dc74 <__malloc_unlock>:
 800dc74:	4801      	ldr	r0, [pc, #4]	@ (800dc7c <__malloc_unlock+0x8>)
 800dc76:	f001 be4b 	b.w	800f910 <__retarget_lock_release_recursive>
 800dc7a:	bf00      	nop
 800dc7c:	20002680 	.word	0x20002680

0800dc80 <sulp>:
 800dc80:	b570      	push	{r4, r5, r6, lr}
 800dc82:	4604      	mov	r4, r0
 800dc84:	460d      	mov	r5, r1
 800dc86:	ec45 4b10 	vmov	d0, r4, r5
 800dc8a:	4616      	mov	r6, r2
 800dc8c:	f003 fbb6 	bl	80113fc <__ulp>
 800dc90:	ec51 0b10 	vmov	r0, r1, d0
 800dc94:	b17e      	cbz	r6, 800dcb6 <sulp+0x36>
 800dc96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dc9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	dd09      	ble.n	800dcb6 <sulp+0x36>
 800dca2:	051b      	lsls	r3, r3, #20
 800dca4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dca8:	2400      	movs	r4, #0
 800dcaa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dcae:	4622      	mov	r2, r4
 800dcb0:	462b      	mov	r3, r5
 800dcb2:	f7f2 fcc1 	bl	8000638 <__aeabi_dmul>
 800dcb6:	ec41 0b10 	vmov	d0, r0, r1
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	0000      	movs	r0, r0
	...

0800dcc0 <_strtod_l>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	b09f      	sub	sp, #124	@ 0x7c
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dcca:	2200      	movs	r2, #0
 800dccc:	921a      	str	r2, [sp, #104]	@ 0x68
 800dcce:	9005      	str	r0, [sp, #20]
 800dcd0:	f04f 0a00 	mov.w	sl, #0
 800dcd4:	f04f 0b00 	mov.w	fp, #0
 800dcd8:	460a      	mov	r2, r1
 800dcda:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcdc:	7811      	ldrb	r1, [r2, #0]
 800dcde:	292b      	cmp	r1, #43	@ 0x2b
 800dce0:	d04a      	beq.n	800dd78 <_strtod_l+0xb8>
 800dce2:	d838      	bhi.n	800dd56 <_strtod_l+0x96>
 800dce4:	290d      	cmp	r1, #13
 800dce6:	d832      	bhi.n	800dd4e <_strtod_l+0x8e>
 800dce8:	2908      	cmp	r1, #8
 800dcea:	d832      	bhi.n	800dd52 <_strtod_l+0x92>
 800dcec:	2900      	cmp	r1, #0
 800dcee:	d03b      	beq.n	800dd68 <_strtod_l+0xa8>
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dcf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dcf6:	782a      	ldrb	r2, [r5, #0]
 800dcf8:	2a30      	cmp	r2, #48	@ 0x30
 800dcfa:	f040 80b3 	bne.w	800de64 <_strtod_l+0x1a4>
 800dcfe:	786a      	ldrb	r2, [r5, #1]
 800dd00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd04:	2a58      	cmp	r2, #88	@ 0x58
 800dd06:	d16e      	bne.n	800dde6 <_strtod_l+0x126>
 800dd08:	9302      	str	r3, [sp, #8]
 800dd0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	4a8e      	ldr	r2, [pc, #568]	@ (800df4c <_strtod_l+0x28c>)
 800dd14:	9805      	ldr	r0, [sp, #20]
 800dd16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd18:	a919      	add	r1, sp, #100	@ 0x64
 800dd1a:	f002 fd17 	bl	801074c <__gethex>
 800dd1e:	f010 060f 	ands.w	r6, r0, #15
 800dd22:	4604      	mov	r4, r0
 800dd24:	d005      	beq.n	800dd32 <_strtod_l+0x72>
 800dd26:	2e06      	cmp	r6, #6
 800dd28:	d128      	bne.n	800dd7c <_strtod_l+0xbc>
 800dd2a:	3501      	adds	r5, #1
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800dd30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f040 858e 	bne.w	800e856 <_strtod_l+0xb96>
 800dd3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd3c:	b1cb      	cbz	r3, 800dd72 <_strtod_l+0xb2>
 800dd3e:	4652      	mov	r2, sl
 800dd40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dd44:	ec43 2b10 	vmov	d0, r2, r3
 800dd48:	b01f      	add	sp, #124	@ 0x7c
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	2920      	cmp	r1, #32
 800dd50:	d1ce      	bne.n	800dcf0 <_strtod_l+0x30>
 800dd52:	3201      	adds	r2, #1
 800dd54:	e7c1      	b.n	800dcda <_strtod_l+0x1a>
 800dd56:	292d      	cmp	r1, #45	@ 0x2d
 800dd58:	d1ca      	bne.n	800dcf0 <_strtod_l+0x30>
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd5e:	1c51      	adds	r1, r2, #1
 800dd60:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd62:	7852      	ldrb	r2, [r2, #1]
 800dd64:	2a00      	cmp	r2, #0
 800dd66:	d1c5      	bne.n	800dcf4 <_strtod_l+0x34>
 800dd68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8570 	bne.w	800e852 <_strtod_l+0xb92>
 800dd72:	4652      	mov	r2, sl
 800dd74:	465b      	mov	r3, fp
 800dd76:	e7e5      	b.n	800dd44 <_strtod_l+0x84>
 800dd78:	2100      	movs	r1, #0
 800dd7a:	e7ef      	b.n	800dd5c <_strtod_l+0x9c>
 800dd7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd7e:	b13a      	cbz	r2, 800dd90 <_strtod_l+0xd0>
 800dd80:	2135      	movs	r1, #53	@ 0x35
 800dd82:	a81c      	add	r0, sp, #112	@ 0x70
 800dd84:	f003 fc34 	bl	80115f0 <__copybits>
 800dd88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd8a:	9805      	ldr	r0, [sp, #20]
 800dd8c:	f003 f802 	bl	8010d94 <_Bfree>
 800dd90:	3e01      	subs	r6, #1
 800dd92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dd94:	2e04      	cmp	r6, #4
 800dd96:	d806      	bhi.n	800dda6 <_strtod_l+0xe6>
 800dd98:	e8df f006 	tbb	[pc, r6]
 800dd9c:	201d0314 	.word	0x201d0314
 800dda0:	14          	.byte	0x14
 800dda1:	00          	.byte	0x00
 800dda2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dda6:	05e1      	lsls	r1, r4, #23
 800dda8:	bf48      	it	mi
 800ddaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ddae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddb2:	0d1b      	lsrs	r3, r3, #20
 800ddb4:	051b      	lsls	r3, r3, #20
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1bb      	bne.n	800dd32 <_strtod_l+0x72>
 800ddba:	f001 fd7d 	bl	800f8b8 <__errno>
 800ddbe:	2322      	movs	r3, #34	@ 0x22
 800ddc0:	6003      	str	r3, [r0, #0]
 800ddc2:	e7b6      	b.n	800dd32 <_strtod_l+0x72>
 800ddc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ddc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ddcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ddd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ddd4:	e7e7      	b.n	800dda6 <_strtod_l+0xe6>
 800ddd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800df54 <_strtod_l+0x294>
 800ddda:	e7e4      	b.n	800dda6 <_strtod_l+0xe6>
 800dddc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dde0:	f04f 3aff 	mov.w	sl, #4294967295
 800dde4:	e7df      	b.n	800dda6 <_strtod_l+0xe6>
 800dde6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dde8:	1c5a      	adds	r2, r3, #1
 800ddea:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	2b30      	cmp	r3, #48	@ 0x30
 800ddf0:	d0f9      	beq.n	800dde6 <_strtod_l+0x126>
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d09d      	beq.n	800dd32 <_strtod_l+0x72>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddfc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddfe:	2300      	movs	r3, #0
 800de00:	9308      	str	r3, [sp, #32]
 800de02:	930a      	str	r3, [sp, #40]	@ 0x28
 800de04:	461f      	mov	r7, r3
 800de06:	220a      	movs	r2, #10
 800de08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800de0a:	7805      	ldrb	r5, [r0, #0]
 800de0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800de10:	b2d9      	uxtb	r1, r3
 800de12:	2909      	cmp	r1, #9
 800de14:	d928      	bls.n	800de68 <_strtod_l+0x1a8>
 800de16:	494e      	ldr	r1, [pc, #312]	@ (800df50 <_strtod_l+0x290>)
 800de18:	2201      	movs	r2, #1
 800de1a:	f001 fce0 	bl	800f7de <strncmp>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d032      	beq.n	800de88 <_strtod_l+0x1c8>
 800de22:	2000      	movs	r0, #0
 800de24:	462a      	mov	r2, r5
 800de26:	4681      	mov	r9, r0
 800de28:	463d      	mov	r5, r7
 800de2a:	4603      	mov	r3, r0
 800de2c:	2a65      	cmp	r2, #101	@ 0x65
 800de2e:	d001      	beq.n	800de34 <_strtod_l+0x174>
 800de30:	2a45      	cmp	r2, #69	@ 0x45
 800de32:	d114      	bne.n	800de5e <_strtod_l+0x19e>
 800de34:	b91d      	cbnz	r5, 800de3e <_strtod_l+0x17e>
 800de36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de38:	4302      	orrs	r2, r0
 800de3a:	d095      	beq.n	800dd68 <_strtod_l+0xa8>
 800de3c:	2500      	movs	r5, #0
 800de3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800de40:	1c62      	adds	r2, r4, #1
 800de42:	9219      	str	r2, [sp, #100]	@ 0x64
 800de44:	7862      	ldrb	r2, [r4, #1]
 800de46:	2a2b      	cmp	r2, #43	@ 0x2b
 800de48:	d077      	beq.n	800df3a <_strtod_l+0x27a>
 800de4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800de4c:	d07b      	beq.n	800df46 <_strtod_l+0x286>
 800de4e:	f04f 0c00 	mov.w	ip, #0
 800de52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800de56:	2909      	cmp	r1, #9
 800de58:	f240 8082 	bls.w	800df60 <_strtod_l+0x2a0>
 800de5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800de5e:	f04f 0800 	mov.w	r8, #0
 800de62:	e0a2      	b.n	800dfaa <_strtod_l+0x2ea>
 800de64:	2300      	movs	r3, #0
 800de66:	e7c7      	b.n	800ddf8 <_strtod_l+0x138>
 800de68:	2f08      	cmp	r7, #8
 800de6a:	bfd5      	itete	le
 800de6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800de6e:	9908      	ldrgt	r1, [sp, #32]
 800de70:	fb02 3301 	mlale	r3, r2, r1, r3
 800de74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800de78:	f100 0001 	add.w	r0, r0, #1
 800de7c:	bfd4      	ite	le
 800de7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800de80:	9308      	strgt	r3, [sp, #32]
 800de82:	3701      	adds	r7, #1
 800de84:	9019      	str	r0, [sp, #100]	@ 0x64
 800de86:	e7bf      	b.n	800de08 <_strtod_l+0x148>
 800de88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de8a:	1c5a      	adds	r2, r3, #1
 800de8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800de8e:	785a      	ldrb	r2, [r3, #1]
 800de90:	b37f      	cbz	r7, 800def2 <_strtod_l+0x232>
 800de92:	4681      	mov	r9, r0
 800de94:	463d      	mov	r5, r7
 800de96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800de9a:	2b09      	cmp	r3, #9
 800de9c:	d912      	bls.n	800dec4 <_strtod_l+0x204>
 800de9e:	2301      	movs	r3, #1
 800dea0:	e7c4      	b.n	800de2c <_strtod_l+0x16c>
 800dea2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	9219      	str	r2, [sp, #100]	@ 0x64
 800dea8:	785a      	ldrb	r2, [r3, #1]
 800deaa:	3001      	adds	r0, #1
 800deac:	2a30      	cmp	r2, #48	@ 0x30
 800deae:	d0f8      	beq.n	800dea2 <_strtod_l+0x1e2>
 800deb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800deb4:	2b08      	cmp	r3, #8
 800deb6:	f200 84d3 	bhi.w	800e860 <_strtod_l+0xba0>
 800deba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800debc:	930c      	str	r3, [sp, #48]	@ 0x30
 800debe:	4681      	mov	r9, r0
 800dec0:	2000      	movs	r0, #0
 800dec2:	4605      	mov	r5, r0
 800dec4:	3a30      	subs	r2, #48	@ 0x30
 800dec6:	f100 0301 	add.w	r3, r0, #1
 800deca:	d02a      	beq.n	800df22 <_strtod_l+0x262>
 800decc:	4499      	add	r9, r3
 800dece:	eb00 0c05 	add.w	ip, r0, r5
 800ded2:	462b      	mov	r3, r5
 800ded4:	210a      	movs	r1, #10
 800ded6:	4563      	cmp	r3, ip
 800ded8:	d10d      	bne.n	800def6 <_strtod_l+0x236>
 800deda:	1c69      	adds	r1, r5, #1
 800dedc:	4401      	add	r1, r0
 800dede:	4428      	add	r0, r5
 800dee0:	2808      	cmp	r0, #8
 800dee2:	dc16      	bgt.n	800df12 <_strtod_l+0x252>
 800dee4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dee6:	230a      	movs	r3, #10
 800dee8:	fb03 2300 	mla	r3, r3, r0, r2
 800deec:	930a      	str	r3, [sp, #40]	@ 0x28
 800deee:	2300      	movs	r3, #0
 800def0:	e018      	b.n	800df24 <_strtod_l+0x264>
 800def2:	4638      	mov	r0, r7
 800def4:	e7da      	b.n	800deac <_strtod_l+0x1ec>
 800def6:	2b08      	cmp	r3, #8
 800def8:	f103 0301 	add.w	r3, r3, #1
 800defc:	dc03      	bgt.n	800df06 <_strtod_l+0x246>
 800defe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800df00:	434e      	muls	r6, r1
 800df02:	960a      	str	r6, [sp, #40]	@ 0x28
 800df04:	e7e7      	b.n	800ded6 <_strtod_l+0x216>
 800df06:	2b10      	cmp	r3, #16
 800df08:	bfde      	ittt	le
 800df0a:	9e08      	ldrle	r6, [sp, #32]
 800df0c:	434e      	mulle	r6, r1
 800df0e:	9608      	strle	r6, [sp, #32]
 800df10:	e7e1      	b.n	800ded6 <_strtod_l+0x216>
 800df12:	280f      	cmp	r0, #15
 800df14:	dceb      	bgt.n	800deee <_strtod_l+0x22e>
 800df16:	9808      	ldr	r0, [sp, #32]
 800df18:	230a      	movs	r3, #10
 800df1a:	fb03 2300 	mla	r3, r3, r0, r2
 800df1e:	9308      	str	r3, [sp, #32]
 800df20:	e7e5      	b.n	800deee <_strtod_l+0x22e>
 800df22:	4629      	mov	r1, r5
 800df24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df26:	1c50      	adds	r0, r2, #1
 800df28:	9019      	str	r0, [sp, #100]	@ 0x64
 800df2a:	7852      	ldrb	r2, [r2, #1]
 800df2c:	4618      	mov	r0, r3
 800df2e:	460d      	mov	r5, r1
 800df30:	e7b1      	b.n	800de96 <_strtod_l+0x1d6>
 800df32:	f04f 0900 	mov.w	r9, #0
 800df36:	2301      	movs	r3, #1
 800df38:	e77d      	b.n	800de36 <_strtod_l+0x176>
 800df3a:	f04f 0c00 	mov.w	ip, #0
 800df3e:	1ca2      	adds	r2, r4, #2
 800df40:	9219      	str	r2, [sp, #100]	@ 0x64
 800df42:	78a2      	ldrb	r2, [r4, #2]
 800df44:	e785      	b.n	800de52 <_strtod_l+0x192>
 800df46:	f04f 0c01 	mov.w	ip, #1
 800df4a:	e7f8      	b.n	800df3e <_strtod_l+0x27e>
 800df4c:	080147a4 	.word	0x080147a4
 800df50:	0801478c 	.word	0x0801478c
 800df54:	7ff00000 	.word	0x7ff00000
 800df58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df5a:	1c51      	adds	r1, r2, #1
 800df5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800df5e:	7852      	ldrb	r2, [r2, #1]
 800df60:	2a30      	cmp	r2, #48	@ 0x30
 800df62:	d0f9      	beq.n	800df58 <_strtod_l+0x298>
 800df64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800df68:	2908      	cmp	r1, #8
 800df6a:	f63f af78 	bhi.w	800de5e <_strtod_l+0x19e>
 800df6e:	3a30      	subs	r2, #48	@ 0x30
 800df70:	920e      	str	r2, [sp, #56]	@ 0x38
 800df72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df76:	f04f 080a 	mov.w	r8, #10
 800df7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df7c:	1c56      	adds	r6, r2, #1
 800df7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800df80:	7852      	ldrb	r2, [r2, #1]
 800df82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800df86:	f1be 0f09 	cmp.w	lr, #9
 800df8a:	d939      	bls.n	800e000 <_strtod_l+0x340>
 800df8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df8e:	1a76      	subs	r6, r6, r1
 800df90:	2e08      	cmp	r6, #8
 800df92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800df96:	dc03      	bgt.n	800dfa0 <_strtod_l+0x2e0>
 800df98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df9a:	4588      	cmp	r8, r1
 800df9c:	bfa8      	it	ge
 800df9e:	4688      	movge	r8, r1
 800dfa0:	f1bc 0f00 	cmp.w	ip, #0
 800dfa4:	d001      	beq.n	800dfaa <_strtod_l+0x2ea>
 800dfa6:	f1c8 0800 	rsb	r8, r8, #0
 800dfaa:	2d00      	cmp	r5, #0
 800dfac:	d14e      	bne.n	800e04c <_strtod_l+0x38c>
 800dfae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfb0:	4308      	orrs	r0, r1
 800dfb2:	f47f aebe 	bne.w	800dd32 <_strtod_l+0x72>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f47f aed6 	bne.w	800dd68 <_strtod_l+0xa8>
 800dfbc:	2a69      	cmp	r2, #105	@ 0x69
 800dfbe:	d028      	beq.n	800e012 <_strtod_l+0x352>
 800dfc0:	dc25      	bgt.n	800e00e <_strtod_l+0x34e>
 800dfc2:	2a49      	cmp	r2, #73	@ 0x49
 800dfc4:	d025      	beq.n	800e012 <_strtod_l+0x352>
 800dfc6:	2a4e      	cmp	r2, #78	@ 0x4e
 800dfc8:	f47f aece 	bne.w	800dd68 <_strtod_l+0xa8>
 800dfcc:	499b      	ldr	r1, [pc, #620]	@ (800e23c <_strtod_l+0x57c>)
 800dfce:	a819      	add	r0, sp, #100	@ 0x64
 800dfd0:	f002 fdde 	bl	8010b90 <__match>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	f43f aec7 	beq.w	800dd68 <_strtod_l+0xa8>
 800dfda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b28      	cmp	r3, #40	@ 0x28
 800dfe0:	d12e      	bne.n	800e040 <_strtod_l+0x380>
 800dfe2:	4997      	ldr	r1, [pc, #604]	@ (800e240 <_strtod_l+0x580>)
 800dfe4:	aa1c      	add	r2, sp, #112	@ 0x70
 800dfe6:	a819      	add	r0, sp, #100	@ 0x64
 800dfe8:	f002 fde6 	bl	8010bb8 <__hexnan>
 800dfec:	2805      	cmp	r0, #5
 800dfee:	d127      	bne.n	800e040 <_strtod_l+0x380>
 800dff0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dff2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dff6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dffa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dffe:	e698      	b.n	800dd32 <_strtod_l+0x72>
 800e000:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e002:	fb08 2101 	mla	r1, r8, r1, r2
 800e006:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e00a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e00c:	e7b5      	b.n	800df7a <_strtod_l+0x2ba>
 800e00e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e010:	e7da      	b.n	800dfc8 <_strtod_l+0x308>
 800e012:	498c      	ldr	r1, [pc, #560]	@ (800e244 <_strtod_l+0x584>)
 800e014:	a819      	add	r0, sp, #100	@ 0x64
 800e016:	f002 fdbb 	bl	8010b90 <__match>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f43f aea4 	beq.w	800dd68 <_strtod_l+0xa8>
 800e020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e022:	4989      	ldr	r1, [pc, #548]	@ (800e248 <_strtod_l+0x588>)
 800e024:	3b01      	subs	r3, #1
 800e026:	a819      	add	r0, sp, #100	@ 0x64
 800e028:	9319      	str	r3, [sp, #100]	@ 0x64
 800e02a:	f002 fdb1 	bl	8010b90 <__match>
 800e02e:	b910      	cbnz	r0, 800e036 <_strtod_l+0x376>
 800e030:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e032:	3301      	adds	r3, #1
 800e034:	9319      	str	r3, [sp, #100]	@ 0x64
 800e036:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e258 <_strtod_l+0x598>
 800e03a:	f04f 0a00 	mov.w	sl, #0
 800e03e:	e678      	b.n	800dd32 <_strtod_l+0x72>
 800e040:	4882      	ldr	r0, [pc, #520]	@ (800e24c <_strtod_l+0x58c>)
 800e042:	f001 fc75 	bl	800f930 <nan>
 800e046:	ec5b ab10 	vmov	sl, fp, d0
 800e04a:	e672      	b.n	800dd32 <_strtod_l+0x72>
 800e04c:	eba8 0309 	sub.w	r3, r8, r9
 800e050:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e052:	9309      	str	r3, [sp, #36]	@ 0x24
 800e054:	2f00      	cmp	r7, #0
 800e056:	bf08      	it	eq
 800e058:	462f      	moveq	r7, r5
 800e05a:	2d10      	cmp	r5, #16
 800e05c:	462c      	mov	r4, r5
 800e05e:	bfa8      	it	ge
 800e060:	2410      	movge	r4, #16
 800e062:	f7f2 fa6f 	bl	8000544 <__aeabi_ui2d>
 800e066:	2d09      	cmp	r5, #9
 800e068:	4682      	mov	sl, r0
 800e06a:	468b      	mov	fp, r1
 800e06c:	dc13      	bgt.n	800e096 <_strtod_l+0x3d6>
 800e06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e070:	2b00      	cmp	r3, #0
 800e072:	f43f ae5e 	beq.w	800dd32 <_strtod_l+0x72>
 800e076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e078:	dd78      	ble.n	800e16c <_strtod_l+0x4ac>
 800e07a:	2b16      	cmp	r3, #22
 800e07c:	dc5f      	bgt.n	800e13e <_strtod_l+0x47e>
 800e07e:	4974      	ldr	r1, [pc, #464]	@ (800e250 <_strtod_l+0x590>)
 800e080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e088:	4652      	mov	r2, sl
 800e08a:	465b      	mov	r3, fp
 800e08c:	f7f2 fad4 	bl	8000638 <__aeabi_dmul>
 800e090:	4682      	mov	sl, r0
 800e092:	468b      	mov	fp, r1
 800e094:	e64d      	b.n	800dd32 <_strtod_l+0x72>
 800e096:	4b6e      	ldr	r3, [pc, #440]	@ (800e250 <_strtod_l+0x590>)
 800e098:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e09c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e0a0:	f7f2 faca 	bl	8000638 <__aeabi_dmul>
 800e0a4:	4682      	mov	sl, r0
 800e0a6:	9808      	ldr	r0, [sp, #32]
 800e0a8:	468b      	mov	fp, r1
 800e0aa:	f7f2 fa4b 	bl	8000544 <__aeabi_ui2d>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	4650      	mov	r0, sl
 800e0b4:	4659      	mov	r1, fp
 800e0b6:	f7f2 f909 	bl	80002cc <__adddf3>
 800e0ba:	2d0f      	cmp	r5, #15
 800e0bc:	4682      	mov	sl, r0
 800e0be:	468b      	mov	fp, r1
 800e0c0:	ddd5      	ble.n	800e06e <_strtod_l+0x3ae>
 800e0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c4:	1b2c      	subs	r4, r5, r4
 800e0c6:	441c      	add	r4, r3
 800e0c8:	2c00      	cmp	r4, #0
 800e0ca:	f340 8096 	ble.w	800e1fa <_strtod_l+0x53a>
 800e0ce:	f014 030f 	ands.w	r3, r4, #15
 800e0d2:	d00a      	beq.n	800e0ea <_strtod_l+0x42a>
 800e0d4:	495e      	ldr	r1, [pc, #376]	@ (800e250 <_strtod_l+0x590>)
 800e0d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0da:	4652      	mov	r2, sl
 800e0dc:	465b      	mov	r3, fp
 800e0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e2:	f7f2 faa9 	bl	8000638 <__aeabi_dmul>
 800e0e6:	4682      	mov	sl, r0
 800e0e8:	468b      	mov	fp, r1
 800e0ea:	f034 040f 	bics.w	r4, r4, #15
 800e0ee:	d073      	beq.n	800e1d8 <_strtod_l+0x518>
 800e0f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e0f4:	dd48      	ble.n	800e188 <_strtod_l+0x4c8>
 800e0f6:	2400      	movs	r4, #0
 800e0f8:	46a0      	mov	r8, r4
 800e0fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800e0fc:	46a1      	mov	r9, r4
 800e0fe:	9a05      	ldr	r2, [sp, #20]
 800e100:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e258 <_strtod_l+0x598>
 800e104:	2322      	movs	r3, #34	@ 0x22
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	f04f 0a00 	mov.w	sl, #0
 800e10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f43f ae0f 	beq.w	800dd32 <_strtod_l+0x72>
 800e114:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e116:	9805      	ldr	r0, [sp, #20]
 800e118:	f002 fe3c 	bl	8010d94 <_Bfree>
 800e11c:	9805      	ldr	r0, [sp, #20]
 800e11e:	4649      	mov	r1, r9
 800e120:	f002 fe38 	bl	8010d94 <_Bfree>
 800e124:	9805      	ldr	r0, [sp, #20]
 800e126:	4641      	mov	r1, r8
 800e128:	f002 fe34 	bl	8010d94 <_Bfree>
 800e12c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e12e:	9805      	ldr	r0, [sp, #20]
 800e130:	f002 fe30 	bl	8010d94 <_Bfree>
 800e134:	9805      	ldr	r0, [sp, #20]
 800e136:	4621      	mov	r1, r4
 800e138:	f002 fe2c 	bl	8010d94 <_Bfree>
 800e13c:	e5f9      	b.n	800dd32 <_strtod_l+0x72>
 800e13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e140:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e144:	4293      	cmp	r3, r2
 800e146:	dbbc      	blt.n	800e0c2 <_strtod_l+0x402>
 800e148:	4c41      	ldr	r4, [pc, #260]	@ (800e250 <_strtod_l+0x590>)
 800e14a:	f1c5 050f 	rsb	r5, r5, #15
 800e14e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e152:	4652      	mov	r2, sl
 800e154:	465b      	mov	r3, fp
 800e156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e15a:	f7f2 fa6d 	bl	8000638 <__aeabi_dmul>
 800e15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e160:	1b5d      	subs	r5, r3, r5
 800e162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e16a:	e78f      	b.n	800e08c <_strtod_l+0x3cc>
 800e16c:	3316      	adds	r3, #22
 800e16e:	dba8      	blt.n	800e0c2 <_strtod_l+0x402>
 800e170:	4b37      	ldr	r3, [pc, #220]	@ (800e250 <_strtod_l+0x590>)
 800e172:	eba9 0808 	sub.w	r8, r9, r8
 800e176:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e17a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e17e:	4650      	mov	r0, sl
 800e180:	4659      	mov	r1, fp
 800e182:	f7f2 fb83 	bl	800088c <__aeabi_ddiv>
 800e186:	e783      	b.n	800e090 <_strtod_l+0x3d0>
 800e188:	4b32      	ldr	r3, [pc, #200]	@ (800e254 <_strtod_l+0x594>)
 800e18a:	9308      	str	r3, [sp, #32]
 800e18c:	2300      	movs	r3, #0
 800e18e:	1124      	asrs	r4, r4, #4
 800e190:	4650      	mov	r0, sl
 800e192:	4659      	mov	r1, fp
 800e194:	461e      	mov	r6, r3
 800e196:	2c01      	cmp	r4, #1
 800e198:	dc21      	bgt.n	800e1de <_strtod_l+0x51e>
 800e19a:	b10b      	cbz	r3, 800e1a0 <_strtod_l+0x4e0>
 800e19c:	4682      	mov	sl, r0
 800e19e:	468b      	mov	fp, r1
 800e1a0:	492c      	ldr	r1, [pc, #176]	@ (800e254 <_strtod_l+0x594>)
 800e1a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e1aa:	4652      	mov	r2, sl
 800e1ac:	465b      	mov	r3, fp
 800e1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1b2:	f7f2 fa41 	bl	8000638 <__aeabi_dmul>
 800e1b6:	4b28      	ldr	r3, [pc, #160]	@ (800e258 <_strtod_l+0x598>)
 800e1b8:	460a      	mov	r2, r1
 800e1ba:	400b      	ands	r3, r1
 800e1bc:	4927      	ldr	r1, [pc, #156]	@ (800e25c <_strtod_l+0x59c>)
 800e1be:	428b      	cmp	r3, r1
 800e1c0:	4682      	mov	sl, r0
 800e1c2:	d898      	bhi.n	800e0f6 <_strtod_l+0x436>
 800e1c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e1c8:	428b      	cmp	r3, r1
 800e1ca:	bf86      	itte	hi
 800e1cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e260 <_strtod_l+0x5a0>
 800e1d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e1d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e1d8:	2300      	movs	r3, #0
 800e1da:	9308      	str	r3, [sp, #32]
 800e1dc:	e07a      	b.n	800e2d4 <_strtod_l+0x614>
 800e1de:	07e2      	lsls	r2, r4, #31
 800e1e0:	d505      	bpl.n	800e1ee <_strtod_l+0x52e>
 800e1e2:	9b08      	ldr	r3, [sp, #32]
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	f7f2 fa26 	bl	8000638 <__aeabi_dmul>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	9a08      	ldr	r2, [sp, #32]
 800e1f0:	3208      	adds	r2, #8
 800e1f2:	3601      	adds	r6, #1
 800e1f4:	1064      	asrs	r4, r4, #1
 800e1f6:	9208      	str	r2, [sp, #32]
 800e1f8:	e7cd      	b.n	800e196 <_strtod_l+0x4d6>
 800e1fa:	d0ed      	beq.n	800e1d8 <_strtod_l+0x518>
 800e1fc:	4264      	negs	r4, r4
 800e1fe:	f014 020f 	ands.w	r2, r4, #15
 800e202:	d00a      	beq.n	800e21a <_strtod_l+0x55a>
 800e204:	4b12      	ldr	r3, [pc, #72]	@ (800e250 <_strtod_l+0x590>)
 800e206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e20a:	4650      	mov	r0, sl
 800e20c:	4659      	mov	r1, fp
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f7f2 fb3b 	bl	800088c <__aeabi_ddiv>
 800e216:	4682      	mov	sl, r0
 800e218:	468b      	mov	fp, r1
 800e21a:	1124      	asrs	r4, r4, #4
 800e21c:	d0dc      	beq.n	800e1d8 <_strtod_l+0x518>
 800e21e:	2c1f      	cmp	r4, #31
 800e220:	dd20      	ble.n	800e264 <_strtod_l+0x5a4>
 800e222:	2400      	movs	r4, #0
 800e224:	46a0      	mov	r8, r4
 800e226:	940a      	str	r4, [sp, #40]	@ 0x28
 800e228:	46a1      	mov	r9, r4
 800e22a:	9a05      	ldr	r2, [sp, #20]
 800e22c:	2322      	movs	r3, #34	@ 0x22
 800e22e:	f04f 0a00 	mov.w	sl, #0
 800e232:	f04f 0b00 	mov.w	fp, #0
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	e768      	b.n	800e10c <_strtod_l+0x44c>
 800e23a:	bf00      	nop
 800e23c:	080147ed 	.word	0x080147ed
 800e240:	08014790 	.word	0x08014790
 800e244:	080147e5 	.word	0x080147e5
 800e248:	08014824 	.word	0x08014824
 800e24c:	08014bb5 	.word	0x08014bb5
 800e250:	080149a0 	.word	0x080149a0
 800e254:	08014978 	.word	0x08014978
 800e258:	7ff00000 	.word	0x7ff00000
 800e25c:	7ca00000 	.word	0x7ca00000
 800e260:	7fefffff 	.word	0x7fefffff
 800e264:	f014 0310 	ands.w	r3, r4, #16
 800e268:	bf18      	it	ne
 800e26a:	236a      	movne	r3, #106	@ 0x6a
 800e26c:	4ea9      	ldr	r6, [pc, #676]	@ (800e514 <_strtod_l+0x854>)
 800e26e:	9308      	str	r3, [sp, #32]
 800e270:	4650      	mov	r0, sl
 800e272:	4659      	mov	r1, fp
 800e274:	2300      	movs	r3, #0
 800e276:	07e2      	lsls	r2, r4, #31
 800e278:	d504      	bpl.n	800e284 <_strtod_l+0x5c4>
 800e27a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e27e:	f7f2 f9db 	bl	8000638 <__aeabi_dmul>
 800e282:	2301      	movs	r3, #1
 800e284:	1064      	asrs	r4, r4, #1
 800e286:	f106 0608 	add.w	r6, r6, #8
 800e28a:	d1f4      	bne.n	800e276 <_strtod_l+0x5b6>
 800e28c:	b10b      	cbz	r3, 800e292 <_strtod_l+0x5d2>
 800e28e:	4682      	mov	sl, r0
 800e290:	468b      	mov	fp, r1
 800e292:	9b08      	ldr	r3, [sp, #32]
 800e294:	b1b3      	cbz	r3, 800e2c4 <_strtod_l+0x604>
 800e296:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e29a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	4659      	mov	r1, fp
 800e2a2:	dd0f      	ble.n	800e2c4 <_strtod_l+0x604>
 800e2a4:	2b1f      	cmp	r3, #31
 800e2a6:	dd55      	ble.n	800e354 <_strtod_l+0x694>
 800e2a8:	2b34      	cmp	r3, #52	@ 0x34
 800e2aa:	bfde      	ittt	le
 800e2ac:	f04f 33ff 	movle.w	r3, #4294967295
 800e2b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e2b4:	4093      	lslle	r3, r2
 800e2b6:	f04f 0a00 	mov.w	sl, #0
 800e2ba:	bfcc      	ite	gt
 800e2bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2c0:	ea03 0b01 	andle.w	fp, r3, r1
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	4650      	mov	r0, sl
 800e2ca:	4659      	mov	r1, fp
 800e2cc:	f7f2 fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d1a6      	bne.n	800e222 <_strtod_l+0x562>
 800e2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e2da:	9805      	ldr	r0, [sp, #20]
 800e2dc:	462b      	mov	r3, r5
 800e2de:	463a      	mov	r2, r7
 800e2e0:	f002 fdc0 	bl	8010e64 <__s2b>
 800e2e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f43f af05 	beq.w	800e0f6 <_strtod_l+0x436>
 800e2ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	eba9 0308 	sub.w	r3, r9, r8
 800e2f4:	bfa8      	it	ge
 800e2f6:	2300      	movge	r3, #0
 800e2f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e2fa:	2400      	movs	r4, #0
 800e2fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e300:	9316      	str	r3, [sp, #88]	@ 0x58
 800e302:	46a0      	mov	r8, r4
 800e304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e306:	9805      	ldr	r0, [sp, #20]
 800e308:	6859      	ldr	r1, [r3, #4]
 800e30a:	f002 fd03 	bl	8010d14 <_Balloc>
 800e30e:	4681      	mov	r9, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	f43f aef4 	beq.w	800e0fe <_strtod_l+0x43e>
 800e316:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e318:	691a      	ldr	r2, [r3, #16]
 800e31a:	3202      	adds	r2, #2
 800e31c:	f103 010c 	add.w	r1, r3, #12
 800e320:	0092      	lsls	r2, r2, #2
 800e322:	300c      	adds	r0, #12
 800e324:	f001 faf5 	bl	800f912 <memcpy>
 800e328:	ec4b ab10 	vmov	d0, sl, fp
 800e32c:	9805      	ldr	r0, [sp, #20]
 800e32e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e330:	a91b      	add	r1, sp, #108	@ 0x6c
 800e332:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e336:	f003 f8d1 	bl	80114dc <__d2b>
 800e33a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e33c:	2800      	cmp	r0, #0
 800e33e:	f43f aede 	beq.w	800e0fe <_strtod_l+0x43e>
 800e342:	9805      	ldr	r0, [sp, #20]
 800e344:	2101      	movs	r1, #1
 800e346:	f002 fe23 	bl	8010f90 <__i2b>
 800e34a:	4680      	mov	r8, r0
 800e34c:	b948      	cbnz	r0, 800e362 <_strtod_l+0x6a2>
 800e34e:	f04f 0800 	mov.w	r8, #0
 800e352:	e6d4      	b.n	800e0fe <_strtod_l+0x43e>
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	fa02 f303 	lsl.w	r3, r2, r3
 800e35c:	ea03 0a0a 	and.w	sl, r3, sl
 800e360:	e7b0      	b.n	800e2c4 <_strtod_l+0x604>
 800e362:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e364:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e366:	2d00      	cmp	r5, #0
 800e368:	bfab      	itete	ge
 800e36a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e36c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e36e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e370:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e372:	bfac      	ite	ge
 800e374:	18ef      	addge	r7, r5, r3
 800e376:	1b5e      	sublt	r6, r3, r5
 800e378:	9b08      	ldr	r3, [sp, #32]
 800e37a:	1aed      	subs	r5, r5, r3
 800e37c:	4415      	add	r5, r2
 800e37e:	4b66      	ldr	r3, [pc, #408]	@ (800e518 <_strtod_l+0x858>)
 800e380:	3d01      	subs	r5, #1
 800e382:	429d      	cmp	r5, r3
 800e384:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e388:	da50      	bge.n	800e42c <_strtod_l+0x76c>
 800e38a:	1b5b      	subs	r3, r3, r5
 800e38c:	2b1f      	cmp	r3, #31
 800e38e:	eba2 0203 	sub.w	r2, r2, r3
 800e392:	f04f 0101 	mov.w	r1, #1
 800e396:	dc3d      	bgt.n	800e414 <_strtod_l+0x754>
 800e398:	fa01 f303 	lsl.w	r3, r1, r3
 800e39c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e39e:	2300      	movs	r3, #0
 800e3a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3a2:	18bd      	adds	r5, r7, r2
 800e3a4:	9b08      	ldr	r3, [sp, #32]
 800e3a6:	42af      	cmp	r7, r5
 800e3a8:	4416      	add	r6, r2
 800e3aa:	441e      	add	r6, r3
 800e3ac:	463b      	mov	r3, r7
 800e3ae:	bfa8      	it	ge
 800e3b0:	462b      	movge	r3, r5
 800e3b2:	42b3      	cmp	r3, r6
 800e3b4:	bfa8      	it	ge
 800e3b6:	4633      	movge	r3, r6
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	bfc2      	ittt	gt
 800e3bc:	1aed      	subgt	r5, r5, r3
 800e3be:	1af6      	subgt	r6, r6, r3
 800e3c0:	1aff      	subgt	r7, r7, r3
 800e3c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	dd16      	ble.n	800e3f6 <_strtod_l+0x736>
 800e3c8:	4641      	mov	r1, r8
 800e3ca:	9805      	ldr	r0, [sp, #20]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	f002 fe9f 	bl	8011110 <__pow5mult>
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0ba      	beq.n	800e34e <_strtod_l+0x68e>
 800e3d8:	4601      	mov	r1, r0
 800e3da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e3dc:	9805      	ldr	r0, [sp, #20]
 800e3de:	f002 fded 	bl	8010fbc <__multiply>
 800e3e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f43f ae8a 	beq.w	800e0fe <_strtod_l+0x43e>
 800e3ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e3ec:	9805      	ldr	r0, [sp, #20]
 800e3ee:	f002 fcd1 	bl	8010d94 <_Bfree>
 800e3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3f6:	2d00      	cmp	r5, #0
 800e3f8:	dc1d      	bgt.n	800e436 <_strtod_l+0x776>
 800e3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dd23      	ble.n	800e448 <_strtod_l+0x788>
 800e400:	4649      	mov	r1, r9
 800e402:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e404:	9805      	ldr	r0, [sp, #20]
 800e406:	f002 fe83 	bl	8011110 <__pow5mult>
 800e40a:	4681      	mov	r9, r0
 800e40c:	b9e0      	cbnz	r0, 800e448 <_strtod_l+0x788>
 800e40e:	f04f 0900 	mov.w	r9, #0
 800e412:	e674      	b.n	800e0fe <_strtod_l+0x43e>
 800e414:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e418:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e41c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e420:	35e2      	adds	r5, #226	@ 0xe2
 800e422:	fa01 f305 	lsl.w	r3, r1, r5
 800e426:	9310      	str	r3, [sp, #64]	@ 0x40
 800e428:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e42a:	e7ba      	b.n	800e3a2 <_strtod_l+0x6e2>
 800e42c:	2300      	movs	r3, #0
 800e42e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e430:	2301      	movs	r3, #1
 800e432:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e434:	e7b5      	b.n	800e3a2 <_strtod_l+0x6e2>
 800e436:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e438:	9805      	ldr	r0, [sp, #20]
 800e43a:	462a      	mov	r2, r5
 800e43c:	f002 fec2 	bl	80111c4 <__lshift>
 800e440:	901a      	str	r0, [sp, #104]	@ 0x68
 800e442:	2800      	cmp	r0, #0
 800e444:	d1d9      	bne.n	800e3fa <_strtod_l+0x73a>
 800e446:	e65a      	b.n	800e0fe <_strtod_l+0x43e>
 800e448:	2e00      	cmp	r6, #0
 800e44a:	dd07      	ble.n	800e45c <_strtod_l+0x79c>
 800e44c:	4649      	mov	r1, r9
 800e44e:	9805      	ldr	r0, [sp, #20]
 800e450:	4632      	mov	r2, r6
 800e452:	f002 feb7 	bl	80111c4 <__lshift>
 800e456:	4681      	mov	r9, r0
 800e458:	2800      	cmp	r0, #0
 800e45a:	d0d8      	beq.n	800e40e <_strtod_l+0x74e>
 800e45c:	2f00      	cmp	r7, #0
 800e45e:	dd08      	ble.n	800e472 <_strtod_l+0x7b2>
 800e460:	4641      	mov	r1, r8
 800e462:	9805      	ldr	r0, [sp, #20]
 800e464:	463a      	mov	r2, r7
 800e466:	f002 fead 	bl	80111c4 <__lshift>
 800e46a:	4680      	mov	r8, r0
 800e46c:	2800      	cmp	r0, #0
 800e46e:	f43f ae46 	beq.w	800e0fe <_strtod_l+0x43e>
 800e472:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e474:	9805      	ldr	r0, [sp, #20]
 800e476:	464a      	mov	r2, r9
 800e478:	f002 ff2c 	bl	80112d4 <__mdiff>
 800e47c:	4604      	mov	r4, r0
 800e47e:	2800      	cmp	r0, #0
 800e480:	f43f ae3d 	beq.w	800e0fe <_strtod_l+0x43e>
 800e484:	68c3      	ldr	r3, [r0, #12]
 800e486:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e488:	2300      	movs	r3, #0
 800e48a:	60c3      	str	r3, [r0, #12]
 800e48c:	4641      	mov	r1, r8
 800e48e:	f002 ff05 	bl	801129c <__mcmp>
 800e492:	2800      	cmp	r0, #0
 800e494:	da46      	bge.n	800e524 <_strtod_l+0x864>
 800e496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e498:	ea53 030a 	orrs.w	r3, r3, sl
 800e49c:	d16c      	bne.n	800e578 <_strtod_l+0x8b8>
 800e49e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d168      	bne.n	800e578 <_strtod_l+0x8b8>
 800e4a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4aa:	0d1b      	lsrs	r3, r3, #20
 800e4ac:	051b      	lsls	r3, r3, #20
 800e4ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4b2:	d961      	bls.n	800e578 <_strtod_l+0x8b8>
 800e4b4:	6963      	ldr	r3, [r4, #20]
 800e4b6:	b913      	cbnz	r3, 800e4be <_strtod_l+0x7fe>
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	dd5c      	ble.n	800e578 <_strtod_l+0x8b8>
 800e4be:	4621      	mov	r1, r4
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	9805      	ldr	r0, [sp, #20]
 800e4c4:	f002 fe7e 	bl	80111c4 <__lshift>
 800e4c8:	4641      	mov	r1, r8
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	f002 fee6 	bl	801129c <__mcmp>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	dd51      	ble.n	800e578 <_strtod_l+0x8b8>
 800e4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4d8:	9a08      	ldr	r2, [sp, #32]
 800e4da:	0d1b      	lsrs	r3, r3, #20
 800e4dc:	051b      	lsls	r3, r3, #20
 800e4de:	2a00      	cmp	r2, #0
 800e4e0:	d06b      	beq.n	800e5ba <_strtod_l+0x8fa>
 800e4e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4e6:	d868      	bhi.n	800e5ba <_strtod_l+0x8fa>
 800e4e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e4ec:	f67f ae9d 	bls.w	800e22a <_strtod_l+0x56a>
 800e4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800e51c <_strtod_l+0x85c>)
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	4659      	mov	r1, fp
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 f89e 	bl	8000638 <__aeabi_dmul>
 800e4fc:	4b08      	ldr	r3, [pc, #32]	@ (800e520 <_strtod_l+0x860>)
 800e4fe:	400b      	ands	r3, r1
 800e500:	4682      	mov	sl, r0
 800e502:	468b      	mov	fp, r1
 800e504:	2b00      	cmp	r3, #0
 800e506:	f47f ae05 	bne.w	800e114 <_strtod_l+0x454>
 800e50a:	9a05      	ldr	r2, [sp, #20]
 800e50c:	2322      	movs	r3, #34	@ 0x22
 800e50e:	6013      	str	r3, [r2, #0]
 800e510:	e600      	b.n	800e114 <_strtod_l+0x454>
 800e512:	bf00      	nop
 800e514:	080147b8 	.word	0x080147b8
 800e518:	fffffc02 	.word	0xfffffc02
 800e51c:	39500000 	.word	0x39500000
 800e520:	7ff00000 	.word	0x7ff00000
 800e524:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e528:	d165      	bne.n	800e5f6 <_strtod_l+0x936>
 800e52a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e52c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e530:	b35a      	cbz	r2, 800e58a <_strtod_l+0x8ca>
 800e532:	4a9f      	ldr	r2, [pc, #636]	@ (800e7b0 <_strtod_l+0xaf0>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d12b      	bne.n	800e590 <_strtod_l+0x8d0>
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	4651      	mov	r1, sl
 800e53c:	b303      	cbz	r3, 800e580 <_strtod_l+0x8c0>
 800e53e:	4b9d      	ldr	r3, [pc, #628]	@ (800e7b4 <_strtod_l+0xaf4>)
 800e540:	465a      	mov	r2, fp
 800e542:	4013      	ands	r3, r2
 800e544:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e548:	f04f 32ff 	mov.w	r2, #4294967295
 800e54c:	d81b      	bhi.n	800e586 <_strtod_l+0x8c6>
 800e54e:	0d1b      	lsrs	r3, r3, #20
 800e550:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e554:	fa02 f303 	lsl.w	r3, r2, r3
 800e558:	4299      	cmp	r1, r3
 800e55a:	d119      	bne.n	800e590 <_strtod_l+0x8d0>
 800e55c:	4b96      	ldr	r3, [pc, #600]	@ (800e7b8 <_strtod_l+0xaf8>)
 800e55e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e560:	429a      	cmp	r2, r3
 800e562:	d102      	bne.n	800e56a <_strtod_l+0x8aa>
 800e564:	3101      	adds	r1, #1
 800e566:	f43f adca 	beq.w	800e0fe <_strtod_l+0x43e>
 800e56a:	4b92      	ldr	r3, [pc, #584]	@ (800e7b4 <_strtod_l+0xaf4>)
 800e56c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e56e:	401a      	ands	r2, r3
 800e570:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e574:	f04f 0a00 	mov.w	sl, #0
 800e578:	9b08      	ldr	r3, [sp, #32]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1b8      	bne.n	800e4f0 <_strtod_l+0x830>
 800e57e:	e5c9      	b.n	800e114 <_strtod_l+0x454>
 800e580:	f04f 33ff 	mov.w	r3, #4294967295
 800e584:	e7e8      	b.n	800e558 <_strtod_l+0x898>
 800e586:	4613      	mov	r3, r2
 800e588:	e7e6      	b.n	800e558 <_strtod_l+0x898>
 800e58a:	ea53 030a 	orrs.w	r3, r3, sl
 800e58e:	d0a1      	beq.n	800e4d4 <_strtod_l+0x814>
 800e590:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e592:	b1db      	cbz	r3, 800e5cc <_strtod_l+0x90c>
 800e594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e596:	4213      	tst	r3, r2
 800e598:	d0ee      	beq.n	800e578 <_strtod_l+0x8b8>
 800e59a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e59c:	9a08      	ldr	r2, [sp, #32]
 800e59e:	4650      	mov	r0, sl
 800e5a0:	4659      	mov	r1, fp
 800e5a2:	b1bb      	cbz	r3, 800e5d4 <_strtod_l+0x914>
 800e5a4:	f7ff fb6c 	bl	800dc80 <sulp>
 800e5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5ac:	ec53 2b10 	vmov	r2, r3, d0
 800e5b0:	f7f1 fe8c 	bl	80002cc <__adddf3>
 800e5b4:	4682      	mov	sl, r0
 800e5b6:	468b      	mov	fp, r1
 800e5b8:	e7de      	b.n	800e578 <_strtod_l+0x8b8>
 800e5ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e5be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e5c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e5c6:	f04f 3aff 	mov.w	sl, #4294967295
 800e5ca:	e7d5      	b.n	800e578 <_strtod_l+0x8b8>
 800e5cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5ce:	ea13 0f0a 	tst.w	r3, sl
 800e5d2:	e7e1      	b.n	800e598 <_strtod_l+0x8d8>
 800e5d4:	f7ff fb54 	bl	800dc80 <sulp>
 800e5d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5dc:	ec53 2b10 	vmov	r2, r3, d0
 800e5e0:	f7f1 fe72 	bl	80002c8 <__aeabi_dsub>
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4682      	mov	sl, r0
 800e5ea:	468b      	mov	fp, r1
 800e5ec:	f7f2 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d0c1      	beq.n	800e578 <_strtod_l+0x8b8>
 800e5f4:	e619      	b.n	800e22a <_strtod_l+0x56a>
 800e5f6:	4641      	mov	r1, r8
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f002 ffc7 	bl	801158c <__ratio>
 800e5fe:	ec57 6b10 	vmov	r6, r7, d0
 800e602:	2200      	movs	r2, #0
 800e604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e608:	4630      	mov	r0, r6
 800e60a:	4639      	mov	r1, r7
 800e60c:	f7f2 fa90 	bl	8000b30 <__aeabi_dcmple>
 800e610:	2800      	cmp	r0, #0
 800e612:	d06f      	beq.n	800e6f4 <_strtod_l+0xa34>
 800e614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e616:	2b00      	cmp	r3, #0
 800e618:	d17a      	bne.n	800e710 <_strtod_l+0xa50>
 800e61a:	f1ba 0f00 	cmp.w	sl, #0
 800e61e:	d158      	bne.n	800e6d2 <_strtod_l+0xa12>
 800e620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e626:	2b00      	cmp	r3, #0
 800e628:	d15a      	bne.n	800e6e0 <_strtod_l+0xa20>
 800e62a:	4b64      	ldr	r3, [pc, #400]	@ (800e7bc <_strtod_l+0xafc>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	4630      	mov	r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	f7f2 fa73 	bl	8000b1c <__aeabi_dcmplt>
 800e636:	2800      	cmp	r0, #0
 800e638:	d159      	bne.n	800e6ee <_strtod_l+0xa2e>
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	4b60      	ldr	r3, [pc, #384]	@ (800e7c0 <_strtod_l+0xb00>)
 800e640:	2200      	movs	r2, #0
 800e642:	f7f1 fff9 	bl	8000638 <__aeabi_dmul>
 800e646:	4606      	mov	r6, r0
 800e648:	460f      	mov	r7, r1
 800e64a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e64e:	9606      	str	r6, [sp, #24]
 800e650:	9307      	str	r3, [sp, #28]
 800e652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e656:	4d57      	ldr	r5, [pc, #348]	@ (800e7b4 <_strtod_l+0xaf4>)
 800e658:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e65e:	401d      	ands	r5, r3
 800e660:	4b58      	ldr	r3, [pc, #352]	@ (800e7c4 <_strtod_l+0xb04>)
 800e662:	429d      	cmp	r5, r3
 800e664:	f040 80b2 	bne.w	800e7cc <_strtod_l+0xb0c>
 800e668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e66a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e66e:	ec4b ab10 	vmov	d0, sl, fp
 800e672:	f002 fec3 	bl	80113fc <__ulp>
 800e676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e67a:	ec51 0b10 	vmov	r0, r1, d0
 800e67e:	f7f1 ffdb 	bl	8000638 <__aeabi_dmul>
 800e682:	4652      	mov	r2, sl
 800e684:	465b      	mov	r3, fp
 800e686:	f7f1 fe21 	bl	80002cc <__adddf3>
 800e68a:	460b      	mov	r3, r1
 800e68c:	4949      	ldr	r1, [pc, #292]	@ (800e7b4 <_strtod_l+0xaf4>)
 800e68e:	4a4e      	ldr	r2, [pc, #312]	@ (800e7c8 <_strtod_l+0xb08>)
 800e690:	4019      	ands	r1, r3
 800e692:	4291      	cmp	r1, r2
 800e694:	4682      	mov	sl, r0
 800e696:	d942      	bls.n	800e71e <_strtod_l+0xa5e>
 800e698:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e69a:	4b47      	ldr	r3, [pc, #284]	@ (800e7b8 <_strtod_l+0xaf8>)
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d103      	bne.n	800e6a8 <_strtod_l+0x9e8>
 800e6a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	f43f ad2b 	beq.w	800e0fe <_strtod_l+0x43e>
 800e6a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e7b8 <_strtod_l+0xaf8>
 800e6ac:	f04f 3aff 	mov.w	sl, #4294967295
 800e6b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6b2:	9805      	ldr	r0, [sp, #20]
 800e6b4:	f002 fb6e 	bl	8010d94 <_Bfree>
 800e6b8:	9805      	ldr	r0, [sp, #20]
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f002 fb6a 	bl	8010d94 <_Bfree>
 800e6c0:	9805      	ldr	r0, [sp, #20]
 800e6c2:	4641      	mov	r1, r8
 800e6c4:	f002 fb66 	bl	8010d94 <_Bfree>
 800e6c8:	9805      	ldr	r0, [sp, #20]
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	f002 fb62 	bl	8010d94 <_Bfree>
 800e6d0:	e618      	b.n	800e304 <_strtod_l+0x644>
 800e6d2:	f1ba 0f01 	cmp.w	sl, #1
 800e6d6:	d103      	bne.n	800e6e0 <_strtod_l+0xa20>
 800e6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f43f ada5 	beq.w	800e22a <_strtod_l+0x56a>
 800e6e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e790 <_strtod_l+0xad0>
 800e6e4:	4f35      	ldr	r7, [pc, #212]	@ (800e7bc <_strtod_l+0xafc>)
 800e6e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e6ea:	2600      	movs	r6, #0
 800e6ec:	e7b1      	b.n	800e652 <_strtod_l+0x992>
 800e6ee:	4f34      	ldr	r7, [pc, #208]	@ (800e7c0 <_strtod_l+0xb00>)
 800e6f0:	2600      	movs	r6, #0
 800e6f2:	e7aa      	b.n	800e64a <_strtod_l+0x98a>
 800e6f4:	4b32      	ldr	r3, [pc, #200]	@ (800e7c0 <_strtod_l+0xb00>)
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	4639      	mov	r1, r7
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f7f1 ff9c 	bl	8000638 <__aeabi_dmul>
 800e700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e702:	4606      	mov	r6, r0
 800e704:	460f      	mov	r7, r1
 800e706:	2b00      	cmp	r3, #0
 800e708:	d09f      	beq.n	800e64a <_strtod_l+0x98a>
 800e70a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e70e:	e7a0      	b.n	800e652 <_strtod_l+0x992>
 800e710:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e798 <_strtod_l+0xad8>
 800e714:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e718:	ec57 6b17 	vmov	r6, r7, d7
 800e71c:	e799      	b.n	800e652 <_strtod_l+0x992>
 800e71e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1c1      	bne.n	800e6b0 <_strtod_l+0x9f0>
 800e72c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e730:	0d1b      	lsrs	r3, r3, #20
 800e732:	051b      	lsls	r3, r3, #20
 800e734:	429d      	cmp	r5, r3
 800e736:	d1bb      	bne.n	800e6b0 <_strtod_l+0x9f0>
 800e738:	4630      	mov	r0, r6
 800e73a:	4639      	mov	r1, r7
 800e73c:	f7f2 fadc 	bl	8000cf8 <__aeabi_d2lz>
 800e740:	f7f1 ff4c 	bl	80005dc <__aeabi_l2d>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4630      	mov	r0, r6
 800e74a:	4639      	mov	r1, r7
 800e74c:	f7f1 fdbc 	bl	80002c8 <__aeabi_dsub>
 800e750:	460b      	mov	r3, r1
 800e752:	4602      	mov	r2, r0
 800e754:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e758:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e75e:	ea46 060a 	orr.w	r6, r6, sl
 800e762:	431e      	orrs	r6, r3
 800e764:	d06f      	beq.n	800e846 <_strtod_l+0xb86>
 800e766:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7a0 <_strtod_l+0xae0>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f2 f9d6 	bl	8000b1c <__aeabi_dcmplt>
 800e770:	2800      	cmp	r0, #0
 800e772:	f47f accf 	bne.w	800e114 <_strtod_l+0x454>
 800e776:	a30c      	add	r3, pc, #48	@ (adr r3, 800e7a8 <_strtod_l+0xae8>)
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e780:	f7f2 f9ea 	bl	8000b58 <__aeabi_dcmpgt>
 800e784:	2800      	cmp	r0, #0
 800e786:	d093      	beq.n	800e6b0 <_strtod_l+0x9f0>
 800e788:	e4c4      	b.n	800e114 <_strtod_l+0x454>
 800e78a:	bf00      	nop
 800e78c:	f3af 8000 	nop.w
 800e790:	00000000 	.word	0x00000000
 800e794:	bff00000 	.word	0xbff00000
 800e798:	00000000 	.word	0x00000000
 800e79c:	3ff00000 	.word	0x3ff00000
 800e7a0:	94a03595 	.word	0x94a03595
 800e7a4:	3fdfffff 	.word	0x3fdfffff
 800e7a8:	35afe535 	.word	0x35afe535
 800e7ac:	3fe00000 	.word	0x3fe00000
 800e7b0:	000fffff 	.word	0x000fffff
 800e7b4:	7ff00000 	.word	0x7ff00000
 800e7b8:	7fefffff 	.word	0x7fefffff
 800e7bc:	3ff00000 	.word	0x3ff00000
 800e7c0:	3fe00000 	.word	0x3fe00000
 800e7c4:	7fe00000 	.word	0x7fe00000
 800e7c8:	7c9fffff 	.word	0x7c9fffff
 800e7cc:	9b08      	ldr	r3, [sp, #32]
 800e7ce:	b323      	cbz	r3, 800e81a <_strtod_l+0xb5a>
 800e7d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e7d4:	d821      	bhi.n	800e81a <_strtod_l+0xb5a>
 800e7d6:	a328      	add	r3, pc, #160	@ (adr r3, 800e878 <_strtod_l+0xbb8>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	4630      	mov	r0, r6
 800e7de:	4639      	mov	r1, r7
 800e7e0:	f7f2 f9a6 	bl	8000b30 <__aeabi_dcmple>
 800e7e4:	b1a0      	cbz	r0, 800e810 <_strtod_l+0xb50>
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f7f2 f9fd 	bl	8000be8 <__aeabi_d2uiz>
 800e7ee:	2801      	cmp	r0, #1
 800e7f0:	bf38      	it	cc
 800e7f2:	2001      	movcc	r0, #1
 800e7f4:	f7f1 fea6 	bl	8000544 <__aeabi_ui2d>
 800e7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	b9fb      	cbnz	r3, 800e840 <_strtod_l+0xb80>
 800e800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e804:	9014      	str	r0, [sp, #80]	@ 0x50
 800e806:	9315      	str	r3, [sp, #84]	@ 0x54
 800e808:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e80c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e812:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e816:	1b5b      	subs	r3, r3, r5
 800e818:	9311      	str	r3, [sp, #68]	@ 0x44
 800e81a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e81e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e822:	f002 fdeb 	bl	80113fc <__ulp>
 800e826:	4650      	mov	r0, sl
 800e828:	ec53 2b10 	vmov	r2, r3, d0
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 ff03 	bl	8000638 <__aeabi_dmul>
 800e832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e836:	f7f1 fd49 	bl	80002cc <__adddf3>
 800e83a:	4682      	mov	sl, r0
 800e83c:	468b      	mov	fp, r1
 800e83e:	e770      	b.n	800e722 <_strtod_l+0xa62>
 800e840:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e844:	e7e0      	b.n	800e808 <_strtod_l+0xb48>
 800e846:	a30e      	add	r3, pc, #56	@ (adr r3, 800e880 <_strtod_l+0xbc0>)
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f7f2 f966 	bl	8000b1c <__aeabi_dcmplt>
 800e850:	e798      	b.n	800e784 <_strtod_l+0xac4>
 800e852:	2300      	movs	r3, #0
 800e854:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e856:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e85a:	6013      	str	r3, [r2, #0]
 800e85c:	f7ff ba6d 	b.w	800dd3a <_strtod_l+0x7a>
 800e860:	2a65      	cmp	r2, #101	@ 0x65
 800e862:	f43f ab66 	beq.w	800df32 <_strtod_l+0x272>
 800e866:	2a45      	cmp	r2, #69	@ 0x45
 800e868:	f43f ab63 	beq.w	800df32 <_strtod_l+0x272>
 800e86c:	2301      	movs	r3, #1
 800e86e:	f7ff bb9e 	b.w	800dfae <_strtod_l+0x2ee>
 800e872:	bf00      	nop
 800e874:	f3af 8000 	nop.w
 800e878:	ffc00000 	.word	0xffc00000
 800e87c:	41dfffff 	.word	0x41dfffff
 800e880:	94a03595 	.word	0x94a03595
 800e884:	3fcfffff 	.word	0x3fcfffff

0800e888 <_strtod_r>:
 800e888:	4b01      	ldr	r3, [pc, #4]	@ (800e890 <_strtod_r+0x8>)
 800e88a:	f7ff ba19 	b.w	800dcc0 <_strtod_l>
 800e88e:	bf00      	nop
 800e890:	20000130 	.word	0x20000130

0800e894 <strtod>:
 800e894:	460a      	mov	r2, r1
 800e896:	4601      	mov	r1, r0
 800e898:	4802      	ldr	r0, [pc, #8]	@ (800e8a4 <strtod+0x10>)
 800e89a:	4b03      	ldr	r3, [pc, #12]	@ (800e8a8 <strtod+0x14>)
 800e89c:	6800      	ldr	r0, [r0, #0]
 800e89e:	f7ff ba0f 	b.w	800dcc0 <_strtod_l>
 800e8a2:	bf00      	nop
 800e8a4:	2000029c 	.word	0x2000029c
 800e8a8:	20000130 	.word	0x20000130

0800e8ac <__cvt>:
 800e8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	ec57 6b10 	vmov	r6, r7, d0
 800e8b4:	2f00      	cmp	r7, #0
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	463b      	mov	r3, r7
 800e8bc:	bfbb      	ittet	lt
 800e8be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e8c2:	461f      	movlt	r7, r3
 800e8c4:	2300      	movge	r3, #0
 800e8c6:	232d      	movlt	r3, #45	@ 0x2d
 800e8c8:	700b      	strb	r3, [r1, #0]
 800e8ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e8d0:	4691      	mov	r9, r2
 800e8d2:	f023 0820 	bic.w	r8, r3, #32
 800e8d6:	bfbc      	itt	lt
 800e8d8:	4632      	movlt	r2, r6
 800e8da:	4616      	movlt	r6, r2
 800e8dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e8e0:	d005      	beq.n	800e8ee <__cvt+0x42>
 800e8e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e8e6:	d100      	bne.n	800e8ea <__cvt+0x3e>
 800e8e8:	3401      	adds	r4, #1
 800e8ea:	2102      	movs	r1, #2
 800e8ec:	e000      	b.n	800e8f0 <__cvt+0x44>
 800e8ee:	2103      	movs	r1, #3
 800e8f0:	ab03      	add	r3, sp, #12
 800e8f2:	9301      	str	r3, [sp, #4]
 800e8f4:	ab02      	add	r3, sp, #8
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	ec47 6b10 	vmov	d0, r6, r7
 800e8fc:	4653      	mov	r3, sl
 800e8fe:	4622      	mov	r2, r4
 800e900:	f001 f8ae 	bl	800fa60 <_dtoa_r>
 800e904:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e908:	4605      	mov	r5, r0
 800e90a:	d119      	bne.n	800e940 <__cvt+0x94>
 800e90c:	f019 0f01 	tst.w	r9, #1
 800e910:	d00e      	beq.n	800e930 <__cvt+0x84>
 800e912:	eb00 0904 	add.w	r9, r0, r4
 800e916:	2200      	movs	r2, #0
 800e918:	2300      	movs	r3, #0
 800e91a:	4630      	mov	r0, r6
 800e91c:	4639      	mov	r1, r7
 800e91e:	f7f2 f8f3 	bl	8000b08 <__aeabi_dcmpeq>
 800e922:	b108      	cbz	r0, 800e928 <__cvt+0x7c>
 800e924:	f8cd 900c 	str.w	r9, [sp, #12]
 800e928:	2230      	movs	r2, #48	@ 0x30
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	454b      	cmp	r3, r9
 800e92e:	d31e      	bcc.n	800e96e <__cvt+0xc2>
 800e930:	9b03      	ldr	r3, [sp, #12]
 800e932:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e934:	1b5b      	subs	r3, r3, r5
 800e936:	4628      	mov	r0, r5
 800e938:	6013      	str	r3, [r2, #0]
 800e93a:	b004      	add	sp, #16
 800e93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e944:	eb00 0904 	add.w	r9, r0, r4
 800e948:	d1e5      	bne.n	800e916 <__cvt+0x6a>
 800e94a:	7803      	ldrb	r3, [r0, #0]
 800e94c:	2b30      	cmp	r3, #48	@ 0x30
 800e94e:	d10a      	bne.n	800e966 <__cvt+0xba>
 800e950:	2200      	movs	r2, #0
 800e952:	2300      	movs	r3, #0
 800e954:	4630      	mov	r0, r6
 800e956:	4639      	mov	r1, r7
 800e958:	f7f2 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800e95c:	b918      	cbnz	r0, 800e966 <__cvt+0xba>
 800e95e:	f1c4 0401 	rsb	r4, r4, #1
 800e962:	f8ca 4000 	str.w	r4, [sl]
 800e966:	f8da 3000 	ldr.w	r3, [sl]
 800e96a:	4499      	add	r9, r3
 800e96c:	e7d3      	b.n	800e916 <__cvt+0x6a>
 800e96e:	1c59      	adds	r1, r3, #1
 800e970:	9103      	str	r1, [sp, #12]
 800e972:	701a      	strb	r2, [r3, #0]
 800e974:	e7d9      	b.n	800e92a <__cvt+0x7e>

0800e976 <__exponent>:
 800e976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e978:	2900      	cmp	r1, #0
 800e97a:	bfba      	itte	lt
 800e97c:	4249      	neglt	r1, r1
 800e97e:	232d      	movlt	r3, #45	@ 0x2d
 800e980:	232b      	movge	r3, #43	@ 0x2b
 800e982:	2909      	cmp	r1, #9
 800e984:	7002      	strb	r2, [r0, #0]
 800e986:	7043      	strb	r3, [r0, #1]
 800e988:	dd29      	ble.n	800e9de <__exponent+0x68>
 800e98a:	f10d 0307 	add.w	r3, sp, #7
 800e98e:	461d      	mov	r5, r3
 800e990:	270a      	movs	r7, #10
 800e992:	461a      	mov	r2, r3
 800e994:	fbb1 f6f7 	udiv	r6, r1, r7
 800e998:	fb07 1416 	mls	r4, r7, r6, r1
 800e99c:	3430      	adds	r4, #48	@ 0x30
 800e99e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	2c63      	cmp	r4, #99	@ 0x63
 800e9a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9aa:	4631      	mov	r1, r6
 800e9ac:	dcf1      	bgt.n	800e992 <__exponent+0x1c>
 800e9ae:	3130      	adds	r1, #48	@ 0x30
 800e9b0:	1e94      	subs	r4, r2, #2
 800e9b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9b6:	1c41      	adds	r1, r0, #1
 800e9b8:	4623      	mov	r3, r4
 800e9ba:	42ab      	cmp	r3, r5
 800e9bc:	d30a      	bcc.n	800e9d4 <__exponent+0x5e>
 800e9be:	f10d 0309 	add.w	r3, sp, #9
 800e9c2:	1a9b      	subs	r3, r3, r2
 800e9c4:	42ac      	cmp	r4, r5
 800e9c6:	bf88      	it	hi
 800e9c8:	2300      	movhi	r3, #0
 800e9ca:	3302      	adds	r3, #2
 800e9cc:	4403      	add	r3, r0
 800e9ce:	1a18      	subs	r0, r3, r0
 800e9d0:	b003      	add	sp, #12
 800e9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e9d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e9dc:	e7ed      	b.n	800e9ba <__exponent+0x44>
 800e9de:	2330      	movs	r3, #48	@ 0x30
 800e9e0:	3130      	adds	r1, #48	@ 0x30
 800e9e2:	7083      	strb	r3, [r0, #2]
 800e9e4:	70c1      	strb	r1, [r0, #3]
 800e9e6:	1d03      	adds	r3, r0, #4
 800e9e8:	e7f1      	b.n	800e9ce <__exponent+0x58>
	...

0800e9ec <_printf_float>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	b08d      	sub	sp, #52	@ 0x34
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e9f8:	4616      	mov	r6, r2
 800e9fa:	461f      	mov	r7, r3
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	f000 ff01 	bl	800f804 <_localeconv_r>
 800ea02:	6803      	ldr	r3, [r0, #0]
 800ea04:	9304      	str	r3, [sp, #16]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7f1 fc52 	bl	80002b0 <strlen>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea10:	f8d8 3000 	ldr.w	r3, [r8]
 800ea14:	9005      	str	r0, [sp, #20]
 800ea16:	3307      	adds	r3, #7
 800ea18:	f023 0307 	bic.w	r3, r3, #7
 800ea1c:	f103 0208 	add.w	r2, r3, #8
 800ea20:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea24:	f8d4 b000 	ldr.w	fp, [r4]
 800ea28:	f8c8 2000 	str.w	r2, [r8]
 800ea2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ea34:	9307      	str	r3, [sp, #28]
 800ea36:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ea3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea42:	4b9c      	ldr	r3, [pc, #624]	@ (800ecb4 <_printf_float+0x2c8>)
 800ea44:	f04f 32ff 	mov.w	r2, #4294967295
 800ea48:	f7f2 f890 	bl	8000b6c <__aeabi_dcmpun>
 800ea4c:	bb70      	cbnz	r0, 800eaac <_printf_float+0xc0>
 800ea4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea52:	4b98      	ldr	r3, [pc, #608]	@ (800ecb4 <_printf_float+0x2c8>)
 800ea54:	f04f 32ff 	mov.w	r2, #4294967295
 800ea58:	f7f2 f86a 	bl	8000b30 <__aeabi_dcmple>
 800ea5c:	bb30      	cbnz	r0, 800eaac <_printf_float+0xc0>
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2300      	movs	r3, #0
 800ea62:	4640      	mov	r0, r8
 800ea64:	4649      	mov	r1, r9
 800ea66:	f7f2 f859 	bl	8000b1c <__aeabi_dcmplt>
 800ea6a:	b110      	cbz	r0, 800ea72 <_printf_float+0x86>
 800ea6c:	232d      	movs	r3, #45	@ 0x2d
 800ea6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea72:	4a91      	ldr	r2, [pc, #580]	@ (800ecb8 <_printf_float+0x2cc>)
 800ea74:	4b91      	ldr	r3, [pc, #580]	@ (800ecbc <_printf_float+0x2d0>)
 800ea76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ea7a:	bf94      	ite	ls
 800ea7c:	4690      	movls	r8, r2
 800ea7e:	4698      	movhi	r8, r3
 800ea80:	2303      	movs	r3, #3
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	f02b 0304 	bic.w	r3, fp, #4
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	f04f 0900 	mov.w	r9, #0
 800ea8e:	9700      	str	r7, [sp, #0]
 800ea90:	4633      	mov	r3, r6
 800ea92:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ea94:	4621      	mov	r1, r4
 800ea96:	4628      	mov	r0, r5
 800ea98:	f000 f9d2 	bl	800ee40 <_printf_common>
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	f040 808d 	bne.w	800ebbc <_printf_float+0x1d0>
 800eaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa6:	b00d      	add	sp, #52	@ 0x34
 800eaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaac:	4642      	mov	r2, r8
 800eaae:	464b      	mov	r3, r9
 800eab0:	4640      	mov	r0, r8
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f2 f85a 	bl	8000b6c <__aeabi_dcmpun>
 800eab8:	b140      	cbz	r0, 800eacc <_printf_float+0xe0>
 800eaba:	464b      	mov	r3, r9
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	bfbc      	itt	lt
 800eac0:	232d      	movlt	r3, #45	@ 0x2d
 800eac2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eac6:	4a7e      	ldr	r2, [pc, #504]	@ (800ecc0 <_printf_float+0x2d4>)
 800eac8:	4b7e      	ldr	r3, [pc, #504]	@ (800ecc4 <_printf_float+0x2d8>)
 800eaca:	e7d4      	b.n	800ea76 <_printf_float+0x8a>
 800eacc:	6863      	ldr	r3, [r4, #4]
 800eace:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ead2:	9206      	str	r2, [sp, #24]
 800ead4:	1c5a      	adds	r2, r3, #1
 800ead6:	d13b      	bne.n	800eb50 <_printf_float+0x164>
 800ead8:	2306      	movs	r3, #6
 800eada:	6063      	str	r3, [r4, #4]
 800eadc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eae0:	2300      	movs	r3, #0
 800eae2:	6022      	str	r2, [r4, #0]
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	ab0a      	add	r3, sp, #40	@ 0x28
 800eae8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eaec:	ab09      	add	r3, sp, #36	@ 0x24
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	6861      	ldr	r1, [r4, #4]
 800eaf2:	ec49 8b10 	vmov	d0, r8, r9
 800eaf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eafa:	4628      	mov	r0, r5
 800eafc:	f7ff fed6 	bl	800e8ac <__cvt>
 800eb00:	9b06      	ldr	r3, [sp, #24]
 800eb02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb04:	2b47      	cmp	r3, #71	@ 0x47
 800eb06:	4680      	mov	r8, r0
 800eb08:	d129      	bne.n	800eb5e <_printf_float+0x172>
 800eb0a:	1cc8      	adds	r0, r1, #3
 800eb0c:	db02      	blt.n	800eb14 <_printf_float+0x128>
 800eb0e:	6863      	ldr	r3, [r4, #4]
 800eb10:	4299      	cmp	r1, r3
 800eb12:	dd41      	ble.n	800eb98 <_printf_float+0x1ac>
 800eb14:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb18:	fa5f fa8a 	uxtb.w	sl, sl
 800eb1c:	3901      	subs	r1, #1
 800eb1e:	4652      	mov	r2, sl
 800eb20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb24:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb26:	f7ff ff26 	bl	800e976 <__exponent>
 800eb2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb2c:	1813      	adds	r3, r2, r0
 800eb2e:	2a01      	cmp	r2, #1
 800eb30:	4681      	mov	r9, r0
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	dc02      	bgt.n	800eb3c <_printf_float+0x150>
 800eb36:	6822      	ldr	r2, [r4, #0]
 800eb38:	07d2      	lsls	r2, r2, #31
 800eb3a:	d501      	bpl.n	800eb40 <_printf_float+0x154>
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	6123      	str	r3, [r4, #16]
 800eb40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0a2      	beq.n	800ea8e <_printf_float+0xa2>
 800eb48:	232d      	movs	r3, #45	@ 0x2d
 800eb4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb4e:	e79e      	b.n	800ea8e <_printf_float+0xa2>
 800eb50:	9a06      	ldr	r2, [sp, #24]
 800eb52:	2a47      	cmp	r2, #71	@ 0x47
 800eb54:	d1c2      	bne.n	800eadc <_printf_float+0xf0>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1c0      	bne.n	800eadc <_printf_float+0xf0>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e7bd      	b.n	800eada <_printf_float+0xee>
 800eb5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb62:	d9db      	bls.n	800eb1c <_printf_float+0x130>
 800eb64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eb68:	d118      	bne.n	800eb9c <_printf_float+0x1b0>
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	6863      	ldr	r3, [r4, #4]
 800eb6e:	dd0b      	ble.n	800eb88 <_printf_float+0x19c>
 800eb70:	6121      	str	r1, [r4, #16]
 800eb72:	b913      	cbnz	r3, 800eb7a <_printf_float+0x18e>
 800eb74:	6822      	ldr	r2, [r4, #0]
 800eb76:	07d0      	lsls	r0, r2, #31
 800eb78:	d502      	bpl.n	800eb80 <_printf_float+0x194>
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	440b      	add	r3, r1
 800eb7e:	6123      	str	r3, [r4, #16]
 800eb80:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eb82:	f04f 0900 	mov.w	r9, #0
 800eb86:	e7db      	b.n	800eb40 <_printf_float+0x154>
 800eb88:	b913      	cbnz	r3, 800eb90 <_printf_float+0x1a4>
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	07d2      	lsls	r2, r2, #31
 800eb8e:	d501      	bpl.n	800eb94 <_printf_float+0x1a8>
 800eb90:	3302      	adds	r3, #2
 800eb92:	e7f4      	b.n	800eb7e <_printf_float+0x192>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e7f2      	b.n	800eb7e <_printf_float+0x192>
 800eb98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb9e:	4299      	cmp	r1, r3
 800eba0:	db05      	blt.n	800ebae <_printf_float+0x1c2>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	6121      	str	r1, [r4, #16]
 800eba6:	07d8      	lsls	r0, r3, #31
 800eba8:	d5ea      	bpl.n	800eb80 <_printf_float+0x194>
 800ebaa:	1c4b      	adds	r3, r1, #1
 800ebac:	e7e7      	b.n	800eb7e <_printf_float+0x192>
 800ebae:	2900      	cmp	r1, #0
 800ebb0:	bfd4      	ite	le
 800ebb2:	f1c1 0202 	rsble	r2, r1, #2
 800ebb6:	2201      	movgt	r2, #1
 800ebb8:	4413      	add	r3, r2
 800ebba:	e7e0      	b.n	800eb7e <_printf_float+0x192>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	055a      	lsls	r2, r3, #21
 800ebc0:	d407      	bmi.n	800ebd2 <_printf_float+0x1e6>
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	4642      	mov	r2, r8
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	47b8      	blx	r7
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d12b      	bne.n	800ec28 <_printf_float+0x23c>
 800ebd0:	e767      	b.n	800eaa2 <_printf_float+0xb6>
 800ebd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ebd6:	f240 80dd 	bls.w	800ed94 <_printf_float+0x3a8>
 800ebda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebde:	2200      	movs	r2, #0
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f7f1 ff91 	bl	8000b08 <__aeabi_dcmpeq>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d033      	beq.n	800ec52 <_printf_float+0x266>
 800ebea:	4a37      	ldr	r2, [pc, #220]	@ (800ecc8 <_printf_float+0x2dc>)
 800ebec:	2301      	movs	r3, #1
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	47b8      	blx	r7
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	f43f af54 	beq.w	800eaa2 <_printf_float+0xb6>
 800ebfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ebfe:	4543      	cmp	r3, r8
 800ec00:	db02      	blt.n	800ec08 <_printf_float+0x21c>
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	07d8      	lsls	r0, r3, #31
 800ec06:	d50f      	bpl.n	800ec28 <_printf_float+0x23c>
 800ec08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec0c:	4631      	mov	r1, r6
 800ec0e:	4628      	mov	r0, r5
 800ec10:	47b8      	blx	r7
 800ec12:	3001      	adds	r0, #1
 800ec14:	f43f af45 	beq.w	800eaa2 <_printf_float+0xb6>
 800ec18:	f04f 0900 	mov.w	r9, #0
 800ec1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec20:	f104 0a1a 	add.w	sl, r4, #26
 800ec24:	45c8      	cmp	r8, r9
 800ec26:	dc09      	bgt.n	800ec3c <_printf_float+0x250>
 800ec28:	6823      	ldr	r3, [r4, #0]
 800ec2a:	079b      	lsls	r3, r3, #30
 800ec2c:	f100 8103 	bmi.w	800ee36 <_printf_float+0x44a>
 800ec30:	68e0      	ldr	r0, [r4, #12]
 800ec32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec34:	4298      	cmp	r0, r3
 800ec36:	bfb8      	it	lt
 800ec38:	4618      	movlt	r0, r3
 800ec3a:	e734      	b.n	800eaa6 <_printf_float+0xba>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	4652      	mov	r2, sl
 800ec40:	4631      	mov	r1, r6
 800ec42:	4628      	mov	r0, r5
 800ec44:	47b8      	blx	r7
 800ec46:	3001      	adds	r0, #1
 800ec48:	f43f af2b 	beq.w	800eaa2 <_printf_float+0xb6>
 800ec4c:	f109 0901 	add.w	r9, r9, #1
 800ec50:	e7e8      	b.n	800ec24 <_printf_float+0x238>
 800ec52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	dc39      	bgt.n	800eccc <_printf_float+0x2e0>
 800ec58:	4a1b      	ldr	r2, [pc, #108]	@ (800ecc8 <_printf_float+0x2dc>)
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b8      	blx	r7
 800ec62:	3001      	adds	r0, #1
 800ec64:	f43f af1d 	beq.w	800eaa2 <_printf_float+0xb6>
 800ec68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec6c:	ea59 0303 	orrs.w	r3, r9, r3
 800ec70:	d102      	bne.n	800ec78 <_printf_float+0x28c>
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	07d9      	lsls	r1, r3, #31
 800ec76:	d5d7      	bpl.n	800ec28 <_printf_float+0x23c>
 800ec78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	4628      	mov	r0, r5
 800ec80:	47b8      	blx	r7
 800ec82:	3001      	adds	r0, #1
 800ec84:	f43f af0d 	beq.w	800eaa2 <_printf_float+0xb6>
 800ec88:	f04f 0a00 	mov.w	sl, #0
 800ec8c:	f104 0b1a 	add.w	fp, r4, #26
 800ec90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec92:	425b      	negs	r3, r3
 800ec94:	4553      	cmp	r3, sl
 800ec96:	dc01      	bgt.n	800ec9c <_printf_float+0x2b0>
 800ec98:	464b      	mov	r3, r9
 800ec9a:	e793      	b.n	800ebc4 <_printf_float+0x1d8>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	465a      	mov	r2, fp
 800eca0:	4631      	mov	r1, r6
 800eca2:	4628      	mov	r0, r5
 800eca4:	47b8      	blx	r7
 800eca6:	3001      	adds	r0, #1
 800eca8:	f43f aefb 	beq.w	800eaa2 <_printf_float+0xb6>
 800ecac:	f10a 0a01 	add.w	sl, sl, #1
 800ecb0:	e7ee      	b.n	800ec90 <_printf_float+0x2a4>
 800ecb2:	bf00      	nop
 800ecb4:	7fefffff 	.word	0x7fefffff
 800ecb8:	080147e0 	.word	0x080147e0
 800ecbc:	080147e4 	.word	0x080147e4
 800ecc0:	080147e8 	.word	0x080147e8
 800ecc4:	080147ec 	.word	0x080147ec
 800ecc8:	080147f0 	.word	0x080147f0
 800eccc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecd2:	4553      	cmp	r3, sl
 800ecd4:	bfa8      	it	ge
 800ecd6:	4653      	movge	r3, sl
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	4699      	mov	r9, r3
 800ecdc:	dc36      	bgt.n	800ed4c <_printf_float+0x360>
 800ecde:	f04f 0b00 	mov.w	fp, #0
 800ece2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ece6:	f104 021a 	add.w	r2, r4, #26
 800ecea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecec:	9306      	str	r3, [sp, #24]
 800ecee:	eba3 0309 	sub.w	r3, r3, r9
 800ecf2:	455b      	cmp	r3, fp
 800ecf4:	dc31      	bgt.n	800ed5a <_printf_float+0x36e>
 800ecf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf8:	459a      	cmp	sl, r3
 800ecfa:	dc3a      	bgt.n	800ed72 <_printf_float+0x386>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	07da      	lsls	r2, r3, #31
 800ed00:	d437      	bmi.n	800ed72 <_printf_float+0x386>
 800ed02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed04:	ebaa 0903 	sub.w	r9, sl, r3
 800ed08:	9b06      	ldr	r3, [sp, #24]
 800ed0a:	ebaa 0303 	sub.w	r3, sl, r3
 800ed0e:	4599      	cmp	r9, r3
 800ed10:	bfa8      	it	ge
 800ed12:	4699      	movge	r9, r3
 800ed14:	f1b9 0f00 	cmp.w	r9, #0
 800ed18:	dc33      	bgt.n	800ed82 <_printf_float+0x396>
 800ed1a:	f04f 0800 	mov.w	r8, #0
 800ed1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed22:	f104 0b1a 	add.w	fp, r4, #26
 800ed26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed28:	ebaa 0303 	sub.w	r3, sl, r3
 800ed2c:	eba3 0309 	sub.w	r3, r3, r9
 800ed30:	4543      	cmp	r3, r8
 800ed32:	f77f af79 	ble.w	800ec28 <_printf_float+0x23c>
 800ed36:	2301      	movs	r3, #1
 800ed38:	465a      	mov	r2, fp
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	47b8      	blx	r7
 800ed40:	3001      	adds	r0, #1
 800ed42:	f43f aeae 	beq.w	800eaa2 <_printf_float+0xb6>
 800ed46:	f108 0801 	add.w	r8, r8, #1
 800ed4a:	e7ec      	b.n	800ed26 <_printf_float+0x33a>
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	4631      	mov	r1, r6
 800ed50:	4628      	mov	r0, r5
 800ed52:	47b8      	blx	r7
 800ed54:	3001      	adds	r0, #1
 800ed56:	d1c2      	bne.n	800ecde <_printf_float+0x2f2>
 800ed58:	e6a3      	b.n	800eaa2 <_printf_float+0xb6>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	9206      	str	r2, [sp, #24]
 800ed62:	47b8      	blx	r7
 800ed64:	3001      	adds	r0, #1
 800ed66:	f43f ae9c 	beq.w	800eaa2 <_printf_float+0xb6>
 800ed6a:	9a06      	ldr	r2, [sp, #24]
 800ed6c:	f10b 0b01 	add.w	fp, fp, #1
 800ed70:	e7bb      	b.n	800ecea <_printf_float+0x2fe>
 800ed72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed76:	4631      	mov	r1, r6
 800ed78:	4628      	mov	r0, r5
 800ed7a:	47b8      	blx	r7
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d1c0      	bne.n	800ed02 <_printf_float+0x316>
 800ed80:	e68f      	b.n	800eaa2 <_printf_float+0xb6>
 800ed82:	9a06      	ldr	r2, [sp, #24]
 800ed84:	464b      	mov	r3, r9
 800ed86:	4442      	add	r2, r8
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	47b8      	blx	r7
 800ed8e:	3001      	adds	r0, #1
 800ed90:	d1c3      	bne.n	800ed1a <_printf_float+0x32e>
 800ed92:	e686      	b.n	800eaa2 <_printf_float+0xb6>
 800ed94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed98:	f1ba 0f01 	cmp.w	sl, #1
 800ed9c:	dc01      	bgt.n	800eda2 <_printf_float+0x3b6>
 800ed9e:	07db      	lsls	r3, r3, #31
 800eda0:	d536      	bpl.n	800ee10 <_printf_float+0x424>
 800eda2:	2301      	movs	r3, #1
 800eda4:	4642      	mov	r2, r8
 800eda6:	4631      	mov	r1, r6
 800eda8:	4628      	mov	r0, r5
 800edaa:	47b8      	blx	r7
 800edac:	3001      	adds	r0, #1
 800edae:	f43f ae78 	beq.w	800eaa2 <_printf_float+0xb6>
 800edb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edb6:	4631      	mov	r1, r6
 800edb8:	4628      	mov	r0, r5
 800edba:	47b8      	blx	r7
 800edbc:	3001      	adds	r0, #1
 800edbe:	f43f ae70 	beq.w	800eaa2 <_printf_float+0xb6>
 800edc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edc6:	2200      	movs	r2, #0
 800edc8:	2300      	movs	r3, #0
 800edca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edce:	f7f1 fe9b 	bl	8000b08 <__aeabi_dcmpeq>
 800edd2:	b9c0      	cbnz	r0, 800ee06 <_printf_float+0x41a>
 800edd4:	4653      	mov	r3, sl
 800edd6:	f108 0201 	add.w	r2, r8, #1
 800edda:	4631      	mov	r1, r6
 800eddc:	4628      	mov	r0, r5
 800edde:	47b8      	blx	r7
 800ede0:	3001      	adds	r0, #1
 800ede2:	d10c      	bne.n	800edfe <_printf_float+0x412>
 800ede4:	e65d      	b.n	800eaa2 <_printf_float+0xb6>
 800ede6:	2301      	movs	r3, #1
 800ede8:	465a      	mov	r2, fp
 800edea:	4631      	mov	r1, r6
 800edec:	4628      	mov	r0, r5
 800edee:	47b8      	blx	r7
 800edf0:	3001      	adds	r0, #1
 800edf2:	f43f ae56 	beq.w	800eaa2 <_printf_float+0xb6>
 800edf6:	f108 0801 	add.w	r8, r8, #1
 800edfa:	45d0      	cmp	r8, sl
 800edfc:	dbf3      	blt.n	800ede6 <_printf_float+0x3fa>
 800edfe:	464b      	mov	r3, r9
 800ee00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ee04:	e6df      	b.n	800ebc6 <_printf_float+0x1da>
 800ee06:	f04f 0800 	mov.w	r8, #0
 800ee0a:	f104 0b1a 	add.w	fp, r4, #26
 800ee0e:	e7f4      	b.n	800edfa <_printf_float+0x40e>
 800ee10:	2301      	movs	r3, #1
 800ee12:	4642      	mov	r2, r8
 800ee14:	e7e1      	b.n	800edda <_printf_float+0x3ee>
 800ee16:	2301      	movs	r3, #1
 800ee18:	464a      	mov	r2, r9
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	47b8      	blx	r7
 800ee20:	3001      	adds	r0, #1
 800ee22:	f43f ae3e 	beq.w	800eaa2 <_printf_float+0xb6>
 800ee26:	f108 0801 	add.w	r8, r8, #1
 800ee2a:	68e3      	ldr	r3, [r4, #12]
 800ee2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee2e:	1a5b      	subs	r3, r3, r1
 800ee30:	4543      	cmp	r3, r8
 800ee32:	dcf0      	bgt.n	800ee16 <_printf_float+0x42a>
 800ee34:	e6fc      	b.n	800ec30 <_printf_float+0x244>
 800ee36:	f04f 0800 	mov.w	r8, #0
 800ee3a:	f104 0919 	add.w	r9, r4, #25
 800ee3e:	e7f4      	b.n	800ee2a <_printf_float+0x43e>

0800ee40 <_printf_common>:
 800ee40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	4616      	mov	r6, r2
 800ee46:	4698      	mov	r8, r3
 800ee48:	688a      	ldr	r2, [r1, #8]
 800ee4a:	690b      	ldr	r3, [r1, #16]
 800ee4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee50:	4293      	cmp	r3, r2
 800ee52:	bfb8      	it	lt
 800ee54:	4613      	movlt	r3, r2
 800ee56:	6033      	str	r3, [r6, #0]
 800ee58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee5c:	4607      	mov	r7, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	b10a      	cbz	r2, 800ee66 <_printf_common+0x26>
 800ee62:	3301      	adds	r3, #1
 800ee64:	6033      	str	r3, [r6, #0]
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	0699      	lsls	r1, r3, #26
 800ee6a:	bf42      	ittt	mi
 800ee6c:	6833      	ldrmi	r3, [r6, #0]
 800ee6e:	3302      	addmi	r3, #2
 800ee70:	6033      	strmi	r3, [r6, #0]
 800ee72:	6825      	ldr	r5, [r4, #0]
 800ee74:	f015 0506 	ands.w	r5, r5, #6
 800ee78:	d106      	bne.n	800ee88 <_printf_common+0x48>
 800ee7a:	f104 0a19 	add.w	sl, r4, #25
 800ee7e:	68e3      	ldr	r3, [r4, #12]
 800ee80:	6832      	ldr	r2, [r6, #0]
 800ee82:	1a9b      	subs	r3, r3, r2
 800ee84:	42ab      	cmp	r3, r5
 800ee86:	dc26      	bgt.n	800eed6 <_printf_common+0x96>
 800ee88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee8c:	6822      	ldr	r2, [r4, #0]
 800ee8e:	3b00      	subs	r3, #0
 800ee90:	bf18      	it	ne
 800ee92:	2301      	movne	r3, #1
 800ee94:	0692      	lsls	r2, r2, #26
 800ee96:	d42b      	bmi.n	800eef0 <_printf_common+0xb0>
 800ee98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee9c:	4641      	mov	r1, r8
 800ee9e:	4638      	mov	r0, r7
 800eea0:	47c8      	blx	r9
 800eea2:	3001      	adds	r0, #1
 800eea4:	d01e      	beq.n	800eee4 <_printf_common+0xa4>
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	6922      	ldr	r2, [r4, #16]
 800eeaa:	f003 0306 	and.w	r3, r3, #6
 800eeae:	2b04      	cmp	r3, #4
 800eeb0:	bf02      	ittt	eq
 800eeb2:	68e5      	ldreq	r5, [r4, #12]
 800eeb4:	6833      	ldreq	r3, [r6, #0]
 800eeb6:	1aed      	subeq	r5, r5, r3
 800eeb8:	68a3      	ldr	r3, [r4, #8]
 800eeba:	bf0c      	ite	eq
 800eebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eec0:	2500      	movne	r5, #0
 800eec2:	4293      	cmp	r3, r2
 800eec4:	bfc4      	itt	gt
 800eec6:	1a9b      	subgt	r3, r3, r2
 800eec8:	18ed      	addgt	r5, r5, r3
 800eeca:	2600      	movs	r6, #0
 800eecc:	341a      	adds	r4, #26
 800eece:	42b5      	cmp	r5, r6
 800eed0:	d11a      	bne.n	800ef08 <_printf_common+0xc8>
 800eed2:	2000      	movs	r0, #0
 800eed4:	e008      	b.n	800eee8 <_printf_common+0xa8>
 800eed6:	2301      	movs	r3, #1
 800eed8:	4652      	mov	r2, sl
 800eeda:	4641      	mov	r1, r8
 800eedc:	4638      	mov	r0, r7
 800eede:	47c8      	blx	r9
 800eee0:	3001      	adds	r0, #1
 800eee2:	d103      	bne.n	800eeec <_printf_common+0xac>
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeec:	3501      	adds	r5, #1
 800eeee:	e7c6      	b.n	800ee7e <_printf_common+0x3e>
 800eef0:	18e1      	adds	r1, r4, r3
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	2030      	movs	r0, #48	@ 0x30
 800eef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eefa:	4422      	add	r2, r4
 800eefc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ef00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef04:	3302      	adds	r3, #2
 800ef06:	e7c7      	b.n	800ee98 <_printf_common+0x58>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	4622      	mov	r2, r4
 800ef0c:	4641      	mov	r1, r8
 800ef0e:	4638      	mov	r0, r7
 800ef10:	47c8      	blx	r9
 800ef12:	3001      	adds	r0, #1
 800ef14:	d0e6      	beq.n	800eee4 <_printf_common+0xa4>
 800ef16:	3601      	adds	r6, #1
 800ef18:	e7d9      	b.n	800eece <_printf_common+0x8e>
	...

0800ef1c <_printf_i>:
 800ef1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef20:	7e0f      	ldrb	r7, [r1, #24]
 800ef22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef24:	2f78      	cmp	r7, #120	@ 0x78
 800ef26:	4691      	mov	r9, r2
 800ef28:	4680      	mov	r8, r0
 800ef2a:	460c      	mov	r4, r1
 800ef2c:	469a      	mov	sl, r3
 800ef2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef32:	d807      	bhi.n	800ef44 <_printf_i+0x28>
 800ef34:	2f62      	cmp	r7, #98	@ 0x62
 800ef36:	d80a      	bhi.n	800ef4e <_printf_i+0x32>
 800ef38:	2f00      	cmp	r7, #0
 800ef3a:	f000 80d2 	beq.w	800f0e2 <_printf_i+0x1c6>
 800ef3e:	2f58      	cmp	r7, #88	@ 0x58
 800ef40:	f000 80b9 	beq.w	800f0b6 <_printf_i+0x19a>
 800ef44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef4c:	e03a      	b.n	800efc4 <_printf_i+0xa8>
 800ef4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef52:	2b15      	cmp	r3, #21
 800ef54:	d8f6      	bhi.n	800ef44 <_printf_i+0x28>
 800ef56:	a101      	add	r1, pc, #4	@ (adr r1, 800ef5c <_printf_i+0x40>)
 800ef58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef5c:	0800efb5 	.word	0x0800efb5
 800ef60:	0800efc9 	.word	0x0800efc9
 800ef64:	0800ef45 	.word	0x0800ef45
 800ef68:	0800ef45 	.word	0x0800ef45
 800ef6c:	0800ef45 	.word	0x0800ef45
 800ef70:	0800ef45 	.word	0x0800ef45
 800ef74:	0800efc9 	.word	0x0800efc9
 800ef78:	0800ef45 	.word	0x0800ef45
 800ef7c:	0800ef45 	.word	0x0800ef45
 800ef80:	0800ef45 	.word	0x0800ef45
 800ef84:	0800ef45 	.word	0x0800ef45
 800ef88:	0800f0c9 	.word	0x0800f0c9
 800ef8c:	0800eff3 	.word	0x0800eff3
 800ef90:	0800f083 	.word	0x0800f083
 800ef94:	0800ef45 	.word	0x0800ef45
 800ef98:	0800ef45 	.word	0x0800ef45
 800ef9c:	0800f0eb 	.word	0x0800f0eb
 800efa0:	0800ef45 	.word	0x0800ef45
 800efa4:	0800eff3 	.word	0x0800eff3
 800efa8:	0800ef45 	.word	0x0800ef45
 800efac:	0800ef45 	.word	0x0800ef45
 800efb0:	0800f08b 	.word	0x0800f08b
 800efb4:	6833      	ldr	r3, [r6, #0]
 800efb6:	1d1a      	adds	r2, r3, #4
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	6032      	str	r2, [r6, #0]
 800efbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efc4:	2301      	movs	r3, #1
 800efc6:	e09d      	b.n	800f104 <_printf_i+0x1e8>
 800efc8:	6833      	ldr	r3, [r6, #0]
 800efca:	6820      	ldr	r0, [r4, #0]
 800efcc:	1d19      	adds	r1, r3, #4
 800efce:	6031      	str	r1, [r6, #0]
 800efd0:	0606      	lsls	r6, r0, #24
 800efd2:	d501      	bpl.n	800efd8 <_printf_i+0xbc>
 800efd4:	681d      	ldr	r5, [r3, #0]
 800efd6:	e003      	b.n	800efe0 <_printf_i+0xc4>
 800efd8:	0645      	lsls	r5, r0, #25
 800efda:	d5fb      	bpl.n	800efd4 <_printf_i+0xb8>
 800efdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efe0:	2d00      	cmp	r5, #0
 800efe2:	da03      	bge.n	800efec <_printf_i+0xd0>
 800efe4:	232d      	movs	r3, #45	@ 0x2d
 800efe6:	426d      	negs	r5, r5
 800efe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efec:	4859      	ldr	r0, [pc, #356]	@ (800f154 <_printf_i+0x238>)
 800efee:	230a      	movs	r3, #10
 800eff0:	e011      	b.n	800f016 <_printf_i+0xfa>
 800eff2:	6821      	ldr	r1, [r4, #0]
 800eff4:	6833      	ldr	r3, [r6, #0]
 800eff6:	0608      	lsls	r0, r1, #24
 800eff8:	f853 5b04 	ldr.w	r5, [r3], #4
 800effc:	d402      	bmi.n	800f004 <_printf_i+0xe8>
 800effe:	0649      	lsls	r1, r1, #25
 800f000:	bf48      	it	mi
 800f002:	b2ad      	uxthmi	r5, r5
 800f004:	2f6f      	cmp	r7, #111	@ 0x6f
 800f006:	4853      	ldr	r0, [pc, #332]	@ (800f154 <_printf_i+0x238>)
 800f008:	6033      	str	r3, [r6, #0]
 800f00a:	bf14      	ite	ne
 800f00c:	230a      	movne	r3, #10
 800f00e:	2308      	moveq	r3, #8
 800f010:	2100      	movs	r1, #0
 800f012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f016:	6866      	ldr	r6, [r4, #4]
 800f018:	60a6      	str	r6, [r4, #8]
 800f01a:	2e00      	cmp	r6, #0
 800f01c:	bfa2      	ittt	ge
 800f01e:	6821      	ldrge	r1, [r4, #0]
 800f020:	f021 0104 	bicge.w	r1, r1, #4
 800f024:	6021      	strge	r1, [r4, #0]
 800f026:	b90d      	cbnz	r5, 800f02c <_printf_i+0x110>
 800f028:	2e00      	cmp	r6, #0
 800f02a:	d04b      	beq.n	800f0c4 <_printf_i+0x1a8>
 800f02c:	4616      	mov	r6, r2
 800f02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f032:	fb03 5711 	mls	r7, r3, r1, r5
 800f036:	5dc7      	ldrb	r7, [r0, r7]
 800f038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f03c:	462f      	mov	r7, r5
 800f03e:	42bb      	cmp	r3, r7
 800f040:	460d      	mov	r5, r1
 800f042:	d9f4      	bls.n	800f02e <_printf_i+0x112>
 800f044:	2b08      	cmp	r3, #8
 800f046:	d10b      	bne.n	800f060 <_printf_i+0x144>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	07df      	lsls	r7, r3, #31
 800f04c:	d508      	bpl.n	800f060 <_printf_i+0x144>
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	6861      	ldr	r1, [r4, #4]
 800f052:	4299      	cmp	r1, r3
 800f054:	bfde      	ittt	le
 800f056:	2330      	movle	r3, #48	@ 0x30
 800f058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f060:	1b92      	subs	r2, r2, r6
 800f062:	6122      	str	r2, [r4, #16]
 800f064:	f8cd a000 	str.w	sl, [sp]
 800f068:	464b      	mov	r3, r9
 800f06a:	aa03      	add	r2, sp, #12
 800f06c:	4621      	mov	r1, r4
 800f06e:	4640      	mov	r0, r8
 800f070:	f7ff fee6 	bl	800ee40 <_printf_common>
 800f074:	3001      	adds	r0, #1
 800f076:	d14a      	bne.n	800f10e <_printf_i+0x1f2>
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	b004      	add	sp, #16
 800f07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	f043 0320 	orr.w	r3, r3, #32
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	4833      	ldr	r0, [pc, #204]	@ (800f158 <_printf_i+0x23c>)
 800f08c:	2778      	movs	r7, #120	@ 0x78
 800f08e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	6831      	ldr	r1, [r6, #0]
 800f096:	061f      	lsls	r7, r3, #24
 800f098:	f851 5b04 	ldr.w	r5, [r1], #4
 800f09c:	d402      	bmi.n	800f0a4 <_printf_i+0x188>
 800f09e:	065f      	lsls	r7, r3, #25
 800f0a0:	bf48      	it	mi
 800f0a2:	b2ad      	uxthmi	r5, r5
 800f0a4:	6031      	str	r1, [r6, #0]
 800f0a6:	07d9      	lsls	r1, r3, #31
 800f0a8:	bf44      	itt	mi
 800f0aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f0ae:	6023      	strmi	r3, [r4, #0]
 800f0b0:	b11d      	cbz	r5, 800f0ba <_printf_i+0x19e>
 800f0b2:	2310      	movs	r3, #16
 800f0b4:	e7ac      	b.n	800f010 <_printf_i+0xf4>
 800f0b6:	4827      	ldr	r0, [pc, #156]	@ (800f154 <_printf_i+0x238>)
 800f0b8:	e7e9      	b.n	800f08e <_printf_i+0x172>
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	f023 0320 	bic.w	r3, r3, #32
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	e7f6      	b.n	800f0b2 <_printf_i+0x196>
 800f0c4:	4616      	mov	r6, r2
 800f0c6:	e7bd      	b.n	800f044 <_printf_i+0x128>
 800f0c8:	6833      	ldr	r3, [r6, #0]
 800f0ca:	6825      	ldr	r5, [r4, #0]
 800f0cc:	6961      	ldr	r1, [r4, #20]
 800f0ce:	1d18      	adds	r0, r3, #4
 800f0d0:	6030      	str	r0, [r6, #0]
 800f0d2:	062e      	lsls	r6, r5, #24
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	d501      	bpl.n	800f0dc <_printf_i+0x1c0>
 800f0d8:	6019      	str	r1, [r3, #0]
 800f0da:	e002      	b.n	800f0e2 <_printf_i+0x1c6>
 800f0dc:	0668      	lsls	r0, r5, #25
 800f0de:	d5fb      	bpl.n	800f0d8 <_printf_i+0x1bc>
 800f0e0:	8019      	strh	r1, [r3, #0]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	4616      	mov	r6, r2
 800f0e8:	e7bc      	b.n	800f064 <_printf_i+0x148>
 800f0ea:	6833      	ldr	r3, [r6, #0]
 800f0ec:	1d1a      	adds	r2, r3, #4
 800f0ee:	6032      	str	r2, [r6, #0]
 800f0f0:	681e      	ldr	r6, [r3, #0]
 800f0f2:	6862      	ldr	r2, [r4, #4]
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7f1 f88a 	bl	8000210 <memchr>
 800f0fc:	b108      	cbz	r0, 800f102 <_printf_i+0x1e6>
 800f0fe:	1b80      	subs	r0, r0, r6
 800f100:	6060      	str	r0, [r4, #4]
 800f102:	6863      	ldr	r3, [r4, #4]
 800f104:	6123      	str	r3, [r4, #16]
 800f106:	2300      	movs	r3, #0
 800f108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f10c:	e7aa      	b.n	800f064 <_printf_i+0x148>
 800f10e:	6923      	ldr	r3, [r4, #16]
 800f110:	4632      	mov	r2, r6
 800f112:	4649      	mov	r1, r9
 800f114:	4640      	mov	r0, r8
 800f116:	47d0      	blx	sl
 800f118:	3001      	adds	r0, #1
 800f11a:	d0ad      	beq.n	800f078 <_printf_i+0x15c>
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	079b      	lsls	r3, r3, #30
 800f120:	d413      	bmi.n	800f14a <_printf_i+0x22e>
 800f122:	68e0      	ldr	r0, [r4, #12]
 800f124:	9b03      	ldr	r3, [sp, #12]
 800f126:	4298      	cmp	r0, r3
 800f128:	bfb8      	it	lt
 800f12a:	4618      	movlt	r0, r3
 800f12c:	e7a6      	b.n	800f07c <_printf_i+0x160>
 800f12e:	2301      	movs	r3, #1
 800f130:	4632      	mov	r2, r6
 800f132:	4649      	mov	r1, r9
 800f134:	4640      	mov	r0, r8
 800f136:	47d0      	blx	sl
 800f138:	3001      	adds	r0, #1
 800f13a:	d09d      	beq.n	800f078 <_printf_i+0x15c>
 800f13c:	3501      	adds	r5, #1
 800f13e:	68e3      	ldr	r3, [r4, #12]
 800f140:	9903      	ldr	r1, [sp, #12]
 800f142:	1a5b      	subs	r3, r3, r1
 800f144:	42ab      	cmp	r3, r5
 800f146:	dcf2      	bgt.n	800f12e <_printf_i+0x212>
 800f148:	e7eb      	b.n	800f122 <_printf_i+0x206>
 800f14a:	2500      	movs	r5, #0
 800f14c:	f104 0619 	add.w	r6, r4, #25
 800f150:	e7f5      	b.n	800f13e <_printf_i+0x222>
 800f152:	bf00      	nop
 800f154:	080147f2 	.word	0x080147f2
 800f158:	08014803 	.word	0x08014803

0800f15c <_scanf_float>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	b087      	sub	sp, #28
 800f162:	4617      	mov	r7, r2
 800f164:	9303      	str	r3, [sp, #12]
 800f166:	688b      	ldr	r3, [r1, #8]
 800f168:	1e5a      	subs	r2, r3, #1
 800f16a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f16e:	bf81      	itttt	hi
 800f170:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f174:	eb03 0b05 	addhi.w	fp, r3, r5
 800f178:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f17c:	608b      	strhi	r3, [r1, #8]
 800f17e:	680b      	ldr	r3, [r1, #0]
 800f180:	460a      	mov	r2, r1
 800f182:	f04f 0500 	mov.w	r5, #0
 800f186:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f18a:	f842 3b1c 	str.w	r3, [r2], #28
 800f18e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f192:	4680      	mov	r8, r0
 800f194:	460c      	mov	r4, r1
 800f196:	bf98      	it	ls
 800f198:	f04f 0b00 	movls.w	fp, #0
 800f19c:	9201      	str	r2, [sp, #4]
 800f19e:	4616      	mov	r6, r2
 800f1a0:	46aa      	mov	sl, r5
 800f1a2:	46a9      	mov	r9, r5
 800f1a4:	9502      	str	r5, [sp, #8]
 800f1a6:	68a2      	ldr	r2, [r4, #8]
 800f1a8:	b152      	cbz	r2, 800f1c0 <_scanf_float+0x64>
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	2b4e      	cmp	r3, #78	@ 0x4e
 800f1b0:	d864      	bhi.n	800f27c <_scanf_float+0x120>
 800f1b2:	2b40      	cmp	r3, #64	@ 0x40
 800f1b4:	d83c      	bhi.n	800f230 <_scanf_float+0xd4>
 800f1b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f1ba:	b2c8      	uxtb	r0, r1
 800f1bc:	280e      	cmp	r0, #14
 800f1be:	d93a      	bls.n	800f236 <_scanf_float+0xda>
 800f1c0:	f1b9 0f00 	cmp.w	r9, #0
 800f1c4:	d003      	beq.n	800f1ce <_scanf_float+0x72>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1d2:	f1ba 0f01 	cmp.w	sl, #1
 800f1d6:	f200 8117 	bhi.w	800f408 <_scanf_float+0x2ac>
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	429e      	cmp	r6, r3
 800f1de:	f200 8108 	bhi.w	800f3f2 <_scanf_float+0x296>
 800f1e2:	2001      	movs	r0, #1
 800f1e4:	b007      	add	sp, #28
 800f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f1ee:	2a0d      	cmp	r2, #13
 800f1f0:	d8e6      	bhi.n	800f1c0 <_scanf_float+0x64>
 800f1f2:	a101      	add	r1, pc, #4	@ (adr r1, 800f1f8 <_scanf_float+0x9c>)
 800f1f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1f8:	0800f33f 	.word	0x0800f33f
 800f1fc:	0800f1c1 	.word	0x0800f1c1
 800f200:	0800f1c1 	.word	0x0800f1c1
 800f204:	0800f1c1 	.word	0x0800f1c1
 800f208:	0800f39f 	.word	0x0800f39f
 800f20c:	0800f377 	.word	0x0800f377
 800f210:	0800f1c1 	.word	0x0800f1c1
 800f214:	0800f1c1 	.word	0x0800f1c1
 800f218:	0800f34d 	.word	0x0800f34d
 800f21c:	0800f1c1 	.word	0x0800f1c1
 800f220:	0800f1c1 	.word	0x0800f1c1
 800f224:	0800f1c1 	.word	0x0800f1c1
 800f228:	0800f1c1 	.word	0x0800f1c1
 800f22c:	0800f305 	.word	0x0800f305
 800f230:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f234:	e7db      	b.n	800f1ee <_scanf_float+0x92>
 800f236:	290e      	cmp	r1, #14
 800f238:	d8c2      	bhi.n	800f1c0 <_scanf_float+0x64>
 800f23a:	a001      	add	r0, pc, #4	@ (adr r0, 800f240 <_scanf_float+0xe4>)
 800f23c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f240:	0800f2f5 	.word	0x0800f2f5
 800f244:	0800f1c1 	.word	0x0800f1c1
 800f248:	0800f2f5 	.word	0x0800f2f5
 800f24c:	0800f38b 	.word	0x0800f38b
 800f250:	0800f1c1 	.word	0x0800f1c1
 800f254:	0800f29d 	.word	0x0800f29d
 800f258:	0800f2db 	.word	0x0800f2db
 800f25c:	0800f2db 	.word	0x0800f2db
 800f260:	0800f2db 	.word	0x0800f2db
 800f264:	0800f2db 	.word	0x0800f2db
 800f268:	0800f2db 	.word	0x0800f2db
 800f26c:	0800f2db 	.word	0x0800f2db
 800f270:	0800f2db 	.word	0x0800f2db
 800f274:	0800f2db 	.word	0x0800f2db
 800f278:	0800f2db 	.word	0x0800f2db
 800f27c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f27e:	d809      	bhi.n	800f294 <_scanf_float+0x138>
 800f280:	2b60      	cmp	r3, #96	@ 0x60
 800f282:	d8b2      	bhi.n	800f1ea <_scanf_float+0x8e>
 800f284:	2b54      	cmp	r3, #84	@ 0x54
 800f286:	d07b      	beq.n	800f380 <_scanf_float+0x224>
 800f288:	2b59      	cmp	r3, #89	@ 0x59
 800f28a:	d199      	bne.n	800f1c0 <_scanf_float+0x64>
 800f28c:	2d07      	cmp	r5, #7
 800f28e:	d197      	bne.n	800f1c0 <_scanf_float+0x64>
 800f290:	2508      	movs	r5, #8
 800f292:	e02c      	b.n	800f2ee <_scanf_float+0x192>
 800f294:	2b74      	cmp	r3, #116	@ 0x74
 800f296:	d073      	beq.n	800f380 <_scanf_float+0x224>
 800f298:	2b79      	cmp	r3, #121	@ 0x79
 800f29a:	e7f6      	b.n	800f28a <_scanf_float+0x12e>
 800f29c:	6821      	ldr	r1, [r4, #0]
 800f29e:	05c8      	lsls	r0, r1, #23
 800f2a0:	d51b      	bpl.n	800f2da <_scanf_float+0x17e>
 800f2a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f2a6:	6021      	str	r1, [r4, #0]
 800f2a8:	f109 0901 	add.w	r9, r9, #1
 800f2ac:	f1bb 0f00 	cmp.w	fp, #0
 800f2b0:	d003      	beq.n	800f2ba <_scanf_float+0x15e>
 800f2b2:	3201      	adds	r2, #1
 800f2b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b8:	60a2      	str	r2, [r4, #8]
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	60a3      	str	r3, [r4, #8]
 800f2c0:	6923      	ldr	r3, [r4, #16]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	6123      	str	r3, [r4, #16]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	607b      	str	r3, [r7, #4]
 800f2ce:	f340 8087 	ble.w	800f3e0 <_scanf_float+0x284>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	e765      	b.n	800f1a6 <_scanf_float+0x4a>
 800f2da:	eb1a 0105 	adds.w	r1, sl, r5
 800f2de:	f47f af6f 	bne.w	800f1c0 <_scanf_float+0x64>
 800f2e2:	6822      	ldr	r2, [r4, #0]
 800f2e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f2e8:	6022      	str	r2, [r4, #0]
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	468a      	mov	sl, r1
 800f2ee:	f806 3b01 	strb.w	r3, [r6], #1
 800f2f2:	e7e2      	b.n	800f2ba <_scanf_float+0x15e>
 800f2f4:	6822      	ldr	r2, [r4, #0]
 800f2f6:	0610      	lsls	r0, r2, #24
 800f2f8:	f57f af62 	bpl.w	800f1c0 <_scanf_float+0x64>
 800f2fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f300:	6022      	str	r2, [r4, #0]
 800f302:	e7f4      	b.n	800f2ee <_scanf_float+0x192>
 800f304:	f1ba 0f00 	cmp.w	sl, #0
 800f308:	d10e      	bne.n	800f328 <_scanf_float+0x1cc>
 800f30a:	f1b9 0f00 	cmp.w	r9, #0
 800f30e:	d10e      	bne.n	800f32e <_scanf_float+0x1d2>
 800f310:	6822      	ldr	r2, [r4, #0]
 800f312:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f316:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f31a:	d108      	bne.n	800f32e <_scanf_float+0x1d2>
 800f31c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f320:	6022      	str	r2, [r4, #0]
 800f322:	f04f 0a01 	mov.w	sl, #1
 800f326:	e7e2      	b.n	800f2ee <_scanf_float+0x192>
 800f328:	f1ba 0f02 	cmp.w	sl, #2
 800f32c:	d055      	beq.n	800f3da <_scanf_float+0x27e>
 800f32e:	2d01      	cmp	r5, #1
 800f330:	d002      	beq.n	800f338 <_scanf_float+0x1dc>
 800f332:	2d04      	cmp	r5, #4
 800f334:	f47f af44 	bne.w	800f1c0 <_scanf_float+0x64>
 800f338:	3501      	adds	r5, #1
 800f33a:	b2ed      	uxtb	r5, r5
 800f33c:	e7d7      	b.n	800f2ee <_scanf_float+0x192>
 800f33e:	f1ba 0f01 	cmp.w	sl, #1
 800f342:	f47f af3d 	bne.w	800f1c0 <_scanf_float+0x64>
 800f346:	f04f 0a02 	mov.w	sl, #2
 800f34a:	e7d0      	b.n	800f2ee <_scanf_float+0x192>
 800f34c:	b97d      	cbnz	r5, 800f36e <_scanf_float+0x212>
 800f34e:	f1b9 0f00 	cmp.w	r9, #0
 800f352:	f47f af38 	bne.w	800f1c6 <_scanf_float+0x6a>
 800f356:	6822      	ldr	r2, [r4, #0]
 800f358:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f35c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f360:	f040 8108 	bne.w	800f574 <_scanf_float+0x418>
 800f364:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f368:	6022      	str	r2, [r4, #0]
 800f36a:	2501      	movs	r5, #1
 800f36c:	e7bf      	b.n	800f2ee <_scanf_float+0x192>
 800f36e:	2d03      	cmp	r5, #3
 800f370:	d0e2      	beq.n	800f338 <_scanf_float+0x1dc>
 800f372:	2d05      	cmp	r5, #5
 800f374:	e7de      	b.n	800f334 <_scanf_float+0x1d8>
 800f376:	2d02      	cmp	r5, #2
 800f378:	f47f af22 	bne.w	800f1c0 <_scanf_float+0x64>
 800f37c:	2503      	movs	r5, #3
 800f37e:	e7b6      	b.n	800f2ee <_scanf_float+0x192>
 800f380:	2d06      	cmp	r5, #6
 800f382:	f47f af1d 	bne.w	800f1c0 <_scanf_float+0x64>
 800f386:	2507      	movs	r5, #7
 800f388:	e7b1      	b.n	800f2ee <_scanf_float+0x192>
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	0591      	lsls	r1, r2, #22
 800f38e:	f57f af17 	bpl.w	800f1c0 <_scanf_float+0x64>
 800f392:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f396:	6022      	str	r2, [r4, #0]
 800f398:	f8cd 9008 	str.w	r9, [sp, #8]
 800f39c:	e7a7      	b.n	800f2ee <_scanf_float+0x192>
 800f39e:	6822      	ldr	r2, [r4, #0]
 800f3a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f3a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3a8:	d006      	beq.n	800f3b8 <_scanf_float+0x25c>
 800f3aa:	0550      	lsls	r0, r2, #21
 800f3ac:	f57f af08 	bpl.w	800f1c0 <_scanf_float+0x64>
 800f3b0:	f1b9 0f00 	cmp.w	r9, #0
 800f3b4:	f000 80de 	beq.w	800f574 <_scanf_float+0x418>
 800f3b8:	0591      	lsls	r1, r2, #22
 800f3ba:	bf58      	it	pl
 800f3bc:	9902      	ldrpl	r1, [sp, #8]
 800f3be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3c2:	bf58      	it	pl
 800f3c4:	eba9 0101 	subpl.w	r1, r9, r1
 800f3c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f3cc:	bf58      	it	pl
 800f3ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3d2:	6022      	str	r2, [r4, #0]
 800f3d4:	f04f 0900 	mov.w	r9, #0
 800f3d8:	e789      	b.n	800f2ee <_scanf_float+0x192>
 800f3da:	f04f 0a03 	mov.w	sl, #3
 800f3de:	e786      	b.n	800f2ee <_scanf_float+0x192>
 800f3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3e4:	4639      	mov	r1, r7
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	4798      	blx	r3
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	f43f aedb 	beq.w	800f1a6 <_scanf_float+0x4a>
 800f3f0:	e6e6      	b.n	800f1c0 <_scanf_float+0x64>
 800f3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f3fa:	463a      	mov	r2, r7
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4798      	blx	r3
 800f400:	6923      	ldr	r3, [r4, #16]
 800f402:	3b01      	subs	r3, #1
 800f404:	6123      	str	r3, [r4, #16]
 800f406:	e6e8      	b.n	800f1da <_scanf_float+0x7e>
 800f408:	1e6b      	subs	r3, r5, #1
 800f40a:	2b06      	cmp	r3, #6
 800f40c:	d824      	bhi.n	800f458 <_scanf_float+0x2fc>
 800f40e:	2d02      	cmp	r5, #2
 800f410:	d836      	bhi.n	800f480 <_scanf_float+0x324>
 800f412:	9b01      	ldr	r3, [sp, #4]
 800f414:	429e      	cmp	r6, r3
 800f416:	f67f aee4 	bls.w	800f1e2 <_scanf_float+0x86>
 800f41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f41e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f422:	463a      	mov	r2, r7
 800f424:	4640      	mov	r0, r8
 800f426:	4798      	blx	r3
 800f428:	6923      	ldr	r3, [r4, #16]
 800f42a:	3b01      	subs	r3, #1
 800f42c:	6123      	str	r3, [r4, #16]
 800f42e:	e7f0      	b.n	800f412 <_scanf_float+0x2b6>
 800f430:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f434:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f438:	463a      	mov	r2, r7
 800f43a:	4640      	mov	r0, r8
 800f43c:	4798      	blx	r3
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	3b01      	subs	r3, #1
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f448:	fa5f fa8a 	uxtb.w	sl, sl
 800f44c:	f1ba 0f02 	cmp.w	sl, #2
 800f450:	d1ee      	bne.n	800f430 <_scanf_float+0x2d4>
 800f452:	3d03      	subs	r5, #3
 800f454:	b2ed      	uxtb	r5, r5
 800f456:	1b76      	subs	r6, r6, r5
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	05da      	lsls	r2, r3, #23
 800f45c:	d530      	bpl.n	800f4c0 <_scanf_float+0x364>
 800f45e:	055b      	lsls	r3, r3, #21
 800f460:	d511      	bpl.n	800f486 <_scanf_float+0x32a>
 800f462:	9b01      	ldr	r3, [sp, #4]
 800f464:	429e      	cmp	r6, r3
 800f466:	f67f aebc 	bls.w	800f1e2 <_scanf_float+0x86>
 800f46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f46e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f472:	463a      	mov	r2, r7
 800f474:	4640      	mov	r0, r8
 800f476:	4798      	blx	r3
 800f478:	6923      	ldr	r3, [r4, #16]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	6123      	str	r3, [r4, #16]
 800f47e:	e7f0      	b.n	800f462 <_scanf_float+0x306>
 800f480:	46aa      	mov	sl, r5
 800f482:	46b3      	mov	fp, r6
 800f484:	e7de      	b.n	800f444 <_scanf_float+0x2e8>
 800f486:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	2965      	cmp	r1, #101	@ 0x65
 800f48e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f492:	f106 35ff 	add.w	r5, r6, #4294967295
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	d00c      	beq.n	800f4b4 <_scanf_float+0x358>
 800f49a:	2945      	cmp	r1, #69	@ 0x45
 800f49c:	d00a      	beq.n	800f4b4 <_scanf_float+0x358>
 800f49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4a2:	463a      	mov	r2, r7
 800f4a4:	4640      	mov	r0, r8
 800f4a6:	4798      	blx	r3
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	1eb5      	subs	r5, r6, #2
 800f4b2:	6123      	str	r3, [r4, #16]
 800f4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4b8:	463a      	mov	r2, r7
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	4798      	blx	r3
 800f4be:	462e      	mov	r6, r5
 800f4c0:	6822      	ldr	r2, [r4, #0]
 800f4c2:	f012 0210 	ands.w	r2, r2, #16
 800f4c6:	d001      	beq.n	800f4cc <_scanf_float+0x370>
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	e68b      	b.n	800f1e4 <_scanf_float+0x88>
 800f4cc:	7032      	strb	r2, [r6, #0]
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f4d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4d8:	d11c      	bne.n	800f514 <_scanf_float+0x3b8>
 800f4da:	9b02      	ldr	r3, [sp, #8]
 800f4dc:	454b      	cmp	r3, r9
 800f4de:	eba3 0209 	sub.w	r2, r3, r9
 800f4e2:	d123      	bne.n	800f52c <_scanf_float+0x3d0>
 800f4e4:	9901      	ldr	r1, [sp, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	f7ff f9cd 	bl	800e888 <_strtod_r>
 800f4ee:	9b03      	ldr	r3, [sp, #12]
 800f4f0:	6821      	ldr	r1, [r4, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f011 0f02 	tst.w	r1, #2
 800f4f8:	ec57 6b10 	vmov	r6, r7, d0
 800f4fc:	f103 0204 	add.w	r2, r3, #4
 800f500:	d01f      	beq.n	800f542 <_scanf_float+0x3e6>
 800f502:	9903      	ldr	r1, [sp, #12]
 800f504:	600a      	str	r2, [r1, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	e9c3 6700 	strd	r6, r7, [r3]
 800f50c:	68e3      	ldr	r3, [r4, #12]
 800f50e:	3301      	adds	r3, #1
 800f510:	60e3      	str	r3, [r4, #12]
 800f512:	e7d9      	b.n	800f4c8 <_scanf_float+0x36c>
 800f514:	9b04      	ldr	r3, [sp, #16]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d0e4      	beq.n	800f4e4 <_scanf_float+0x388>
 800f51a:	9905      	ldr	r1, [sp, #20]
 800f51c:	230a      	movs	r3, #10
 800f51e:	3101      	adds	r1, #1
 800f520:	4640      	mov	r0, r8
 800f522:	f002 f923 	bl	801176c <_strtol_r>
 800f526:	9b04      	ldr	r3, [sp, #16]
 800f528:	9e05      	ldr	r6, [sp, #20]
 800f52a:	1ac2      	subs	r2, r0, r3
 800f52c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f530:	429e      	cmp	r6, r3
 800f532:	bf28      	it	cs
 800f534:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f538:	4910      	ldr	r1, [pc, #64]	@ (800f57c <_scanf_float+0x420>)
 800f53a:	4630      	mov	r0, r6
 800f53c:	f000 f8e4 	bl	800f708 <siprintf>
 800f540:	e7d0      	b.n	800f4e4 <_scanf_float+0x388>
 800f542:	f011 0f04 	tst.w	r1, #4
 800f546:	9903      	ldr	r1, [sp, #12]
 800f548:	600a      	str	r2, [r1, #0]
 800f54a:	d1dc      	bne.n	800f506 <_scanf_float+0x3aa>
 800f54c:	681d      	ldr	r5, [r3, #0]
 800f54e:	4632      	mov	r2, r6
 800f550:	463b      	mov	r3, r7
 800f552:	4630      	mov	r0, r6
 800f554:	4639      	mov	r1, r7
 800f556:	f7f1 fb09 	bl	8000b6c <__aeabi_dcmpun>
 800f55a:	b128      	cbz	r0, 800f568 <_scanf_float+0x40c>
 800f55c:	4808      	ldr	r0, [pc, #32]	@ (800f580 <_scanf_float+0x424>)
 800f55e:	f000 f9ef 	bl	800f940 <nanf>
 800f562:	ed85 0a00 	vstr	s0, [r5]
 800f566:	e7d1      	b.n	800f50c <_scanf_float+0x3b0>
 800f568:	4630      	mov	r0, r6
 800f56a:	4639      	mov	r1, r7
 800f56c:	f7f1 fb5c 	bl	8000c28 <__aeabi_d2f>
 800f570:	6028      	str	r0, [r5, #0]
 800f572:	e7cb      	b.n	800f50c <_scanf_float+0x3b0>
 800f574:	f04f 0900 	mov.w	r9, #0
 800f578:	e629      	b.n	800f1ce <_scanf_float+0x72>
 800f57a:	bf00      	nop
 800f57c:	08014814 	.word	0x08014814
 800f580:	08014bb5 	.word	0x08014bb5

0800f584 <std>:
 800f584:	2300      	movs	r3, #0
 800f586:	b510      	push	{r4, lr}
 800f588:	4604      	mov	r4, r0
 800f58a:	e9c0 3300 	strd	r3, r3, [r0]
 800f58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f592:	6083      	str	r3, [r0, #8]
 800f594:	8181      	strh	r1, [r0, #12]
 800f596:	6643      	str	r3, [r0, #100]	@ 0x64
 800f598:	81c2      	strh	r2, [r0, #14]
 800f59a:	6183      	str	r3, [r0, #24]
 800f59c:	4619      	mov	r1, r3
 800f59e:	2208      	movs	r2, #8
 800f5a0:	305c      	adds	r0, #92	@ 0x5c
 800f5a2:	f000 f914 	bl	800f7ce <memset>
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <std+0x58>)
 800f5a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e0 <std+0x5c>)
 800f5ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e4 <std+0x60>)
 800f5b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e8 <std+0x64>)
 800f5b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ec <std+0x68>)
 800f5b8:	6224      	str	r4, [r4, #32]
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	d006      	beq.n	800f5cc <std+0x48>
 800f5be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5c2:	4294      	cmp	r4, r2
 800f5c4:	d002      	beq.n	800f5cc <std+0x48>
 800f5c6:	33d0      	adds	r3, #208	@ 0xd0
 800f5c8:	429c      	cmp	r4, r3
 800f5ca:	d105      	bne.n	800f5d8 <std+0x54>
 800f5cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5d4:	f000 b99a 	b.w	800f90c <__retarget_lock_init_recursive>
 800f5d8:	bd10      	pop	{r4, pc}
 800f5da:	bf00      	nop
 800f5dc:	0800f749 	.word	0x0800f749
 800f5e0:	0800f76b 	.word	0x0800f76b
 800f5e4:	0800f7a3 	.word	0x0800f7a3
 800f5e8:	0800f7c7 	.word	0x0800f7c7
 800f5ec:	20002540 	.word	0x20002540

0800f5f0 <stdio_exit_handler>:
 800f5f0:	4a02      	ldr	r2, [pc, #8]	@ (800f5fc <stdio_exit_handler+0xc>)
 800f5f2:	4903      	ldr	r1, [pc, #12]	@ (800f600 <stdio_exit_handler+0x10>)
 800f5f4:	4803      	ldr	r0, [pc, #12]	@ (800f604 <stdio_exit_handler+0x14>)
 800f5f6:	f000 b869 	b.w	800f6cc <_fwalk_sglue>
 800f5fa:	bf00      	nop
 800f5fc:	20000124 	.word	0x20000124
 800f600:	08011b41 	.word	0x08011b41
 800f604:	200002a0 	.word	0x200002a0

0800f608 <cleanup_stdio>:
 800f608:	6841      	ldr	r1, [r0, #4]
 800f60a:	4b0c      	ldr	r3, [pc, #48]	@ (800f63c <cleanup_stdio+0x34>)
 800f60c:	4299      	cmp	r1, r3
 800f60e:	b510      	push	{r4, lr}
 800f610:	4604      	mov	r4, r0
 800f612:	d001      	beq.n	800f618 <cleanup_stdio+0x10>
 800f614:	f002 fa94 	bl	8011b40 <_fflush_r>
 800f618:	68a1      	ldr	r1, [r4, #8]
 800f61a:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <cleanup_stdio+0x38>)
 800f61c:	4299      	cmp	r1, r3
 800f61e:	d002      	beq.n	800f626 <cleanup_stdio+0x1e>
 800f620:	4620      	mov	r0, r4
 800f622:	f002 fa8d 	bl	8011b40 <_fflush_r>
 800f626:	68e1      	ldr	r1, [r4, #12]
 800f628:	4b06      	ldr	r3, [pc, #24]	@ (800f644 <cleanup_stdio+0x3c>)
 800f62a:	4299      	cmp	r1, r3
 800f62c:	d004      	beq.n	800f638 <cleanup_stdio+0x30>
 800f62e:	4620      	mov	r0, r4
 800f630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f634:	f002 ba84 	b.w	8011b40 <_fflush_r>
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	bf00      	nop
 800f63c:	20002540 	.word	0x20002540
 800f640:	200025a8 	.word	0x200025a8
 800f644:	20002610 	.word	0x20002610

0800f648 <global_stdio_init.part.0>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	4b0b      	ldr	r3, [pc, #44]	@ (800f678 <global_stdio_init.part.0+0x30>)
 800f64c:	4c0b      	ldr	r4, [pc, #44]	@ (800f67c <global_stdio_init.part.0+0x34>)
 800f64e:	4a0c      	ldr	r2, [pc, #48]	@ (800f680 <global_stdio_init.part.0+0x38>)
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	4620      	mov	r0, r4
 800f654:	2200      	movs	r2, #0
 800f656:	2104      	movs	r1, #4
 800f658:	f7ff ff94 	bl	800f584 <std>
 800f65c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f660:	2201      	movs	r2, #1
 800f662:	2109      	movs	r1, #9
 800f664:	f7ff ff8e 	bl	800f584 <std>
 800f668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f66c:	2202      	movs	r2, #2
 800f66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f672:	2112      	movs	r1, #18
 800f674:	f7ff bf86 	b.w	800f584 <std>
 800f678:	20002678 	.word	0x20002678
 800f67c:	20002540 	.word	0x20002540
 800f680:	0800f5f1 	.word	0x0800f5f1

0800f684 <__sfp_lock_acquire>:
 800f684:	4801      	ldr	r0, [pc, #4]	@ (800f68c <__sfp_lock_acquire+0x8>)
 800f686:	f000 b942 	b.w	800f90e <__retarget_lock_acquire_recursive>
 800f68a:	bf00      	nop
 800f68c:	20002681 	.word	0x20002681

0800f690 <__sfp_lock_release>:
 800f690:	4801      	ldr	r0, [pc, #4]	@ (800f698 <__sfp_lock_release+0x8>)
 800f692:	f000 b93d 	b.w	800f910 <__retarget_lock_release_recursive>
 800f696:	bf00      	nop
 800f698:	20002681 	.word	0x20002681

0800f69c <__sinit>:
 800f69c:	b510      	push	{r4, lr}
 800f69e:	4604      	mov	r4, r0
 800f6a0:	f7ff fff0 	bl	800f684 <__sfp_lock_acquire>
 800f6a4:	6a23      	ldr	r3, [r4, #32]
 800f6a6:	b11b      	cbz	r3, 800f6b0 <__sinit+0x14>
 800f6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ac:	f7ff bff0 	b.w	800f690 <__sfp_lock_release>
 800f6b0:	4b04      	ldr	r3, [pc, #16]	@ (800f6c4 <__sinit+0x28>)
 800f6b2:	6223      	str	r3, [r4, #32]
 800f6b4:	4b04      	ldr	r3, [pc, #16]	@ (800f6c8 <__sinit+0x2c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1f5      	bne.n	800f6a8 <__sinit+0xc>
 800f6bc:	f7ff ffc4 	bl	800f648 <global_stdio_init.part.0>
 800f6c0:	e7f2      	b.n	800f6a8 <__sinit+0xc>
 800f6c2:	bf00      	nop
 800f6c4:	0800f609 	.word	0x0800f609
 800f6c8:	20002678 	.word	0x20002678

0800f6cc <_fwalk_sglue>:
 800f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	4688      	mov	r8, r1
 800f6d4:	4614      	mov	r4, r2
 800f6d6:	2600      	movs	r6, #0
 800f6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f6e0:	d505      	bpl.n	800f6ee <_fwalk_sglue+0x22>
 800f6e2:	6824      	ldr	r4, [r4, #0]
 800f6e4:	2c00      	cmp	r4, #0
 800f6e6:	d1f7      	bne.n	800f6d8 <_fwalk_sglue+0xc>
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	89ab      	ldrh	r3, [r5, #12]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d907      	bls.n	800f704 <_fwalk_sglue+0x38>
 800f6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	d003      	beq.n	800f704 <_fwalk_sglue+0x38>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	4638      	mov	r0, r7
 800f700:	47c0      	blx	r8
 800f702:	4306      	orrs	r6, r0
 800f704:	3568      	adds	r5, #104	@ 0x68
 800f706:	e7e9      	b.n	800f6dc <_fwalk_sglue+0x10>

0800f708 <siprintf>:
 800f708:	b40e      	push	{r1, r2, r3}
 800f70a:	b500      	push	{lr}
 800f70c:	b09c      	sub	sp, #112	@ 0x70
 800f70e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f710:	9002      	str	r0, [sp, #8]
 800f712:	9006      	str	r0, [sp, #24]
 800f714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f718:	4809      	ldr	r0, [pc, #36]	@ (800f740 <siprintf+0x38>)
 800f71a:	9107      	str	r1, [sp, #28]
 800f71c:	9104      	str	r1, [sp, #16]
 800f71e:	4909      	ldr	r1, [pc, #36]	@ (800f744 <siprintf+0x3c>)
 800f720:	f853 2b04 	ldr.w	r2, [r3], #4
 800f724:	9105      	str	r1, [sp, #20]
 800f726:	6800      	ldr	r0, [r0, #0]
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	a902      	add	r1, sp, #8
 800f72c:	f002 f888 	bl	8011840 <_svfiprintf_r>
 800f730:	9b02      	ldr	r3, [sp, #8]
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
 800f736:	b01c      	add	sp, #112	@ 0x70
 800f738:	f85d eb04 	ldr.w	lr, [sp], #4
 800f73c:	b003      	add	sp, #12
 800f73e:	4770      	bx	lr
 800f740:	2000029c 	.word	0x2000029c
 800f744:	ffff0208 	.word	0xffff0208

0800f748 <__sread>:
 800f748:	b510      	push	{r4, lr}
 800f74a:	460c      	mov	r4, r1
 800f74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f750:	f000 f87e 	bl	800f850 <_read_r>
 800f754:	2800      	cmp	r0, #0
 800f756:	bfab      	itete	ge
 800f758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f75a:	89a3      	ldrhlt	r3, [r4, #12]
 800f75c:	181b      	addge	r3, r3, r0
 800f75e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f762:	bfac      	ite	ge
 800f764:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f766:	81a3      	strhlt	r3, [r4, #12]
 800f768:	bd10      	pop	{r4, pc}

0800f76a <__swrite>:
 800f76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76e:	461f      	mov	r7, r3
 800f770:	898b      	ldrh	r3, [r1, #12]
 800f772:	05db      	lsls	r3, r3, #23
 800f774:	4605      	mov	r5, r0
 800f776:	460c      	mov	r4, r1
 800f778:	4616      	mov	r6, r2
 800f77a:	d505      	bpl.n	800f788 <__swrite+0x1e>
 800f77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f780:	2302      	movs	r3, #2
 800f782:	2200      	movs	r2, #0
 800f784:	f000 f852 	bl	800f82c <_lseek_r>
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f792:	81a3      	strh	r3, [r4, #12]
 800f794:	4632      	mov	r2, r6
 800f796:	463b      	mov	r3, r7
 800f798:	4628      	mov	r0, r5
 800f79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f79e:	f000 b879 	b.w	800f894 <_write_r>

0800f7a2 <__sseek>:
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7aa:	f000 f83f 	bl	800f82c <_lseek_r>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	bf15      	itete	ne
 800f7b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f7b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f7ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f7be:	81a3      	strheq	r3, [r4, #12]
 800f7c0:	bf18      	it	ne
 800f7c2:	81a3      	strhne	r3, [r4, #12]
 800f7c4:	bd10      	pop	{r4, pc}

0800f7c6 <__sclose>:
 800f7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ca:	f000 b81f 	b.w	800f80c <_close_r>

0800f7ce <memset>:
 800f7ce:	4402      	add	r2, r0
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d100      	bne.n	800f7d8 <memset+0xa>
 800f7d6:	4770      	bx	lr
 800f7d8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7dc:	e7f9      	b.n	800f7d2 <memset+0x4>

0800f7de <strncmp>:
 800f7de:	b510      	push	{r4, lr}
 800f7e0:	b16a      	cbz	r2, 800f7fe <strncmp+0x20>
 800f7e2:	3901      	subs	r1, #1
 800f7e4:	1884      	adds	r4, r0, r2
 800f7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d103      	bne.n	800f7fa <strncmp+0x1c>
 800f7f2:	42a0      	cmp	r0, r4
 800f7f4:	d001      	beq.n	800f7fa <strncmp+0x1c>
 800f7f6:	2a00      	cmp	r2, #0
 800f7f8:	d1f5      	bne.n	800f7e6 <strncmp+0x8>
 800f7fa:	1ad0      	subs	r0, r2, r3
 800f7fc:	bd10      	pop	{r4, pc}
 800f7fe:	4610      	mov	r0, r2
 800f800:	e7fc      	b.n	800f7fc <strncmp+0x1e>
	...

0800f804 <_localeconv_r>:
 800f804:	4800      	ldr	r0, [pc, #0]	@ (800f808 <_localeconv_r+0x4>)
 800f806:	4770      	bx	lr
 800f808:	20000220 	.word	0x20000220

0800f80c <_close_r>:
 800f80c:	b538      	push	{r3, r4, r5, lr}
 800f80e:	4d06      	ldr	r5, [pc, #24]	@ (800f828 <_close_r+0x1c>)
 800f810:	2300      	movs	r3, #0
 800f812:	4604      	mov	r4, r0
 800f814:	4608      	mov	r0, r1
 800f816:	602b      	str	r3, [r5, #0]
 800f818:	f7f4 fd10 	bl	800423c <_close>
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	d102      	bne.n	800f826 <_close_r+0x1a>
 800f820:	682b      	ldr	r3, [r5, #0]
 800f822:	b103      	cbz	r3, 800f826 <_close_r+0x1a>
 800f824:	6023      	str	r3, [r4, #0]
 800f826:	bd38      	pop	{r3, r4, r5, pc}
 800f828:	2000267c 	.word	0x2000267c

0800f82c <_lseek_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4d07      	ldr	r5, [pc, #28]	@ (800f84c <_lseek_r+0x20>)
 800f830:	4604      	mov	r4, r0
 800f832:	4608      	mov	r0, r1
 800f834:	4611      	mov	r1, r2
 800f836:	2200      	movs	r2, #0
 800f838:	602a      	str	r2, [r5, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	f7f4 fd25 	bl	800428a <_lseek>
 800f840:	1c43      	adds	r3, r0, #1
 800f842:	d102      	bne.n	800f84a <_lseek_r+0x1e>
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	b103      	cbz	r3, 800f84a <_lseek_r+0x1e>
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	bd38      	pop	{r3, r4, r5, pc}
 800f84c:	2000267c 	.word	0x2000267c

0800f850 <_read_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4d07      	ldr	r5, [pc, #28]	@ (800f870 <_read_r+0x20>)
 800f854:	4604      	mov	r4, r0
 800f856:	4608      	mov	r0, r1
 800f858:	4611      	mov	r1, r2
 800f85a:	2200      	movs	r2, #0
 800f85c:	602a      	str	r2, [r5, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	f7f4 fcb3 	bl	80041ca <_read>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_read_r+0x1e>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_read_r+0x1e>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	2000267c 	.word	0x2000267c

0800f874 <_sbrk_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d06      	ldr	r5, [pc, #24]	@ (800f890 <_sbrk_r+0x1c>)
 800f878:	2300      	movs	r3, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	602b      	str	r3, [r5, #0]
 800f880:	f7f4 fd10 	bl	80042a4 <_sbrk>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	d102      	bne.n	800f88e <_sbrk_r+0x1a>
 800f888:	682b      	ldr	r3, [r5, #0]
 800f88a:	b103      	cbz	r3, 800f88e <_sbrk_r+0x1a>
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	2000267c 	.word	0x2000267c

0800f894 <_write_r>:
 800f894:	b538      	push	{r3, r4, r5, lr}
 800f896:	4d07      	ldr	r5, [pc, #28]	@ (800f8b4 <_write_r+0x20>)
 800f898:	4604      	mov	r4, r0
 800f89a:	4608      	mov	r0, r1
 800f89c:	4611      	mov	r1, r2
 800f89e:	2200      	movs	r2, #0
 800f8a0:	602a      	str	r2, [r5, #0]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f7f4 fcae 	bl	8004204 <_write>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_write_r+0x1e>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_write_r+0x1e>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	2000267c 	.word	0x2000267c

0800f8b8 <__errno>:
 800f8b8:	4b01      	ldr	r3, [pc, #4]	@ (800f8c0 <__errno+0x8>)
 800f8ba:	6818      	ldr	r0, [r3, #0]
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	2000029c 	.word	0x2000029c

0800f8c4 <__libc_init_array>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	4d0d      	ldr	r5, [pc, #52]	@ (800f8fc <__libc_init_array+0x38>)
 800f8c8:	4c0d      	ldr	r4, [pc, #52]	@ (800f900 <__libc_init_array+0x3c>)
 800f8ca:	1b64      	subs	r4, r4, r5
 800f8cc:	10a4      	asrs	r4, r4, #2
 800f8ce:	2600      	movs	r6, #0
 800f8d0:	42a6      	cmp	r6, r4
 800f8d2:	d109      	bne.n	800f8e8 <__libc_init_array+0x24>
 800f8d4:	4d0b      	ldr	r5, [pc, #44]	@ (800f904 <__libc_init_array+0x40>)
 800f8d6:	4c0c      	ldr	r4, [pc, #48]	@ (800f908 <__libc_init_array+0x44>)
 800f8d8:	f004 fe7e 	bl	80145d8 <_init>
 800f8dc:	1b64      	subs	r4, r4, r5
 800f8de:	10a4      	asrs	r4, r4, #2
 800f8e0:	2600      	movs	r6, #0
 800f8e2:	42a6      	cmp	r6, r4
 800f8e4:	d105      	bne.n	800f8f2 <__libc_init_array+0x2e>
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
 800f8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8ec:	4798      	blx	r3
 800f8ee:	3601      	adds	r6, #1
 800f8f0:	e7ee      	b.n	800f8d0 <__libc_init_array+0xc>
 800f8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8f6:	4798      	blx	r3
 800f8f8:	3601      	adds	r6, #1
 800f8fa:	e7f2      	b.n	800f8e2 <__libc_init_array+0x1e>
 800f8fc:	08014e38 	.word	0x08014e38
 800f900:	08014e38 	.word	0x08014e38
 800f904:	08014e38 	.word	0x08014e38
 800f908:	08014e3c 	.word	0x08014e3c

0800f90c <__retarget_lock_init_recursive>:
 800f90c:	4770      	bx	lr

0800f90e <__retarget_lock_acquire_recursive>:
 800f90e:	4770      	bx	lr

0800f910 <__retarget_lock_release_recursive>:
 800f910:	4770      	bx	lr

0800f912 <memcpy>:
 800f912:	440a      	add	r2, r1
 800f914:	4291      	cmp	r1, r2
 800f916:	f100 33ff 	add.w	r3, r0, #4294967295
 800f91a:	d100      	bne.n	800f91e <memcpy+0xc>
 800f91c:	4770      	bx	lr
 800f91e:	b510      	push	{r4, lr}
 800f920:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f924:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f928:	4291      	cmp	r1, r2
 800f92a:	d1f9      	bne.n	800f920 <memcpy+0xe>
 800f92c:	bd10      	pop	{r4, pc}
	...

0800f930 <nan>:
 800f930:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f938 <nan+0x8>
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	00000000 	.word	0x00000000
 800f93c:	7ff80000 	.word	0x7ff80000

0800f940 <nanf>:
 800f940:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f948 <nanf+0x8>
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	7fc00000 	.word	0x7fc00000

0800f94c <quorem>:
 800f94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f950:	6903      	ldr	r3, [r0, #16]
 800f952:	690c      	ldr	r4, [r1, #16]
 800f954:	42a3      	cmp	r3, r4
 800f956:	4607      	mov	r7, r0
 800f958:	db7e      	blt.n	800fa58 <quorem+0x10c>
 800f95a:	3c01      	subs	r4, #1
 800f95c:	f101 0814 	add.w	r8, r1, #20
 800f960:	00a3      	lsls	r3, r4, #2
 800f962:	f100 0514 	add.w	r5, r0, #20
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f976:	3301      	adds	r3, #1
 800f978:	429a      	cmp	r2, r3
 800f97a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f97e:	fbb2 f6f3 	udiv	r6, r2, r3
 800f982:	d32e      	bcc.n	800f9e2 <quorem+0x96>
 800f984:	f04f 0a00 	mov.w	sl, #0
 800f988:	46c4      	mov	ip, r8
 800f98a:	46ae      	mov	lr, r5
 800f98c:	46d3      	mov	fp, sl
 800f98e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f992:	b298      	uxth	r0, r3
 800f994:	fb06 a000 	mla	r0, r6, r0, sl
 800f998:	0c02      	lsrs	r2, r0, #16
 800f99a:	0c1b      	lsrs	r3, r3, #16
 800f99c:	fb06 2303 	mla	r3, r6, r3, r2
 800f9a0:	f8de 2000 	ldr.w	r2, [lr]
 800f9a4:	b280      	uxth	r0, r0
 800f9a6:	b292      	uxth	r2, r2
 800f9a8:	1a12      	subs	r2, r2, r0
 800f9aa:	445a      	add	r2, fp
 800f9ac:	f8de 0000 	ldr.w	r0, [lr]
 800f9b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f9ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f9be:	b292      	uxth	r2, r2
 800f9c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f9c4:	45e1      	cmp	r9, ip
 800f9c6:	f84e 2b04 	str.w	r2, [lr], #4
 800f9ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f9ce:	d2de      	bcs.n	800f98e <quorem+0x42>
 800f9d0:	9b00      	ldr	r3, [sp, #0]
 800f9d2:	58eb      	ldr	r3, [r5, r3]
 800f9d4:	b92b      	cbnz	r3, 800f9e2 <quorem+0x96>
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	3b04      	subs	r3, #4
 800f9da:	429d      	cmp	r5, r3
 800f9dc:	461a      	mov	r2, r3
 800f9de:	d32f      	bcc.n	800fa40 <quorem+0xf4>
 800f9e0:	613c      	str	r4, [r7, #16]
 800f9e2:	4638      	mov	r0, r7
 800f9e4:	f001 fc5a 	bl	801129c <__mcmp>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	db25      	blt.n	800fa38 <quorem+0xec>
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9f4:	f8d1 c000 	ldr.w	ip, [r1]
 800f9f8:	fa1f fe82 	uxth.w	lr, r2
 800f9fc:	fa1f f38c 	uxth.w	r3, ip
 800fa00:	eba3 030e 	sub.w	r3, r3, lr
 800fa04:	4403      	add	r3, r0
 800fa06:	0c12      	lsrs	r2, r2, #16
 800fa08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fa0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa16:	45c1      	cmp	r9, r8
 800fa18:	f841 3b04 	str.w	r3, [r1], #4
 800fa1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa20:	d2e6      	bcs.n	800f9f0 <quorem+0xa4>
 800fa22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa2a:	b922      	cbnz	r2, 800fa36 <quorem+0xea>
 800fa2c:	3b04      	subs	r3, #4
 800fa2e:	429d      	cmp	r5, r3
 800fa30:	461a      	mov	r2, r3
 800fa32:	d30b      	bcc.n	800fa4c <quorem+0x100>
 800fa34:	613c      	str	r4, [r7, #16]
 800fa36:	3601      	adds	r6, #1
 800fa38:	4630      	mov	r0, r6
 800fa3a:	b003      	add	sp, #12
 800fa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa40:	6812      	ldr	r2, [r2, #0]
 800fa42:	3b04      	subs	r3, #4
 800fa44:	2a00      	cmp	r2, #0
 800fa46:	d1cb      	bne.n	800f9e0 <quorem+0x94>
 800fa48:	3c01      	subs	r4, #1
 800fa4a:	e7c6      	b.n	800f9da <quorem+0x8e>
 800fa4c:	6812      	ldr	r2, [r2, #0]
 800fa4e:	3b04      	subs	r3, #4
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	d1ef      	bne.n	800fa34 <quorem+0xe8>
 800fa54:	3c01      	subs	r4, #1
 800fa56:	e7ea      	b.n	800fa2e <quorem+0xe2>
 800fa58:	2000      	movs	r0, #0
 800fa5a:	e7ee      	b.n	800fa3a <quorem+0xee>
 800fa5c:	0000      	movs	r0, r0
	...

0800fa60 <_dtoa_r>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	69c7      	ldr	r7, [r0, #28]
 800fa66:	b099      	sub	sp, #100	@ 0x64
 800fa68:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fa6c:	ec55 4b10 	vmov	r4, r5, d0
 800fa70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fa72:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa74:	4683      	mov	fp, r0
 800fa76:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa7a:	b97f      	cbnz	r7, 800fa9c <_dtoa_r+0x3c>
 800fa7c:	2010      	movs	r0, #16
 800fa7e:	f7fe f849 	bl	800db14 <malloc>
 800fa82:	4602      	mov	r2, r0
 800fa84:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa88:	b920      	cbnz	r0, 800fa94 <_dtoa_r+0x34>
 800fa8a:	4ba7      	ldr	r3, [pc, #668]	@ (800fd28 <_dtoa_r+0x2c8>)
 800fa8c:	21ef      	movs	r1, #239	@ 0xef
 800fa8e:	48a7      	ldr	r0, [pc, #668]	@ (800fd2c <_dtoa_r+0x2cc>)
 800fa90:	f002 f898 	bl	8011bc4 <__assert_func>
 800fa94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa98:	6007      	str	r7, [r0, #0]
 800fa9a:	60c7      	str	r7, [r0, #12]
 800fa9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800faa0:	6819      	ldr	r1, [r3, #0]
 800faa2:	b159      	cbz	r1, 800fabc <_dtoa_r+0x5c>
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	604a      	str	r2, [r1, #4]
 800faa8:	2301      	movs	r3, #1
 800faaa:	4093      	lsls	r3, r2
 800faac:	608b      	str	r3, [r1, #8]
 800faae:	4658      	mov	r0, fp
 800fab0:	f001 f970 	bl	8010d94 <_Bfree>
 800fab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fab8:	2200      	movs	r2, #0
 800faba:	601a      	str	r2, [r3, #0]
 800fabc:	1e2b      	subs	r3, r5, #0
 800fabe:	bfb9      	ittee	lt
 800fac0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fac4:	9303      	strlt	r3, [sp, #12]
 800fac6:	2300      	movge	r3, #0
 800fac8:	6033      	strge	r3, [r6, #0]
 800faca:	9f03      	ldr	r7, [sp, #12]
 800facc:	4b98      	ldr	r3, [pc, #608]	@ (800fd30 <_dtoa_r+0x2d0>)
 800face:	bfbc      	itt	lt
 800fad0:	2201      	movlt	r2, #1
 800fad2:	6032      	strlt	r2, [r6, #0]
 800fad4:	43bb      	bics	r3, r7
 800fad6:	d112      	bne.n	800fafe <_dtoa_r+0x9e>
 800fad8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fada:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fae4:	4323      	orrs	r3, r4
 800fae6:	f000 854d 	beq.w	8010584 <_dtoa_r+0xb24>
 800faea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800faec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fd44 <_dtoa_r+0x2e4>
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 854f 	beq.w	8010594 <_dtoa_r+0xb34>
 800faf6:	f10a 0303 	add.w	r3, sl, #3
 800fafa:	f000 bd49 	b.w	8010590 <_dtoa_r+0xb30>
 800fafe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb02:	2200      	movs	r2, #0
 800fb04:	ec51 0b17 	vmov	r0, r1, d7
 800fb08:	2300      	movs	r3, #0
 800fb0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fb0e:	f7f0 fffb 	bl	8000b08 <__aeabi_dcmpeq>
 800fb12:	4680      	mov	r8, r0
 800fb14:	b158      	cbz	r0, 800fb2e <_dtoa_r+0xce>
 800fb16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fb18:	2301      	movs	r3, #1
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb1e:	b113      	cbz	r3, 800fb26 <_dtoa_r+0xc6>
 800fb20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb22:	4b84      	ldr	r3, [pc, #528]	@ (800fd34 <_dtoa_r+0x2d4>)
 800fb24:	6013      	str	r3, [r2, #0]
 800fb26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fd48 <_dtoa_r+0x2e8>
 800fb2a:	f000 bd33 	b.w	8010594 <_dtoa_r+0xb34>
 800fb2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fb32:	aa16      	add	r2, sp, #88	@ 0x58
 800fb34:	a917      	add	r1, sp, #92	@ 0x5c
 800fb36:	4658      	mov	r0, fp
 800fb38:	f001 fcd0 	bl	80114dc <__d2b>
 800fb3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fb40:	4681      	mov	r9, r0
 800fb42:	2e00      	cmp	r6, #0
 800fb44:	d077      	beq.n	800fc36 <_dtoa_r+0x1d6>
 800fb46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb60:	4619      	mov	r1, r3
 800fb62:	2200      	movs	r2, #0
 800fb64:	4b74      	ldr	r3, [pc, #464]	@ (800fd38 <_dtoa_r+0x2d8>)
 800fb66:	f7f0 fbaf 	bl	80002c8 <__aeabi_dsub>
 800fb6a:	a369      	add	r3, pc, #420	@ (adr r3, 800fd10 <_dtoa_r+0x2b0>)
 800fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb70:	f7f0 fd62 	bl	8000638 <__aeabi_dmul>
 800fb74:	a368      	add	r3, pc, #416	@ (adr r3, 800fd18 <_dtoa_r+0x2b8>)
 800fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7a:	f7f0 fba7 	bl	80002cc <__adddf3>
 800fb7e:	4604      	mov	r4, r0
 800fb80:	4630      	mov	r0, r6
 800fb82:	460d      	mov	r5, r1
 800fb84:	f7f0 fcee 	bl	8000564 <__aeabi_i2d>
 800fb88:	a365      	add	r3, pc, #404	@ (adr r3, 800fd20 <_dtoa_r+0x2c0>)
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	f7f0 fd53 	bl	8000638 <__aeabi_dmul>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	4620      	mov	r0, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	f7f0 fb97 	bl	80002cc <__adddf3>
 800fb9e:	4604      	mov	r4, r0
 800fba0:	460d      	mov	r5, r1
 800fba2:	f7f0 fff9 	bl	8000b98 <__aeabi_d2iz>
 800fba6:	2200      	movs	r2, #0
 800fba8:	4607      	mov	r7, r0
 800fbaa:	2300      	movs	r3, #0
 800fbac:	4620      	mov	r0, r4
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7f0 ffb4 	bl	8000b1c <__aeabi_dcmplt>
 800fbb4:	b140      	cbz	r0, 800fbc8 <_dtoa_r+0x168>
 800fbb6:	4638      	mov	r0, r7
 800fbb8:	f7f0 fcd4 	bl	8000564 <__aeabi_i2d>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	462b      	mov	r3, r5
 800fbc0:	f7f0 ffa2 	bl	8000b08 <__aeabi_dcmpeq>
 800fbc4:	b900      	cbnz	r0, 800fbc8 <_dtoa_r+0x168>
 800fbc6:	3f01      	subs	r7, #1
 800fbc8:	2f16      	cmp	r7, #22
 800fbca:	d851      	bhi.n	800fc70 <_dtoa_r+0x210>
 800fbcc:	4b5b      	ldr	r3, [pc, #364]	@ (800fd3c <_dtoa_r+0x2dc>)
 800fbce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbda:	f7f0 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d048      	beq.n	800fc74 <_dtoa_r+0x214>
 800fbe2:	3f01      	subs	r7, #1
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fbe8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fbea:	1b9b      	subs	r3, r3, r6
 800fbec:	1e5a      	subs	r2, r3, #1
 800fbee:	bf44      	itt	mi
 800fbf0:	f1c3 0801 	rsbmi	r8, r3, #1
 800fbf4:	2300      	movmi	r3, #0
 800fbf6:	9208      	str	r2, [sp, #32]
 800fbf8:	bf54      	ite	pl
 800fbfa:	f04f 0800 	movpl.w	r8, #0
 800fbfe:	9308      	strmi	r3, [sp, #32]
 800fc00:	2f00      	cmp	r7, #0
 800fc02:	db39      	blt.n	800fc78 <_dtoa_r+0x218>
 800fc04:	9b08      	ldr	r3, [sp, #32]
 800fc06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fc08:	443b      	add	r3, r7
 800fc0a:	9308      	str	r3, [sp, #32]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc12:	2b09      	cmp	r3, #9
 800fc14:	d864      	bhi.n	800fce0 <_dtoa_r+0x280>
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	bfc4      	itt	gt
 800fc1a:	3b04      	subgt	r3, #4
 800fc1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc20:	f1a3 0302 	sub.w	r3, r3, #2
 800fc24:	bfcc      	ite	gt
 800fc26:	2400      	movgt	r4, #0
 800fc28:	2401      	movle	r4, #1
 800fc2a:	2b03      	cmp	r3, #3
 800fc2c:	d863      	bhi.n	800fcf6 <_dtoa_r+0x296>
 800fc2e:	e8df f003 	tbb	[pc, r3]
 800fc32:	372a      	.short	0x372a
 800fc34:	5535      	.short	0x5535
 800fc36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fc3a:	441e      	add	r6, r3
 800fc3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc40:	2b20      	cmp	r3, #32
 800fc42:	bfc1      	itttt	gt
 800fc44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc48:	409f      	lslgt	r7, r3
 800fc4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc52:	bfd6      	itet	le
 800fc54:	f1c3 0320 	rsble	r3, r3, #32
 800fc58:	ea47 0003 	orrgt.w	r0, r7, r3
 800fc5c:	fa04 f003 	lslle.w	r0, r4, r3
 800fc60:	f7f0 fc70 	bl	8000544 <__aeabi_ui2d>
 800fc64:	2201      	movs	r2, #1
 800fc66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc6a:	3e01      	subs	r6, #1
 800fc6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fc6e:	e777      	b.n	800fb60 <_dtoa_r+0x100>
 800fc70:	2301      	movs	r3, #1
 800fc72:	e7b8      	b.n	800fbe6 <_dtoa_r+0x186>
 800fc74:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc76:	e7b7      	b.n	800fbe8 <_dtoa_r+0x188>
 800fc78:	427b      	negs	r3, r7
 800fc7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	eba8 0807 	sub.w	r8, r8, r7
 800fc82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc84:	e7c4      	b.n	800fc10 <_dtoa_r+0x1b0>
 800fc86:	2300      	movs	r3, #0
 800fc88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	dc35      	bgt.n	800fcfc <_dtoa_r+0x29c>
 800fc90:	2301      	movs	r3, #1
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	9307      	str	r3, [sp, #28]
 800fc96:	461a      	mov	r2, r3
 800fc98:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc9a:	e00b      	b.n	800fcb4 <_dtoa_r+0x254>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e7f3      	b.n	800fc88 <_dtoa_r+0x228>
 800fca0:	2300      	movs	r3, #0
 800fca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fca6:	18fb      	adds	r3, r7, r3
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	9307      	str	r3, [sp, #28]
 800fcb0:	bfb8      	it	lt
 800fcb2:	2301      	movlt	r3, #1
 800fcb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fcb8:	2100      	movs	r1, #0
 800fcba:	2204      	movs	r2, #4
 800fcbc:	f102 0514 	add.w	r5, r2, #20
 800fcc0:	429d      	cmp	r5, r3
 800fcc2:	d91f      	bls.n	800fd04 <_dtoa_r+0x2a4>
 800fcc4:	6041      	str	r1, [r0, #4]
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f001 f824 	bl	8010d14 <_Balloc>
 800fccc:	4682      	mov	sl, r0
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d13c      	bne.n	800fd4c <_dtoa_r+0x2ec>
 800fcd2:	4b1b      	ldr	r3, [pc, #108]	@ (800fd40 <_dtoa_r+0x2e0>)
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800fcda:	e6d8      	b.n	800fa8e <_dtoa_r+0x2e>
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e7e0      	b.n	800fca2 <_dtoa_r+0x242>
 800fce0:	2401      	movs	r4, #1
 800fce2:	2300      	movs	r3, #0
 800fce4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fce8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	9307      	str	r3, [sp, #28]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	2312      	movs	r3, #18
 800fcf4:	e7d0      	b.n	800fc98 <_dtoa_r+0x238>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcfa:	e7f5      	b.n	800fce8 <_dtoa_r+0x288>
 800fcfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	9307      	str	r3, [sp, #28]
 800fd02:	e7d7      	b.n	800fcb4 <_dtoa_r+0x254>
 800fd04:	3101      	adds	r1, #1
 800fd06:	0052      	lsls	r2, r2, #1
 800fd08:	e7d8      	b.n	800fcbc <_dtoa_r+0x25c>
 800fd0a:	bf00      	nop
 800fd0c:	f3af 8000 	nop.w
 800fd10:	636f4361 	.word	0x636f4361
 800fd14:	3fd287a7 	.word	0x3fd287a7
 800fd18:	8b60c8b3 	.word	0x8b60c8b3
 800fd1c:	3fc68a28 	.word	0x3fc68a28
 800fd20:	509f79fb 	.word	0x509f79fb
 800fd24:	3fd34413 	.word	0x3fd34413
 800fd28:	0801482e 	.word	0x0801482e
 800fd2c:	08014845 	.word	0x08014845
 800fd30:	7ff00000 	.word	0x7ff00000
 800fd34:	080147f1 	.word	0x080147f1
 800fd38:	3ff80000 	.word	0x3ff80000
 800fd3c:	080149a0 	.word	0x080149a0
 800fd40:	0801489d 	.word	0x0801489d
 800fd44:	0801482a 	.word	0x0801482a
 800fd48:	080147f0 	.word	0x080147f0
 800fd4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd50:	6018      	str	r0, [r3, #0]
 800fd52:	9b07      	ldr	r3, [sp, #28]
 800fd54:	2b0e      	cmp	r3, #14
 800fd56:	f200 80a4 	bhi.w	800fea2 <_dtoa_r+0x442>
 800fd5a:	2c00      	cmp	r4, #0
 800fd5c:	f000 80a1 	beq.w	800fea2 <_dtoa_r+0x442>
 800fd60:	2f00      	cmp	r7, #0
 800fd62:	dd33      	ble.n	800fdcc <_dtoa_r+0x36c>
 800fd64:	4bad      	ldr	r3, [pc, #692]	@ (801001c <_dtoa_r+0x5bc>)
 800fd66:	f007 020f 	and.w	r2, r7, #15
 800fd6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd6e:	ed93 7b00 	vldr	d7, [r3]
 800fd72:	05f8      	lsls	r0, r7, #23
 800fd74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd7c:	d516      	bpl.n	800fdac <_dtoa_r+0x34c>
 800fd7e:	4ba8      	ldr	r3, [pc, #672]	@ (8010020 <_dtoa_r+0x5c0>)
 800fd80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd88:	f7f0 fd80 	bl	800088c <__aeabi_ddiv>
 800fd8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd90:	f004 040f 	and.w	r4, r4, #15
 800fd94:	2603      	movs	r6, #3
 800fd96:	4da2      	ldr	r5, [pc, #648]	@ (8010020 <_dtoa_r+0x5c0>)
 800fd98:	b954      	cbnz	r4, 800fdb0 <_dtoa_r+0x350>
 800fd9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fda2:	f7f0 fd73 	bl	800088c <__aeabi_ddiv>
 800fda6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdaa:	e028      	b.n	800fdfe <_dtoa_r+0x39e>
 800fdac:	2602      	movs	r6, #2
 800fdae:	e7f2      	b.n	800fd96 <_dtoa_r+0x336>
 800fdb0:	07e1      	lsls	r1, r4, #31
 800fdb2:	d508      	bpl.n	800fdc6 <_dtoa_r+0x366>
 800fdb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fdbc:	f7f0 fc3c 	bl	8000638 <__aeabi_dmul>
 800fdc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdc4:	3601      	adds	r6, #1
 800fdc6:	1064      	asrs	r4, r4, #1
 800fdc8:	3508      	adds	r5, #8
 800fdca:	e7e5      	b.n	800fd98 <_dtoa_r+0x338>
 800fdcc:	f000 80d2 	beq.w	800ff74 <_dtoa_r+0x514>
 800fdd0:	427c      	negs	r4, r7
 800fdd2:	4b92      	ldr	r3, [pc, #584]	@ (801001c <_dtoa_r+0x5bc>)
 800fdd4:	4d92      	ldr	r5, [pc, #584]	@ (8010020 <_dtoa_r+0x5c0>)
 800fdd6:	f004 020f 	and.w	r2, r4, #15
 800fdda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fde6:	f7f0 fc27 	bl	8000638 <__aeabi_dmul>
 800fdea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdee:	1124      	asrs	r4, r4, #4
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	2602      	movs	r6, #2
 800fdf4:	2c00      	cmp	r4, #0
 800fdf6:	f040 80b2 	bne.w	800ff5e <_dtoa_r+0x4fe>
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1d3      	bne.n	800fda6 <_dtoa_r+0x346>
 800fdfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80b7 	beq.w	800ff78 <_dtoa_r+0x518>
 800fe0a:	4b86      	ldr	r3, [pc, #536]	@ (8010024 <_dtoa_r+0x5c4>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4620      	mov	r0, r4
 800fe10:	4629      	mov	r1, r5
 800fe12:	f7f0 fe83 	bl	8000b1c <__aeabi_dcmplt>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f000 80ae 	beq.w	800ff78 <_dtoa_r+0x518>
 800fe1c:	9b07      	ldr	r3, [sp, #28]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f000 80aa 	beq.w	800ff78 <_dtoa_r+0x518>
 800fe24:	9b00      	ldr	r3, [sp, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	dd37      	ble.n	800fe9a <_dtoa_r+0x43a>
 800fe2a:	1e7b      	subs	r3, r7, #1
 800fe2c:	9304      	str	r3, [sp, #16]
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4b7d      	ldr	r3, [pc, #500]	@ (8010028 <_dtoa_r+0x5c8>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	4629      	mov	r1, r5
 800fe36:	f7f0 fbff 	bl	8000638 <__aeabi_dmul>
 800fe3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe3e:	9c00      	ldr	r4, [sp, #0]
 800fe40:	3601      	adds	r6, #1
 800fe42:	4630      	mov	r0, r6
 800fe44:	f7f0 fb8e 	bl	8000564 <__aeabi_i2d>
 800fe48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe4c:	f7f0 fbf4 	bl	8000638 <__aeabi_dmul>
 800fe50:	4b76      	ldr	r3, [pc, #472]	@ (801002c <_dtoa_r+0x5cc>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	f7f0 fa3a 	bl	80002cc <__adddf3>
 800fe58:	4605      	mov	r5, r0
 800fe5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe5e:	2c00      	cmp	r4, #0
 800fe60:	f040 808d 	bne.w	800ff7e <_dtoa_r+0x51e>
 800fe64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe68:	4b71      	ldr	r3, [pc, #452]	@ (8010030 <_dtoa_r+0x5d0>)
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f7f0 fa2c 	bl	80002c8 <__aeabi_dsub>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4633      	mov	r3, r6
 800fe7c:	f7f0 fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	f040 828b 	bne.w	801039c <_dtoa_r+0x93c>
 800fe86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe8a:	462a      	mov	r2, r5
 800fe8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe90:	f7f0 fe44 	bl	8000b1c <__aeabi_dcmplt>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	f040 8128 	bne.w	80100ea <_dtoa_r+0x68a>
 800fe9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fea2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f2c0 815a 	blt.w	801015e <_dtoa_r+0x6fe>
 800feaa:	2f0e      	cmp	r7, #14
 800feac:	f300 8157 	bgt.w	801015e <_dtoa_r+0x6fe>
 800feb0:	4b5a      	ldr	r3, [pc, #360]	@ (801001c <_dtoa_r+0x5bc>)
 800feb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800feb6:	ed93 7b00 	vldr	d7, [r3]
 800feba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800febc:	2b00      	cmp	r3, #0
 800febe:	ed8d 7b00 	vstr	d7, [sp]
 800fec2:	da03      	bge.n	800fecc <_dtoa_r+0x46c>
 800fec4:	9b07      	ldr	r3, [sp, #28]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f340 8101 	ble.w	80100ce <_dtoa_r+0x66e>
 800fecc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fed0:	4656      	mov	r6, sl
 800fed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fed6:	4620      	mov	r0, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	f7f0 fcd7 	bl	800088c <__aeabi_ddiv>
 800fede:	f7f0 fe5b 	bl	8000b98 <__aeabi_d2iz>
 800fee2:	4680      	mov	r8, r0
 800fee4:	f7f0 fb3e 	bl	8000564 <__aeabi_i2d>
 800fee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feec:	f7f0 fba4 	bl	8000638 <__aeabi_dmul>
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	4620      	mov	r0, r4
 800fef6:	4629      	mov	r1, r5
 800fef8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fefc:	f7f0 f9e4 	bl	80002c8 <__aeabi_dsub>
 800ff00:	f806 4b01 	strb.w	r4, [r6], #1
 800ff04:	9d07      	ldr	r5, [sp, #28]
 800ff06:	eba6 040a 	sub.w	r4, r6, sl
 800ff0a:	42a5      	cmp	r5, r4
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	f040 8117 	bne.w	8010142 <_dtoa_r+0x6e2>
 800ff14:	f7f0 f9da 	bl	80002cc <__adddf3>
 800ff18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	460d      	mov	r5, r1
 800ff20:	f7f0 fe1a 	bl	8000b58 <__aeabi_dcmpgt>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	f040 80f9 	bne.w	801011c <_dtoa_r+0x6bc>
 800ff2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 fde9 	bl	8000b08 <__aeabi_dcmpeq>
 800ff36:	b118      	cbz	r0, 800ff40 <_dtoa_r+0x4e0>
 800ff38:	f018 0f01 	tst.w	r8, #1
 800ff3c:	f040 80ee 	bne.w	801011c <_dtoa_r+0x6bc>
 800ff40:	4649      	mov	r1, r9
 800ff42:	4658      	mov	r0, fp
 800ff44:	f000 ff26 	bl	8010d94 <_Bfree>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	7033      	strb	r3, [r6, #0]
 800ff4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff4e:	3701      	adds	r7, #1
 800ff50:	601f      	str	r7, [r3, #0]
 800ff52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f000 831d 	beq.w	8010594 <_dtoa_r+0xb34>
 800ff5a:	601e      	str	r6, [r3, #0]
 800ff5c:	e31a      	b.n	8010594 <_dtoa_r+0xb34>
 800ff5e:	07e2      	lsls	r2, r4, #31
 800ff60:	d505      	bpl.n	800ff6e <_dtoa_r+0x50e>
 800ff62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff66:	f7f0 fb67 	bl	8000638 <__aeabi_dmul>
 800ff6a:	3601      	adds	r6, #1
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	1064      	asrs	r4, r4, #1
 800ff70:	3508      	adds	r5, #8
 800ff72:	e73f      	b.n	800fdf4 <_dtoa_r+0x394>
 800ff74:	2602      	movs	r6, #2
 800ff76:	e742      	b.n	800fdfe <_dtoa_r+0x39e>
 800ff78:	9c07      	ldr	r4, [sp, #28]
 800ff7a:	9704      	str	r7, [sp, #16]
 800ff7c:	e761      	b.n	800fe42 <_dtoa_r+0x3e2>
 800ff7e:	4b27      	ldr	r3, [pc, #156]	@ (801001c <_dtoa_r+0x5bc>)
 800ff80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff8a:	4454      	add	r4, sl
 800ff8c:	2900      	cmp	r1, #0
 800ff8e:	d053      	beq.n	8010038 <_dtoa_r+0x5d8>
 800ff90:	4928      	ldr	r1, [pc, #160]	@ (8010034 <_dtoa_r+0x5d4>)
 800ff92:	2000      	movs	r0, #0
 800ff94:	f7f0 fc7a 	bl	800088c <__aeabi_ddiv>
 800ff98:	4633      	mov	r3, r6
 800ff9a:	462a      	mov	r2, r5
 800ff9c:	f7f0 f994 	bl	80002c8 <__aeabi_dsub>
 800ffa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffa4:	4656      	mov	r6, sl
 800ffa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffaa:	f7f0 fdf5 	bl	8000b98 <__aeabi_d2iz>
 800ffae:	4605      	mov	r5, r0
 800ffb0:	f7f0 fad8 	bl	8000564 <__aeabi_i2d>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffbc:	f7f0 f984 	bl	80002c8 <__aeabi_dsub>
 800ffc0:	3530      	adds	r5, #48	@ 0x30
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffca:	f806 5b01 	strb.w	r5, [r6], #1
 800ffce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffd2:	f7f0 fda3 	bl	8000b1c <__aeabi_dcmplt>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d171      	bne.n	80100be <_dtoa_r+0x65e>
 800ffda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffde:	4911      	ldr	r1, [pc, #68]	@ (8010024 <_dtoa_r+0x5c4>)
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	f7f0 f971 	bl	80002c8 <__aeabi_dsub>
 800ffe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffea:	f7f0 fd97 	bl	8000b1c <__aeabi_dcmplt>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	f040 8095 	bne.w	801011e <_dtoa_r+0x6be>
 800fff4:	42a6      	cmp	r6, r4
 800fff6:	f43f af50 	beq.w	800fe9a <_dtoa_r+0x43a>
 800fffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fffe:	4b0a      	ldr	r3, [pc, #40]	@ (8010028 <_dtoa_r+0x5c8>)
 8010000:	2200      	movs	r2, #0
 8010002:	f7f0 fb19 	bl	8000638 <__aeabi_dmul>
 8010006:	4b08      	ldr	r3, [pc, #32]	@ (8010028 <_dtoa_r+0x5c8>)
 8010008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801000c:	2200      	movs	r2, #0
 801000e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010012:	f7f0 fb11 	bl	8000638 <__aeabi_dmul>
 8010016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801001a:	e7c4      	b.n	800ffa6 <_dtoa_r+0x546>
 801001c:	080149a0 	.word	0x080149a0
 8010020:	08014978 	.word	0x08014978
 8010024:	3ff00000 	.word	0x3ff00000
 8010028:	40240000 	.word	0x40240000
 801002c:	401c0000 	.word	0x401c0000
 8010030:	40140000 	.word	0x40140000
 8010034:	3fe00000 	.word	0x3fe00000
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	f7f0 fafc 	bl	8000638 <__aeabi_dmul>
 8010040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010044:	9415      	str	r4, [sp, #84]	@ 0x54
 8010046:	4656      	mov	r6, sl
 8010048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801004c:	f7f0 fda4 	bl	8000b98 <__aeabi_d2iz>
 8010050:	4605      	mov	r5, r0
 8010052:	f7f0 fa87 	bl	8000564 <__aeabi_i2d>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801005e:	f7f0 f933 	bl	80002c8 <__aeabi_dsub>
 8010062:	3530      	adds	r5, #48	@ 0x30
 8010064:	f806 5b01 	strb.w	r5, [r6], #1
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	42a6      	cmp	r6, r4
 801006e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010072:	f04f 0200 	mov.w	r2, #0
 8010076:	d124      	bne.n	80100c2 <_dtoa_r+0x662>
 8010078:	4bac      	ldr	r3, [pc, #688]	@ (801032c <_dtoa_r+0x8cc>)
 801007a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801007e:	f7f0 f925 	bl	80002cc <__adddf3>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801008a:	f7f0 fd65 	bl	8000b58 <__aeabi_dcmpgt>
 801008e:	2800      	cmp	r0, #0
 8010090:	d145      	bne.n	801011e <_dtoa_r+0x6be>
 8010092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010096:	49a5      	ldr	r1, [pc, #660]	@ (801032c <_dtoa_r+0x8cc>)
 8010098:	2000      	movs	r0, #0
 801009a:	f7f0 f915 	bl	80002c8 <__aeabi_dsub>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100a6:	f7f0 fd39 	bl	8000b1c <__aeabi_dcmplt>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	f43f aef5 	beq.w	800fe9a <_dtoa_r+0x43a>
 80100b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80100b2:	1e73      	subs	r3, r6, #1
 80100b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80100b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100ba:	2b30      	cmp	r3, #48	@ 0x30
 80100bc:	d0f8      	beq.n	80100b0 <_dtoa_r+0x650>
 80100be:	9f04      	ldr	r7, [sp, #16]
 80100c0:	e73e      	b.n	800ff40 <_dtoa_r+0x4e0>
 80100c2:	4b9b      	ldr	r3, [pc, #620]	@ (8010330 <_dtoa_r+0x8d0>)
 80100c4:	f7f0 fab8 	bl	8000638 <__aeabi_dmul>
 80100c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100cc:	e7bc      	b.n	8010048 <_dtoa_r+0x5e8>
 80100ce:	d10c      	bne.n	80100ea <_dtoa_r+0x68a>
 80100d0:	4b98      	ldr	r3, [pc, #608]	@ (8010334 <_dtoa_r+0x8d4>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100d8:	f7f0 faae 	bl	8000638 <__aeabi_dmul>
 80100dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100e0:	f7f0 fd30 	bl	8000b44 <__aeabi_dcmpge>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f000 8157 	beq.w	8010398 <_dtoa_r+0x938>
 80100ea:	2400      	movs	r4, #0
 80100ec:	4625      	mov	r5, r4
 80100ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100f0:	43db      	mvns	r3, r3
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	4656      	mov	r6, sl
 80100f6:	2700      	movs	r7, #0
 80100f8:	4621      	mov	r1, r4
 80100fa:	4658      	mov	r0, fp
 80100fc:	f000 fe4a 	bl	8010d94 <_Bfree>
 8010100:	2d00      	cmp	r5, #0
 8010102:	d0dc      	beq.n	80100be <_dtoa_r+0x65e>
 8010104:	b12f      	cbz	r7, 8010112 <_dtoa_r+0x6b2>
 8010106:	42af      	cmp	r7, r5
 8010108:	d003      	beq.n	8010112 <_dtoa_r+0x6b2>
 801010a:	4639      	mov	r1, r7
 801010c:	4658      	mov	r0, fp
 801010e:	f000 fe41 	bl	8010d94 <_Bfree>
 8010112:	4629      	mov	r1, r5
 8010114:	4658      	mov	r0, fp
 8010116:	f000 fe3d 	bl	8010d94 <_Bfree>
 801011a:	e7d0      	b.n	80100be <_dtoa_r+0x65e>
 801011c:	9704      	str	r7, [sp, #16]
 801011e:	4633      	mov	r3, r6
 8010120:	461e      	mov	r6, r3
 8010122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010126:	2a39      	cmp	r2, #57	@ 0x39
 8010128:	d107      	bne.n	801013a <_dtoa_r+0x6da>
 801012a:	459a      	cmp	sl, r3
 801012c:	d1f8      	bne.n	8010120 <_dtoa_r+0x6c0>
 801012e:	9a04      	ldr	r2, [sp, #16]
 8010130:	3201      	adds	r2, #1
 8010132:	9204      	str	r2, [sp, #16]
 8010134:	2230      	movs	r2, #48	@ 0x30
 8010136:	f88a 2000 	strb.w	r2, [sl]
 801013a:	781a      	ldrb	r2, [r3, #0]
 801013c:	3201      	adds	r2, #1
 801013e:	701a      	strb	r2, [r3, #0]
 8010140:	e7bd      	b.n	80100be <_dtoa_r+0x65e>
 8010142:	4b7b      	ldr	r3, [pc, #492]	@ (8010330 <_dtoa_r+0x8d0>)
 8010144:	2200      	movs	r2, #0
 8010146:	f7f0 fa77 	bl	8000638 <__aeabi_dmul>
 801014a:	2200      	movs	r2, #0
 801014c:	2300      	movs	r3, #0
 801014e:	4604      	mov	r4, r0
 8010150:	460d      	mov	r5, r1
 8010152:	f7f0 fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 8010156:	2800      	cmp	r0, #0
 8010158:	f43f aebb 	beq.w	800fed2 <_dtoa_r+0x472>
 801015c:	e6f0      	b.n	800ff40 <_dtoa_r+0x4e0>
 801015e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010160:	2a00      	cmp	r2, #0
 8010162:	f000 80db 	beq.w	801031c <_dtoa_r+0x8bc>
 8010166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010168:	2a01      	cmp	r2, #1
 801016a:	f300 80bf 	bgt.w	80102ec <_dtoa_r+0x88c>
 801016e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010170:	2a00      	cmp	r2, #0
 8010172:	f000 80b7 	beq.w	80102e4 <_dtoa_r+0x884>
 8010176:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801017a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801017c:	4646      	mov	r6, r8
 801017e:	9a08      	ldr	r2, [sp, #32]
 8010180:	2101      	movs	r1, #1
 8010182:	441a      	add	r2, r3
 8010184:	4658      	mov	r0, fp
 8010186:	4498      	add	r8, r3
 8010188:	9208      	str	r2, [sp, #32]
 801018a:	f000 ff01 	bl	8010f90 <__i2b>
 801018e:	4605      	mov	r5, r0
 8010190:	b15e      	cbz	r6, 80101aa <_dtoa_r+0x74a>
 8010192:	9b08      	ldr	r3, [sp, #32]
 8010194:	2b00      	cmp	r3, #0
 8010196:	dd08      	ble.n	80101aa <_dtoa_r+0x74a>
 8010198:	42b3      	cmp	r3, r6
 801019a:	9a08      	ldr	r2, [sp, #32]
 801019c:	bfa8      	it	ge
 801019e:	4633      	movge	r3, r6
 80101a0:	eba8 0803 	sub.w	r8, r8, r3
 80101a4:	1af6      	subs	r6, r6, r3
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	9308      	str	r3, [sp, #32]
 80101aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101ac:	b1f3      	cbz	r3, 80101ec <_dtoa_r+0x78c>
 80101ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 80b7 	beq.w	8010324 <_dtoa_r+0x8c4>
 80101b6:	b18c      	cbz	r4, 80101dc <_dtoa_r+0x77c>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4622      	mov	r2, r4
 80101bc:	4658      	mov	r0, fp
 80101be:	f000 ffa7 	bl	8011110 <__pow5mult>
 80101c2:	464a      	mov	r2, r9
 80101c4:	4601      	mov	r1, r0
 80101c6:	4605      	mov	r5, r0
 80101c8:	4658      	mov	r0, fp
 80101ca:	f000 fef7 	bl	8010fbc <__multiply>
 80101ce:	4649      	mov	r1, r9
 80101d0:	9004      	str	r0, [sp, #16]
 80101d2:	4658      	mov	r0, fp
 80101d4:	f000 fdde 	bl	8010d94 <_Bfree>
 80101d8:	9b04      	ldr	r3, [sp, #16]
 80101da:	4699      	mov	r9, r3
 80101dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101de:	1b1a      	subs	r2, r3, r4
 80101e0:	d004      	beq.n	80101ec <_dtoa_r+0x78c>
 80101e2:	4649      	mov	r1, r9
 80101e4:	4658      	mov	r0, fp
 80101e6:	f000 ff93 	bl	8011110 <__pow5mult>
 80101ea:	4681      	mov	r9, r0
 80101ec:	2101      	movs	r1, #1
 80101ee:	4658      	mov	r0, fp
 80101f0:	f000 fece 	bl	8010f90 <__i2b>
 80101f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101f6:	4604      	mov	r4, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 81cf 	beq.w	801059c <_dtoa_r+0xb3c>
 80101fe:	461a      	mov	r2, r3
 8010200:	4601      	mov	r1, r0
 8010202:	4658      	mov	r0, fp
 8010204:	f000 ff84 	bl	8011110 <__pow5mult>
 8010208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801020a:	2b01      	cmp	r3, #1
 801020c:	4604      	mov	r4, r0
 801020e:	f300 8095 	bgt.w	801033c <_dtoa_r+0x8dc>
 8010212:	9b02      	ldr	r3, [sp, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	f040 8087 	bne.w	8010328 <_dtoa_r+0x8c8>
 801021a:	9b03      	ldr	r3, [sp, #12]
 801021c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010220:	2b00      	cmp	r3, #0
 8010222:	f040 8089 	bne.w	8010338 <_dtoa_r+0x8d8>
 8010226:	9b03      	ldr	r3, [sp, #12]
 8010228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801022c:	0d1b      	lsrs	r3, r3, #20
 801022e:	051b      	lsls	r3, r3, #20
 8010230:	b12b      	cbz	r3, 801023e <_dtoa_r+0x7de>
 8010232:	9b08      	ldr	r3, [sp, #32]
 8010234:	3301      	adds	r3, #1
 8010236:	9308      	str	r3, [sp, #32]
 8010238:	f108 0801 	add.w	r8, r8, #1
 801023c:	2301      	movs	r3, #1
 801023e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 81b0 	beq.w	80105a8 <_dtoa_r+0xb48>
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801024e:	6918      	ldr	r0, [r3, #16]
 8010250:	f000 fe52 	bl	8010ef8 <__hi0bits>
 8010254:	f1c0 0020 	rsb	r0, r0, #32
 8010258:	9b08      	ldr	r3, [sp, #32]
 801025a:	4418      	add	r0, r3
 801025c:	f010 001f 	ands.w	r0, r0, #31
 8010260:	d077      	beq.n	8010352 <_dtoa_r+0x8f2>
 8010262:	f1c0 0320 	rsb	r3, r0, #32
 8010266:	2b04      	cmp	r3, #4
 8010268:	dd6b      	ble.n	8010342 <_dtoa_r+0x8e2>
 801026a:	9b08      	ldr	r3, [sp, #32]
 801026c:	f1c0 001c 	rsb	r0, r0, #28
 8010270:	4403      	add	r3, r0
 8010272:	4480      	add	r8, r0
 8010274:	4406      	add	r6, r0
 8010276:	9308      	str	r3, [sp, #32]
 8010278:	f1b8 0f00 	cmp.w	r8, #0
 801027c:	dd05      	ble.n	801028a <_dtoa_r+0x82a>
 801027e:	4649      	mov	r1, r9
 8010280:	4642      	mov	r2, r8
 8010282:	4658      	mov	r0, fp
 8010284:	f000 ff9e 	bl	80111c4 <__lshift>
 8010288:	4681      	mov	r9, r0
 801028a:	9b08      	ldr	r3, [sp, #32]
 801028c:	2b00      	cmp	r3, #0
 801028e:	dd05      	ble.n	801029c <_dtoa_r+0x83c>
 8010290:	4621      	mov	r1, r4
 8010292:	461a      	mov	r2, r3
 8010294:	4658      	mov	r0, fp
 8010296:	f000 ff95 	bl	80111c4 <__lshift>
 801029a:	4604      	mov	r4, r0
 801029c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d059      	beq.n	8010356 <_dtoa_r+0x8f6>
 80102a2:	4621      	mov	r1, r4
 80102a4:	4648      	mov	r0, r9
 80102a6:	f000 fff9 	bl	801129c <__mcmp>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	da53      	bge.n	8010356 <_dtoa_r+0x8f6>
 80102ae:	1e7b      	subs	r3, r7, #1
 80102b0:	9304      	str	r3, [sp, #16]
 80102b2:	4649      	mov	r1, r9
 80102b4:	2300      	movs	r3, #0
 80102b6:	220a      	movs	r2, #10
 80102b8:	4658      	mov	r0, fp
 80102ba:	f000 fd8d 	bl	8010dd8 <__multadd>
 80102be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102c0:	4681      	mov	r9, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 8172 	beq.w	80105ac <_dtoa_r+0xb4c>
 80102c8:	2300      	movs	r3, #0
 80102ca:	4629      	mov	r1, r5
 80102cc:	220a      	movs	r2, #10
 80102ce:	4658      	mov	r0, fp
 80102d0:	f000 fd82 	bl	8010dd8 <__multadd>
 80102d4:	9b00      	ldr	r3, [sp, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	4605      	mov	r5, r0
 80102da:	dc67      	bgt.n	80103ac <_dtoa_r+0x94c>
 80102dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102de:	2b02      	cmp	r3, #2
 80102e0:	dc41      	bgt.n	8010366 <_dtoa_r+0x906>
 80102e2:	e063      	b.n	80103ac <_dtoa_r+0x94c>
 80102e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80102ea:	e746      	b.n	801017a <_dtoa_r+0x71a>
 80102ec:	9b07      	ldr	r3, [sp, #28]
 80102ee:	1e5c      	subs	r4, r3, #1
 80102f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	bfbf      	itttt	lt
 80102f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80102f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80102fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80102fc:	1ae3      	sublt	r3, r4, r3
 80102fe:	bfb4      	ite	lt
 8010300:	18d2      	addlt	r2, r2, r3
 8010302:	1b1c      	subge	r4, r3, r4
 8010304:	9b07      	ldr	r3, [sp, #28]
 8010306:	bfbc      	itt	lt
 8010308:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801030a:	2400      	movlt	r4, #0
 801030c:	2b00      	cmp	r3, #0
 801030e:	bfb5      	itete	lt
 8010310:	eba8 0603 	sublt.w	r6, r8, r3
 8010314:	9b07      	ldrge	r3, [sp, #28]
 8010316:	2300      	movlt	r3, #0
 8010318:	4646      	movge	r6, r8
 801031a:	e730      	b.n	801017e <_dtoa_r+0x71e>
 801031c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801031e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010320:	4646      	mov	r6, r8
 8010322:	e735      	b.n	8010190 <_dtoa_r+0x730>
 8010324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010326:	e75c      	b.n	80101e2 <_dtoa_r+0x782>
 8010328:	2300      	movs	r3, #0
 801032a:	e788      	b.n	801023e <_dtoa_r+0x7de>
 801032c:	3fe00000 	.word	0x3fe00000
 8010330:	40240000 	.word	0x40240000
 8010334:	40140000 	.word	0x40140000
 8010338:	9b02      	ldr	r3, [sp, #8]
 801033a:	e780      	b.n	801023e <_dtoa_r+0x7de>
 801033c:	2300      	movs	r3, #0
 801033e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010340:	e782      	b.n	8010248 <_dtoa_r+0x7e8>
 8010342:	d099      	beq.n	8010278 <_dtoa_r+0x818>
 8010344:	9a08      	ldr	r2, [sp, #32]
 8010346:	331c      	adds	r3, #28
 8010348:	441a      	add	r2, r3
 801034a:	4498      	add	r8, r3
 801034c:	441e      	add	r6, r3
 801034e:	9208      	str	r2, [sp, #32]
 8010350:	e792      	b.n	8010278 <_dtoa_r+0x818>
 8010352:	4603      	mov	r3, r0
 8010354:	e7f6      	b.n	8010344 <_dtoa_r+0x8e4>
 8010356:	9b07      	ldr	r3, [sp, #28]
 8010358:	9704      	str	r7, [sp, #16]
 801035a:	2b00      	cmp	r3, #0
 801035c:	dc20      	bgt.n	80103a0 <_dtoa_r+0x940>
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010362:	2b02      	cmp	r3, #2
 8010364:	dd1e      	ble.n	80103a4 <_dtoa_r+0x944>
 8010366:	9b00      	ldr	r3, [sp, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f47f aec0 	bne.w	80100ee <_dtoa_r+0x68e>
 801036e:	4621      	mov	r1, r4
 8010370:	2205      	movs	r2, #5
 8010372:	4658      	mov	r0, fp
 8010374:	f000 fd30 	bl	8010dd8 <__multadd>
 8010378:	4601      	mov	r1, r0
 801037a:	4604      	mov	r4, r0
 801037c:	4648      	mov	r0, r9
 801037e:	f000 ff8d 	bl	801129c <__mcmp>
 8010382:	2800      	cmp	r0, #0
 8010384:	f77f aeb3 	ble.w	80100ee <_dtoa_r+0x68e>
 8010388:	4656      	mov	r6, sl
 801038a:	2331      	movs	r3, #49	@ 0x31
 801038c:	f806 3b01 	strb.w	r3, [r6], #1
 8010390:	9b04      	ldr	r3, [sp, #16]
 8010392:	3301      	adds	r3, #1
 8010394:	9304      	str	r3, [sp, #16]
 8010396:	e6ae      	b.n	80100f6 <_dtoa_r+0x696>
 8010398:	9c07      	ldr	r4, [sp, #28]
 801039a:	9704      	str	r7, [sp, #16]
 801039c:	4625      	mov	r5, r4
 801039e:	e7f3      	b.n	8010388 <_dtoa_r+0x928>
 80103a0:	9b07      	ldr	r3, [sp, #28]
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f000 8104 	beq.w	80105b4 <_dtoa_r+0xb54>
 80103ac:	2e00      	cmp	r6, #0
 80103ae:	dd05      	ble.n	80103bc <_dtoa_r+0x95c>
 80103b0:	4629      	mov	r1, r5
 80103b2:	4632      	mov	r2, r6
 80103b4:	4658      	mov	r0, fp
 80103b6:	f000 ff05 	bl	80111c4 <__lshift>
 80103ba:	4605      	mov	r5, r0
 80103bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d05a      	beq.n	8010478 <_dtoa_r+0xa18>
 80103c2:	6869      	ldr	r1, [r5, #4]
 80103c4:	4658      	mov	r0, fp
 80103c6:	f000 fca5 	bl	8010d14 <_Balloc>
 80103ca:	4606      	mov	r6, r0
 80103cc:	b928      	cbnz	r0, 80103da <_dtoa_r+0x97a>
 80103ce:	4b84      	ldr	r3, [pc, #528]	@ (80105e0 <_dtoa_r+0xb80>)
 80103d0:	4602      	mov	r2, r0
 80103d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103d6:	f7ff bb5a 	b.w	800fa8e <_dtoa_r+0x2e>
 80103da:	692a      	ldr	r2, [r5, #16]
 80103dc:	3202      	adds	r2, #2
 80103de:	0092      	lsls	r2, r2, #2
 80103e0:	f105 010c 	add.w	r1, r5, #12
 80103e4:	300c      	adds	r0, #12
 80103e6:	f7ff fa94 	bl	800f912 <memcpy>
 80103ea:	2201      	movs	r2, #1
 80103ec:	4631      	mov	r1, r6
 80103ee:	4658      	mov	r0, fp
 80103f0:	f000 fee8 	bl	80111c4 <__lshift>
 80103f4:	f10a 0301 	add.w	r3, sl, #1
 80103f8:	9307      	str	r3, [sp, #28]
 80103fa:	9b00      	ldr	r3, [sp, #0]
 80103fc:	4453      	add	r3, sl
 80103fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010400:	9b02      	ldr	r3, [sp, #8]
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	462f      	mov	r7, r5
 8010408:	930a      	str	r3, [sp, #40]	@ 0x28
 801040a:	4605      	mov	r5, r0
 801040c:	9b07      	ldr	r3, [sp, #28]
 801040e:	4621      	mov	r1, r4
 8010410:	3b01      	subs	r3, #1
 8010412:	4648      	mov	r0, r9
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	f7ff fa99 	bl	800f94c <quorem>
 801041a:	4639      	mov	r1, r7
 801041c:	9002      	str	r0, [sp, #8]
 801041e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010422:	4648      	mov	r0, r9
 8010424:	f000 ff3a 	bl	801129c <__mcmp>
 8010428:	462a      	mov	r2, r5
 801042a:	9008      	str	r0, [sp, #32]
 801042c:	4621      	mov	r1, r4
 801042e:	4658      	mov	r0, fp
 8010430:	f000 ff50 	bl	80112d4 <__mdiff>
 8010434:	68c2      	ldr	r2, [r0, #12]
 8010436:	4606      	mov	r6, r0
 8010438:	bb02      	cbnz	r2, 801047c <_dtoa_r+0xa1c>
 801043a:	4601      	mov	r1, r0
 801043c:	4648      	mov	r0, r9
 801043e:	f000 ff2d 	bl	801129c <__mcmp>
 8010442:	4602      	mov	r2, r0
 8010444:	4631      	mov	r1, r6
 8010446:	4658      	mov	r0, fp
 8010448:	920e      	str	r2, [sp, #56]	@ 0x38
 801044a:	f000 fca3 	bl	8010d94 <_Bfree>
 801044e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010450:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010452:	9e07      	ldr	r6, [sp, #28]
 8010454:	ea43 0102 	orr.w	r1, r3, r2
 8010458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801045a:	4319      	orrs	r1, r3
 801045c:	d110      	bne.n	8010480 <_dtoa_r+0xa20>
 801045e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010462:	d029      	beq.n	80104b8 <_dtoa_r+0xa58>
 8010464:	9b08      	ldr	r3, [sp, #32]
 8010466:	2b00      	cmp	r3, #0
 8010468:	dd02      	ble.n	8010470 <_dtoa_r+0xa10>
 801046a:	9b02      	ldr	r3, [sp, #8]
 801046c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010470:	9b00      	ldr	r3, [sp, #0]
 8010472:	f883 8000 	strb.w	r8, [r3]
 8010476:	e63f      	b.n	80100f8 <_dtoa_r+0x698>
 8010478:	4628      	mov	r0, r5
 801047a:	e7bb      	b.n	80103f4 <_dtoa_r+0x994>
 801047c:	2201      	movs	r2, #1
 801047e:	e7e1      	b.n	8010444 <_dtoa_r+0x9e4>
 8010480:	9b08      	ldr	r3, [sp, #32]
 8010482:	2b00      	cmp	r3, #0
 8010484:	db04      	blt.n	8010490 <_dtoa_r+0xa30>
 8010486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010488:	430b      	orrs	r3, r1
 801048a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801048c:	430b      	orrs	r3, r1
 801048e:	d120      	bne.n	80104d2 <_dtoa_r+0xa72>
 8010490:	2a00      	cmp	r2, #0
 8010492:	dded      	ble.n	8010470 <_dtoa_r+0xa10>
 8010494:	4649      	mov	r1, r9
 8010496:	2201      	movs	r2, #1
 8010498:	4658      	mov	r0, fp
 801049a:	f000 fe93 	bl	80111c4 <__lshift>
 801049e:	4621      	mov	r1, r4
 80104a0:	4681      	mov	r9, r0
 80104a2:	f000 fefb 	bl	801129c <__mcmp>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	dc03      	bgt.n	80104b2 <_dtoa_r+0xa52>
 80104aa:	d1e1      	bne.n	8010470 <_dtoa_r+0xa10>
 80104ac:	f018 0f01 	tst.w	r8, #1
 80104b0:	d0de      	beq.n	8010470 <_dtoa_r+0xa10>
 80104b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104b6:	d1d8      	bne.n	801046a <_dtoa_r+0xa0a>
 80104b8:	9a00      	ldr	r2, [sp, #0]
 80104ba:	2339      	movs	r3, #57	@ 0x39
 80104bc:	7013      	strb	r3, [r2, #0]
 80104be:	4633      	mov	r3, r6
 80104c0:	461e      	mov	r6, r3
 80104c2:	3b01      	subs	r3, #1
 80104c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104c8:	2a39      	cmp	r2, #57	@ 0x39
 80104ca:	d052      	beq.n	8010572 <_dtoa_r+0xb12>
 80104cc:	3201      	adds	r2, #1
 80104ce:	701a      	strb	r2, [r3, #0]
 80104d0:	e612      	b.n	80100f8 <_dtoa_r+0x698>
 80104d2:	2a00      	cmp	r2, #0
 80104d4:	dd07      	ble.n	80104e6 <_dtoa_r+0xa86>
 80104d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104da:	d0ed      	beq.n	80104b8 <_dtoa_r+0xa58>
 80104dc:	9a00      	ldr	r2, [sp, #0]
 80104de:	f108 0301 	add.w	r3, r8, #1
 80104e2:	7013      	strb	r3, [r2, #0]
 80104e4:	e608      	b.n	80100f8 <_dtoa_r+0x698>
 80104e6:	9b07      	ldr	r3, [sp, #28]
 80104e8:	9a07      	ldr	r2, [sp, #28]
 80104ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80104ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d028      	beq.n	8010546 <_dtoa_r+0xae6>
 80104f4:	4649      	mov	r1, r9
 80104f6:	2300      	movs	r3, #0
 80104f8:	220a      	movs	r2, #10
 80104fa:	4658      	mov	r0, fp
 80104fc:	f000 fc6c 	bl	8010dd8 <__multadd>
 8010500:	42af      	cmp	r7, r5
 8010502:	4681      	mov	r9, r0
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	f04f 020a 	mov.w	r2, #10
 801050c:	4639      	mov	r1, r7
 801050e:	4658      	mov	r0, fp
 8010510:	d107      	bne.n	8010522 <_dtoa_r+0xac2>
 8010512:	f000 fc61 	bl	8010dd8 <__multadd>
 8010516:	4607      	mov	r7, r0
 8010518:	4605      	mov	r5, r0
 801051a:	9b07      	ldr	r3, [sp, #28]
 801051c:	3301      	adds	r3, #1
 801051e:	9307      	str	r3, [sp, #28]
 8010520:	e774      	b.n	801040c <_dtoa_r+0x9ac>
 8010522:	f000 fc59 	bl	8010dd8 <__multadd>
 8010526:	4629      	mov	r1, r5
 8010528:	4607      	mov	r7, r0
 801052a:	2300      	movs	r3, #0
 801052c:	220a      	movs	r2, #10
 801052e:	4658      	mov	r0, fp
 8010530:	f000 fc52 	bl	8010dd8 <__multadd>
 8010534:	4605      	mov	r5, r0
 8010536:	e7f0      	b.n	801051a <_dtoa_r+0xaba>
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	bfcc      	ite	gt
 801053e:	461e      	movgt	r6, r3
 8010540:	2601      	movle	r6, #1
 8010542:	4456      	add	r6, sl
 8010544:	2700      	movs	r7, #0
 8010546:	4649      	mov	r1, r9
 8010548:	2201      	movs	r2, #1
 801054a:	4658      	mov	r0, fp
 801054c:	f000 fe3a 	bl	80111c4 <__lshift>
 8010550:	4621      	mov	r1, r4
 8010552:	4681      	mov	r9, r0
 8010554:	f000 fea2 	bl	801129c <__mcmp>
 8010558:	2800      	cmp	r0, #0
 801055a:	dcb0      	bgt.n	80104be <_dtoa_r+0xa5e>
 801055c:	d102      	bne.n	8010564 <_dtoa_r+0xb04>
 801055e:	f018 0f01 	tst.w	r8, #1
 8010562:	d1ac      	bne.n	80104be <_dtoa_r+0xa5e>
 8010564:	4633      	mov	r3, r6
 8010566:	461e      	mov	r6, r3
 8010568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801056c:	2a30      	cmp	r2, #48	@ 0x30
 801056e:	d0fa      	beq.n	8010566 <_dtoa_r+0xb06>
 8010570:	e5c2      	b.n	80100f8 <_dtoa_r+0x698>
 8010572:	459a      	cmp	sl, r3
 8010574:	d1a4      	bne.n	80104c0 <_dtoa_r+0xa60>
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	3301      	adds	r3, #1
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	2331      	movs	r3, #49	@ 0x31
 801057e:	f88a 3000 	strb.w	r3, [sl]
 8010582:	e5b9      	b.n	80100f8 <_dtoa_r+0x698>
 8010584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010586:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80105e4 <_dtoa_r+0xb84>
 801058a:	b11b      	cbz	r3, 8010594 <_dtoa_r+0xb34>
 801058c:	f10a 0308 	add.w	r3, sl, #8
 8010590:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010592:	6013      	str	r3, [r2, #0]
 8010594:	4650      	mov	r0, sl
 8010596:	b019      	add	sp, #100	@ 0x64
 8010598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801059e:	2b01      	cmp	r3, #1
 80105a0:	f77f ae37 	ble.w	8010212 <_dtoa_r+0x7b2>
 80105a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a8:	2001      	movs	r0, #1
 80105aa:	e655      	b.n	8010258 <_dtoa_r+0x7f8>
 80105ac:	9b00      	ldr	r3, [sp, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f77f aed6 	ble.w	8010360 <_dtoa_r+0x900>
 80105b4:	4656      	mov	r6, sl
 80105b6:	4621      	mov	r1, r4
 80105b8:	4648      	mov	r0, r9
 80105ba:	f7ff f9c7 	bl	800f94c <quorem>
 80105be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80105c2:	f806 8b01 	strb.w	r8, [r6], #1
 80105c6:	9b00      	ldr	r3, [sp, #0]
 80105c8:	eba6 020a 	sub.w	r2, r6, sl
 80105cc:	4293      	cmp	r3, r2
 80105ce:	ddb3      	ble.n	8010538 <_dtoa_r+0xad8>
 80105d0:	4649      	mov	r1, r9
 80105d2:	2300      	movs	r3, #0
 80105d4:	220a      	movs	r2, #10
 80105d6:	4658      	mov	r0, fp
 80105d8:	f000 fbfe 	bl	8010dd8 <__multadd>
 80105dc:	4681      	mov	r9, r0
 80105de:	e7ea      	b.n	80105b6 <_dtoa_r+0xb56>
 80105e0:	0801489d 	.word	0x0801489d
 80105e4:	08014821 	.word	0x08014821

080105e8 <_free_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4605      	mov	r5, r0
 80105ec:	2900      	cmp	r1, #0
 80105ee:	d041      	beq.n	8010674 <_free_r+0x8c>
 80105f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105f4:	1f0c      	subs	r4, r1, #4
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	bfb8      	it	lt
 80105fa:	18e4      	addlt	r4, r4, r3
 80105fc:	f7fd fb34 	bl	800dc68 <__malloc_lock>
 8010600:	4a1d      	ldr	r2, [pc, #116]	@ (8010678 <_free_r+0x90>)
 8010602:	6813      	ldr	r3, [r2, #0]
 8010604:	b933      	cbnz	r3, 8010614 <_free_r+0x2c>
 8010606:	6063      	str	r3, [r4, #4]
 8010608:	6014      	str	r4, [r2, #0]
 801060a:	4628      	mov	r0, r5
 801060c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010610:	f7fd bb30 	b.w	800dc74 <__malloc_unlock>
 8010614:	42a3      	cmp	r3, r4
 8010616:	d908      	bls.n	801062a <_free_r+0x42>
 8010618:	6820      	ldr	r0, [r4, #0]
 801061a:	1821      	adds	r1, r4, r0
 801061c:	428b      	cmp	r3, r1
 801061e:	bf01      	itttt	eq
 8010620:	6819      	ldreq	r1, [r3, #0]
 8010622:	685b      	ldreq	r3, [r3, #4]
 8010624:	1809      	addeq	r1, r1, r0
 8010626:	6021      	streq	r1, [r4, #0]
 8010628:	e7ed      	b.n	8010606 <_free_r+0x1e>
 801062a:	461a      	mov	r2, r3
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	b10b      	cbz	r3, 8010634 <_free_r+0x4c>
 8010630:	42a3      	cmp	r3, r4
 8010632:	d9fa      	bls.n	801062a <_free_r+0x42>
 8010634:	6811      	ldr	r1, [r2, #0]
 8010636:	1850      	adds	r0, r2, r1
 8010638:	42a0      	cmp	r0, r4
 801063a:	d10b      	bne.n	8010654 <_free_r+0x6c>
 801063c:	6820      	ldr	r0, [r4, #0]
 801063e:	4401      	add	r1, r0
 8010640:	1850      	adds	r0, r2, r1
 8010642:	4283      	cmp	r3, r0
 8010644:	6011      	str	r1, [r2, #0]
 8010646:	d1e0      	bne.n	801060a <_free_r+0x22>
 8010648:	6818      	ldr	r0, [r3, #0]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	6053      	str	r3, [r2, #4]
 801064e:	4408      	add	r0, r1
 8010650:	6010      	str	r0, [r2, #0]
 8010652:	e7da      	b.n	801060a <_free_r+0x22>
 8010654:	d902      	bls.n	801065c <_free_r+0x74>
 8010656:	230c      	movs	r3, #12
 8010658:	602b      	str	r3, [r5, #0]
 801065a:	e7d6      	b.n	801060a <_free_r+0x22>
 801065c:	6820      	ldr	r0, [r4, #0]
 801065e:	1821      	adds	r1, r4, r0
 8010660:	428b      	cmp	r3, r1
 8010662:	bf04      	itt	eq
 8010664:	6819      	ldreq	r1, [r3, #0]
 8010666:	685b      	ldreq	r3, [r3, #4]
 8010668:	6063      	str	r3, [r4, #4]
 801066a:	bf04      	itt	eq
 801066c:	1809      	addeq	r1, r1, r0
 801066e:	6021      	streq	r1, [r4, #0]
 8010670:	6054      	str	r4, [r2, #4]
 8010672:	e7ca      	b.n	801060a <_free_r+0x22>
 8010674:	bd38      	pop	{r3, r4, r5, pc}
 8010676:	bf00      	nop
 8010678:	2000253c 	.word	0x2000253c

0801067c <rshift>:
 801067c:	6903      	ldr	r3, [r0, #16]
 801067e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010686:	ea4f 1261 	mov.w	r2, r1, asr #5
 801068a:	f100 0414 	add.w	r4, r0, #20
 801068e:	dd45      	ble.n	801071c <rshift+0xa0>
 8010690:	f011 011f 	ands.w	r1, r1, #31
 8010694:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010698:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801069c:	d10c      	bne.n	80106b8 <rshift+0x3c>
 801069e:	f100 0710 	add.w	r7, r0, #16
 80106a2:	4629      	mov	r1, r5
 80106a4:	42b1      	cmp	r1, r6
 80106a6:	d334      	bcc.n	8010712 <rshift+0x96>
 80106a8:	1a9b      	subs	r3, r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	1eea      	subs	r2, r5, #3
 80106ae:	4296      	cmp	r6, r2
 80106b0:	bf38      	it	cc
 80106b2:	2300      	movcc	r3, #0
 80106b4:	4423      	add	r3, r4
 80106b6:	e015      	b.n	80106e4 <rshift+0x68>
 80106b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80106bc:	f1c1 0820 	rsb	r8, r1, #32
 80106c0:	40cf      	lsrs	r7, r1
 80106c2:	f105 0e04 	add.w	lr, r5, #4
 80106c6:	46a1      	mov	r9, r4
 80106c8:	4576      	cmp	r6, lr
 80106ca:	46f4      	mov	ip, lr
 80106cc:	d815      	bhi.n	80106fa <rshift+0x7e>
 80106ce:	1a9a      	subs	r2, r3, r2
 80106d0:	0092      	lsls	r2, r2, #2
 80106d2:	3a04      	subs	r2, #4
 80106d4:	3501      	adds	r5, #1
 80106d6:	42ae      	cmp	r6, r5
 80106d8:	bf38      	it	cc
 80106da:	2200      	movcc	r2, #0
 80106dc:	18a3      	adds	r3, r4, r2
 80106de:	50a7      	str	r7, [r4, r2]
 80106e0:	b107      	cbz	r7, 80106e4 <rshift+0x68>
 80106e2:	3304      	adds	r3, #4
 80106e4:	1b1a      	subs	r2, r3, r4
 80106e6:	42a3      	cmp	r3, r4
 80106e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80106ec:	bf08      	it	eq
 80106ee:	2300      	moveq	r3, #0
 80106f0:	6102      	str	r2, [r0, #16]
 80106f2:	bf08      	it	eq
 80106f4:	6143      	streq	r3, [r0, #20]
 80106f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106fa:	f8dc c000 	ldr.w	ip, [ip]
 80106fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8010702:	ea4c 0707 	orr.w	r7, ip, r7
 8010706:	f849 7b04 	str.w	r7, [r9], #4
 801070a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801070e:	40cf      	lsrs	r7, r1
 8010710:	e7da      	b.n	80106c8 <rshift+0x4c>
 8010712:	f851 cb04 	ldr.w	ip, [r1], #4
 8010716:	f847 cf04 	str.w	ip, [r7, #4]!
 801071a:	e7c3      	b.n	80106a4 <rshift+0x28>
 801071c:	4623      	mov	r3, r4
 801071e:	e7e1      	b.n	80106e4 <rshift+0x68>

08010720 <__hexdig_fun>:
 8010720:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010724:	2b09      	cmp	r3, #9
 8010726:	d802      	bhi.n	801072e <__hexdig_fun+0xe>
 8010728:	3820      	subs	r0, #32
 801072a:	b2c0      	uxtb	r0, r0
 801072c:	4770      	bx	lr
 801072e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010732:	2b05      	cmp	r3, #5
 8010734:	d801      	bhi.n	801073a <__hexdig_fun+0x1a>
 8010736:	3847      	subs	r0, #71	@ 0x47
 8010738:	e7f7      	b.n	801072a <__hexdig_fun+0xa>
 801073a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801073e:	2b05      	cmp	r3, #5
 8010740:	d801      	bhi.n	8010746 <__hexdig_fun+0x26>
 8010742:	3827      	subs	r0, #39	@ 0x27
 8010744:	e7f1      	b.n	801072a <__hexdig_fun+0xa>
 8010746:	2000      	movs	r0, #0
 8010748:	4770      	bx	lr
	...

0801074c <__gethex>:
 801074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010750:	b085      	sub	sp, #20
 8010752:	468a      	mov	sl, r1
 8010754:	9302      	str	r3, [sp, #8]
 8010756:	680b      	ldr	r3, [r1, #0]
 8010758:	9001      	str	r0, [sp, #4]
 801075a:	4690      	mov	r8, r2
 801075c:	1c9c      	adds	r4, r3, #2
 801075e:	46a1      	mov	r9, r4
 8010760:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010764:	2830      	cmp	r0, #48	@ 0x30
 8010766:	d0fa      	beq.n	801075e <__gethex+0x12>
 8010768:	eba9 0303 	sub.w	r3, r9, r3
 801076c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010770:	f7ff ffd6 	bl	8010720 <__hexdig_fun>
 8010774:	4605      	mov	r5, r0
 8010776:	2800      	cmp	r0, #0
 8010778:	d168      	bne.n	801084c <__gethex+0x100>
 801077a:	49a0      	ldr	r1, [pc, #640]	@ (80109fc <__gethex+0x2b0>)
 801077c:	2201      	movs	r2, #1
 801077e:	4648      	mov	r0, r9
 8010780:	f7ff f82d 	bl	800f7de <strncmp>
 8010784:	4607      	mov	r7, r0
 8010786:	2800      	cmp	r0, #0
 8010788:	d167      	bne.n	801085a <__gethex+0x10e>
 801078a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801078e:	4626      	mov	r6, r4
 8010790:	f7ff ffc6 	bl	8010720 <__hexdig_fun>
 8010794:	2800      	cmp	r0, #0
 8010796:	d062      	beq.n	801085e <__gethex+0x112>
 8010798:	4623      	mov	r3, r4
 801079a:	7818      	ldrb	r0, [r3, #0]
 801079c:	2830      	cmp	r0, #48	@ 0x30
 801079e:	4699      	mov	r9, r3
 80107a0:	f103 0301 	add.w	r3, r3, #1
 80107a4:	d0f9      	beq.n	801079a <__gethex+0x4e>
 80107a6:	f7ff ffbb 	bl	8010720 <__hexdig_fun>
 80107aa:	fab0 f580 	clz	r5, r0
 80107ae:	096d      	lsrs	r5, r5, #5
 80107b0:	f04f 0b01 	mov.w	fp, #1
 80107b4:	464a      	mov	r2, r9
 80107b6:	4616      	mov	r6, r2
 80107b8:	3201      	adds	r2, #1
 80107ba:	7830      	ldrb	r0, [r6, #0]
 80107bc:	f7ff ffb0 	bl	8010720 <__hexdig_fun>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d1f8      	bne.n	80107b6 <__gethex+0x6a>
 80107c4:	498d      	ldr	r1, [pc, #564]	@ (80109fc <__gethex+0x2b0>)
 80107c6:	2201      	movs	r2, #1
 80107c8:	4630      	mov	r0, r6
 80107ca:	f7ff f808 	bl	800f7de <strncmp>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d13f      	bne.n	8010852 <__gethex+0x106>
 80107d2:	b944      	cbnz	r4, 80107e6 <__gethex+0x9a>
 80107d4:	1c74      	adds	r4, r6, #1
 80107d6:	4622      	mov	r2, r4
 80107d8:	4616      	mov	r6, r2
 80107da:	3201      	adds	r2, #1
 80107dc:	7830      	ldrb	r0, [r6, #0]
 80107de:	f7ff ff9f 	bl	8010720 <__hexdig_fun>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d1f8      	bne.n	80107d8 <__gethex+0x8c>
 80107e6:	1ba4      	subs	r4, r4, r6
 80107e8:	00a7      	lsls	r7, r4, #2
 80107ea:	7833      	ldrb	r3, [r6, #0]
 80107ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80107f0:	2b50      	cmp	r3, #80	@ 0x50
 80107f2:	d13e      	bne.n	8010872 <__gethex+0x126>
 80107f4:	7873      	ldrb	r3, [r6, #1]
 80107f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80107f8:	d033      	beq.n	8010862 <__gethex+0x116>
 80107fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80107fc:	d034      	beq.n	8010868 <__gethex+0x11c>
 80107fe:	1c71      	adds	r1, r6, #1
 8010800:	2400      	movs	r4, #0
 8010802:	7808      	ldrb	r0, [r1, #0]
 8010804:	f7ff ff8c 	bl	8010720 <__hexdig_fun>
 8010808:	1e43      	subs	r3, r0, #1
 801080a:	b2db      	uxtb	r3, r3
 801080c:	2b18      	cmp	r3, #24
 801080e:	d830      	bhi.n	8010872 <__gethex+0x126>
 8010810:	f1a0 0210 	sub.w	r2, r0, #16
 8010814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010818:	f7ff ff82 	bl	8010720 <__hexdig_fun>
 801081c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010820:	fa5f fc8c 	uxtb.w	ip, ip
 8010824:	f1bc 0f18 	cmp.w	ip, #24
 8010828:	f04f 030a 	mov.w	r3, #10
 801082c:	d91e      	bls.n	801086c <__gethex+0x120>
 801082e:	b104      	cbz	r4, 8010832 <__gethex+0xe6>
 8010830:	4252      	negs	r2, r2
 8010832:	4417      	add	r7, r2
 8010834:	f8ca 1000 	str.w	r1, [sl]
 8010838:	b1ed      	cbz	r5, 8010876 <__gethex+0x12a>
 801083a:	f1bb 0f00 	cmp.w	fp, #0
 801083e:	bf0c      	ite	eq
 8010840:	2506      	moveq	r5, #6
 8010842:	2500      	movne	r5, #0
 8010844:	4628      	mov	r0, r5
 8010846:	b005      	add	sp, #20
 8010848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084c:	2500      	movs	r5, #0
 801084e:	462c      	mov	r4, r5
 8010850:	e7b0      	b.n	80107b4 <__gethex+0x68>
 8010852:	2c00      	cmp	r4, #0
 8010854:	d1c7      	bne.n	80107e6 <__gethex+0x9a>
 8010856:	4627      	mov	r7, r4
 8010858:	e7c7      	b.n	80107ea <__gethex+0x9e>
 801085a:	464e      	mov	r6, r9
 801085c:	462f      	mov	r7, r5
 801085e:	2501      	movs	r5, #1
 8010860:	e7c3      	b.n	80107ea <__gethex+0x9e>
 8010862:	2400      	movs	r4, #0
 8010864:	1cb1      	adds	r1, r6, #2
 8010866:	e7cc      	b.n	8010802 <__gethex+0xb6>
 8010868:	2401      	movs	r4, #1
 801086a:	e7fb      	b.n	8010864 <__gethex+0x118>
 801086c:	fb03 0002 	mla	r0, r3, r2, r0
 8010870:	e7ce      	b.n	8010810 <__gethex+0xc4>
 8010872:	4631      	mov	r1, r6
 8010874:	e7de      	b.n	8010834 <__gethex+0xe8>
 8010876:	eba6 0309 	sub.w	r3, r6, r9
 801087a:	3b01      	subs	r3, #1
 801087c:	4629      	mov	r1, r5
 801087e:	2b07      	cmp	r3, #7
 8010880:	dc0a      	bgt.n	8010898 <__gethex+0x14c>
 8010882:	9801      	ldr	r0, [sp, #4]
 8010884:	f000 fa46 	bl	8010d14 <_Balloc>
 8010888:	4604      	mov	r4, r0
 801088a:	b940      	cbnz	r0, 801089e <__gethex+0x152>
 801088c:	4b5c      	ldr	r3, [pc, #368]	@ (8010a00 <__gethex+0x2b4>)
 801088e:	4602      	mov	r2, r0
 8010890:	21e4      	movs	r1, #228	@ 0xe4
 8010892:	485c      	ldr	r0, [pc, #368]	@ (8010a04 <__gethex+0x2b8>)
 8010894:	f001 f996 	bl	8011bc4 <__assert_func>
 8010898:	3101      	adds	r1, #1
 801089a:	105b      	asrs	r3, r3, #1
 801089c:	e7ef      	b.n	801087e <__gethex+0x132>
 801089e:	f100 0a14 	add.w	sl, r0, #20
 80108a2:	2300      	movs	r3, #0
 80108a4:	4655      	mov	r5, sl
 80108a6:	469b      	mov	fp, r3
 80108a8:	45b1      	cmp	r9, r6
 80108aa:	d337      	bcc.n	801091c <__gethex+0x1d0>
 80108ac:	f845 bb04 	str.w	fp, [r5], #4
 80108b0:	eba5 050a 	sub.w	r5, r5, sl
 80108b4:	10ad      	asrs	r5, r5, #2
 80108b6:	6125      	str	r5, [r4, #16]
 80108b8:	4658      	mov	r0, fp
 80108ba:	f000 fb1d 	bl	8010ef8 <__hi0bits>
 80108be:	016d      	lsls	r5, r5, #5
 80108c0:	f8d8 6000 	ldr.w	r6, [r8]
 80108c4:	1a2d      	subs	r5, r5, r0
 80108c6:	42b5      	cmp	r5, r6
 80108c8:	dd54      	ble.n	8010974 <__gethex+0x228>
 80108ca:	1bad      	subs	r5, r5, r6
 80108cc:	4629      	mov	r1, r5
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 feb1 	bl	8011636 <__any_on>
 80108d4:	4681      	mov	r9, r0
 80108d6:	b178      	cbz	r0, 80108f8 <__gethex+0x1ac>
 80108d8:	1e6b      	subs	r3, r5, #1
 80108da:	1159      	asrs	r1, r3, #5
 80108dc:	f003 021f 	and.w	r2, r3, #31
 80108e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80108e4:	f04f 0901 	mov.w	r9, #1
 80108e8:	fa09 f202 	lsl.w	r2, r9, r2
 80108ec:	420a      	tst	r2, r1
 80108ee:	d003      	beq.n	80108f8 <__gethex+0x1ac>
 80108f0:	454b      	cmp	r3, r9
 80108f2:	dc36      	bgt.n	8010962 <__gethex+0x216>
 80108f4:	f04f 0902 	mov.w	r9, #2
 80108f8:	4629      	mov	r1, r5
 80108fa:	4620      	mov	r0, r4
 80108fc:	f7ff febe 	bl	801067c <rshift>
 8010900:	442f      	add	r7, r5
 8010902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010906:	42bb      	cmp	r3, r7
 8010908:	da42      	bge.n	8010990 <__gethex+0x244>
 801090a:	9801      	ldr	r0, [sp, #4]
 801090c:	4621      	mov	r1, r4
 801090e:	f000 fa41 	bl	8010d94 <_Bfree>
 8010912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010914:	2300      	movs	r3, #0
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	25a3      	movs	r5, #163	@ 0xa3
 801091a:	e793      	b.n	8010844 <__gethex+0xf8>
 801091c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010920:	2a2e      	cmp	r2, #46	@ 0x2e
 8010922:	d012      	beq.n	801094a <__gethex+0x1fe>
 8010924:	2b20      	cmp	r3, #32
 8010926:	d104      	bne.n	8010932 <__gethex+0x1e6>
 8010928:	f845 bb04 	str.w	fp, [r5], #4
 801092c:	f04f 0b00 	mov.w	fp, #0
 8010930:	465b      	mov	r3, fp
 8010932:	7830      	ldrb	r0, [r6, #0]
 8010934:	9303      	str	r3, [sp, #12]
 8010936:	f7ff fef3 	bl	8010720 <__hexdig_fun>
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	f000 000f 	and.w	r0, r0, #15
 8010940:	4098      	lsls	r0, r3
 8010942:	ea4b 0b00 	orr.w	fp, fp, r0
 8010946:	3304      	adds	r3, #4
 8010948:	e7ae      	b.n	80108a8 <__gethex+0x15c>
 801094a:	45b1      	cmp	r9, r6
 801094c:	d8ea      	bhi.n	8010924 <__gethex+0x1d8>
 801094e:	492b      	ldr	r1, [pc, #172]	@ (80109fc <__gethex+0x2b0>)
 8010950:	9303      	str	r3, [sp, #12]
 8010952:	2201      	movs	r2, #1
 8010954:	4630      	mov	r0, r6
 8010956:	f7fe ff42 	bl	800f7de <strncmp>
 801095a:	9b03      	ldr	r3, [sp, #12]
 801095c:	2800      	cmp	r0, #0
 801095e:	d1e1      	bne.n	8010924 <__gethex+0x1d8>
 8010960:	e7a2      	b.n	80108a8 <__gethex+0x15c>
 8010962:	1ea9      	subs	r1, r5, #2
 8010964:	4620      	mov	r0, r4
 8010966:	f000 fe66 	bl	8011636 <__any_on>
 801096a:	2800      	cmp	r0, #0
 801096c:	d0c2      	beq.n	80108f4 <__gethex+0x1a8>
 801096e:	f04f 0903 	mov.w	r9, #3
 8010972:	e7c1      	b.n	80108f8 <__gethex+0x1ac>
 8010974:	da09      	bge.n	801098a <__gethex+0x23e>
 8010976:	1b75      	subs	r5, r6, r5
 8010978:	4621      	mov	r1, r4
 801097a:	9801      	ldr	r0, [sp, #4]
 801097c:	462a      	mov	r2, r5
 801097e:	f000 fc21 	bl	80111c4 <__lshift>
 8010982:	1b7f      	subs	r7, r7, r5
 8010984:	4604      	mov	r4, r0
 8010986:	f100 0a14 	add.w	sl, r0, #20
 801098a:	f04f 0900 	mov.w	r9, #0
 801098e:	e7b8      	b.n	8010902 <__gethex+0x1b6>
 8010990:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010994:	42bd      	cmp	r5, r7
 8010996:	dd6f      	ble.n	8010a78 <__gethex+0x32c>
 8010998:	1bed      	subs	r5, r5, r7
 801099a:	42ae      	cmp	r6, r5
 801099c:	dc34      	bgt.n	8010a08 <__gethex+0x2bc>
 801099e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d022      	beq.n	80109ec <__gethex+0x2a0>
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d024      	beq.n	80109f4 <__gethex+0x2a8>
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d115      	bne.n	80109da <__gethex+0x28e>
 80109ae:	42ae      	cmp	r6, r5
 80109b0:	d113      	bne.n	80109da <__gethex+0x28e>
 80109b2:	2e01      	cmp	r6, #1
 80109b4:	d10b      	bne.n	80109ce <__gethex+0x282>
 80109b6:	9a02      	ldr	r2, [sp, #8]
 80109b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80109bc:	6013      	str	r3, [r2, #0]
 80109be:	2301      	movs	r3, #1
 80109c0:	6123      	str	r3, [r4, #16]
 80109c2:	f8ca 3000 	str.w	r3, [sl]
 80109c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109c8:	2562      	movs	r5, #98	@ 0x62
 80109ca:	601c      	str	r4, [r3, #0]
 80109cc:	e73a      	b.n	8010844 <__gethex+0xf8>
 80109ce:	1e71      	subs	r1, r6, #1
 80109d0:	4620      	mov	r0, r4
 80109d2:	f000 fe30 	bl	8011636 <__any_on>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	d1ed      	bne.n	80109b6 <__gethex+0x26a>
 80109da:	9801      	ldr	r0, [sp, #4]
 80109dc:	4621      	mov	r1, r4
 80109de:	f000 f9d9 	bl	8010d94 <_Bfree>
 80109e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109e4:	2300      	movs	r3, #0
 80109e6:	6013      	str	r3, [r2, #0]
 80109e8:	2550      	movs	r5, #80	@ 0x50
 80109ea:	e72b      	b.n	8010844 <__gethex+0xf8>
 80109ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1f3      	bne.n	80109da <__gethex+0x28e>
 80109f2:	e7e0      	b.n	80109b6 <__gethex+0x26a>
 80109f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1dd      	bne.n	80109b6 <__gethex+0x26a>
 80109fa:	e7ee      	b.n	80109da <__gethex+0x28e>
 80109fc:	0801478c 	.word	0x0801478c
 8010a00:	0801489d 	.word	0x0801489d
 8010a04:	080148ae 	.word	0x080148ae
 8010a08:	1e6f      	subs	r7, r5, #1
 8010a0a:	f1b9 0f00 	cmp.w	r9, #0
 8010a0e:	d130      	bne.n	8010a72 <__gethex+0x326>
 8010a10:	b127      	cbz	r7, 8010a1c <__gethex+0x2d0>
 8010a12:	4639      	mov	r1, r7
 8010a14:	4620      	mov	r0, r4
 8010a16:	f000 fe0e 	bl	8011636 <__any_on>
 8010a1a:	4681      	mov	r9, r0
 8010a1c:	117a      	asrs	r2, r7, #5
 8010a1e:	2301      	movs	r3, #1
 8010a20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010a24:	f007 071f 	and.w	r7, r7, #31
 8010a28:	40bb      	lsls	r3, r7
 8010a2a:	4213      	tst	r3, r2
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	bf18      	it	ne
 8010a32:	f049 0902 	orrne.w	r9, r9, #2
 8010a36:	f7ff fe21 	bl	801067c <rshift>
 8010a3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010a3e:	1b76      	subs	r6, r6, r5
 8010a40:	2502      	movs	r5, #2
 8010a42:	f1b9 0f00 	cmp.w	r9, #0
 8010a46:	d047      	beq.n	8010ad8 <__gethex+0x38c>
 8010a48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a4c:	2b02      	cmp	r3, #2
 8010a4e:	d015      	beq.n	8010a7c <__gethex+0x330>
 8010a50:	2b03      	cmp	r3, #3
 8010a52:	d017      	beq.n	8010a84 <__gethex+0x338>
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d109      	bne.n	8010a6c <__gethex+0x320>
 8010a58:	f019 0f02 	tst.w	r9, #2
 8010a5c:	d006      	beq.n	8010a6c <__gethex+0x320>
 8010a5e:	f8da 3000 	ldr.w	r3, [sl]
 8010a62:	ea49 0903 	orr.w	r9, r9, r3
 8010a66:	f019 0f01 	tst.w	r9, #1
 8010a6a:	d10e      	bne.n	8010a8a <__gethex+0x33e>
 8010a6c:	f045 0510 	orr.w	r5, r5, #16
 8010a70:	e032      	b.n	8010ad8 <__gethex+0x38c>
 8010a72:	f04f 0901 	mov.w	r9, #1
 8010a76:	e7d1      	b.n	8010a1c <__gethex+0x2d0>
 8010a78:	2501      	movs	r5, #1
 8010a7a:	e7e2      	b.n	8010a42 <__gethex+0x2f6>
 8010a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a7e:	f1c3 0301 	rsb	r3, r3, #1
 8010a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d0f0      	beq.n	8010a6c <__gethex+0x320>
 8010a8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a8e:	f104 0314 	add.w	r3, r4, #20
 8010a92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a9a:	f04f 0c00 	mov.w	ip, #0
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010aa8:	d01b      	beq.n	8010ae2 <__gethex+0x396>
 8010aaa:	3201      	adds	r2, #1
 8010aac:	6002      	str	r2, [r0, #0]
 8010aae:	2d02      	cmp	r5, #2
 8010ab0:	f104 0314 	add.w	r3, r4, #20
 8010ab4:	d13c      	bne.n	8010b30 <__gethex+0x3e4>
 8010ab6:	f8d8 2000 	ldr.w	r2, [r8]
 8010aba:	3a01      	subs	r2, #1
 8010abc:	42b2      	cmp	r2, r6
 8010abe:	d109      	bne.n	8010ad4 <__gethex+0x388>
 8010ac0:	1171      	asrs	r1, r6, #5
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ac8:	f006 061f 	and.w	r6, r6, #31
 8010acc:	fa02 f606 	lsl.w	r6, r2, r6
 8010ad0:	421e      	tst	r6, r3
 8010ad2:	d13a      	bne.n	8010b4a <__gethex+0x3fe>
 8010ad4:	f045 0520 	orr.w	r5, r5, #32
 8010ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ada:	601c      	str	r4, [r3, #0]
 8010adc:	9b02      	ldr	r3, [sp, #8]
 8010ade:	601f      	str	r7, [r3, #0]
 8010ae0:	e6b0      	b.n	8010844 <__gethex+0xf8>
 8010ae2:	4299      	cmp	r1, r3
 8010ae4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ae8:	d8d9      	bhi.n	8010a9e <__gethex+0x352>
 8010aea:	68a3      	ldr	r3, [r4, #8]
 8010aec:	459b      	cmp	fp, r3
 8010aee:	db17      	blt.n	8010b20 <__gethex+0x3d4>
 8010af0:	6861      	ldr	r1, [r4, #4]
 8010af2:	9801      	ldr	r0, [sp, #4]
 8010af4:	3101      	adds	r1, #1
 8010af6:	f000 f90d 	bl	8010d14 <_Balloc>
 8010afa:	4681      	mov	r9, r0
 8010afc:	b918      	cbnz	r0, 8010b06 <__gethex+0x3ba>
 8010afe:	4b1a      	ldr	r3, [pc, #104]	@ (8010b68 <__gethex+0x41c>)
 8010b00:	4602      	mov	r2, r0
 8010b02:	2184      	movs	r1, #132	@ 0x84
 8010b04:	e6c5      	b.n	8010892 <__gethex+0x146>
 8010b06:	6922      	ldr	r2, [r4, #16]
 8010b08:	3202      	adds	r2, #2
 8010b0a:	f104 010c 	add.w	r1, r4, #12
 8010b0e:	0092      	lsls	r2, r2, #2
 8010b10:	300c      	adds	r0, #12
 8010b12:	f7fe fefe 	bl	800f912 <memcpy>
 8010b16:	4621      	mov	r1, r4
 8010b18:	9801      	ldr	r0, [sp, #4]
 8010b1a:	f000 f93b 	bl	8010d94 <_Bfree>
 8010b1e:	464c      	mov	r4, r9
 8010b20:	6923      	ldr	r3, [r4, #16]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010b28:	6122      	str	r2, [r4, #16]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	615a      	str	r2, [r3, #20]
 8010b2e:	e7be      	b.n	8010aae <__gethex+0x362>
 8010b30:	6922      	ldr	r2, [r4, #16]
 8010b32:	455a      	cmp	r2, fp
 8010b34:	dd0b      	ble.n	8010b4e <__gethex+0x402>
 8010b36:	2101      	movs	r1, #1
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7ff fd9f 	bl	801067c <rshift>
 8010b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b42:	3701      	adds	r7, #1
 8010b44:	42bb      	cmp	r3, r7
 8010b46:	f6ff aee0 	blt.w	801090a <__gethex+0x1be>
 8010b4a:	2501      	movs	r5, #1
 8010b4c:	e7c2      	b.n	8010ad4 <__gethex+0x388>
 8010b4e:	f016 061f 	ands.w	r6, r6, #31
 8010b52:	d0fa      	beq.n	8010b4a <__gethex+0x3fe>
 8010b54:	4453      	add	r3, sl
 8010b56:	f1c6 0620 	rsb	r6, r6, #32
 8010b5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010b5e:	f000 f9cb 	bl	8010ef8 <__hi0bits>
 8010b62:	42b0      	cmp	r0, r6
 8010b64:	dbe7      	blt.n	8010b36 <__gethex+0x3ea>
 8010b66:	e7f0      	b.n	8010b4a <__gethex+0x3fe>
 8010b68:	0801489d 	.word	0x0801489d

08010b6c <L_shift>:
 8010b6c:	f1c2 0208 	rsb	r2, r2, #8
 8010b70:	0092      	lsls	r2, r2, #2
 8010b72:	b570      	push	{r4, r5, r6, lr}
 8010b74:	f1c2 0620 	rsb	r6, r2, #32
 8010b78:	6843      	ldr	r3, [r0, #4]
 8010b7a:	6804      	ldr	r4, [r0, #0]
 8010b7c:	fa03 f506 	lsl.w	r5, r3, r6
 8010b80:	432c      	orrs	r4, r5
 8010b82:	40d3      	lsrs	r3, r2
 8010b84:	6004      	str	r4, [r0, #0]
 8010b86:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b8a:	4288      	cmp	r0, r1
 8010b8c:	d3f4      	bcc.n	8010b78 <L_shift+0xc>
 8010b8e:	bd70      	pop	{r4, r5, r6, pc}

08010b90 <__match>:
 8010b90:	b530      	push	{r4, r5, lr}
 8010b92:	6803      	ldr	r3, [r0, #0]
 8010b94:	3301      	adds	r3, #1
 8010b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b9a:	b914      	cbnz	r4, 8010ba2 <__match+0x12>
 8010b9c:	6003      	str	r3, [r0, #0]
 8010b9e:	2001      	movs	r0, #1
 8010ba0:	bd30      	pop	{r4, r5, pc}
 8010ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ba6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010baa:	2d19      	cmp	r5, #25
 8010bac:	bf98      	it	ls
 8010bae:	3220      	addls	r2, #32
 8010bb0:	42a2      	cmp	r2, r4
 8010bb2:	d0f0      	beq.n	8010b96 <__match+0x6>
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	e7f3      	b.n	8010ba0 <__match+0x10>

08010bb8 <__hexnan>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	680b      	ldr	r3, [r1, #0]
 8010bbe:	6801      	ldr	r1, [r0, #0]
 8010bc0:	115e      	asrs	r6, r3, #5
 8010bc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010bc6:	f013 031f 	ands.w	r3, r3, #31
 8010bca:	b087      	sub	sp, #28
 8010bcc:	bf18      	it	ne
 8010bce:	3604      	addne	r6, #4
 8010bd0:	2500      	movs	r5, #0
 8010bd2:	1f37      	subs	r7, r6, #4
 8010bd4:	4682      	mov	sl, r0
 8010bd6:	4690      	mov	r8, r2
 8010bd8:	9301      	str	r3, [sp, #4]
 8010bda:	f846 5c04 	str.w	r5, [r6, #-4]
 8010bde:	46b9      	mov	r9, r7
 8010be0:	463c      	mov	r4, r7
 8010be2:	9502      	str	r5, [sp, #8]
 8010be4:	46ab      	mov	fp, r5
 8010be6:	784a      	ldrb	r2, [r1, #1]
 8010be8:	1c4b      	adds	r3, r1, #1
 8010bea:	9303      	str	r3, [sp, #12]
 8010bec:	b342      	cbz	r2, 8010c40 <__hexnan+0x88>
 8010bee:	4610      	mov	r0, r2
 8010bf0:	9105      	str	r1, [sp, #20]
 8010bf2:	9204      	str	r2, [sp, #16]
 8010bf4:	f7ff fd94 	bl	8010720 <__hexdig_fun>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d151      	bne.n	8010ca0 <__hexnan+0xe8>
 8010bfc:	9a04      	ldr	r2, [sp, #16]
 8010bfe:	9905      	ldr	r1, [sp, #20]
 8010c00:	2a20      	cmp	r2, #32
 8010c02:	d818      	bhi.n	8010c36 <__hexnan+0x7e>
 8010c04:	9b02      	ldr	r3, [sp, #8]
 8010c06:	459b      	cmp	fp, r3
 8010c08:	dd13      	ble.n	8010c32 <__hexnan+0x7a>
 8010c0a:	454c      	cmp	r4, r9
 8010c0c:	d206      	bcs.n	8010c1c <__hexnan+0x64>
 8010c0e:	2d07      	cmp	r5, #7
 8010c10:	dc04      	bgt.n	8010c1c <__hexnan+0x64>
 8010c12:	462a      	mov	r2, r5
 8010c14:	4649      	mov	r1, r9
 8010c16:	4620      	mov	r0, r4
 8010c18:	f7ff ffa8 	bl	8010b6c <L_shift>
 8010c1c:	4544      	cmp	r4, r8
 8010c1e:	d952      	bls.n	8010cc6 <__hexnan+0x10e>
 8010c20:	2300      	movs	r3, #0
 8010c22:	f1a4 0904 	sub.w	r9, r4, #4
 8010c26:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c2a:	f8cd b008 	str.w	fp, [sp, #8]
 8010c2e:	464c      	mov	r4, r9
 8010c30:	461d      	mov	r5, r3
 8010c32:	9903      	ldr	r1, [sp, #12]
 8010c34:	e7d7      	b.n	8010be6 <__hexnan+0x2e>
 8010c36:	2a29      	cmp	r2, #41	@ 0x29
 8010c38:	d157      	bne.n	8010cea <__hexnan+0x132>
 8010c3a:	3102      	adds	r1, #2
 8010c3c:	f8ca 1000 	str.w	r1, [sl]
 8010c40:	f1bb 0f00 	cmp.w	fp, #0
 8010c44:	d051      	beq.n	8010cea <__hexnan+0x132>
 8010c46:	454c      	cmp	r4, r9
 8010c48:	d206      	bcs.n	8010c58 <__hexnan+0xa0>
 8010c4a:	2d07      	cmp	r5, #7
 8010c4c:	dc04      	bgt.n	8010c58 <__hexnan+0xa0>
 8010c4e:	462a      	mov	r2, r5
 8010c50:	4649      	mov	r1, r9
 8010c52:	4620      	mov	r0, r4
 8010c54:	f7ff ff8a 	bl	8010b6c <L_shift>
 8010c58:	4544      	cmp	r4, r8
 8010c5a:	d936      	bls.n	8010cca <__hexnan+0x112>
 8010c5c:	f1a8 0204 	sub.w	r2, r8, #4
 8010c60:	4623      	mov	r3, r4
 8010c62:	f853 1b04 	ldr.w	r1, [r3], #4
 8010c66:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c6a:	429f      	cmp	r7, r3
 8010c6c:	d2f9      	bcs.n	8010c62 <__hexnan+0xaa>
 8010c6e:	1b3b      	subs	r3, r7, r4
 8010c70:	f023 0303 	bic.w	r3, r3, #3
 8010c74:	3304      	adds	r3, #4
 8010c76:	3401      	adds	r4, #1
 8010c78:	3e03      	subs	r6, #3
 8010c7a:	42b4      	cmp	r4, r6
 8010c7c:	bf88      	it	hi
 8010c7e:	2304      	movhi	r3, #4
 8010c80:	4443      	add	r3, r8
 8010c82:	2200      	movs	r2, #0
 8010c84:	f843 2b04 	str.w	r2, [r3], #4
 8010c88:	429f      	cmp	r7, r3
 8010c8a:	d2fb      	bcs.n	8010c84 <__hexnan+0xcc>
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	b91b      	cbnz	r3, 8010c98 <__hexnan+0xe0>
 8010c90:	4547      	cmp	r7, r8
 8010c92:	d128      	bne.n	8010ce6 <__hexnan+0x12e>
 8010c94:	2301      	movs	r3, #1
 8010c96:	603b      	str	r3, [r7, #0]
 8010c98:	2005      	movs	r0, #5
 8010c9a:	b007      	add	sp, #28
 8010c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca0:	3501      	adds	r5, #1
 8010ca2:	2d08      	cmp	r5, #8
 8010ca4:	f10b 0b01 	add.w	fp, fp, #1
 8010ca8:	dd06      	ble.n	8010cb8 <__hexnan+0x100>
 8010caa:	4544      	cmp	r4, r8
 8010cac:	d9c1      	bls.n	8010c32 <__hexnan+0x7a>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010cb4:	2501      	movs	r5, #1
 8010cb6:	3c04      	subs	r4, #4
 8010cb8:	6822      	ldr	r2, [r4, #0]
 8010cba:	f000 000f 	and.w	r0, r0, #15
 8010cbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010cc2:	6020      	str	r0, [r4, #0]
 8010cc4:	e7b5      	b.n	8010c32 <__hexnan+0x7a>
 8010cc6:	2508      	movs	r5, #8
 8010cc8:	e7b3      	b.n	8010c32 <__hexnan+0x7a>
 8010cca:	9b01      	ldr	r3, [sp, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d0dd      	beq.n	8010c8c <__hexnan+0xd4>
 8010cd0:	f1c3 0320 	rsb	r3, r3, #32
 8010cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cd8:	40da      	lsrs	r2, r3
 8010cda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cde:	4013      	ands	r3, r2
 8010ce0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ce4:	e7d2      	b.n	8010c8c <__hexnan+0xd4>
 8010ce6:	3f04      	subs	r7, #4
 8010ce8:	e7d0      	b.n	8010c8c <__hexnan+0xd4>
 8010cea:	2004      	movs	r0, #4
 8010cec:	e7d5      	b.n	8010c9a <__hexnan+0xe2>

08010cee <__ascii_mbtowc>:
 8010cee:	b082      	sub	sp, #8
 8010cf0:	b901      	cbnz	r1, 8010cf4 <__ascii_mbtowc+0x6>
 8010cf2:	a901      	add	r1, sp, #4
 8010cf4:	b142      	cbz	r2, 8010d08 <__ascii_mbtowc+0x1a>
 8010cf6:	b14b      	cbz	r3, 8010d0c <__ascii_mbtowc+0x1e>
 8010cf8:	7813      	ldrb	r3, [r2, #0]
 8010cfa:	600b      	str	r3, [r1, #0]
 8010cfc:	7812      	ldrb	r2, [r2, #0]
 8010cfe:	1e10      	subs	r0, r2, #0
 8010d00:	bf18      	it	ne
 8010d02:	2001      	movne	r0, #1
 8010d04:	b002      	add	sp, #8
 8010d06:	4770      	bx	lr
 8010d08:	4610      	mov	r0, r2
 8010d0a:	e7fb      	b.n	8010d04 <__ascii_mbtowc+0x16>
 8010d0c:	f06f 0001 	mvn.w	r0, #1
 8010d10:	e7f8      	b.n	8010d04 <__ascii_mbtowc+0x16>
	...

08010d14 <_Balloc>:
 8010d14:	b570      	push	{r4, r5, r6, lr}
 8010d16:	69c6      	ldr	r6, [r0, #28]
 8010d18:	4604      	mov	r4, r0
 8010d1a:	460d      	mov	r5, r1
 8010d1c:	b976      	cbnz	r6, 8010d3c <_Balloc+0x28>
 8010d1e:	2010      	movs	r0, #16
 8010d20:	f7fc fef8 	bl	800db14 <malloc>
 8010d24:	4602      	mov	r2, r0
 8010d26:	61e0      	str	r0, [r4, #28]
 8010d28:	b920      	cbnz	r0, 8010d34 <_Balloc+0x20>
 8010d2a:	4b18      	ldr	r3, [pc, #96]	@ (8010d8c <_Balloc+0x78>)
 8010d2c:	4818      	ldr	r0, [pc, #96]	@ (8010d90 <_Balloc+0x7c>)
 8010d2e:	216b      	movs	r1, #107	@ 0x6b
 8010d30:	f000 ff48 	bl	8011bc4 <__assert_func>
 8010d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d38:	6006      	str	r6, [r0, #0]
 8010d3a:	60c6      	str	r6, [r0, #12]
 8010d3c:	69e6      	ldr	r6, [r4, #28]
 8010d3e:	68f3      	ldr	r3, [r6, #12]
 8010d40:	b183      	cbz	r3, 8010d64 <_Balloc+0x50>
 8010d42:	69e3      	ldr	r3, [r4, #28]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d4a:	b9b8      	cbnz	r0, 8010d7c <_Balloc+0x68>
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	fa01 f605 	lsl.w	r6, r1, r5
 8010d52:	1d72      	adds	r2, r6, #5
 8010d54:	0092      	lsls	r2, r2, #2
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 ff52 	bl	8011c00 <_calloc_r>
 8010d5c:	b160      	cbz	r0, 8010d78 <_Balloc+0x64>
 8010d5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d62:	e00e      	b.n	8010d82 <_Balloc+0x6e>
 8010d64:	2221      	movs	r2, #33	@ 0x21
 8010d66:	2104      	movs	r1, #4
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f000 ff49 	bl	8011c00 <_calloc_r>
 8010d6e:	69e3      	ldr	r3, [r4, #28]
 8010d70:	60f0      	str	r0, [r6, #12]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1e4      	bne.n	8010d42 <_Balloc+0x2e>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	6802      	ldr	r2, [r0, #0]
 8010d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d82:	2300      	movs	r3, #0
 8010d84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d88:	e7f7      	b.n	8010d7a <_Balloc+0x66>
 8010d8a:	bf00      	nop
 8010d8c:	0801482e 	.word	0x0801482e
 8010d90:	0801490e 	.word	0x0801490e

08010d94 <_Bfree>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	69c6      	ldr	r6, [r0, #28]
 8010d98:	4605      	mov	r5, r0
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	b976      	cbnz	r6, 8010dbc <_Bfree+0x28>
 8010d9e:	2010      	movs	r0, #16
 8010da0:	f7fc feb8 	bl	800db14 <malloc>
 8010da4:	4602      	mov	r2, r0
 8010da6:	61e8      	str	r0, [r5, #28]
 8010da8:	b920      	cbnz	r0, 8010db4 <_Bfree+0x20>
 8010daa:	4b09      	ldr	r3, [pc, #36]	@ (8010dd0 <_Bfree+0x3c>)
 8010dac:	4809      	ldr	r0, [pc, #36]	@ (8010dd4 <_Bfree+0x40>)
 8010dae:	218f      	movs	r1, #143	@ 0x8f
 8010db0:	f000 ff08 	bl	8011bc4 <__assert_func>
 8010db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010db8:	6006      	str	r6, [r0, #0]
 8010dba:	60c6      	str	r6, [r0, #12]
 8010dbc:	b13c      	cbz	r4, 8010dce <_Bfree+0x3a>
 8010dbe:	69eb      	ldr	r3, [r5, #28]
 8010dc0:	6862      	ldr	r2, [r4, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010dc8:	6021      	str	r1, [r4, #0]
 8010dca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dce:	bd70      	pop	{r4, r5, r6, pc}
 8010dd0:	0801482e 	.word	0x0801482e
 8010dd4:	0801490e 	.word	0x0801490e

08010dd8 <__multadd>:
 8010dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ddc:	690d      	ldr	r5, [r1, #16]
 8010dde:	4607      	mov	r7, r0
 8010de0:	460c      	mov	r4, r1
 8010de2:	461e      	mov	r6, r3
 8010de4:	f101 0c14 	add.w	ip, r1, #20
 8010de8:	2000      	movs	r0, #0
 8010dea:	f8dc 3000 	ldr.w	r3, [ip]
 8010dee:	b299      	uxth	r1, r3
 8010df0:	fb02 6101 	mla	r1, r2, r1, r6
 8010df4:	0c1e      	lsrs	r6, r3, #16
 8010df6:	0c0b      	lsrs	r3, r1, #16
 8010df8:	fb02 3306 	mla	r3, r2, r6, r3
 8010dfc:	b289      	uxth	r1, r1
 8010dfe:	3001      	adds	r0, #1
 8010e00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e04:	4285      	cmp	r5, r0
 8010e06:	f84c 1b04 	str.w	r1, [ip], #4
 8010e0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e0e:	dcec      	bgt.n	8010dea <__multadd+0x12>
 8010e10:	b30e      	cbz	r6, 8010e56 <__multadd+0x7e>
 8010e12:	68a3      	ldr	r3, [r4, #8]
 8010e14:	42ab      	cmp	r3, r5
 8010e16:	dc19      	bgt.n	8010e4c <__multadd+0x74>
 8010e18:	6861      	ldr	r1, [r4, #4]
 8010e1a:	4638      	mov	r0, r7
 8010e1c:	3101      	adds	r1, #1
 8010e1e:	f7ff ff79 	bl	8010d14 <_Balloc>
 8010e22:	4680      	mov	r8, r0
 8010e24:	b928      	cbnz	r0, 8010e32 <__multadd+0x5a>
 8010e26:	4602      	mov	r2, r0
 8010e28:	4b0c      	ldr	r3, [pc, #48]	@ (8010e5c <__multadd+0x84>)
 8010e2a:	480d      	ldr	r0, [pc, #52]	@ (8010e60 <__multadd+0x88>)
 8010e2c:	21ba      	movs	r1, #186	@ 0xba
 8010e2e:	f000 fec9 	bl	8011bc4 <__assert_func>
 8010e32:	6922      	ldr	r2, [r4, #16]
 8010e34:	3202      	adds	r2, #2
 8010e36:	f104 010c 	add.w	r1, r4, #12
 8010e3a:	0092      	lsls	r2, r2, #2
 8010e3c:	300c      	adds	r0, #12
 8010e3e:	f7fe fd68 	bl	800f912 <memcpy>
 8010e42:	4621      	mov	r1, r4
 8010e44:	4638      	mov	r0, r7
 8010e46:	f7ff ffa5 	bl	8010d94 <_Bfree>
 8010e4a:	4644      	mov	r4, r8
 8010e4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e50:	3501      	adds	r5, #1
 8010e52:	615e      	str	r6, [r3, #20]
 8010e54:	6125      	str	r5, [r4, #16]
 8010e56:	4620      	mov	r0, r4
 8010e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e5c:	0801489d 	.word	0x0801489d
 8010e60:	0801490e 	.word	0x0801490e

08010e64 <__s2b>:
 8010e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e68:	460c      	mov	r4, r1
 8010e6a:	4615      	mov	r5, r2
 8010e6c:	461f      	mov	r7, r3
 8010e6e:	2209      	movs	r2, #9
 8010e70:	3308      	adds	r3, #8
 8010e72:	4606      	mov	r6, r0
 8010e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e78:	2100      	movs	r1, #0
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	db09      	blt.n	8010e94 <__s2b+0x30>
 8010e80:	4630      	mov	r0, r6
 8010e82:	f7ff ff47 	bl	8010d14 <_Balloc>
 8010e86:	b940      	cbnz	r0, 8010e9a <__s2b+0x36>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	4b19      	ldr	r3, [pc, #100]	@ (8010ef0 <__s2b+0x8c>)
 8010e8c:	4819      	ldr	r0, [pc, #100]	@ (8010ef4 <__s2b+0x90>)
 8010e8e:	21d3      	movs	r1, #211	@ 0xd3
 8010e90:	f000 fe98 	bl	8011bc4 <__assert_func>
 8010e94:	0052      	lsls	r2, r2, #1
 8010e96:	3101      	adds	r1, #1
 8010e98:	e7f0      	b.n	8010e7c <__s2b+0x18>
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	6143      	str	r3, [r0, #20]
 8010e9e:	2d09      	cmp	r5, #9
 8010ea0:	f04f 0301 	mov.w	r3, #1
 8010ea4:	6103      	str	r3, [r0, #16]
 8010ea6:	dd16      	ble.n	8010ed6 <__s2b+0x72>
 8010ea8:	f104 0909 	add.w	r9, r4, #9
 8010eac:	46c8      	mov	r8, r9
 8010eae:	442c      	add	r4, r5
 8010eb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	3b30      	subs	r3, #48	@ 0x30
 8010eb8:	220a      	movs	r2, #10
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f7ff ff8c 	bl	8010dd8 <__multadd>
 8010ec0:	45a0      	cmp	r8, r4
 8010ec2:	d1f5      	bne.n	8010eb0 <__s2b+0x4c>
 8010ec4:	f1a5 0408 	sub.w	r4, r5, #8
 8010ec8:	444c      	add	r4, r9
 8010eca:	1b2d      	subs	r5, r5, r4
 8010ecc:	1963      	adds	r3, r4, r5
 8010ece:	42bb      	cmp	r3, r7
 8010ed0:	db04      	blt.n	8010edc <__s2b+0x78>
 8010ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed6:	340a      	adds	r4, #10
 8010ed8:	2509      	movs	r5, #9
 8010eda:	e7f6      	b.n	8010eca <__s2b+0x66>
 8010edc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ee0:	4601      	mov	r1, r0
 8010ee2:	3b30      	subs	r3, #48	@ 0x30
 8010ee4:	220a      	movs	r2, #10
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f7ff ff76 	bl	8010dd8 <__multadd>
 8010eec:	e7ee      	b.n	8010ecc <__s2b+0x68>
 8010eee:	bf00      	nop
 8010ef0:	0801489d 	.word	0x0801489d
 8010ef4:	0801490e 	.word	0x0801490e

08010ef8 <__hi0bits>:
 8010ef8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010efc:	4603      	mov	r3, r0
 8010efe:	bf36      	itet	cc
 8010f00:	0403      	lslcc	r3, r0, #16
 8010f02:	2000      	movcs	r0, #0
 8010f04:	2010      	movcc	r0, #16
 8010f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f0a:	bf3c      	itt	cc
 8010f0c:	021b      	lslcc	r3, r3, #8
 8010f0e:	3008      	addcc	r0, #8
 8010f10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f14:	bf3c      	itt	cc
 8010f16:	011b      	lslcc	r3, r3, #4
 8010f18:	3004      	addcc	r0, #4
 8010f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f1e:	bf3c      	itt	cc
 8010f20:	009b      	lslcc	r3, r3, #2
 8010f22:	3002      	addcc	r0, #2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	db05      	blt.n	8010f34 <__hi0bits+0x3c>
 8010f28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f2c:	f100 0001 	add.w	r0, r0, #1
 8010f30:	bf08      	it	eq
 8010f32:	2020      	moveq	r0, #32
 8010f34:	4770      	bx	lr

08010f36 <__lo0bits>:
 8010f36:	6803      	ldr	r3, [r0, #0]
 8010f38:	4602      	mov	r2, r0
 8010f3a:	f013 0007 	ands.w	r0, r3, #7
 8010f3e:	d00b      	beq.n	8010f58 <__lo0bits+0x22>
 8010f40:	07d9      	lsls	r1, r3, #31
 8010f42:	d421      	bmi.n	8010f88 <__lo0bits+0x52>
 8010f44:	0798      	lsls	r0, r3, #30
 8010f46:	bf49      	itett	mi
 8010f48:	085b      	lsrmi	r3, r3, #1
 8010f4a:	089b      	lsrpl	r3, r3, #2
 8010f4c:	2001      	movmi	r0, #1
 8010f4e:	6013      	strmi	r3, [r2, #0]
 8010f50:	bf5c      	itt	pl
 8010f52:	6013      	strpl	r3, [r2, #0]
 8010f54:	2002      	movpl	r0, #2
 8010f56:	4770      	bx	lr
 8010f58:	b299      	uxth	r1, r3
 8010f5a:	b909      	cbnz	r1, 8010f60 <__lo0bits+0x2a>
 8010f5c:	0c1b      	lsrs	r3, r3, #16
 8010f5e:	2010      	movs	r0, #16
 8010f60:	b2d9      	uxtb	r1, r3
 8010f62:	b909      	cbnz	r1, 8010f68 <__lo0bits+0x32>
 8010f64:	3008      	adds	r0, #8
 8010f66:	0a1b      	lsrs	r3, r3, #8
 8010f68:	0719      	lsls	r1, r3, #28
 8010f6a:	bf04      	itt	eq
 8010f6c:	091b      	lsreq	r3, r3, #4
 8010f6e:	3004      	addeq	r0, #4
 8010f70:	0799      	lsls	r1, r3, #30
 8010f72:	bf04      	itt	eq
 8010f74:	089b      	lsreq	r3, r3, #2
 8010f76:	3002      	addeq	r0, #2
 8010f78:	07d9      	lsls	r1, r3, #31
 8010f7a:	d403      	bmi.n	8010f84 <__lo0bits+0x4e>
 8010f7c:	085b      	lsrs	r3, r3, #1
 8010f7e:	f100 0001 	add.w	r0, r0, #1
 8010f82:	d003      	beq.n	8010f8c <__lo0bits+0x56>
 8010f84:	6013      	str	r3, [r2, #0]
 8010f86:	4770      	bx	lr
 8010f88:	2000      	movs	r0, #0
 8010f8a:	4770      	bx	lr
 8010f8c:	2020      	movs	r0, #32
 8010f8e:	4770      	bx	lr

08010f90 <__i2b>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	460c      	mov	r4, r1
 8010f94:	2101      	movs	r1, #1
 8010f96:	f7ff febd 	bl	8010d14 <_Balloc>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	b928      	cbnz	r0, 8010faa <__i2b+0x1a>
 8010f9e:	4b05      	ldr	r3, [pc, #20]	@ (8010fb4 <__i2b+0x24>)
 8010fa0:	4805      	ldr	r0, [pc, #20]	@ (8010fb8 <__i2b+0x28>)
 8010fa2:	f240 1145 	movw	r1, #325	@ 0x145
 8010fa6:	f000 fe0d 	bl	8011bc4 <__assert_func>
 8010faa:	2301      	movs	r3, #1
 8010fac:	6144      	str	r4, [r0, #20]
 8010fae:	6103      	str	r3, [r0, #16]
 8010fb0:	bd10      	pop	{r4, pc}
 8010fb2:	bf00      	nop
 8010fb4:	0801489d 	.word	0x0801489d
 8010fb8:	0801490e 	.word	0x0801490e

08010fbc <__multiply>:
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	690a      	ldr	r2, [r1, #16]
 8010fc4:	6923      	ldr	r3, [r4, #16]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	bfa8      	it	ge
 8010fca:	4623      	movge	r3, r4
 8010fcc:	460f      	mov	r7, r1
 8010fce:	bfa4      	itt	ge
 8010fd0:	460c      	movge	r4, r1
 8010fd2:	461f      	movge	r7, r3
 8010fd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010fd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010fdc:	68a3      	ldr	r3, [r4, #8]
 8010fde:	6861      	ldr	r1, [r4, #4]
 8010fe0:	eb0a 0609 	add.w	r6, sl, r9
 8010fe4:	42b3      	cmp	r3, r6
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	bfb8      	it	lt
 8010fea:	3101      	addlt	r1, #1
 8010fec:	f7ff fe92 	bl	8010d14 <_Balloc>
 8010ff0:	b930      	cbnz	r0, 8011000 <__multiply+0x44>
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	4b44      	ldr	r3, [pc, #272]	@ (8011108 <__multiply+0x14c>)
 8010ff6:	4845      	ldr	r0, [pc, #276]	@ (801110c <__multiply+0x150>)
 8010ff8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ffc:	f000 fde2 	bl	8011bc4 <__assert_func>
 8011000:	f100 0514 	add.w	r5, r0, #20
 8011004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011008:	462b      	mov	r3, r5
 801100a:	2200      	movs	r2, #0
 801100c:	4543      	cmp	r3, r8
 801100e:	d321      	bcc.n	8011054 <__multiply+0x98>
 8011010:	f107 0114 	add.w	r1, r7, #20
 8011014:	f104 0214 	add.w	r2, r4, #20
 8011018:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801101c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011020:	9302      	str	r3, [sp, #8]
 8011022:	1b13      	subs	r3, r2, r4
 8011024:	3b15      	subs	r3, #21
 8011026:	f023 0303 	bic.w	r3, r3, #3
 801102a:	3304      	adds	r3, #4
 801102c:	f104 0715 	add.w	r7, r4, #21
 8011030:	42ba      	cmp	r2, r7
 8011032:	bf38      	it	cc
 8011034:	2304      	movcc	r3, #4
 8011036:	9301      	str	r3, [sp, #4]
 8011038:	9b02      	ldr	r3, [sp, #8]
 801103a:	9103      	str	r1, [sp, #12]
 801103c:	428b      	cmp	r3, r1
 801103e:	d80c      	bhi.n	801105a <__multiply+0x9e>
 8011040:	2e00      	cmp	r6, #0
 8011042:	dd03      	ble.n	801104c <__multiply+0x90>
 8011044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011048:	2b00      	cmp	r3, #0
 801104a:	d05b      	beq.n	8011104 <__multiply+0x148>
 801104c:	6106      	str	r6, [r0, #16]
 801104e:	b005      	add	sp, #20
 8011050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011054:	f843 2b04 	str.w	r2, [r3], #4
 8011058:	e7d8      	b.n	801100c <__multiply+0x50>
 801105a:	f8b1 a000 	ldrh.w	sl, [r1]
 801105e:	f1ba 0f00 	cmp.w	sl, #0
 8011062:	d024      	beq.n	80110ae <__multiply+0xf2>
 8011064:	f104 0e14 	add.w	lr, r4, #20
 8011068:	46a9      	mov	r9, r5
 801106a:	f04f 0c00 	mov.w	ip, #0
 801106e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011072:	f8d9 3000 	ldr.w	r3, [r9]
 8011076:	fa1f fb87 	uxth.w	fp, r7
 801107a:	b29b      	uxth	r3, r3
 801107c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011080:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011084:	f8d9 7000 	ldr.w	r7, [r9]
 8011088:	4463      	add	r3, ip
 801108a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801108e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011092:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011096:	b29b      	uxth	r3, r3
 8011098:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801109c:	4572      	cmp	r2, lr
 801109e:	f849 3b04 	str.w	r3, [r9], #4
 80110a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80110a6:	d8e2      	bhi.n	801106e <__multiply+0xb2>
 80110a8:	9b01      	ldr	r3, [sp, #4]
 80110aa:	f845 c003 	str.w	ip, [r5, r3]
 80110ae:	9b03      	ldr	r3, [sp, #12]
 80110b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110b4:	3104      	adds	r1, #4
 80110b6:	f1b9 0f00 	cmp.w	r9, #0
 80110ba:	d021      	beq.n	8011100 <__multiply+0x144>
 80110bc:	682b      	ldr	r3, [r5, #0]
 80110be:	f104 0c14 	add.w	ip, r4, #20
 80110c2:	46ae      	mov	lr, r5
 80110c4:	f04f 0a00 	mov.w	sl, #0
 80110c8:	f8bc b000 	ldrh.w	fp, [ip]
 80110cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80110d0:	fb09 770b 	mla	r7, r9, fp, r7
 80110d4:	4457      	add	r7, sl
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80110dc:	f84e 3b04 	str.w	r3, [lr], #4
 80110e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80110e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110e8:	f8be 3000 	ldrh.w	r3, [lr]
 80110ec:	fb09 330a 	mla	r3, r9, sl, r3
 80110f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80110f4:	4562      	cmp	r2, ip
 80110f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110fa:	d8e5      	bhi.n	80110c8 <__multiply+0x10c>
 80110fc:	9f01      	ldr	r7, [sp, #4]
 80110fe:	51eb      	str	r3, [r5, r7]
 8011100:	3504      	adds	r5, #4
 8011102:	e799      	b.n	8011038 <__multiply+0x7c>
 8011104:	3e01      	subs	r6, #1
 8011106:	e79b      	b.n	8011040 <__multiply+0x84>
 8011108:	0801489d 	.word	0x0801489d
 801110c:	0801490e 	.word	0x0801490e

08011110 <__pow5mult>:
 8011110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011114:	4615      	mov	r5, r2
 8011116:	f012 0203 	ands.w	r2, r2, #3
 801111a:	4607      	mov	r7, r0
 801111c:	460e      	mov	r6, r1
 801111e:	d007      	beq.n	8011130 <__pow5mult+0x20>
 8011120:	4c25      	ldr	r4, [pc, #148]	@ (80111b8 <__pow5mult+0xa8>)
 8011122:	3a01      	subs	r2, #1
 8011124:	2300      	movs	r3, #0
 8011126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801112a:	f7ff fe55 	bl	8010dd8 <__multadd>
 801112e:	4606      	mov	r6, r0
 8011130:	10ad      	asrs	r5, r5, #2
 8011132:	d03d      	beq.n	80111b0 <__pow5mult+0xa0>
 8011134:	69fc      	ldr	r4, [r7, #28]
 8011136:	b97c      	cbnz	r4, 8011158 <__pow5mult+0x48>
 8011138:	2010      	movs	r0, #16
 801113a:	f7fc fceb 	bl	800db14 <malloc>
 801113e:	4602      	mov	r2, r0
 8011140:	61f8      	str	r0, [r7, #28]
 8011142:	b928      	cbnz	r0, 8011150 <__pow5mult+0x40>
 8011144:	4b1d      	ldr	r3, [pc, #116]	@ (80111bc <__pow5mult+0xac>)
 8011146:	481e      	ldr	r0, [pc, #120]	@ (80111c0 <__pow5mult+0xb0>)
 8011148:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801114c:	f000 fd3a 	bl	8011bc4 <__assert_func>
 8011150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011154:	6004      	str	r4, [r0, #0]
 8011156:	60c4      	str	r4, [r0, #12]
 8011158:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801115c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011160:	b94c      	cbnz	r4, 8011176 <__pow5mult+0x66>
 8011162:	f240 2171 	movw	r1, #625	@ 0x271
 8011166:	4638      	mov	r0, r7
 8011168:	f7ff ff12 	bl	8010f90 <__i2b>
 801116c:	2300      	movs	r3, #0
 801116e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011172:	4604      	mov	r4, r0
 8011174:	6003      	str	r3, [r0, #0]
 8011176:	f04f 0900 	mov.w	r9, #0
 801117a:	07eb      	lsls	r3, r5, #31
 801117c:	d50a      	bpl.n	8011194 <__pow5mult+0x84>
 801117e:	4631      	mov	r1, r6
 8011180:	4622      	mov	r2, r4
 8011182:	4638      	mov	r0, r7
 8011184:	f7ff ff1a 	bl	8010fbc <__multiply>
 8011188:	4631      	mov	r1, r6
 801118a:	4680      	mov	r8, r0
 801118c:	4638      	mov	r0, r7
 801118e:	f7ff fe01 	bl	8010d94 <_Bfree>
 8011192:	4646      	mov	r6, r8
 8011194:	106d      	asrs	r5, r5, #1
 8011196:	d00b      	beq.n	80111b0 <__pow5mult+0xa0>
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	b938      	cbnz	r0, 80111ac <__pow5mult+0x9c>
 801119c:	4622      	mov	r2, r4
 801119e:	4621      	mov	r1, r4
 80111a0:	4638      	mov	r0, r7
 80111a2:	f7ff ff0b 	bl	8010fbc <__multiply>
 80111a6:	6020      	str	r0, [r4, #0]
 80111a8:	f8c0 9000 	str.w	r9, [r0]
 80111ac:	4604      	mov	r4, r0
 80111ae:	e7e4      	b.n	801117a <__pow5mult+0x6a>
 80111b0:	4630      	mov	r0, r6
 80111b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b6:	bf00      	nop
 80111b8:	08014968 	.word	0x08014968
 80111bc:	0801482e 	.word	0x0801482e
 80111c0:	0801490e 	.word	0x0801490e

080111c4 <__lshift>:
 80111c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c8:	460c      	mov	r4, r1
 80111ca:	6849      	ldr	r1, [r1, #4]
 80111cc:	6923      	ldr	r3, [r4, #16]
 80111ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111d2:	68a3      	ldr	r3, [r4, #8]
 80111d4:	4607      	mov	r7, r0
 80111d6:	4691      	mov	r9, r2
 80111d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111dc:	f108 0601 	add.w	r6, r8, #1
 80111e0:	42b3      	cmp	r3, r6
 80111e2:	db0b      	blt.n	80111fc <__lshift+0x38>
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7ff fd95 	bl	8010d14 <_Balloc>
 80111ea:	4605      	mov	r5, r0
 80111ec:	b948      	cbnz	r0, 8011202 <__lshift+0x3e>
 80111ee:	4602      	mov	r2, r0
 80111f0:	4b28      	ldr	r3, [pc, #160]	@ (8011294 <__lshift+0xd0>)
 80111f2:	4829      	ldr	r0, [pc, #164]	@ (8011298 <__lshift+0xd4>)
 80111f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111f8:	f000 fce4 	bl	8011bc4 <__assert_func>
 80111fc:	3101      	adds	r1, #1
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	e7ee      	b.n	80111e0 <__lshift+0x1c>
 8011202:	2300      	movs	r3, #0
 8011204:	f100 0114 	add.w	r1, r0, #20
 8011208:	f100 0210 	add.w	r2, r0, #16
 801120c:	4618      	mov	r0, r3
 801120e:	4553      	cmp	r3, sl
 8011210:	db33      	blt.n	801127a <__lshift+0xb6>
 8011212:	6920      	ldr	r0, [r4, #16]
 8011214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011218:	f104 0314 	add.w	r3, r4, #20
 801121c:	f019 091f 	ands.w	r9, r9, #31
 8011220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011228:	d02b      	beq.n	8011282 <__lshift+0xbe>
 801122a:	f1c9 0e20 	rsb	lr, r9, #32
 801122e:	468a      	mov	sl, r1
 8011230:	2200      	movs	r2, #0
 8011232:	6818      	ldr	r0, [r3, #0]
 8011234:	fa00 f009 	lsl.w	r0, r0, r9
 8011238:	4310      	orrs	r0, r2
 801123a:	f84a 0b04 	str.w	r0, [sl], #4
 801123e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011242:	459c      	cmp	ip, r3
 8011244:	fa22 f20e 	lsr.w	r2, r2, lr
 8011248:	d8f3      	bhi.n	8011232 <__lshift+0x6e>
 801124a:	ebac 0304 	sub.w	r3, ip, r4
 801124e:	3b15      	subs	r3, #21
 8011250:	f023 0303 	bic.w	r3, r3, #3
 8011254:	3304      	adds	r3, #4
 8011256:	f104 0015 	add.w	r0, r4, #21
 801125a:	4584      	cmp	ip, r0
 801125c:	bf38      	it	cc
 801125e:	2304      	movcc	r3, #4
 8011260:	50ca      	str	r2, [r1, r3]
 8011262:	b10a      	cbz	r2, 8011268 <__lshift+0xa4>
 8011264:	f108 0602 	add.w	r6, r8, #2
 8011268:	3e01      	subs	r6, #1
 801126a:	4638      	mov	r0, r7
 801126c:	612e      	str	r6, [r5, #16]
 801126e:	4621      	mov	r1, r4
 8011270:	f7ff fd90 	bl	8010d94 <_Bfree>
 8011274:	4628      	mov	r0, r5
 8011276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801127a:	f842 0f04 	str.w	r0, [r2, #4]!
 801127e:	3301      	adds	r3, #1
 8011280:	e7c5      	b.n	801120e <__lshift+0x4a>
 8011282:	3904      	subs	r1, #4
 8011284:	f853 2b04 	ldr.w	r2, [r3], #4
 8011288:	f841 2f04 	str.w	r2, [r1, #4]!
 801128c:	459c      	cmp	ip, r3
 801128e:	d8f9      	bhi.n	8011284 <__lshift+0xc0>
 8011290:	e7ea      	b.n	8011268 <__lshift+0xa4>
 8011292:	bf00      	nop
 8011294:	0801489d 	.word	0x0801489d
 8011298:	0801490e 	.word	0x0801490e

0801129c <__mcmp>:
 801129c:	690a      	ldr	r2, [r1, #16]
 801129e:	4603      	mov	r3, r0
 80112a0:	6900      	ldr	r0, [r0, #16]
 80112a2:	1a80      	subs	r0, r0, r2
 80112a4:	b530      	push	{r4, r5, lr}
 80112a6:	d10e      	bne.n	80112c6 <__mcmp+0x2a>
 80112a8:	3314      	adds	r3, #20
 80112aa:	3114      	adds	r1, #20
 80112ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112bc:	4295      	cmp	r5, r2
 80112be:	d003      	beq.n	80112c8 <__mcmp+0x2c>
 80112c0:	d205      	bcs.n	80112ce <__mcmp+0x32>
 80112c2:	f04f 30ff 	mov.w	r0, #4294967295
 80112c6:	bd30      	pop	{r4, r5, pc}
 80112c8:	42a3      	cmp	r3, r4
 80112ca:	d3f3      	bcc.n	80112b4 <__mcmp+0x18>
 80112cc:	e7fb      	b.n	80112c6 <__mcmp+0x2a>
 80112ce:	2001      	movs	r0, #1
 80112d0:	e7f9      	b.n	80112c6 <__mcmp+0x2a>
	...

080112d4 <__mdiff>:
 80112d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d8:	4689      	mov	r9, r1
 80112da:	4606      	mov	r6, r0
 80112dc:	4611      	mov	r1, r2
 80112de:	4648      	mov	r0, r9
 80112e0:	4614      	mov	r4, r2
 80112e2:	f7ff ffdb 	bl	801129c <__mcmp>
 80112e6:	1e05      	subs	r5, r0, #0
 80112e8:	d112      	bne.n	8011310 <__mdiff+0x3c>
 80112ea:	4629      	mov	r1, r5
 80112ec:	4630      	mov	r0, r6
 80112ee:	f7ff fd11 	bl	8010d14 <_Balloc>
 80112f2:	4602      	mov	r2, r0
 80112f4:	b928      	cbnz	r0, 8011302 <__mdiff+0x2e>
 80112f6:	4b3f      	ldr	r3, [pc, #252]	@ (80113f4 <__mdiff+0x120>)
 80112f8:	f240 2137 	movw	r1, #567	@ 0x237
 80112fc:	483e      	ldr	r0, [pc, #248]	@ (80113f8 <__mdiff+0x124>)
 80112fe:	f000 fc61 	bl	8011bc4 <__assert_func>
 8011302:	2301      	movs	r3, #1
 8011304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011308:	4610      	mov	r0, r2
 801130a:	b003      	add	sp, #12
 801130c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011310:	bfbc      	itt	lt
 8011312:	464b      	movlt	r3, r9
 8011314:	46a1      	movlt	r9, r4
 8011316:	4630      	mov	r0, r6
 8011318:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801131c:	bfba      	itte	lt
 801131e:	461c      	movlt	r4, r3
 8011320:	2501      	movlt	r5, #1
 8011322:	2500      	movge	r5, #0
 8011324:	f7ff fcf6 	bl	8010d14 <_Balloc>
 8011328:	4602      	mov	r2, r0
 801132a:	b918      	cbnz	r0, 8011334 <__mdiff+0x60>
 801132c:	4b31      	ldr	r3, [pc, #196]	@ (80113f4 <__mdiff+0x120>)
 801132e:	f240 2145 	movw	r1, #581	@ 0x245
 8011332:	e7e3      	b.n	80112fc <__mdiff+0x28>
 8011334:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011338:	6926      	ldr	r6, [r4, #16]
 801133a:	60c5      	str	r5, [r0, #12]
 801133c:	f109 0310 	add.w	r3, r9, #16
 8011340:	f109 0514 	add.w	r5, r9, #20
 8011344:	f104 0e14 	add.w	lr, r4, #20
 8011348:	f100 0b14 	add.w	fp, r0, #20
 801134c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011350:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	46d9      	mov	r9, fp
 8011358:	f04f 0c00 	mov.w	ip, #0
 801135c:	9b01      	ldr	r3, [sp, #4]
 801135e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011362:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011366:	9301      	str	r3, [sp, #4]
 8011368:	fa1f f38a 	uxth.w	r3, sl
 801136c:	4619      	mov	r1, r3
 801136e:	b283      	uxth	r3, r0
 8011370:	1acb      	subs	r3, r1, r3
 8011372:	0c00      	lsrs	r0, r0, #16
 8011374:	4463      	add	r3, ip
 8011376:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801137a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801137e:	b29b      	uxth	r3, r3
 8011380:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011384:	4576      	cmp	r6, lr
 8011386:	f849 3b04 	str.w	r3, [r9], #4
 801138a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801138e:	d8e5      	bhi.n	801135c <__mdiff+0x88>
 8011390:	1b33      	subs	r3, r6, r4
 8011392:	3b15      	subs	r3, #21
 8011394:	f023 0303 	bic.w	r3, r3, #3
 8011398:	3415      	adds	r4, #21
 801139a:	3304      	adds	r3, #4
 801139c:	42a6      	cmp	r6, r4
 801139e:	bf38      	it	cc
 80113a0:	2304      	movcc	r3, #4
 80113a2:	441d      	add	r5, r3
 80113a4:	445b      	add	r3, fp
 80113a6:	461e      	mov	r6, r3
 80113a8:	462c      	mov	r4, r5
 80113aa:	4544      	cmp	r4, r8
 80113ac:	d30e      	bcc.n	80113cc <__mdiff+0xf8>
 80113ae:	f108 0103 	add.w	r1, r8, #3
 80113b2:	1b49      	subs	r1, r1, r5
 80113b4:	f021 0103 	bic.w	r1, r1, #3
 80113b8:	3d03      	subs	r5, #3
 80113ba:	45a8      	cmp	r8, r5
 80113bc:	bf38      	it	cc
 80113be:	2100      	movcc	r1, #0
 80113c0:	440b      	add	r3, r1
 80113c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113c6:	b191      	cbz	r1, 80113ee <__mdiff+0x11a>
 80113c8:	6117      	str	r7, [r2, #16]
 80113ca:	e79d      	b.n	8011308 <__mdiff+0x34>
 80113cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80113d0:	46e6      	mov	lr, ip
 80113d2:	0c08      	lsrs	r0, r1, #16
 80113d4:	fa1c fc81 	uxtah	ip, ip, r1
 80113d8:	4471      	add	r1, lr
 80113da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113de:	b289      	uxth	r1, r1
 80113e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113e4:	f846 1b04 	str.w	r1, [r6], #4
 80113e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113ec:	e7dd      	b.n	80113aa <__mdiff+0xd6>
 80113ee:	3f01      	subs	r7, #1
 80113f0:	e7e7      	b.n	80113c2 <__mdiff+0xee>
 80113f2:	bf00      	nop
 80113f4:	0801489d 	.word	0x0801489d
 80113f8:	0801490e 	.word	0x0801490e

080113fc <__ulp>:
 80113fc:	b082      	sub	sp, #8
 80113fe:	ed8d 0b00 	vstr	d0, [sp]
 8011402:	9a01      	ldr	r2, [sp, #4]
 8011404:	4b0f      	ldr	r3, [pc, #60]	@ (8011444 <__ulp+0x48>)
 8011406:	4013      	ands	r3, r2
 8011408:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801140c:	2b00      	cmp	r3, #0
 801140e:	dc08      	bgt.n	8011422 <__ulp+0x26>
 8011410:	425b      	negs	r3, r3
 8011412:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011416:	ea4f 5223 	mov.w	r2, r3, asr #20
 801141a:	da04      	bge.n	8011426 <__ulp+0x2a>
 801141c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011420:	4113      	asrs	r3, r2
 8011422:	2200      	movs	r2, #0
 8011424:	e008      	b.n	8011438 <__ulp+0x3c>
 8011426:	f1a2 0314 	sub.w	r3, r2, #20
 801142a:	2b1e      	cmp	r3, #30
 801142c:	bfda      	itte	le
 801142e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011432:	40da      	lsrle	r2, r3
 8011434:	2201      	movgt	r2, #1
 8011436:	2300      	movs	r3, #0
 8011438:	4619      	mov	r1, r3
 801143a:	4610      	mov	r0, r2
 801143c:	ec41 0b10 	vmov	d0, r0, r1
 8011440:	b002      	add	sp, #8
 8011442:	4770      	bx	lr
 8011444:	7ff00000 	.word	0x7ff00000

08011448 <__b2d>:
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	6906      	ldr	r6, [r0, #16]
 801144e:	f100 0814 	add.w	r8, r0, #20
 8011452:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011456:	1f37      	subs	r7, r6, #4
 8011458:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801145c:	4610      	mov	r0, r2
 801145e:	f7ff fd4b 	bl	8010ef8 <__hi0bits>
 8011462:	f1c0 0320 	rsb	r3, r0, #32
 8011466:	280a      	cmp	r0, #10
 8011468:	600b      	str	r3, [r1, #0]
 801146a:	491b      	ldr	r1, [pc, #108]	@ (80114d8 <__b2d+0x90>)
 801146c:	dc15      	bgt.n	801149a <__b2d+0x52>
 801146e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011472:	fa22 f30c 	lsr.w	r3, r2, ip
 8011476:	45b8      	cmp	r8, r7
 8011478:	ea43 0501 	orr.w	r5, r3, r1
 801147c:	bf34      	ite	cc
 801147e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011482:	2300      	movcs	r3, #0
 8011484:	3015      	adds	r0, #21
 8011486:	fa02 f000 	lsl.w	r0, r2, r0
 801148a:	fa23 f30c 	lsr.w	r3, r3, ip
 801148e:	4303      	orrs	r3, r0
 8011490:	461c      	mov	r4, r3
 8011492:	ec45 4b10 	vmov	d0, r4, r5
 8011496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149a:	45b8      	cmp	r8, r7
 801149c:	bf3a      	itte	cc
 801149e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80114a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80114a6:	2300      	movcs	r3, #0
 80114a8:	380b      	subs	r0, #11
 80114aa:	d012      	beq.n	80114d2 <__b2d+0x8a>
 80114ac:	f1c0 0120 	rsb	r1, r0, #32
 80114b0:	fa23 f401 	lsr.w	r4, r3, r1
 80114b4:	4082      	lsls	r2, r0
 80114b6:	4322      	orrs	r2, r4
 80114b8:	4547      	cmp	r7, r8
 80114ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80114be:	bf8c      	ite	hi
 80114c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80114c4:	2200      	movls	r2, #0
 80114c6:	4083      	lsls	r3, r0
 80114c8:	40ca      	lsrs	r2, r1
 80114ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80114ce:	4313      	orrs	r3, r2
 80114d0:	e7de      	b.n	8011490 <__b2d+0x48>
 80114d2:	ea42 0501 	orr.w	r5, r2, r1
 80114d6:	e7db      	b.n	8011490 <__b2d+0x48>
 80114d8:	3ff00000 	.word	0x3ff00000

080114dc <__d2b>:
 80114dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114e0:	460f      	mov	r7, r1
 80114e2:	2101      	movs	r1, #1
 80114e4:	ec59 8b10 	vmov	r8, r9, d0
 80114e8:	4616      	mov	r6, r2
 80114ea:	f7ff fc13 	bl	8010d14 <_Balloc>
 80114ee:	4604      	mov	r4, r0
 80114f0:	b930      	cbnz	r0, 8011500 <__d2b+0x24>
 80114f2:	4602      	mov	r2, r0
 80114f4:	4b23      	ldr	r3, [pc, #140]	@ (8011584 <__d2b+0xa8>)
 80114f6:	4824      	ldr	r0, [pc, #144]	@ (8011588 <__d2b+0xac>)
 80114f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80114fc:	f000 fb62 	bl	8011bc4 <__assert_func>
 8011500:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011504:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011508:	b10d      	cbz	r5, 801150e <__d2b+0x32>
 801150a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801150e:	9301      	str	r3, [sp, #4]
 8011510:	f1b8 0300 	subs.w	r3, r8, #0
 8011514:	d023      	beq.n	801155e <__d2b+0x82>
 8011516:	4668      	mov	r0, sp
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	f7ff fd0c 	bl	8010f36 <__lo0bits>
 801151e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011522:	b1d0      	cbz	r0, 801155a <__d2b+0x7e>
 8011524:	f1c0 0320 	rsb	r3, r0, #32
 8011528:	fa02 f303 	lsl.w	r3, r2, r3
 801152c:	430b      	orrs	r3, r1
 801152e:	40c2      	lsrs	r2, r0
 8011530:	6163      	str	r3, [r4, #20]
 8011532:	9201      	str	r2, [sp, #4]
 8011534:	9b01      	ldr	r3, [sp, #4]
 8011536:	61a3      	str	r3, [r4, #24]
 8011538:	2b00      	cmp	r3, #0
 801153a:	bf0c      	ite	eq
 801153c:	2201      	moveq	r2, #1
 801153e:	2202      	movne	r2, #2
 8011540:	6122      	str	r2, [r4, #16]
 8011542:	b1a5      	cbz	r5, 801156e <__d2b+0x92>
 8011544:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011548:	4405      	add	r5, r0
 801154a:	603d      	str	r5, [r7, #0]
 801154c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011550:	6030      	str	r0, [r6, #0]
 8011552:	4620      	mov	r0, r4
 8011554:	b003      	add	sp, #12
 8011556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801155a:	6161      	str	r1, [r4, #20]
 801155c:	e7ea      	b.n	8011534 <__d2b+0x58>
 801155e:	a801      	add	r0, sp, #4
 8011560:	f7ff fce9 	bl	8010f36 <__lo0bits>
 8011564:	9b01      	ldr	r3, [sp, #4]
 8011566:	6163      	str	r3, [r4, #20]
 8011568:	3020      	adds	r0, #32
 801156a:	2201      	movs	r2, #1
 801156c:	e7e8      	b.n	8011540 <__d2b+0x64>
 801156e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011572:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011576:	6038      	str	r0, [r7, #0]
 8011578:	6918      	ldr	r0, [r3, #16]
 801157a:	f7ff fcbd 	bl	8010ef8 <__hi0bits>
 801157e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011582:	e7e5      	b.n	8011550 <__d2b+0x74>
 8011584:	0801489d 	.word	0x0801489d
 8011588:	0801490e 	.word	0x0801490e

0801158c <__ratio>:
 801158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011590:	b085      	sub	sp, #20
 8011592:	e9cd 1000 	strd	r1, r0, [sp]
 8011596:	a902      	add	r1, sp, #8
 8011598:	f7ff ff56 	bl	8011448 <__b2d>
 801159c:	9800      	ldr	r0, [sp, #0]
 801159e:	a903      	add	r1, sp, #12
 80115a0:	ec55 4b10 	vmov	r4, r5, d0
 80115a4:	f7ff ff50 	bl	8011448 <__b2d>
 80115a8:	9b01      	ldr	r3, [sp, #4]
 80115aa:	6919      	ldr	r1, [r3, #16]
 80115ac:	9b00      	ldr	r3, [sp, #0]
 80115ae:	691b      	ldr	r3, [r3, #16]
 80115b0:	1ac9      	subs	r1, r1, r3
 80115b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80115b6:	1a9b      	subs	r3, r3, r2
 80115b8:	ec5b ab10 	vmov	sl, fp, d0
 80115bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	bfce      	itee	gt
 80115c4:	462a      	movgt	r2, r5
 80115c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80115ca:	465a      	movle	r2, fp
 80115cc:	462f      	mov	r7, r5
 80115ce:	46d9      	mov	r9, fp
 80115d0:	bfcc      	ite	gt
 80115d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80115d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80115da:	464b      	mov	r3, r9
 80115dc:	4652      	mov	r2, sl
 80115de:	4620      	mov	r0, r4
 80115e0:	4639      	mov	r1, r7
 80115e2:	f7ef f953 	bl	800088c <__aeabi_ddiv>
 80115e6:	ec41 0b10 	vmov	d0, r0, r1
 80115ea:	b005      	add	sp, #20
 80115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115f0 <__copybits>:
 80115f0:	3901      	subs	r1, #1
 80115f2:	b570      	push	{r4, r5, r6, lr}
 80115f4:	1149      	asrs	r1, r1, #5
 80115f6:	6914      	ldr	r4, [r2, #16]
 80115f8:	3101      	adds	r1, #1
 80115fa:	f102 0314 	add.w	r3, r2, #20
 80115fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011602:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011606:	1f05      	subs	r5, r0, #4
 8011608:	42a3      	cmp	r3, r4
 801160a:	d30c      	bcc.n	8011626 <__copybits+0x36>
 801160c:	1aa3      	subs	r3, r4, r2
 801160e:	3b11      	subs	r3, #17
 8011610:	f023 0303 	bic.w	r3, r3, #3
 8011614:	3211      	adds	r2, #17
 8011616:	42a2      	cmp	r2, r4
 8011618:	bf88      	it	hi
 801161a:	2300      	movhi	r3, #0
 801161c:	4418      	add	r0, r3
 801161e:	2300      	movs	r3, #0
 8011620:	4288      	cmp	r0, r1
 8011622:	d305      	bcc.n	8011630 <__copybits+0x40>
 8011624:	bd70      	pop	{r4, r5, r6, pc}
 8011626:	f853 6b04 	ldr.w	r6, [r3], #4
 801162a:	f845 6f04 	str.w	r6, [r5, #4]!
 801162e:	e7eb      	b.n	8011608 <__copybits+0x18>
 8011630:	f840 3b04 	str.w	r3, [r0], #4
 8011634:	e7f4      	b.n	8011620 <__copybits+0x30>

08011636 <__any_on>:
 8011636:	f100 0214 	add.w	r2, r0, #20
 801163a:	6900      	ldr	r0, [r0, #16]
 801163c:	114b      	asrs	r3, r1, #5
 801163e:	4298      	cmp	r0, r3
 8011640:	b510      	push	{r4, lr}
 8011642:	db11      	blt.n	8011668 <__any_on+0x32>
 8011644:	dd0a      	ble.n	801165c <__any_on+0x26>
 8011646:	f011 011f 	ands.w	r1, r1, #31
 801164a:	d007      	beq.n	801165c <__any_on+0x26>
 801164c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011650:	fa24 f001 	lsr.w	r0, r4, r1
 8011654:	fa00 f101 	lsl.w	r1, r0, r1
 8011658:	428c      	cmp	r4, r1
 801165a:	d10b      	bne.n	8011674 <__any_on+0x3e>
 801165c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011660:	4293      	cmp	r3, r2
 8011662:	d803      	bhi.n	801166c <__any_on+0x36>
 8011664:	2000      	movs	r0, #0
 8011666:	bd10      	pop	{r4, pc}
 8011668:	4603      	mov	r3, r0
 801166a:	e7f7      	b.n	801165c <__any_on+0x26>
 801166c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011670:	2900      	cmp	r1, #0
 8011672:	d0f5      	beq.n	8011660 <__any_on+0x2a>
 8011674:	2001      	movs	r0, #1
 8011676:	e7f6      	b.n	8011666 <__any_on+0x30>

08011678 <_strtol_l.constprop.0>:
 8011678:	2b24      	cmp	r3, #36	@ 0x24
 801167a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167e:	4686      	mov	lr, r0
 8011680:	4690      	mov	r8, r2
 8011682:	d801      	bhi.n	8011688 <_strtol_l.constprop.0+0x10>
 8011684:	2b01      	cmp	r3, #1
 8011686:	d106      	bne.n	8011696 <_strtol_l.constprop.0+0x1e>
 8011688:	f7fe f916 	bl	800f8b8 <__errno>
 801168c:	2316      	movs	r3, #22
 801168e:	6003      	str	r3, [r0, #0]
 8011690:	2000      	movs	r0, #0
 8011692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011696:	4834      	ldr	r0, [pc, #208]	@ (8011768 <_strtol_l.constprop.0+0xf0>)
 8011698:	460d      	mov	r5, r1
 801169a:	462a      	mov	r2, r5
 801169c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116a0:	5d06      	ldrb	r6, [r0, r4]
 80116a2:	f016 0608 	ands.w	r6, r6, #8
 80116a6:	d1f8      	bne.n	801169a <_strtol_l.constprop.0+0x22>
 80116a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80116aa:	d12d      	bne.n	8011708 <_strtol_l.constprop.0+0x90>
 80116ac:	782c      	ldrb	r4, [r5, #0]
 80116ae:	2601      	movs	r6, #1
 80116b0:	1c95      	adds	r5, r2, #2
 80116b2:	f033 0210 	bics.w	r2, r3, #16
 80116b6:	d109      	bne.n	80116cc <_strtol_l.constprop.0+0x54>
 80116b8:	2c30      	cmp	r4, #48	@ 0x30
 80116ba:	d12a      	bne.n	8011712 <_strtol_l.constprop.0+0x9a>
 80116bc:	782a      	ldrb	r2, [r5, #0]
 80116be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80116c2:	2a58      	cmp	r2, #88	@ 0x58
 80116c4:	d125      	bne.n	8011712 <_strtol_l.constprop.0+0x9a>
 80116c6:	786c      	ldrb	r4, [r5, #1]
 80116c8:	2310      	movs	r3, #16
 80116ca:	3502      	adds	r5, #2
 80116cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80116d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116d4:	2200      	movs	r2, #0
 80116d6:	fbbc f9f3 	udiv	r9, ip, r3
 80116da:	4610      	mov	r0, r2
 80116dc:	fb03 ca19 	mls	sl, r3, r9, ip
 80116e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80116e4:	2f09      	cmp	r7, #9
 80116e6:	d81b      	bhi.n	8011720 <_strtol_l.constprop.0+0xa8>
 80116e8:	463c      	mov	r4, r7
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	dd27      	ble.n	801173e <_strtol_l.constprop.0+0xc6>
 80116ee:	1c57      	adds	r7, r2, #1
 80116f0:	d007      	beq.n	8011702 <_strtol_l.constprop.0+0x8a>
 80116f2:	4581      	cmp	r9, r0
 80116f4:	d320      	bcc.n	8011738 <_strtol_l.constprop.0+0xc0>
 80116f6:	d101      	bne.n	80116fc <_strtol_l.constprop.0+0x84>
 80116f8:	45a2      	cmp	sl, r4
 80116fa:	db1d      	blt.n	8011738 <_strtol_l.constprop.0+0xc0>
 80116fc:	fb00 4003 	mla	r0, r0, r3, r4
 8011700:	2201      	movs	r2, #1
 8011702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011706:	e7eb      	b.n	80116e0 <_strtol_l.constprop.0+0x68>
 8011708:	2c2b      	cmp	r4, #43	@ 0x2b
 801170a:	bf04      	itt	eq
 801170c:	782c      	ldrbeq	r4, [r5, #0]
 801170e:	1c95      	addeq	r5, r2, #2
 8011710:	e7cf      	b.n	80116b2 <_strtol_l.constprop.0+0x3a>
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1da      	bne.n	80116cc <_strtol_l.constprop.0+0x54>
 8011716:	2c30      	cmp	r4, #48	@ 0x30
 8011718:	bf0c      	ite	eq
 801171a:	2308      	moveq	r3, #8
 801171c:	230a      	movne	r3, #10
 801171e:	e7d5      	b.n	80116cc <_strtol_l.constprop.0+0x54>
 8011720:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011724:	2f19      	cmp	r7, #25
 8011726:	d801      	bhi.n	801172c <_strtol_l.constprop.0+0xb4>
 8011728:	3c37      	subs	r4, #55	@ 0x37
 801172a:	e7de      	b.n	80116ea <_strtol_l.constprop.0+0x72>
 801172c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011730:	2f19      	cmp	r7, #25
 8011732:	d804      	bhi.n	801173e <_strtol_l.constprop.0+0xc6>
 8011734:	3c57      	subs	r4, #87	@ 0x57
 8011736:	e7d8      	b.n	80116ea <_strtol_l.constprop.0+0x72>
 8011738:	f04f 32ff 	mov.w	r2, #4294967295
 801173c:	e7e1      	b.n	8011702 <_strtol_l.constprop.0+0x8a>
 801173e:	1c53      	adds	r3, r2, #1
 8011740:	d108      	bne.n	8011754 <_strtol_l.constprop.0+0xdc>
 8011742:	2322      	movs	r3, #34	@ 0x22
 8011744:	f8ce 3000 	str.w	r3, [lr]
 8011748:	4660      	mov	r0, ip
 801174a:	f1b8 0f00 	cmp.w	r8, #0
 801174e:	d0a0      	beq.n	8011692 <_strtol_l.constprop.0+0x1a>
 8011750:	1e69      	subs	r1, r5, #1
 8011752:	e006      	b.n	8011762 <_strtol_l.constprop.0+0xea>
 8011754:	b106      	cbz	r6, 8011758 <_strtol_l.constprop.0+0xe0>
 8011756:	4240      	negs	r0, r0
 8011758:	f1b8 0f00 	cmp.w	r8, #0
 801175c:	d099      	beq.n	8011692 <_strtol_l.constprop.0+0x1a>
 801175e:	2a00      	cmp	r2, #0
 8011760:	d1f6      	bne.n	8011750 <_strtol_l.constprop.0+0xd8>
 8011762:	f8c8 1000 	str.w	r1, [r8]
 8011766:	e794      	b.n	8011692 <_strtol_l.constprop.0+0x1a>
 8011768:	08014a69 	.word	0x08014a69

0801176c <_strtol_r>:
 801176c:	f7ff bf84 	b.w	8011678 <_strtol_l.constprop.0>

08011770 <__ascii_wctomb>:
 8011770:	4603      	mov	r3, r0
 8011772:	4608      	mov	r0, r1
 8011774:	b141      	cbz	r1, 8011788 <__ascii_wctomb+0x18>
 8011776:	2aff      	cmp	r2, #255	@ 0xff
 8011778:	d904      	bls.n	8011784 <__ascii_wctomb+0x14>
 801177a:	228a      	movs	r2, #138	@ 0x8a
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	f04f 30ff 	mov.w	r0, #4294967295
 8011782:	4770      	bx	lr
 8011784:	700a      	strb	r2, [r1, #0]
 8011786:	2001      	movs	r0, #1
 8011788:	4770      	bx	lr

0801178a <__ssputs_r>:
 801178a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801178e:	688e      	ldr	r6, [r1, #8]
 8011790:	461f      	mov	r7, r3
 8011792:	42be      	cmp	r6, r7
 8011794:	680b      	ldr	r3, [r1, #0]
 8011796:	4682      	mov	sl, r0
 8011798:	460c      	mov	r4, r1
 801179a:	4690      	mov	r8, r2
 801179c:	d82d      	bhi.n	80117fa <__ssputs_r+0x70>
 801179e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117a2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80117a6:	d026      	beq.n	80117f6 <__ssputs_r+0x6c>
 80117a8:	6965      	ldr	r5, [r4, #20]
 80117aa:	6909      	ldr	r1, [r1, #16]
 80117ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117b0:	eba3 0901 	sub.w	r9, r3, r1
 80117b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80117b8:	1c7b      	adds	r3, r7, #1
 80117ba:	444b      	add	r3, r9
 80117bc:	106d      	asrs	r5, r5, #1
 80117be:	429d      	cmp	r5, r3
 80117c0:	bf38      	it	cc
 80117c2:	461d      	movcc	r5, r3
 80117c4:	0553      	lsls	r3, r2, #21
 80117c6:	d527      	bpl.n	8011818 <__ssputs_r+0x8e>
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7fc f9cd 	bl	800db68 <_malloc_r>
 80117ce:	4606      	mov	r6, r0
 80117d0:	b360      	cbz	r0, 801182c <__ssputs_r+0xa2>
 80117d2:	6921      	ldr	r1, [r4, #16]
 80117d4:	464a      	mov	r2, r9
 80117d6:	f7fe f89c 	bl	800f912 <memcpy>
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80117e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117e4:	81a3      	strh	r3, [r4, #12]
 80117e6:	6126      	str	r6, [r4, #16]
 80117e8:	6165      	str	r5, [r4, #20]
 80117ea:	444e      	add	r6, r9
 80117ec:	eba5 0509 	sub.w	r5, r5, r9
 80117f0:	6026      	str	r6, [r4, #0]
 80117f2:	60a5      	str	r5, [r4, #8]
 80117f4:	463e      	mov	r6, r7
 80117f6:	42be      	cmp	r6, r7
 80117f8:	d900      	bls.n	80117fc <__ssputs_r+0x72>
 80117fa:	463e      	mov	r6, r7
 80117fc:	6820      	ldr	r0, [r4, #0]
 80117fe:	4632      	mov	r2, r6
 8011800:	4641      	mov	r1, r8
 8011802:	f000 f9c5 	bl	8011b90 <memmove>
 8011806:	68a3      	ldr	r3, [r4, #8]
 8011808:	1b9b      	subs	r3, r3, r6
 801180a:	60a3      	str	r3, [r4, #8]
 801180c:	6823      	ldr	r3, [r4, #0]
 801180e:	4433      	add	r3, r6
 8011810:	6023      	str	r3, [r4, #0]
 8011812:	2000      	movs	r0, #0
 8011814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011818:	462a      	mov	r2, r5
 801181a:	f000 fa05 	bl	8011c28 <_realloc_r>
 801181e:	4606      	mov	r6, r0
 8011820:	2800      	cmp	r0, #0
 8011822:	d1e0      	bne.n	80117e6 <__ssputs_r+0x5c>
 8011824:	6921      	ldr	r1, [r4, #16]
 8011826:	4650      	mov	r0, sl
 8011828:	f7fe fede 	bl	80105e8 <_free_r>
 801182c:	230c      	movs	r3, #12
 801182e:	f8ca 3000 	str.w	r3, [sl]
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011838:	81a3      	strh	r3, [r4, #12]
 801183a:	f04f 30ff 	mov.w	r0, #4294967295
 801183e:	e7e9      	b.n	8011814 <__ssputs_r+0x8a>

08011840 <_svfiprintf_r>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	4698      	mov	r8, r3
 8011846:	898b      	ldrh	r3, [r1, #12]
 8011848:	061b      	lsls	r3, r3, #24
 801184a:	b09d      	sub	sp, #116	@ 0x74
 801184c:	4607      	mov	r7, r0
 801184e:	460d      	mov	r5, r1
 8011850:	4614      	mov	r4, r2
 8011852:	d510      	bpl.n	8011876 <_svfiprintf_r+0x36>
 8011854:	690b      	ldr	r3, [r1, #16]
 8011856:	b973      	cbnz	r3, 8011876 <_svfiprintf_r+0x36>
 8011858:	2140      	movs	r1, #64	@ 0x40
 801185a:	f7fc f985 	bl	800db68 <_malloc_r>
 801185e:	6028      	str	r0, [r5, #0]
 8011860:	6128      	str	r0, [r5, #16]
 8011862:	b930      	cbnz	r0, 8011872 <_svfiprintf_r+0x32>
 8011864:	230c      	movs	r3, #12
 8011866:	603b      	str	r3, [r7, #0]
 8011868:	f04f 30ff 	mov.w	r0, #4294967295
 801186c:	b01d      	add	sp, #116	@ 0x74
 801186e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011872:	2340      	movs	r3, #64	@ 0x40
 8011874:	616b      	str	r3, [r5, #20]
 8011876:	2300      	movs	r3, #0
 8011878:	9309      	str	r3, [sp, #36]	@ 0x24
 801187a:	2320      	movs	r3, #32
 801187c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011880:	f8cd 800c 	str.w	r8, [sp, #12]
 8011884:	2330      	movs	r3, #48	@ 0x30
 8011886:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a24 <_svfiprintf_r+0x1e4>
 801188a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801188e:	f04f 0901 	mov.w	r9, #1
 8011892:	4623      	mov	r3, r4
 8011894:	469a      	mov	sl, r3
 8011896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801189a:	b10a      	cbz	r2, 80118a0 <_svfiprintf_r+0x60>
 801189c:	2a25      	cmp	r2, #37	@ 0x25
 801189e:	d1f9      	bne.n	8011894 <_svfiprintf_r+0x54>
 80118a0:	ebba 0b04 	subs.w	fp, sl, r4
 80118a4:	d00b      	beq.n	80118be <_svfiprintf_r+0x7e>
 80118a6:	465b      	mov	r3, fp
 80118a8:	4622      	mov	r2, r4
 80118aa:	4629      	mov	r1, r5
 80118ac:	4638      	mov	r0, r7
 80118ae:	f7ff ff6c 	bl	801178a <__ssputs_r>
 80118b2:	3001      	adds	r0, #1
 80118b4:	f000 80a7 	beq.w	8011a06 <_svfiprintf_r+0x1c6>
 80118b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118ba:	445a      	add	r2, fp
 80118bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80118be:	f89a 3000 	ldrb.w	r3, [sl]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f000 809f 	beq.w	8011a06 <_svfiprintf_r+0x1c6>
 80118c8:	2300      	movs	r3, #0
 80118ca:	f04f 32ff 	mov.w	r2, #4294967295
 80118ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118d2:	f10a 0a01 	add.w	sl, sl, #1
 80118d6:	9304      	str	r3, [sp, #16]
 80118d8:	9307      	str	r3, [sp, #28]
 80118da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118de:	931a      	str	r3, [sp, #104]	@ 0x68
 80118e0:	4654      	mov	r4, sl
 80118e2:	2205      	movs	r2, #5
 80118e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118e8:	484e      	ldr	r0, [pc, #312]	@ (8011a24 <_svfiprintf_r+0x1e4>)
 80118ea:	f7ee fc91 	bl	8000210 <memchr>
 80118ee:	9a04      	ldr	r2, [sp, #16]
 80118f0:	b9d8      	cbnz	r0, 801192a <_svfiprintf_r+0xea>
 80118f2:	06d0      	lsls	r0, r2, #27
 80118f4:	bf44      	itt	mi
 80118f6:	2320      	movmi	r3, #32
 80118f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118fc:	0711      	lsls	r1, r2, #28
 80118fe:	bf44      	itt	mi
 8011900:	232b      	movmi	r3, #43	@ 0x2b
 8011902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011906:	f89a 3000 	ldrb.w	r3, [sl]
 801190a:	2b2a      	cmp	r3, #42	@ 0x2a
 801190c:	d015      	beq.n	801193a <_svfiprintf_r+0xfa>
 801190e:	9a07      	ldr	r2, [sp, #28]
 8011910:	4654      	mov	r4, sl
 8011912:	2000      	movs	r0, #0
 8011914:	f04f 0c0a 	mov.w	ip, #10
 8011918:	4621      	mov	r1, r4
 801191a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801191e:	3b30      	subs	r3, #48	@ 0x30
 8011920:	2b09      	cmp	r3, #9
 8011922:	d94b      	bls.n	80119bc <_svfiprintf_r+0x17c>
 8011924:	b1b0      	cbz	r0, 8011954 <_svfiprintf_r+0x114>
 8011926:	9207      	str	r2, [sp, #28]
 8011928:	e014      	b.n	8011954 <_svfiprintf_r+0x114>
 801192a:	eba0 0308 	sub.w	r3, r0, r8
 801192e:	fa09 f303 	lsl.w	r3, r9, r3
 8011932:	4313      	orrs	r3, r2
 8011934:	9304      	str	r3, [sp, #16]
 8011936:	46a2      	mov	sl, r4
 8011938:	e7d2      	b.n	80118e0 <_svfiprintf_r+0xa0>
 801193a:	9b03      	ldr	r3, [sp, #12]
 801193c:	1d19      	adds	r1, r3, #4
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	9103      	str	r1, [sp, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	bfbb      	ittet	lt
 8011946:	425b      	neglt	r3, r3
 8011948:	f042 0202 	orrlt.w	r2, r2, #2
 801194c:	9307      	strge	r3, [sp, #28]
 801194e:	9307      	strlt	r3, [sp, #28]
 8011950:	bfb8      	it	lt
 8011952:	9204      	strlt	r2, [sp, #16]
 8011954:	7823      	ldrb	r3, [r4, #0]
 8011956:	2b2e      	cmp	r3, #46	@ 0x2e
 8011958:	d10a      	bne.n	8011970 <_svfiprintf_r+0x130>
 801195a:	7863      	ldrb	r3, [r4, #1]
 801195c:	2b2a      	cmp	r3, #42	@ 0x2a
 801195e:	d132      	bne.n	80119c6 <_svfiprintf_r+0x186>
 8011960:	9b03      	ldr	r3, [sp, #12]
 8011962:	1d1a      	adds	r2, r3, #4
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	9203      	str	r2, [sp, #12]
 8011968:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801196c:	3402      	adds	r4, #2
 801196e:	9305      	str	r3, [sp, #20]
 8011970:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a34 <_svfiprintf_r+0x1f4>
 8011974:	7821      	ldrb	r1, [r4, #0]
 8011976:	2203      	movs	r2, #3
 8011978:	4650      	mov	r0, sl
 801197a:	f7ee fc49 	bl	8000210 <memchr>
 801197e:	b138      	cbz	r0, 8011990 <_svfiprintf_r+0x150>
 8011980:	9b04      	ldr	r3, [sp, #16]
 8011982:	eba0 000a 	sub.w	r0, r0, sl
 8011986:	2240      	movs	r2, #64	@ 0x40
 8011988:	4082      	lsls	r2, r0
 801198a:	4313      	orrs	r3, r2
 801198c:	3401      	adds	r4, #1
 801198e:	9304      	str	r3, [sp, #16]
 8011990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011994:	4824      	ldr	r0, [pc, #144]	@ (8011a28 <_svfiprintf_r+0x1e8>)
 8011996:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801199a:	2206      	movs	r2, #6
 801199c:	f7ee fc38 	bl	8000210 <memchr>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d036      	beq.n	8011a12 <_svfiprintf_r+0x1d2>
 80119a4:	4b21      	ldr	r3, [pc, #132]	@ (8011a2c <_svfiprintf_r+0x1ec>)
 80119a6:	bb1b      	cbnz	r3, 80119f0 <_svfiprintf_r+0x1b0>
 80119a8:	9b03      	ldr	r3, [sp, #12]
 80119aa:	3307      	adds	r3, #7
 80119ac:	f023 0307 	bic.w	r3, r3, #7
 80119b0:	3308      	adds	r3, #8
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119b6:	4433      	add	r3, r6
 80119b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ba:	e76a      	b.n	8011892 <_svfiprintf_r+0x52>
 80119bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80119c0:	460c      	mov	r4, r1
 80119c2:	2001      	movs	r0, #1
 80119c4:	e7a8      	b.n	8011918 <_svfiprintf_r+0xd8>
 80119c6:	2300      	movs	r3, #0
 80119c8:	3401      	adds	r4, #1
 80119ca:	9305      	str	r3, [sp, #20]
 80119cc:	4619      	mov	r1, r3
 80119ce:	f04f 0c0a 	mov.w	ip, #10
 80119d2:	4620      	mov	r0, r4
 80119d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119d8:	3a30      	subs	r2, #48	@ 0x30
 80119da:	2a09      	cmp	r2, #9
 80119dc:	d903      	bls.n	80119e6 <_svfiprintf_r+0x1a6>
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d0c6      	beq.n	8011970 <_svfiprintf_r+0x130>
 80119e2:	9105      	str	r1, [sp, #20]
 80119e4:	e7c4      	b.n	8011970 <_svfiprintf_r+0x130>
 80119e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80119ea:	4604      	mov	r4, r0
 80119ec:	2301      	movs	r3, #1
 80119ee:	e7f0      	b.n	80119d2 <_svfiprintf_r+0x192>
 80119f0:	ab03      	add	r3, sp, #12
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	462a      	mov	r2, r5
 80119f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011a30 <_svfiprintf_r+0x1f0>)
 80119f8:	a904      	add	r1, sp, #16
 80119fa:	4638      	mov	r0, r7
 80119fc:	f7fc fff6 	bl	800e9ec <_printf_float>
 8011a00:	1c42      	adds	r2, r0, #1
 8011a02:	4606      	mov	r6, r0
 8011a04:	d1d6      	bne.n	80119b4 <_svfiprintf_r+0x174>
 8011a06:	89ab      	ldrh	r3, [r5, #12]
 8011a08:	065b      	lsls	r3, r3, #25
 8011a0a:	f53f af2d 	bmi.w	8011868 <_svfiprintf_r+0x28>
 8011a0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a10:	e72c      	b.n	801186c <_svfiprintf_r+0x2c>
 8011a12:	ab03      	add	r3, sp, #12
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	462a      	mov	r2, r5
 8011a18:	4b05      	ldr	r3, [pc, #20]	@ (8011a30 <_svfiprintf_r+0x1f0>)
 8011a1a:	a904      	add	r1, sp, #16
 8011a1c:	4638      	mov	r0, r7
 8011a1e:	f7fd fa7d 	bl	800ef1c <_printf_i>
 8011a22:	e7ed      	b.n	8011a00 <_svfiprintf_r+0x1c0>
 8011a24:	08014b69 	.word	0x08014b69
 8011a28:	08014b73 	.word	0x08014b73
 8011a2c:	0800e9ed 	.word	0x0800e9ed
 8011a30:	0801178b 	.word	0x0801178b
 8011a34:	08014b6f 	.word	0x08014b6f

08011a38 <__sflush_r>:
 8011a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a40:	0716      	lsls	r6, r2, #28
 8011a42:	4605      	mov	r5, r0
 8011a44:	460c      	mov	r4, r1
 8011a46:	d454      	bmi.n	8011af2 <__sflush_r+0xba>
 8011a48:	684b      	ldr	r3, [r1, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	dc02      	bgt.n	8011a54 <__sflush_r+0x1c>
 8011a4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dd48      	ble.n	8011ae6 <__sflush_r+0xae>
 8011a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a56:	2e00      	cmp	r6, #0
 8011a58:	d045      	beq.n	8011ae6 <__sflush_r+0xae>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a60:	682f      	ldr	r7, [r5, #0]
 8011a62:	6a21      	ldr	r1, [r4, #32]
 8011a64:	602b      	str	r3, [r5, #0]
 8011a66:	d030      	beq.n	8011aca <__sflush_r+0x92>
 8011a68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	0759      	lsls	r1, r3, #29
 8011a6e:	d505      	bpl.n	8011a7c <__sflush_r+0x44>
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	1ad2      	subs	r2, r2, r3
 8011a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a76:	b10b      	cbz	r3, 8011a7c <__sflush_r+0x44>
 8011a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a7a:	1ad2      	subs	r2, r2, r3
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a80:	6a21      	ldr	r1, [r4, #32]
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b0      	blx	r6
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	d106      	bne.n	8011a9a <__sflush_r+0x62>
 8011a8c:	6829      	ldr	r1, [r5, #0]
 8011a8e:	291d      	cmp	r1, #29
 8011a90:	d82b      	bhi.n	8011aea <__sflush_r+0xb2>
 8011a92:	4a2a      	ldr	r2, [pc, #168]	@ (8011b3c <__sflush_r+0x104>)
 8011a94:	410a      	asrs	r2, r1
 8011a96:	07d6      	lsls	r6, r2, #31
 8011a98:	d427      	bmi.n	8011aea <__sflush_r+0xb2>
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	6062      	str	r2, [r4, #4]
 8011a9e:	04d9      	lsls	r1, r3, #19
 8011aa0:	6922      	ldr	r2, [r4, #16]
 8011aa2:	6022      	str	r2, [r4, #0]
 8011aa4:	d504      	bpl.n	8011ab0 <__sflush_r+0x78>
 8011aa6:	1c42      	adds	r2, r0, #1
 8011aa8:	d101      	bne.n	8011aae <__sflush_r+0x76>
 8011aaa:	682b      	ldr	r3, [r5, #0]
 8011aac:	b903      	cbnz	r3, 8011ab0 <__sflush_r+0x78>
 8011aae:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ab2:	602f      	str	r7, [r5, #0]
 8011ab4:	b1b9      	cbz	r1, 8011ae6 <__sflush_r+0xae>
 8011ab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011aba:	4299      	cmp	r1, r3
 8011abc:	d002      	beq.n	8011ac4 <__sflush_r+0x8c>
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7fe fd92 	bl	80105e8 <_free_r>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ac8:	e00d      	b.n	8011ae6 <__sflush_r+0xae>
 8011aca:	2301      	movs	r3, #1
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	1c50      	adds	r0, r2, #1
 8011ad4:	d1c9      	bne.n	8011a6a <__sflush_r+0x32>
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d0c6      	beq.n	8011a6a <__sflush_r+0x32>
 8011adc:	2b1d      	cmp	r3, #29
 8011ade:	d001      	beq.n	8011ae4 <__sflush_r+0xac>
 8011ae0:	2b16      	cmp	r3, #22
 8011ae2:	d11e      	bne.n	8011b22 <__sflush_r+0xea>
 8011ae4:	602f      	str	r7, [r5, #0]
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	e022      	b.n	8011b30 <__sflush_r+0xf8>
 8011aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aee:	b21b      	sxth	r3, r3
 8011af0:	e01b      	b.n	8011b2a <__sflush_r+0xf2>
 8011af2:	690f      	ldr	r7, [r1, #16]
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	d0f6      	beq.n	8011ae6 <__sflush_r+0xae>
 8011af8:	0793      	lsls	r3, r2, #30
 8011afa:	680e      	ldr	r6, [r1, #0]
 8011afc:	bf08      	it	eq
 8011afe:	694b      	ldreq	r3, [r1, #20]
 8011b00:	600f      	str	r7, [r1, #0]
 8011b02:	bf18      	it	ne
 8011b04:	2300      	movne	r3, #0
 8011b06:	eba6 0807 	sub.w	r8, r6, r7
 8011b0a:	608b      	str	r3, [r1, #8]
 8011b0c:	f1b8 0f00 	cmp.w	r8, #0
 8011b10:	dde9      	ble.n	8011ae6 <__sflush_r+0xae>
 8011b12:	6a21      	ldr	r1, [r4, #32]
 8011b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b16:	4643      	mov	r3, r8
 8011b18:	463a      	mov	r2, r7
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	47b0      	blx	r6
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	dc08      	bgt.n	8011b34 <__sflush_r+0xfc>
 8011b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	4407      	add	r7, r0
 8011b36:	eba8 0800 	sub.w	r8, r8, r0
 8011b3a:	e7e7      	b.n	8011b0c <__sflush_r+0xd4>
 8011b3c:	dfbffffe 	.word	0xdfbffffe

08011b40 <_fflush_r>:
 8011b40:	b538      	push	{r3, r4, r5, lr}
 8011b42:	690b      	ldr	r3, [r1, #16]
 8011b44:	4605      	mov	r5, r0
 8011b46:	460c      	mov	r4, r1
 8011b48:	b913      	cbnz	r3, 8011b50 <_fflush_r+0x10>
 8011b4a:	2500      	movs	r5, #0
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	b118      	cbz	r0, 8011b5a <_fflush_r+0x1a>
 8011b52:	6a03      	ldr	r3, [r0, #32]
 8011b54:	b90b      	cbnz	r3, 8011b5a <_fflush_r+0x1a>
 8011b56:	f7fd fda1 	bl	800f69c <__sinit>
 8011b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0f3      	beq.n	8011b4a <_fflush_r+0xa>
 8011b62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b64:	07d0      	lsls	r0, r2, #31
 8011b66:	d404      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b68:	0599      	lsls	r1, r3, #22
 8011b6a:	d402      	bmi.n	8011b72 <_fflush_r+0x32>
 8011b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b6e:	f7fd fece 	bl	800f90e <__retarget_lock_acquire_recursive>
 8011b72:	4628      	mov	r0, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7ff ff5f 	bl	8011a38 <__sflush_r>
 8011b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b7c:	07da      	lsls	r2, r3, #31
 8011b7e:	4605      	mov	r5, r0
 8011b80:	d4e4      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d4e1      	bmi.n	8011b4c <_fflush_r+0xc>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f7fd fec1 	bl	800f910 <__retarget_lock_release_recursive>
 8011b8e:	e7dd      	b.n	8011b4c <_fflush_r+0xc>

08011b90 <memmove>:
 8011b90:	4288      	cmp	r0, r1
 8011b92:	b510      	push	{r4, lr}
 8011b94:	eb01 0402 	add.w	r4, r1, r2
 8011b98:	d902      	bls.n	8011ba0 <memmove+0x10>
 8011b9a:	4284      	cmp	r4, r0
 8011b9c:	4623      	mov	r3, r4
 8011b9e:	d807      	bhi.n	8011bb0 <memmove+0x20>
 8011ba0:	1e43      	subs	r3, r0, #1
 8011ba2:	42a1      	cmp	r1, r4
 8011ba4:	d008      	beq.n	8011bb8 <memmove+0x28>
 8011ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bae:	e7f8      	b.n	8011ba2 <memmove+0x12>
 8011bb0:	4402      	add	r2, r0
 8011bb2:	4601      	mov	r1, r0
 8011bb4:	428a      	cmp	r2, r1
 8011bb6:	d100      	bne.n	8011bba <memmove+0x2a>
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bc2:	e7f7      	b.n	8011bb4 <memmove+0x24>

08011bc4 <__assert_func>:
 8011bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bc6:	4614      	mov	r4, r2
 8011bc8:	461a      	mov	r2, r3
 8011bca:	4b09      	ldr	r3, [pc, #36]	@ (8011bf0 <__assert_func+0x2c>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	4605      	mov	r5, r0
 8011bd0:	68d8      	ldr	r0, [r3, #12]
 8011bd2:	b954      	cbnz	r4, 8011bea <__assert_func+0x26>
 8011bd4:	4b07      	ldr	r3, [pc, #28]	@ (8011bf4 <__assert_func+0x30>)
 8011bd6:	461c      	mov	r4, r3
 8011bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bdc:	9100      	str	r1, [sp, #0]
 8011bde:	462b      	mov	r3, r5
 8011be0:	4905      	ldr	r1, [pc, #20]	@ (8011bf8 <__assert_func+0x34>)
 8011be2:	f000 f84f 	bl	8011c84 <fiprintf>
 8011be6:	f000 f85f 	bl	8011ca8 <abort>
 8011bea:	4b04      	ldr	r3, [pc, #16]	@ (8011bfc <__assert_func+0x38>)
 8011bec:	e7f4      	b.n	8011bd8 <__assert_func+0x14>
 8011bee:	bf00      	nop
 8011bf0:	2000029c 	.word	0x2000029c
 8011bf4:	08014bb5 	.word	0x08014bb5
 8011bf8:	08014b87 	.word	0x08014b87
 8011bfc:	08014b7a 	.word	0x08014b7a

08011c00 <_calloc_r>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	fba1 5402 	umull	r5, r4, r1, r2
 8011c06:	b93c      	cbnz	r4, 8011c18 <_calloc_r+0x18>
 8011c08:	4629      	mov	r1, r5
 8011c0a:	f7fb ffad 	bl	800db68 <_malloc_r>
 8011c0e:	4606      	mov	r6, r0
 8011c10:	b928      	cbnz	r0, 8011c1e <_calloc_r+0x1e>
 8011c12:	2600      	movs	r6, #0
 8011c14:	4630      	mov	r0, r6
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	220c      	movs	r2, #12
 8011c1a:	6002      	str	r2, [r0, #0]
 8011c1c:	e7f9      	b.n	8011c12 <_calloc_r+0x12>
 8011c1e:	462a      	mov	r2, r5
 8011c20:	4621      	mov	r1, r4
 8011c22:	f7fd fdd4 	bl	800f7ce <memset>
 8011c26:	e7f5      	b.n	8011c14 <_calloc_r+0x14>

08011c28 <_realloc_r>:
 8011c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2c:	4680      	mov	r8, r0
 8011c2e:	4615      	mov	r5, r2
 8011c30:	460c      	mov	r4, r1
 8011c32:	b921      	cbnz	r1, 8011c3e <_realloc_r+0x16>
 8011c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c38:	4611      	mov	r1, r2
 8011c3a:	f7fb bf95 	b.w	800db68 <_malloc_r>
 8011c3e:	b92a      	cbnz	r2, 8011c4c <_realloc_r+0x24>
 8011c40:	f7fe fcd2 	bl	80105e8 <_free_r>
 8011c44:	2400      	movs	r4, #0
 8011c46:	4620      	mov	r0, r4
 8011c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4c:	f000 f833 	bl	8011cb6 <_malloc_usable_size_r>
 8011c50:	4285      	cmp	r5, r0
 8011c52:	4606      	mov	r6, r0
 8011c54:	d802      	bhi.n	8011c5c <_realloc_r+0x34>
 8011c56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c5a:	d8f4      	bhi.n	8011c46 <_realloc_r+0x1e>
 8011c5c:	4629      	mov	r1, r5
 8011c5e:	4640      	mov	r0, r8
 8011c60:	f7fb ff82 	bl	800db68 <_malloc_r>
 8011c64:	4607      	mov	r7, r0
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d0ec      	beq.n	8011c44 <_realloc_r+0x1c>
 8011c6a:	42b5      	cmp	r5, r6
 8011c6c:	462a      	mov	r2, r5
 8011c6e:	4621      	mov	r1, r4
 8011c70:	bf28      	it	cs
 8011c72:	4632      	movcs	r2, r6
 8011c74:	f7fd fe4d 	bl	800f912 <memcpy>
 8011c78:	4621      	mov	r1, r4
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	f7fe fcb4 	bl	80105e8 <_free_r>
 8011c80:	463c      	mov	r4, r7
 8011c82:	e7e0      	b.n	8011c46 <_realloc_r+0x1e>

08011c84 <fiprintf>:
 8011c84:	b40e      	push	{r1, r2, r3}
 8011c86:	b503      	push	{r0, r1, lr}
 8011c88:	4601      	mov	r1, r0
 8011c8a:	ab03      	add	r3, sp, #12
 8011c8c:	4805      	ldr	r0, [pc, #20]	@ (8011ca4 <fiprintf+0x20>)
 8011c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c92:	6800      	ldr	r0, [r0, #0]
 8011c94:	9301      	str	r3, [sp, #4]
 8011c96:	f000 f83f 	bl	8011d18 <_vfiprintf_r>
 8011c9a:	b002      	add	sp, #8
 8011c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ca0:	b003      	add	sp, #12
 8011ca2:	4770      	bx	lr
 8011ca4:	2000029c 	.word	0x2000029c

08011ca8 <abort>:
 8011ca8:	b508      	push	{r3, lr}
 8011caa:	2006      	movs	r0, #6
 8011cac:	f000 fa08 	bl	80120c0 <raise>
 8011cb0:	2001      	movs	r0, #1
 8011cb2:	f7f2 fa7f 	bl	80041b4 <_exit>

08011cb6 <_malloc_usable_size_r>:
 8011cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cba:	1f18      	subs	r0, r3, #4
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bfbc      	itt	lt
 8011cc0:	580b      	ldrlt	r3, [r1, r0]
 8011cc2:	18c0      	addlt	r0, r0, r3
 8011cc4:	4770      	bx	lr

08011cc6 <__sfputc_r>:
 8011cc6:	6893      	ldr	r3, [r2, #8]
 8011cc8:	3b01      	subs	r3, #1
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	b410      	push	{r4}
 8011cce:	6093      	str	r3, [r2, #8]
 8011cd0:	da08      	bge.n	8011ce4 <__sfputc_r+0x1e>
 8011cd2:	6994      	ldr	r4, [r2, #24]
 8011cd4:	42a3      	cmp	r3, r4
 8011cd6:	db01      	blt.n	8011cdc <__sfputc_r+0x16>
 8011cd8:	290a      	cmp	r1, #10
 8011cda:	d103      	bne.n	8011ce4 <__sfputc_r+0x1e>
 8011cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ce0:	f000 b932 	b.w	8011f48 <__swbuf_r>
 8011ce4:	6813      	ldr	r3, [r2, #0]
 8011ce6:	1c58      	adds	r0, r3, #1
 8011ce8:	6010      	str	r0, [r2, #0]
 8011cea:	7019      	strb	r1, [r3, #0]
 8011cec:	4608      	mov	r0, r1
 8011cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <__sfputs_r>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	4606      	mov	r6, r0
 8011cf8:	460f      	mov	r7, r1
 8011cfa:	4614      	mov	r4, r2
 8011cfc:	18d5      	adds	r5, r2, r3
 8011cfe:	42ac      	cmp	r4, r5
 8011d00:	d101      	bne.n	8011d06 <__sfputs_r+0x12>
 8011d02:	2000      	movs	r0, #0
 8011d04:	e007      	b.n	8011d16 <__sfputs_r+0x22>
 8011d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d0a:	463a      	mov	r2, r7
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f7ff ffda 	bl	8011cc6 <__sfputc_r>
 8011d12:	1c43      	adds	r3, r0, #1
 8011d14:	d1f3      	bne.n	8011cfe <__sfputs_r+0xa>
 8011d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d18 <_vfiprintf_r>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	460d      	mov	r5, r1
 8011d1e:	b09d      	sub	sp, #116	@ 0x74
 8011d20:	4614      	mov	r4, r2
 8011d22:	4698      	mov	r8, r3
 8011d24:	4606      	mov	r6, r0
 8011d26:	b118      	cbz	r0, 8011d30 <_vfiprintf_r+0x18>
 8011d28:	6a03      	ldr	r3, [r0, #32]
 8011d2a:	b90b      	cbnz	r3, 8011d30 <_vfiprintf_r+0x18>
 8011d2c:	f7fd fcb6 	bl	800f69c <__sinit>
 8011d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d32:	07d9      	lsls	r1, r3, #31
 8011d34:	d405      	bmi.n	8011d42 <_vfiprintf_r+0x2a>
 8011d36:	89ab      	ldrh	r3, [r5, #12]
 8011d38:	059a      	lsls	r2, r3, #22
 8011d3a:	d402      	bmi.n	8011d42 <_vfiprintf_r+0x2a>
 8011d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d3e:	f7fd fde6 	bl	800f90e <__retarget_lock_acquire_recursive>
 8011d42:	89ab      	ldrh	r3, [r5, #12]
 8011d44:	071b      	lsls	r3, r3, #28
 8011d46:	d501      	bpl.n	8011d4c <_vfiprintf_r+0x34>
 8011d48:	692b      	ldr	r3, [r5, #16]
 8011d4a:	b99b      	cbnz	r3, 8011d74 <_vfiprintf_r+0x5c>
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	4630      	mov	r0, r6
 8011d50:	f000 f938 	bl	8011fc4 <__swsetup_r>
 8011d54:	b170      	cbz	r0, 8011d74 <_vfiprintf_r+0x5c>
 8011d56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d58:	07dc      	lsls	r4, r3, #31
 8011d5a:	d504      	bpl.n	8011d66 <_vfiprintf_r+0x4e>
 8011d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d60:	b01d      	add	sp, #116	@ 0x74
 8011d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d66:	89ab      	ldrh	r3, [r5, #12]
 8011d68:	0598      	lsls	r0, r3, #22
 8011d6a:	d4f7      	bmi.n	8011d5c <_vfiprintf_r+0x44>
 8011d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d6e:	f7fd fdcf 	bl	800f910 <__retarget_lock_release_recursive>
 8011d72:	e7f3      	b.n	8011d5c <_vfiprintf_r+0x44>
 8011d74:	2300      	movs	r3, #0
 8011d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d78:	2320      	movs	r3, #32
 8011d7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d82:	2330      	movs	r3, #48	@ 0x30
 8011d84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f34 <_vfiprintf_r+0x21c>
 8011d88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d8c:	f04f 0901 	mov.w	r9, #1
 8011d90:	4623      	mov	r3, r4
 8011d92:	469a      	mov	sl, r3
 8011d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d98:	b10a      	cbz	r2, 8011d9e <_vfiprintf_r+0x86>
 8011d9a:	2a25      	cmp	r2, #37	@ 0x25
 8011d9c:	d1f9      	bne.n	8011d92 <_vfiprintf_r+0x7a>
 8011d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8011da2:	d00b      	beq.n	8011dbc <_vfiprintf_r+0xa4>
 8011da4:	465b      	mov	r3, fp
 8011da6:	4622      	mov	r2, r4
 8011da8:	4629      	mov	r1, r5
 8011daa:	4630      	mov	r0, r6
 8011dac:	f7ff ffa2 	bl	8011cf4 <__sfputs_r>
 8011db0:	3001      	adds	r0, #1
 8011db2:	f000 80a7 	beq.w	8011f04 <_vfiprintf_r+0x1ec>
 8011db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011db8:	445a      	add	r2, fp
 8011dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8011dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f000 809f 	beq.w	8011f04 <_vfiprintf_r+0x1ec>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dd0:	f10a 0a01 	add.w	sl, sl, #1
 8011dd4:	9304      	str	r3, [sp, #16]
 8011dd6:	9307      	str	r3, [sp, #28]
 8011dd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ddc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dde:	4654      	mov	r4, sl
 8011de0:	2205      	movs	r2, #5
 8011de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011de6:	4853      	ldr	r0, [pc, #332]	@ (8011f34 <_vfiprintf_r+0x21c>)
 8011de8:	f7ee fa12 	bl	8000210 <memchr>
 8011dec:	9a04      	ldr	r2, [sp, #16]
 8011dee:	b9d8      	cbnz	r0, 8011e28 <_vfiprintf_r+0x110>
 8011df0:	06d1      	lsls	r1, r2, #27
 8011df2:	bf44      	itt	mi
 8011df4:	2320      	movmi	r3, #32
 8011df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dfa:	0713      	lsls	r3, r2, #28
 8011dfc:	bf44      	itt	mi
 8011dfe:	232b      	movmi	r3, #43	@ 0x2b
 8011e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e04:	f89a 3000 	ldrb.w	r3, [sl]
 8011e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e0a:	d015      	beq.n	8011e38 <_vfiprintf_r+0x120>
 8011e0c:	9a07      	ldr	r2, [sp, #28]
 8011e0e:	4654      	mov	r4, sl
 8011e10:	2000      	movs	r0, #0
 8011e12:	f04f 0c0a 	mov.w	ip, #10
 8011e16:	4621      	mov	r1, r4
 8011e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e1c:	3b30      	subs	r3, #48	@ 0x30
 8011e1e:	2b09      	cmp	r3, #9
 8011e20:	d94b      	bls.n	8011eba <_vfiprintf_r+0x1a2>
 8011e22:	b1b0      	cbz	r0, 8011e52 <_vfiprintf_r+0x13a>
 8011e24:	9207      	str	r2, [sp, #28]
 8011e26:	e014      	b.n	8011e52 <_vfiprintf_r+0x13a>
 8011e28:	eba0 0308 	sub.w	r3, r0, r8
 8011e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8011e30:	4313      	orrs	r3, r2
 8011e32:	9304      	str	r3, [sp, #16]
 8011e34:	46a2      	mov	sl, r4
 8011e36:	e7d2      	b.n	8011dde <_vfiprintf_r+0xc6>
 8011e38:	9b03      	ldr	r3, [sp, #12]
 8011e3a:	1d19      	adds	r1, r3, #4
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	9103      	str	r1, [sp, #12]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	bfbb      	ittet	lt
 8011e44:	425b      	neglt	r3, r3
 8011e46:	f042 0202 	orrlt.w	r2, r2, #2
 8011e4a:	9307      	strge	r3, [sp, #28]
 8011e4c:	9307      	strlt	r3, [sp, #28]
 8011e4e:	bfb8      	it	lt
 8011e50:	9204      	strlt	r2, [sp, #16]
 8011e52:	7823      	ldrb	r3, [r4, #0]
 8011e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e56:	d10a      	bne.n	8011e6e <_vfiprintf_r+0x156>
 8011e58:	7863      	ldrb	r3, [r4, #1]
 8011e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e5c:	d132      	bne.n	8011ec4 <_vfiprintf_r+0x1ac>
 8011e5e:	9b03      	ldr	r3, [sp, #12]
 8011e60:	1d1a      	adds	r2, r3, #4
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	9203      	str	r2, [sp, #12]
 8011e66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e6a:	3402      	adds	r4, #2
 8011e6c:	9305      	str	r3, [sp, #20]
 8011e6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f44 <_vfiprintf_r+0x22c>
 8011e72:	7821      	ldrb	r1, [r4, #0]
 8011e74:	2203      	movs	r2, #3
 8011e76:	4650      	mov	r0, sl
 8011e78:	f7ee f9ca 	bl	8000210 <memchr>
 8011e7c:	b138      	cbz	r0, 8011e8e <_vfiprintf_r+0x176>
 8011e7e:	9b04      	ldr	r3, [sp, #16]
 8011e80:	eba0 000a 	sub.w	r0, r0, sl
 8011e84:	2240      	movs	r2, #64	@ 0x40
 8011e86:	4082      	lsls	r2, r0
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	3401      	adds	r4, #1
 8011e8c:	9304      	str	r3, [sp, #16]
 8011e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e92:	4829      	ldr	r0, [pc, #164]	@ (8011f38 <_vfiprintf_r+0x220>)
 8011e94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e98:	2206      	movs	r2, #6
 8011e9a:	f7ee f9b9 	bl	8000210 <memchr>
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d03f      	beq.n	8011f22 <_vfiprintf_r+0x20a>
 8011ea2:	4b26      	ldr	r3, [pc, #152]	@ (8011f3c <_vfiprintf_r+0x224>)
 8011ea4:	bb1b      	cbnz	r3, 8011eee <_vfiprintf_r+0x1d6>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	3307      	adds	r3, #7
 8011eaa:	f023 0307 	bic.w	r3, r3, #7
 8011eae:	3308      	adds	r3, #8
 8011eb0:	9303      	str	r3, [sp, #12]
 8011eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eb4:	443b      	add	r3, r7
 8011eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eb8:	e76a      	b.n	8011d90 <_vfiprintf_r+0x78>
 8011eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	2001      	movs	r0, #1
 8011ec2:	e7a8      	b.n	8011e16 <_vfiprintf_r+0xfe>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	3401      	adds	r4, #1
 8011ec8:	9305      	str	r3, [sp, #20]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	f04f 0c0a 	mov.w	ip, #10
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ed6:	3a30      	subs	r2, #48	@ 0x30
 8011ed8:	2a09      	cmp	r2, #9
 8011eda:	d903      	bls.n	8011ee4 <_vfiprintf_r+0x1cc>
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d0c6      	beq.n	8011e6e <_vfiprintf_r+0x156>
 8011ee0:	9105      	str	r1, [sp, #20]
 8011ee2:	e7c4      	b.n	8011e6e <_vfiprintf_r+0x156>
 8011ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ee8:	4604      	mov	r4, r0
 8011eea:	2301      	movs	r3, #1
 8011eec:	e7f0      	b.n	8011ed0 <_vfiprintf_r+0x1b8>
 8011eee:	ab03      	add	r3, sp, #12
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	462a      	mov	r2, r5
 8011ef4:	4b12      	ldr	r3, [pc, #72]	@ (8011f40 <_vfiprintf_r+0x228>)
 8011ef6:	a904      	add	r1, sp, #16
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f7fc fd77 	bl	800e9ec <_printf_float>
 8011efe:	4607      	mov	r7, r0
 8011f00:	1c78      	adds	r0, r7, #1
 8011f02:	d1d6      	bne.n	8011eb2 <_vfiprintf_r+0x19a>
 8011f04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f06:	07d9      	lsls	r1, r3, #31
 8011f08:	d405      	bmi.n	8011f16 <_vfiprintf_r+0x1fe>
 8011f0a:	89ab      	ldrh	r3, [r5, #12]
 8011f0c:	059a      	lsls	r2, r3, #22
 8011f0e:	d402      	bmi.n	8011f16 <_vfiprintf_r+0x1fe>
 8011f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f12:	f7fd fcfd 	bl	800f910 <__retarget_lock_release_recursive>
 8011f16:	89ab      	ldrh	r3, [r5, #12]
 8011f18:	065b      	lsls	r3, r3, #25
 8011f1a:	f53f af1f 	bmi.w	8011d5c <_vfiprintf_r+0x44>
 8011f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f20:	e71e      	b.n	8011d60 <_vfiprintf_r+0x48>
 8011f22:	ab03      	add	r3, sp, #12
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	462a      	mov	r2, r5
 8011f28:	4b05      	ldr	r3, [pc, #20]	@ (8011f40 <_vfiprintf_r+0x228>)
 8011f2a:	a904      	add	r1, sp, #16
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f7fc fff5 	bl	800ef1c <_printf_i>
 8011f32:	e7e4      	b.n	8011efe <_vfiprintf_r+0x1e6>
 8011f34:	08014b69 	.word	0x08014b69
 8011f38:	08014b73 	.word	0x08014b73
 8011f3c:	0800e9ed 	.word	0x0800e9ed
 8011f40:	08011cf5 	.word	0x08011cf5
 8011f44:	08014b6f 	.word	0x08014b6f

08011f48 <__swbuf_r>:
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4a:	460e      	mov	r6, r1
 8011f4c:	4614      	mov	r4, r2
 8011f4e:	4605      	mov	r5, r0
 8011f50:	b118      	cbz	r0, 8011f5a <__swbuf_r+0x12>
 8011f52:	6a03      	ldr	r3, [r0, #32]
 8011f54:	b90b      	cbnz	r3, 8011f5a <__swbuf_r+0x12>
 8011f56:	f7fd fba1 	bl	800f69c <__sinit>
 8011f5a:	69a3      	ldr	r3, [r4, #24]
 8011f5c:	60a3      	str	r3, [r4, #8]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	071a      	lsls	r2, r3, #28
 8011f62:	d501      	bpl.n	8011f68 <__swbuf_r+0x20>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	b943      	cbnz	r3, 8011f7a <__swbuf_r+0x32>
 8011f68:	4621      	mov	r1, r4
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f000 f82a 	bl	8011fc4 <__swsetup_r>
 8011f70:	b118      	cbz	r0, 8011f7a <__swbuf_r+0x32>
 8011f72:	f04f 37ff 	mov.w	r7, #4294967295
 8011f76:	4638      	mov	r0, r7
 8011f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	6922      	ldr	r2, [r4, #16]
 8011f7e:	1a98      	subs	r0, r3, r2
 8011f80:	6963      	ldr	r3, [r4, #20]
 8011f82:	b2f6      	uxtb	r6, r6
 8011f84:	4283      	cmp	r3, r0
 8011f86:	4637      	mov	r7, r6
 8011f88:	dc05      	bgt.n	8011f96 <__swbuf_r+0x4e>
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f7ff fdd7 	bl	8011b40 <_fflush_r>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d1ed      	bne.n	8011f72 <__swbuf_r+0x2a>
 8011f96:	68a3      	ldr	r3, [r4, #8]
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	60a3      	str	r3, [r4, #8]
 8011f9c:	6823      	ldr	r3, [r4, #0]
 8011f9e:	1c5a      	adds	r2, r3, #1
 8011fa0:	6022      	str	r2, [r4, #0]
 8011fa2:	701e      	strb	r6, [r3, #0]
 8011fa4:	6962      	ldr	r2, [r4, #20]
 8011fa6:	1c43      	adds	r3, r0, #1
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d004      	beq.n	8011fb6 <__swbuf_r+0x6e>
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	07db      	lsls	r3, r3, #31
 8011fb0:	d5e1      	bpl.n	8011f76 <__swbuf_r+0x2e>
 8011fb2:	2e0a      	cmp	r6, #10
 8011fb4:	d1df      	bne.n	8011f76 <__swbuf_r+0x2e>
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f7ff fdc1 	bl	8011b40 <_fflush_r>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0d9      	beq.n	8011f76 <__swbuf_r+0x2e>
 8011fc2:	e7d6      	b.n	8011f72 <__swbuf_r+0x2a>

08011fc4 <__swsetup_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4b29      	ldr	r3, [pc, #164]	@ (801206c <__swsetup_r+0xa8>)
 8011fc8:	4605      	mov	r5, r0
 8011fca:	6818      	ldr	r0, [r3, #0]
 8011fcc:	460c      	mov	r4, r1
 8011fce:	b118      	cbz	r0, 8011fd8 <__swsetup_r+0x14>
 8011fd0:	6a03      	ldr	r3, [r0, #32]
 8011fd2:	b90b      	cbnz	r3, 8011fd8 <__swsetup_r+0x14>
 8011fd4:	f7fd fb62 	bl	800f69c <__sinit>
 8011fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fdc:	0719      	lsls	r1, r3, #28
 8011fde:	d422      	bmi.n	8012026 <__swsetup_r+0x62>
 8011fe0:	06da      	lsls	r2, r3, #27
 8011fe2:	d407      	bmi.n	8011ff4 <__swsetup_r+0x30>
 8011fe4:	2209      	movs	r2, #9
 8011fe6:	602a      	str	r2, [r5, #0]
 8011fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff2:	e033      	b.n	801205c <__swsetup_r+0x98>
 8011ff4:	0758      	lsls	r0, r3, #29
 8011ff6:	d512      	bpl.n	801201e <__swsetup_r+0x5a>
 8011ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ffa:	b141      	cbz	r1, 801200e <__swsetup_r+0x4a>
 8011ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012000:	4299      	cmp	r1, r3
 8012002:	d002      	beq.n	801200a <__swsetup_r+0x46>
 8012004:	4628      	mov	r0, r5
 8012006:	f7fe faef 	bl	80105e8 <_free_r>
 801200a:	2300      	movs	r3, #0
 801200c:	6363      	str	r3, [r4, #52]	@ 0x34
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012014:	81a3      	strh	r3, [r4, #12]
 8012016:	2300      	movs	r3, #0
 8012018:	6063      	str	r3, [r4, #4]
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	f043 0308 	orr.w	r3, r3, #8
 8012024:	81a3      	strh	r3, [r4, #12]
 8012026:	6923      	ldr	r3, [r4, #16]
 8012028:	b94b      	cbnz	r3, 801203e <__swsetup_r+0x7a>
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012034:	d003      	beq.n	801203e <__swsetup_r+0x7a>
 8012036:	4621      	mov	r1, r4
 8012038:	4628      	mov	r0, r5
 801203a:	f000 f883 	bl	8012144 <__smakebuf_r>
 801203e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012042:	f013 0201 	ands.w	r2, r3, #1
 8012046:	d00a      	beq.n	801205e <__swsetup_r+0x9a>
 8012048:	2200      	movs	r2, #0
 801204a:	60a2      	str	r2, [r4, #8]
 801204c:	6962      	ldr	r2, [r4, #20]
 801204e:	4252      	negs	r2, r2
 8012050:	61a2      	str	r2, [r4, #24]
 8012052:	6922      	ldr	r2, [r4, #16]
 8012054:	b942      	cbnz	r2, 8012068 <__swsetup_r+0xa4>
 8012056:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801205a:	d1c5      	bne.n	8011fe8 <__swsetup_r+0x24>
 801205c:	bd38      	pop	{r3, r4, r5, pc}
 801205e:	0799      	lsls	r1, r3, #30
 8012060:	bf58      	it	pl
 8012062:	6962      	ldrpl	r2, [r4, #20]
 8012064:	60a2      	str	r2, [r4, #8]
 8012066:	e7f4      	b.n	8012052 <__swsetup_r+0x8e>
 8012068:	2000      	movs	r0, #0
 801206a:	e7f7      	b.n	801205c <__swsetup_r+0x98>
 801206c:	2000029c 	.word	0x2000029c

08012070 <_raise_r>:
 8012070:	291f      	cmp	r1, #31
 8012072:	b538      	push	{r3, r4, r5, lr}
 8012074:	4605      	mov	r5, r0
 8012076:	460c      	mov	r4, r1
 8012078:	d904      	bls.n	8012084 <_raise_r+0x14>
 801207a:	2316      	movs	r3, #22
 801207c:	6003      	str	r3, [r0, #0]
 801207e:	f04f 30ff 	mov.w	r0, #4294967295
 8012082:	bd38      	pop	{r3, r4, r5, pc}
 8012084:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012086:	b112      	cbz	r2, 801208e <_raise_r+0x1e>
 8012088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801208c:	b94b      	cbnz	r3, 80120a2 <_raise_r+0x32>
 801208e:	4628      	mov	r0, r5
 8012090:	f000 f830 	bl	80120f4 <_getpid_r>
 8012094:	4622      	mov	r2, r4
 8012096:	4601      	mov	r1, r0
 8012098:	4628      	mov	r0, r5
 801209a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801209e:	f000 b817 	b.w	80120d0 <_kill_r>
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d00a      	beq.n	80120bc <_raise_r+0x4c>
 80120a6:	1c59      	adds	r1, r3, #1
 80120a8:	d103      	bne.n	80120b2 <_raise_r+0x42>
 80120aa:	2316      	movs	r3, #22
 80120ac:	6003      	str	r3, [r0, #0]
 80120ae:	2001      	movs	r0, #1
 80120b0:	e7e7      	b.n	8012082 <_raise_r+0x12>
 80120b2:	2100      	movs	r1, #0
 80120b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120b8:	4620      	mov	r0, r4
 80120ba:	4798      	blx	r3
 80120bc:	2000      	movs	r0, #0
 80120be:	e7e0      	b.n	8012082 <_raise_r+0x12>

080120c0 <raise>:
 80120c0:	4b02      	ldr	r3, [pc, #8]	@ (80120cc <raise+0xc>)
 80120c2:	4601      	mov	r1, r0
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	f7ff bfd3 	b.w	8012070 <_raise_r>
 80120ca:	bf00      	nop
 80120cc:	2000029c 	.word	0x2000029c

080120d0 <_kill_r>:
 80120d0:	b538      	push	{r3, r4, r5, lr}
 80120d2:	4d07      	ldr	r5, [pc, #28]	@ (80120f0 <_kill_r+0x20>)
 80120d4:	2300      	movs	r3, #0
 80120d6:	4604      	mov	r4, r0
 80120d8:	4608      	mov	r0, r1
 80120da:	4611      	mov	r1, r2
 80120dc:	602b      	str	r3, [r5, #0]
 80120de:	f7f2 f859 	bl	8004194 <_kill>
 80120e2:	1c43      	adds	r3, r0, #1
 80120e4:	d102      	bne.n	80120ec <_kill_r+0x1c>
 80120e6:	682b      	ldr	r3, [r5, #0]
 80120e8:	b103      	cbz	r3, 80120ec <_kill_r+0x1c>
 80120ea:	6023      	str	r3, [r4, #0]
 80120ec:	bd38      	pop	{r3, r4, r5, pc}
 80120ee:	bf00      	nop
 80120f0:	2000267c 	.word	0x2000267c

080120f4 <_getpid_r>:
 80120f4:	f7f2 b846 	b.w	8004184 <_getpid>

080120f8 <__swhatbuf_r>:
 80120f8:	b570      	push	{r4, r5, r6, lr}
 80120fa:	460c      	mov	r4, r1
 80120fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012100:	2900      	cmp	r1, #0
 8012102:	b096      	sub	sp, #88	@ 0x58
 8012104:	4615      	mov	r5, r2
 8012106:	461e      	mov	r6, r3
 8012108:	da0d      	bge.n	8012126 <__swhatbuf_r+0x2e>
 801210a:	89a3      	ldrh	r3, [r4, #12]
 801210c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012110:	f04f 0100 	mov.w	r1, #0
 8012114:	bf14      	ite	ne
 8012116:	2340      	movne	r3, #64	@ 0x40
 8012118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801211c:	2000      	movs	r0, #0
 801211e:	6031      	str	r1, [r6, #0]
 8012120:	602b      	str	r3, [r5, #0]
 8012122:	b016      	add	sp, #88	@ 0x58
 8012124:	bd70      	pop	{r4, r5, r6, pc}
 8012126:	466a      	mov	r2, sp
 8012128:	f000 f848 	bl	80121bc <_fstat_r>
 801212c:	2800      	cmp	r0, #0
 801212e:	dbec      	blt.n	801210a <__swhatbuf_r+0x12>
 8012130:	9901      	ldr	r1, [sp, #4]
 8012132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801213a:	4259      	negs	r1, r3
 801213c:	4159      	adcs	r1, r3
 801213e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012142:	e7eb      	b.n	801211c <__swhatbuf_r+0x24>

08012144 <__smakebuf_r>:
 8012144:	898b      	ldrh	r3, [r1, #12]
 8012146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012148:	079d      	lsls	r5, r3, #30
 801214a:	4606      	mov	r6, r0
 801214c:	460c      	mov	r4, r1
 801214e:	d507      	bpl.n	8012160 <__smakebuf_r+0x1c>
 8012150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	6123      	str	r3, [r4, #16]
 8012158:	2301      	movs	r3, #1
 801215a:	6163      	str	r3, [r4, #20]
 801215c:	b003      	add	sp, #12
 801215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012160:	ab01      	add	r3, sp, #4
 8012162:	466a      	mov	r2, sp
 8012164:	f7ff ffc8 	bl	80120f8 <__swhatbuf_r>
 8012168:	9f00      	ldr	r7, [sp, #0]
 801216a:	4605      	mov	r5, r0
 801216c:	4639      	mov	r1, r7
 801216e:	4630      	mov	r0, r6
 8012170:	f7fb fcfa 	bl	800db68 <_malloc_r>
 8012174:	b948      	cbnz	r0, 801218a <__smakebuf_r+0x46>
 8012176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801217a:	059a      	lsls	r2, r3, #22
 801217c:	d4ee      	bmi.n	801215c <__smakebuf_r+0x18>
 801217e:	f023 0303 	bic.w	r3, r3, #3
 8012182:	f043 0302 	orr.w	r3, r3, #2
 8012186:	81a3      	strh	r3, [r4, #12]
 8012188:	e7e2      	b.n	8012150 <__smakebuf_r+0xc>
 801218a:	89a3      	ldrh	r3, [r4, #12]
 801218c:	6020      	str	r0, [r4, #0]
 801218e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012192:	81a3      	strh	r3, [r4, #12]
 8012194:	9b01      	ldr	r3, [sp, #4]
 8012196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801219a:	b15b      	cbz	r3, 80121b4 <__smakebuf_r+0x70>
 801219c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121a0:	4630      	mov	r0, r6
 80121a2:	f000 f81d 	bl	80121e0 <_isatty_r>
 80121a6:	b128      	cbz	r0, 80121b4 <__smakebuf_r+0x70>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	f023 0303 	bic.w	r3, r3, #3
 80121ae:	f043 0301 	orr.w	r3, r3, #1
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	89a3      	ldrh	r3, [r4, #12]
 80121b6:	431d      	orrs	r5, r3
 80121b8:	81a5      	strh	r5, [r4, #12]
 80121ba:	e7cf      	b.n	801215c <__smakebuf_r+0x18>

080121bc <_fstat_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d07      	ldr	r5, [pc, #28]	@ (80121dc <_fstat_r+0x20>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4604      	mov	r4, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	4611      	mov	r1, r2
 80121c8:	602b      	str	r3, [r5, #0]
 80121ca:	f7f2 f843 	bl	8004254 <_fstat>
 80121ce:	1c43      	adds	r3, r0, #1
 80121d0:	d102      	bne.n	80121d8 <_fstat_r+0x1c>
 80121d2:	682b      	ldr	r3, [r5, #0]
 80121d4:	b103      	cbz	r3, 80121d8 <_fstat_r+0x1c>
 80121d6:	6023      	str	r3, [r4, #0]
 80121d8:	bd38      	pop	{r3, r4, r5, pc}
 80121da:	bf00      	nop
 80121dc:	2000267c 	.word	0x2000267c

080121e0 <_isatty_r>:
 80121e0:	b538      	push	{r3, r4, r5, lr}
 80121e2:	4d06      	ldr	r5, [pc, #24]	@ (80121fc <_isatty_r+0x1c>)
 80121e4:	2300      	movs	r3, #0
 80121e6:	4604      	mov	r4, r0
 80121e8:	4608      	mov	r0, r1
 80121ea:	602b      	str	r3, [r5, #0]
 80121ec:	f7f2 f842 	bl	8004274 <_isatty>
 80121f0:	1c43      	adds	r3, r0, #1
 80121f2:	d102      	bne.n	80121fa <_isatty_r+0x1a>
 80121f4:	682b      	ldr	r3, [r5, #0]
 80121f6:	b103      	cbz	r3, 80121fa <_isatty_r+0x1a>
 80121f8:	6023      	str	r3, [r4, #0]
 80121fa:	bd38      	pop	{r3, r4, r5, pc}
 80121fc:	2000267c 	.word	0x2000267c

08012200 <atan2>:
 8012200:	f000 bbb2 	b.w	8012968 <__ieee754_atan2>

08012204 <pow>:
 8012204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012206:	ed2d 8b02 	vpush	{d8}
 801220a:	eeb0 8a40 	vmov.f32	s16, s0
 801220e:	eef0 8a60 	vmov.f32	s17, s1
 8012212:	ec55 4b11 	vmov	r4, r5, d1
 8012216:	f000 fc6f 	bl	8012af8 <__ieee754_pow>
 801221a:	4622      	mov	r2, r4
 801221c:	462b      	mov	r3, r5
 801221e:	4620      	mov	r0, r4
 8012220:	4629      	mov	r1, r5
 8012222:	ec57 6b10 	vmov	r6, r7, d0
 8012226:	f7ee fca1 	bl	8000b6c <__aeabi_dcmpun>
 801222a:	2800      	cmp	r0, #0
 801222c:	d13b      	bne.n	80122a6 <pow+0xa2>
 801222e:	ec51 0b18 	vmov	r0, r1, d8
 8012232:	2200      	movs	r2, #0
 8012234:	2300      	movs	r3, #0
 8012236:	f7ee fc67 	bl	8000b08 <__aeabi_dcmpeq>
 801223a:	b1b8      	cbz	r0, 801226c <pow+0x68>
 801223c:	2200      	movs	r2, #0
 801223e:	2300      	movs	r3, #0
 8012240:	4620      	mov	r0, r4
 8012242:	4629      	mov	r1, r5
 8012244:	f7ee fc60 	bl	8000b08 <__aeabi_dcmpeq>
 8012248:	2800      	cmp	r0, #0
 801224a:	d146      	bne.n	80122da <pow+0xd6>
 801224c:	ec45 4b10 	vmov	d0, r4, r5
 8012250:	f000 f91e 	bl	8012490 <finite>
 8012254:	b338      	cbz	r0, 80122a6 <pow+0xa2>
 8012256:	2200      	movs	r2, #0
 8012258:	2300      	movs	r3, #0
 801225a:	4620      	mov	r0, r4
 801225c:	4629      	mov	r1, r5
 801225e:	f7ee fc5d 	bl	8000b1c <__aeabi_dcmplt>
 8012262:	b300      	cbz	r0, 80122a6 <pow+0xa2>
 8012264:	f7fd fb28 	bl	800f8b8 <__errno>
 8012268:	2322      	movs	r3, #34	@ 0x22
 801226a:	e01b      	b.n	80122a4 <pow+0xa0>
 801226c:	ec47 6b10 	vmov	d0, r6, r7
 8012270:	f000 f90e 	bl	8012490 <finite>
 8012274:	b9e0      	cbnz	r0, 80122b0 <pow+0xac>
 8012276:	eeb0 0a48 	vmov.f32	s0, s16
 801227a:	eef0 0a68 	vmov.f32	s1, s17
 801227e:	f000 f907 	bl	8012490 <finite>
 8012282:	b1a8      	cbz	r0, 80122b0 <pow+0xac>
 8012284:	ec45 4b10 	vmov	d0, r4, r5
 8012288:	f000 f902 	bl	8012490 <finite>
 801228c:	b180      	cbz	r0, 80122b0 <pow+0xac>
 801228e:	4632      	mov	r2, r6
 8012290:	463b      	mov	r3, r7
 8012292:	4630      	mov	r0, r6
 8012294:	4639      	mov	r1, r7
 8012296:	f7ee fc69 	bl	8000b6c <__aeabi_dcmpun>
 801229a:	2800      	cmp	r0, #0
 801229c:	d0e2      	beq.n	8012264 <pow+0x60>
 801229e:	f7fd fb0b 	bl	800f8b8 <__errno>
 80122a2:	2321      	movs	r3, #33	@ 0x21
 80122a4:	6003      	str	r3, [r0, #0]
 80122a6:	ecbd 8b02 	vpop	{d8}
 80122aa:	ec47 6b10 	vmov	d0, r6, r7
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122b0:	2200      	movs	r2, #0
 80122b2:	2300      	movs	r3, #0
 80122b4:	4630      	mov	r0, r6
 80122b6:	4639      	mov	r1, r7
 80122b8:	f7ee fc26 	bl	8000b08 <__aeabi_dcmpeq>
 80122bc:	2800      	cmp	r0, #0
 80122be:	d0f2      	beq.n	80122a6 <pow+0xa2>
 80122c0:	eeb0 0a48 	vmov.f32	s0, s16
 80122c4:	eef0 0a68 	vmov.f32	s1, s17
 80122c8:	f000 f8e2 	bl	8012490 <finite>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d0ea      	beq.n	80122a6 <pow+0xa2>
 80122d0:	ec45 4b10 	vmov	d0, r4, r5
 80122d4:	f000 f8dc 	bl	8012490 <finite>
 80122d8:	e7c3      	b.n	8012262 <pow+0x5e>
 80122da:	4f01      	ldr	r7, [pc, #4]	@ (80122e0 <pow+0xdc>)
 80122dc:	2600      	movs	r6, #0
 80122de:	e7e2      	b.n	80122a6 <pow+0xa2>
 80122e0:	3ff00000 	.word	0x3ff00000

080122e4 <sqrt>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	ed2d 8b02 	vpush	{d8}
 80122ea:	ec55 4b10 	vmov	r4, r5, d0
 80122ee:	f000 f8db 	bl	80124a8 <__ieee754_sqrt>
 80122f2:	4622      	mov	r2, r4
 80122f4:	462b      	mov	r3, r5
 80122f6:	4620      	mov	r0, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	eeb0 8a40 	vmov.f32	s16, s0
 80122fe:	eef0 8a60 	vmov.f32	s17, s1
 8012302:	f7ee fc33 	bl	8000b6c <__aeabi_dcmpun>
 8012306:	b990      	cbnz	r0, 801232e <sqrt+0x4a>
 8012308:	2200      	movs	r2, #0
 801230a:	2300      	movs	r3, #0
 801230c:	4620      	mov	r0, r4
 801230e:	4629      	mov	r1, r5
 8012310:	f7ee fc04 	bl	8000b1c <__aeabi_dcmplt>
 8012314:	b158      	cbz	r0, 801232e <sqrt+0x4a>
 8012316:	f7fd facf 	bl	800f8b8 <__errno>
 801231a:	2321      	movs	r3, #33	@ 0x21
 801231c:	6003      	str	r3, [r0, #0]
 801231e:	2200      	movs	r2, #0
 8012320:	2300      	movs	r3, #0
 8012322:	4610      	mov	r0, r2
 8012324:	4619      	mov	r1, r3
 8012326:	f7ee fab1 	bl	800088c <__aeabi_ddiv>
 801232a:	ec41 0b18 	vmov	d8, r0, r1
 801232e:	eeb0 0a48 	vmov.f32	s0, s16
 8012332:	eef0 0a68 	vmov.f32	s1, s17
 8012336:	ecbd 8b02 	vpop	{d8}
 801233a:	bd38      	pop	{r3, r4, r5, pc}
 801233c:	0000      	movs	r0, r0
	...

08012340 <cos>:
 8012340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012342:	ec53 2b10 	vmov	r2, r3, d0
 8012346:	4826      	ldr	r0, [pc, #152]	@ (80123e0 <cos+0xa0>)
 8012348:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801234c:	4281      	cmp	r1, r0
 801234e:	d806      	bhi.n	801235e <cos+0x1e>
 8012350:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80123d8 <cos+0x98>
 8012354:	b005      	add	sp, #20
 8012356:	f85d eb04 	ldr.w	lr, [sp], #4
 801235a:	f000 b981 	b.w	8012660 <__kernel_cos>
 801235e:	4821      	ldr	r0, [pc, #132]	@ (80123e4 <cos+0xa4>)
 8012360:	4281      	cmp	r1, r0
 8012362:	d908      	bls.n	8012376 <cos+0x36>
 8012364:	4610      	mov	r0, r2
 8012366:	4619      	mov	r1, r3
 8012368:	f7ed ffae 	bl	80002c8 <__aeabi_dsub>
 801236c:	ec41 0b10 	vmov	d0, r0, r1
 8012370:	b005      	add	sp, #20
 8012372:	f85d fb04 	ldr.w	pc, [sp], #4
 8012376:	4668      	mov	r0, sp
 8012378:	f001 f902 	bl	8013580 <__ieee754_rem_pio2>
 801237c:	f000 0003 	and.w	r0, r0, #3
 8012380:	2801      	cmp	r0, #1
 8012382:	d00b      	beq.n	801239c <cos+0x5c>
 8012384:	2802      	cmp	r0, #2
 8012386:	d015      	beq.n	80123b4 <cos+0x74>
 8012388:	b9d8      	cbnz	r0, 80123c2 <cos+0x82>
 801238a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801238e:	ed9d 0b00 	vldr	d0, [sp]
 8012392:	f000 f965 	bl	8012660 <__kernel_cos>
 8012396:	ec51 0b10 	vmov	r0, r1, d0
 801239a:	e7e7      	b.n	801236c <cos+0x2c>
 801239c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123a0:	ed9d 0b00 	vldr	d0, [sp]
 80123a4:	f000 fa24 	bl	80127f0 <__kernel_sin>
 80123a8:	ec53 2b10 	vmov	r2, r3, d0
 80123ac:	4610      	mov	r0, r2
 80123ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80123b2:	e7db      	b.n	801236c <cos+0x2c>
 80123b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123b8:	ed9d 0b00 	vldr	d0, [sp]
 80123bc:	f000 f950 	bl	8012660 <__kernel_cos>
 80123c0:	e7f2      	b.n	80123a8 <cos+0x68>
 80123c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123c6:	ed9d 0b00 	vldr	d0, [sp]
 80123ca:	2001      	movs	r0, #1
 80123cc:	f000 fa10 	bl	80127f0 <__kernel_sin>
 80123d0:	e7e1      	b.n	8012396 <cos+0x56>
 80123d2:	bf00      	nop
 80123d4:	f3af 8000 	nop.w
	...
 80123e0:	3fe921fb 	.word	0x3fe921fb
 80123e4:	7fefffff 	.word	0x7fefffff

080123e8 <sin>:
 80123e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ea:	ec53 2b10 	vmov	r2, r3, d0
 80123ee:	4826      	ldr	r0, [pc, #152]	@ (8012488 <sin+0xa0>)
 80123f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80123f4:	4281      	cmp	r1, r0
 80123f6:	d807      	bhi.n	8012408 <sin+0x20>
 80123f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012480 <sin+0x98>
 80123fc:	2000      	movs	r0, #0
 80123fe:	b005      	add	sp, #20
 8012400:	f85d eb04 	ldr.w	lr, [sp], #4
 8012404:	f000 b9f4 	b.w	80127f0 <__kernel_sin>
 8012408:	4820      	ldr	r0, [pc, #128]	@ (801248c <sin+0xa4>)
 801240a:	4281      	cmp	r1, r0
 801240c:	d908      	bls.n	8012420 <sin+0x38>
 801240e:	4610      	mov	r0, r2
 8012410:	4619      	mov	r1, r3
 8012412:	f7ed ff59 	bl	80002c8 <__aeabi_dsub>
 8012416:	ec41 0b10 	vmov	d0, r0, r1
 801241a:	b005      	add	sp, #20
 801241c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012420:	4668      	mov	r0, sp
 8012422:	f001 f8ad 	bl	8013580 <__ieee754_rem_pio2>
 8012426:	f000 0003 	and.w	r0, r0, #3
 801242a:	2801      	cmp	r0, #1
 801242c:	d00c      	beq.n	8012448 <sin+0x60>
 801242e:	2802      	cmp	r0, #2
 8012430:	d011      	beq.n	8012456 <sin+0x6e>
 8012432:	b9e8      	cbnz	r0, 8012470 <sin+0x88>
 8012434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012438:	ed9d 0b00 	vldr	d0, [sp]
 801243c:	2001      	movs	r0, #1
 801243e:	f000 f9d7 	bl	80127f0 <__kernel_sin>
 8012442:	ec51 0b10 	vmov	r0, r1, d0
 8012446:	e7e6      	b.n	8012416 <sin+0x2e>
 8012448:	ed9d 1b02 	vldr	d1, [sp, #8]
 801244c:	ed9d 0b00 	vldr	d0, [sp]
 8012450:	f000 f906 	bl	8012660 <__kernel_cos>
 8012454:	e7f5      	b.n	8012442 <sin+0x5a>
 8012456:	ed9d 1b02 	vldr	d1, [sp, #8]
 801245a:	ed9d 0b00 	vldr	d0, [sp]
 801245e:	2001      	movs	r0, #1
 8012460:	f000 f9c6 	bl	80127f0 <__kernel_sin>
 8012464:	ec53 2b10 	vmov	r2, r3, d0
 8012468:	4610      	mov	r0, r2
 801246a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801246e:	e7d2      	b.n	8012416 <sin+0x2e>
 8012470:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012474:	ed9d 0b00 	vldr	d0, [sp]
 8012478:	f000 f8f2 	bl	8012660 <__kernel_cos>
 801247c:	e7f2      	b.n	8012464 <sin+0x7c>
 801247e:	bf00      	nop
	...
 8012488:	3fe921fb 	.word	0x3fe921fb
 801248c:	7fefffff 	.word	0x7fefffff

08012490 <finite>:
 8012490:	b082      	sub	sp, #8
 8012492:	ed8d 0b00 	vstr	d0, [sp]
 8012496:	9801      	ldr	r0, [sp, #4]
 8012498:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801249c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80124a0:	0fc0      	lsrs	r0, r0, #31
 80124a2:	b002      	add	sp, #8
 80124a4:	4770      	bx	lr
	...

080124a8 <__ieee754_sqrt>:
 80124a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	4a68      	ldr	r2, [pc, #416]	@ (8012650 <__ieee754_sqrt+0x1a8>)
 80124ae:	ec55 4b10 	vmov	r4, r5, d0
 80124b2:	43aa      	bics	r2, r5
 80124b4:	462b      	mov	r3, r5
 80124b6:	4621      	mov	r1, r4
 80124b8:	d110      	bne.n	80124dc <__ieee754_sqrt+0x34>
 80124ba:	4622      	mov	r2, r4
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f7ee f8ba 	bl	8000638 <__aeabi_dmul>
 80124c4:	4602      	mov	r2, r0
 80124c6:	460b      	mov	r3, r1
 80124c8:	4620      	mov	r0, r4
 80124ca:	4629      	mov	r1, r5
 80124cc:	f7ed fefe 	bl	80002cc <__adddf3>
 80124d0:	4604      	mov	r4, r0
 80124d2:	460d      	mov	r5, r1
 80124d4:	ec45 4b10 	vmov	d0, r4, r5
 80124d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124dc:	2d00      	cmp	r5, #0
 80124de:	dc0e      	bgt.n	80124fe <__ieee754_sqrt+0x56>
 80124e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80124e4:	4322      	orrs	r2, r4
 80124e6:	d0f5      	beq.n	80124d4 <__ieee754_sqrt+0x2c>
 80124e8:	b19d      	cbz	r5, 8012512 <__ieee754_sqrt+0x6a>
 80124ea:	4622      	mov	r2, r4
 80124ec:	4620      	mov	r0, r4
 80124ee:	4629      	mov	r1, r5
 80124f0:	f7ed feea 	bl	80002c8 <__aeabi_dsub>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	f7ee f9c8 	bl	800088c <__aeabi_ddiv>
 80124fc:	e7e8      	b.n	80124d0 <__ieee754_sqrt+0x28>
 80124fe:	152a      	asrs	r2, r5, #20
 8012500:	d115      	bne.n	801252e <__ieee754_sqrt+0x86>
 8012502:	2000      	movs	r0, #0
 8012504:	e009      	b.n	801251a <__ieee754_sqrt+0x72>
 8012506:	0acb      	lsrs	r3, r1, #11
 8012508:	3a15      	subs	r2, #21
 801250a:	0549      	lsls	r1, r1, #21
 801250c:	2b00      	cmp	r3, #0
 801250e:	d0fa      	beq.n	8012506 <__ieee754_sqrt+0x5e>
 8012510:	e7f7      	b.n	8012502 <__ieee754_sqrt+0x5a>
 8012512:	462a      	mov	r2, r5
 8012514:	e7fa      	b.n	801250c <__ieee754_sqrt+0x64>
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	3001      	adds	r0, #1
 801251a:	02dc      	lsls	r4, r3, #11
 801251c:	d5fb      	bpl.n	8012516 <__ieee754_sqrt+0x6e>
 801251e:	1e44      	subs	r4, r0, #1
 8012520:	1b12      	subs	r2, r2, r4
 8012522:	f1c0 0420 	rsb	r4, r0, #32
 8012526:	fa21 f404 	lsr.w	r4, r1, r4
 801252a:	4323      	orrs	r3, r4
 801252c:	4081      	lsls	r1, r0
 801252e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012532:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801253a:	07d2      	lsls	r2, r2, #31
 801253c:	bf5c      	itt	pl
 801253e:	005b      	lslpl	r3, r3, #1
 8012540:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012544:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012548:	bf58      	it	pl
 801254a:	0049      	lslpl	r1, r1, #1
 801254c:	2600      	movs	r6, #0
 801254e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012552:	106d      	asrs	r5, r5, #1
 8012554:	0049      	lsls	r1, r1, #1
 8012556:	2016      	movs	r0, #22
 8012558:	4632      	mov	r2, r6
 801255a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801255e:	1917      	adds	r7, r2, r4
 8012560:	429f      	cmp	r7, r3
 8012562:	bfde      	ittt	le
 8012564:	193a      	addle	r2, r7, r4
 8012566:	1bdb      	suble	r3, r3, r7
 8012568:	1936      	addle	r6, r6, r4
 801256a:	0fcf      	lsrs	r7, r1, #31
 801256c:	3801      	subs	r0, #1
 801256e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012572:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012576:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801257a:	d1f0      	bne.n	801255e <__ieee754_sqrt+0xb6>
 801257c:	4604      	mov	r4, r0
 801257e:	2720      	movs	r7, #32
 8012580:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012584:	429a      	cmp	r2, r3
 8012586:	eb00 0e0c 	add.w	lr, r0, ip
 801258a:	db02      	blt.n	8012592 <__ieee754_sqrt+0xea>
 801258c:	d113      	bne.n	80125b6 <__ieee754_sqrt+0x10e>
 801258e:	458e      	cmp	lr, r1
 8012590:	d811      	bhi.n	80125b6 <__ieee754_sqrt+0x10e>
 8012592:	f1be 0f00 	cmp.w	lr, #0
 8012596:	eb0e 000c 	add.w	r0, lr, ip
 801259a:	da42      	bge.n	8012622 <__ieee754_sqrt+0x17a>
 801259c:	2800      	cmp	r0, #0
 801259e:	db40      	blt.n	8012622 <__ieee754_sqrt+0x17a>
 80125a0:	f102 0801 	add.w	r8, r2, #1
 80125a4:	1a9b      	subs	r3, r3, r2
 80125a6:	458e      	cmp	lr, r1
 80125a8:	bf88      	it	hi
 80125aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80125ae:	eba1 010e 	sub.w	r1, r1, lr
 80125b2:	4464      	add	r4, ip
 80125b4:	4642      	mov	r2, r8
 80125b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80125ba:	3f01      	subs	r7, #1
 80125bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80125c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80125c8:	d1dc      	bne.n	8012584 <__ieee754_sqrt+0xdc>
 80125ca:	4319      	orrs	r1, r3
 80125cc:	d01b      	beq.n	8012606 <__ieee754_sqrt+0x15e>
 80125ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012654 <__ieee754_sqrt+0x1ac>
 80125d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012658 <__ieee754_sqrt+0x1b0>
 80125d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80125da:	e9db 2300 	ldrd	r2, r3, [fp]
 80125de:	f7ed fe73 	bl	80002c8 <__aeabi_dsub>
 80125e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80125e6:	4602      	mov	r2, r0
 80125e8:	460b      	mov	r3, r1
 80125ea:	4640      	mov	r0, r8
 80125ec:	4649      	mov	r1, r9
 80125ee:	f7ee fa9f 	bl	8000b30 <__aeabi_dcmple>
 80125f2:	b140      	cbz	r0, 8012606 <__ieee754_sqrt+0x15e>
 80125f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80125f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80125fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8012600:	d111      	bne.n	8012626 <__ieee754_sqrt+0x17e>
 8012602:	3601      	adds	r6, #1
 8012604:	463c      	mov	r4, r7
 8012606:	1072      	asrs	r2, r6, #1
 8012608:	0863      	lsrs	r3, r4, #1
 801260a:	07f1      	lsls	r1, r6, #31
 801260c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012610:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012614:	bf48      	it	mi
 8012616:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801261a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801261e:	4618      	mov	r0, r3
 8012620:	e756      	b.n	80124d0 <__ieee754_sqrt+0x28>
 8012622:	4690      	mov	r8, r2
 8012624:	e7be      	b.n	80125a4 <__ieee754_sqrt+0xfc>
 8012626:	f7ed fe51 	bl	80002cc <__adddf3>
 801262a:	e9da 8900 	ldrd	r8, r9, [sl]
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	4640      	mov	r0, r8
 8012634:	4649      	mov	r1, r9
 8012636:	f7ee fa71 	bl	8000b1c <__aeabi_dcmplt>
 801263a:	b120      	cbz	r0, 8012646 <__ieee754_sqrt+0x19e>
 801263c:	1ca0      	adds	r0, r4, #2
 801263e:	bf08      	it	eq
 8012640:	3601      	addeq	r6, #1
 8012642:	3402      	adds	r4, #2
 8012644:	e7df      	b.n	8012606 <__ieee754_sqrt+0x15e>
 8012646:	1c63      	adds	r3, r4, #1
 8012648:	f023 0401 	bic.w	r4, r3, #1
 801264c:	e7db      	b.n	8012606 <__ieee754_sqrt+0x15e>
 801264e:	bf00      	nop
 8012650:	7ff00000 	.word	0x7ff00000
 8012654:	200002f8 	.word	0x200002f8
 8012658:	200002f0 	.word	0x200002f0
 801265c:	00000000 	.word	0x00000000

08012660 <__kernel_cos>:
 8012660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	ec57 6b10 	vmov	r6, r7, d0
 8012668:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801266c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012670:	ed8d 1b00 	vstr	d1, [sp]
 8012674:	d206      	bcs.n	8012684 <__kernel_cos+0x24>
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ee fa8d 	bl	8000b98 <__aeabi_d2iz>
 801267e:	2800      	cmp	r0, #0
 8012680:	f000 8088 	beq.w	8012794 <__kernel_cos+0x134>
 8012684:	4632      	mov	r2, r6
 8012686:	463b      	mov	r3, r7
 8012688:	4630      	mov	r0, r6
 801268a:	4639      	mov	r1, r7
 801268c:	f7ed ffd4 	bl	8000638 <__aeabi_dmul>
 8012690:	4b51      	ldr	r3, [pc, #324]	@ (80127d8 <__kernel_cos+0x178>)
 8012692:	2200      	movs	r2, #0
 8012694:	4604      	mov	r4, r0
 8012696:	460d      	mov	r5, r1
 8012698:	f7ed ffce 	bl	8000638 <__aeabi_dmul>
 801269c:	a340      	add	r3, pc, #256	@ (adr r3, 80127a0 <__kernel_cos+0x140>)
 801269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a2:	4682      	mov	sl, r0
 80126a4:	468b      	mov	fp, r1
 80126a6:	4620      	mov	r0, r4
 80126a8:	4629      	mov	r1, r5
 80126aa:	f7ed ffc5 	bl	8000638 <__aeabi_dmul>
 80126ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80127a8 <__kernel_cos+0x148>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	f7ed fe0a 	bl	80002cc <__adddf3>
 80126b8:	4622      	mov	r2, r4
 80126ba:	462b      	mov	r3, r5
 80126bc:	f7ed ffbc 	bl	8000638 <__aeabi_dmul>
 80126c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80127b0 <__kernel_cos+0x150>)
 80126c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c6:	f7ed fdff 	bl	80002c8 <__aeabi_dsub>
 80126ca:	4622      	mov	r2, r4
 80126cc:	462b      	mov	r3, r5
 80126ce:	f7ed ffb3 	bl	8000638 <__aeabi_dmul>
 80126d2:	a339      	add	r3, pc, #228	@ (adr r3, 80127b8 <__kernel_cos+0x158>)
 80126d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d8:	f7ed fdf8 	bl	80002cc <__adddf3>
 80126dc:	4622      	mov	r2, r4
 80126de:	462b      	mov	r3, r5
 80126e0:	f7ed ffaa 	bl	8000638 <__aeabi_dmul>
 80126e4:	a336      	add	r3, pc, #216	@ (adr r3, 80127c0 <__kernel_cos+0x160>)
 80126e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ea:	f7ed fded 	bl	80002c8 <__aeabi_dsub>
 80126ee:	4622      	mov	r2, r4
 80126f0:	462b      	mov	r3, r5
 80126f2:	f7ed ffa1 	bl	8000638 <__aeabi_dmul>
 80126f6:	a334      	add	r3, pc, #208	@ (adr r3, 80127c8 <__kernel_cos+0x168>)
 80126f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fc:	f7ed fde6 	bl	80002cc <__adddf3>
 8012700:	4622      	mov	r2, r4
 8012702:	462b      	mov	r3, r5
 8012704:	f7ed ff98 	bl	8000638 <__aeabi_dmul>
 8012708:	4622      	mov	r2, r4
 801270a:	462b      	mov	r3, r5
 801270c:	f7ed ff94 	bl	8000638 <__aeabi_dmul>
 8012710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012714:	4604      	mov	r4, r0
 8012716:	460d      	mov	r5, r1
 8012718:	4630      	mov	r0, r6
 801271a:	4639      	mov	r1, r7
 801271c:	f7ed ff8c 	bl	8000638 <__aeabi_dmul>
 8012720:	460b      	mov	r3, r1
 8012722:	4602      	mov	r2, r0
 8012724:	4629      	mov	r1, r5
 8012726:	4620      	mov	r0, r4
 8012728:	f7ed fdce 	bl	80002c8 <__aeabi_dsub>
 801272c:	4b2b      	ldr	r3, [pc, #172]	@ (80127dc <__kernel_cos+0x17c>)
 801272e:	4598      	cmp	r8, r3
 8012730:	4606      	mov	r6, r0
 8012732:	460f      	mov	r7, r1
 8012734:	d810      	bhi.n	8012758 <__kernel_cos+0xf8>
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4650      	mov	r0, sl
 801273c:	4659      	mov	r1, fp
 801273e:	f7ed fdc3 	bl	80002c8 <__aeabi_dsub>
 8012742:	460b      	mov	r3, r1
 8012744:	4926      	ldr	r1, [pc, #152]	@ (80127e0 <__kernel_cos+0x180>)
 8012746:	4602      	mov	r2, r0
 8012748:	2000      	movs	r0, #0
 801274a:	f7ed fdbd 	bl	80002c8 <__aeabi_dsub>
 801274e:	ec41 0b10 	vmov	d0, r0, r1
 8012752:	b003      	add	sp, #12
 8012754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012758:	4b22      	ldr	r3, [pc, #136]	@ (80127e4 <__kernel_cos+0x184>)
 801275a:	4921      	ldr	r1, [pc, #132]	@ (80127e0 <__kernel_cos+0x180>)
 801275c:	4598      	cmp	r8, r3
 801275e:	bf8c      	ite	hi
 8012760:	4d21      	ldrhi	r5, [pc, #132]	@ (80127e8 <__kernel_cos+0x188>)
 8012762:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012766:	2400      	movs	r4, #0
 8012768:	4622      	mov	r2, r4
 801276a:	462b      	mov	r3, r5
 801276c:	2000      	movs	r0, #0
 801276e:	f7ed fdab 	bl	80002c8 <__aeabi_dsub>
 8012772:	4622      	mov	r2, r4
 8012774:	4680      	mov	r8, r0
 8012776:	4689      	mov	r9, r1
 8012778:	462b      	mov	r3, r5
 801277a:	4650      	mov	r0, sl
 801277c:	4659      	mov	r1, fp
 801277e:	f7ed fda3 	bl	80002c8 <__aeabi_dsub>
 8012782:	4632      	mov	r2, r6
 8012784:	463b      	mov	r3, r7
 8012786:	f7ed fd9f 	bl	80002c8 <__aeabi_dsub>
 801278a:	4602      	mov	r2, r0
 801278c:	460b      	mov	r3, r1
 801278e:	4640      	mov	r0, r8
 8012790:	4649      	mov	r1, r9
 8012792:	e7da      	b.n	801274a <__kernel_cos+0xea>
 8012794:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80127d0 <__kernel_cos+0x170>
 8012798:	e7db      	b.n	8012752 <__kernel_cos+0xf2>
 801279a:	bf00      	nop
 801279c:	f3af 8000 	nop.w
 80127a0:	be8838d4 	.word	0xbe8838d4
 80127a4:	bda8fae9 	.word	0xbda8fae9
 80127a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80127ac:	3e21ee9e 	.word	0x3e21ee9e
 80127b0:	809c52ad 	.word	0x809c52ad
 80127b4:	3e927e4f 	.word	0x3e927e4f
 80127b8:	19cb1590 	.word	0x19cb1590
 80127bc:	3efa01a0 	.word	0x3efa01a0
 80127c0:	16c15177 	.word	0x16c15177
 80127c4:	3f56c16c 	.word	0x3f56c16c
 80127c8:	5555554c 	.word	0x5555554c
 80127cc:	3fa55555 	.word	0x3fa55555
 80127d0:	00000000 	.word	0x00000000
 80127d4:	3ff00000 	.word	0x3ff00000
 80127d8:	3fe00000 	.word	0x3fe00000
 80127dc:	3fd33332 	.word	0x3fd33332
 80127e0:	3ff00000 	.word	0x3ff00000
 80127e4:	3fe90000 	.word	0x3fe90000
 80127e8:	3fd20000 	.word	0x3fd20000
 80127ec:	00000000 	.word	0x00000000

080127f0 <__kernel_sin>:
 80127f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f4:	ec55 4b10 	vmov	r4, r5, d0
 80127f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80127fc:	b085      	sub	sp, #20
 80127fe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012802:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012806:	4680      	mov	r8, r0
 8012808:	d205      	bcs.n	8012816 <__kernel_sin+0x26>
 801280a:	4620      	mov	r0, r4
 801280c:	4629      	mov	r1, r5
 801280e:	f7ee f9c3 	bl	8000b98 <__aeabi_d2iz>
 8012812:	2800      	cmp	r0, #0
 8012814:	d052      	beq.n	80128bc <__kernel_sin+0xcc>
 8012816:	4622      	mov	r2, r4
 8012818:	462b      	mov	r3, r5
 801281a:	4620      	mov	r0, r4
 801281c:	4629      	mov	r1, r5
 801281e:	f7ed ff0b 	bl	8000638 <__aeabi_dmul>
 8012822:	4682      	mov	sl, r0
 8012824:	468b      	mov	fp, r1
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	4620      	mov	r0, r4
 801282c:	4629      	mov	r1, r5
 801282e:	f7ed ff03 	bl	8000638 <__aeabi_dmul>
 8012832:	a342      	add	r3, pc, #264	@ (adr r3, 801293c <__kernel_sin+0x14c>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	e9cd 0100 	strd	r0, r1, [sp]
 801283c:	4650      	mov	r0, sl
 801283e:	4659      	mov	r1, fp
 8012840:	f7ed fefa 	bl	8000638 <__aeabi_dmul>
 8012844:	a33f      	add	r3, pc, #252	@ (adr r3, 8012944 <__kernel_sin+0x154>)
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	f7ed fd3d 	bl	80002c8 <__aeabi_dsub>
 801284e:	4652      	mov	r2, sl
 8012850:	465b      	mov	r3, fp
 8012852:	f7ed fef1 	bl	8000638 <__aeabi_dmul>
 8012856:	a33d      	add	r3, pc, #244	@ (adr r3, 801294c <__kernel_sin+0x15c>)
 8012858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285c:	f7ed fd36 	bl	80002cc <__adddf3>
 8012860:	4652      	mov	r2, sl
 8012862:	465b      	mov	r3, fp
 8012864:	f7ed fee8 	bl	8000638 <__aeabi_dmul>
 8012868:	a33a      	add	r3, pc, #232	@ (adr r3, 8012954 <__kernel_sin+0x164>)
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	f7ed fd2b 	bl	80002c8 <__aeabi_dsub>
 8012872:	4652      	mov	r2, sl
 8012874:	465b      	mov	r3, fp
 8012876:	f7ed fedf 	bl	8000638 <__aeabi_dmul>
 801287a:	a338      	add	r3, pc, #224	@ (adr r3, 801295c <__kernel_sin+0x16c>)
 801287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012880:	f7ed fd24 	bl	80002cc <__adddf3>
 8012884:	4606      	mov	r6, r0
 8012886:	460f      	mov	r7, r1
 8012888:	f1b8 0f00 	cmp.w	r8, #0
 801288c:	d11b      	bne.n	80128c6 <__kernel_sin+0xd6>
 801288e:	4602      	mov	r2, r0
 8012890:	460b      	mov	r3, r1
 8012892:	4650      	mov	r0, sl
 8012894:	4659      	mov	r1, fp
 8012896:	f7ed fecf 	bl	8000638 <__aeabi_dmul>
 801289a:	a325      	add	r3, pc, #148	@ (adr r3, 8012930 <__kernel_sin+0x140>)
 801289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a0:	f7ed fd12 	bl	80002c8 <__aeabi_dsub>
 80128a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128a8:	f7ed fec6 	bl	8000638 <__aeabi_dmul>
 80128ac:	4602      	mov	r2, r0
 80128ae:	460b      	mov	r3, r1
 80128b0:	4620      	mov	r0, r4
 80128b2:	4629      	mov	r1, r5
 80128b4:	f7ed fd0a 	bl	80002cc <__adddf3>
 80128b8:	4604      	mov	r4, r0
 80128ba:	460d      	mov	r5, r1
 80128bc:	ec45 4b10 	vmov	d0, r4, r5
 80128c0:	b005      	add	sp, #20
 80128c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ca:	4b1b      	ldr	r3, [pc, #108]	@ (8012938 <__kernel_sin+0x148>)
 80128cc:	2200      	movs	r2, #0
 80128ce:	f7ed feb3 	bl	8000638 <__aeabi_dmul>
 80128d2:	4632      	mov	r2, r6
 80128d4:	4680      	mov	r8, r0
 80128d6:	4689      	mov	r9, r1
 80128d8:	463b      	mov	r3, r7
 80128da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128de:	f7ed feab 	bl	8000638 <__aeabi_dmul>
 80128e2:	4602      	mov	r2, r0
 80128e4:	460b      	mov	r3, r1
 80128e6:	4640      	mov	r0, r8
 80128e8:	4649      	mov	r1, r9
 80128ea:	f7ed fced 	bl	80002c8 <__aeabi_dsub>
 80128ee:	4652      	mov	r2, sl
 80128f0:	465b      	mov	r3, fp
 80128f2:	f7ed fea1 	bl	8000638 <__aeabi_dmul>
 80128f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128fa:	f7ed fce5 	bl	80002c8 <__aeabi_dsub>
 80128fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8012930 <__kernel_sin+0x140>)
 8012900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012904:	4606      	mov	r6, r0
 8012906:	460f      	mov	r7, r1
 8012908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801290c:	f7ed fe94 	bl	8000638 <__aeabi_dmul>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4630      	mov	r0, r6
 8012916:	4639      	mov	r1, r7
 8012918:	f7ed fcd8 	bl	80002cc <__adddf3>
 801291c:	4602      	mov	r2, r0
 801291e:	460b      	mov	r3, r1
 8012920:	4620      	mov	r0, r4
 8012922:	4629      	mov	r1, r5
 8012924:	f7ed fcd0 	bl	80002c8 <__aeabi_dsub>
 8012928:	e7c6      	b.n	80128b8 <__kernel_sin+0xc8>
 801292a:	bf00      	nop
 801292c:	f3af 8000 	nop.w
 8012930:	55555549 	.word	0x55555549
 8012934:	3fc55555 	.word	0x3fc55555
 8012938:	3fe00000 	.word	0x3fe00000
 801293c:	5acfd57c 	.word	0x5acfd57c
 8012940:	3de5d93a 	.word	0x3de5d93a
 8012944:	8a2b9ceb 	.word	0x8a2b9ceb
 8012948:	3e5ae5e6 	.word	0x3e5ae5e6
 801294c:	57b1fe7d 	.word	0x57b1fe7d
 8012950:	3ec71de3 	.word	0x3ec71de3
 8012954:	19c161d5 	.word	0x19c161d5
 8012958:	3f2a01a0 	.word	0x3f2a01a0
 801295c:	1110f8a6 	.word	0x1110f8a6
 8012960:	3f811111 	.word	0x3f811111
 8012964:	00000000 	.word	0x00000000

08012968 <__ieee754_atan2>:
 8012968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801296c:	ec57 6b11 	vmov	r6, r7, d1
 8012970:	4273      	negs	r3, r6
 8012972:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012af0 <__ieee754_atan2+0x188>
 8012976:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801297a:	4333      	orrs	r3, r6
 801297c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012980:	4543      	cmp	r3, r8
 8012982:	ec51 0b10 	vmov	r0, r1, d0
 8012986:	4635      	mov	r5, r6
 8012988:	d809      	bhi.n	801299e <__ieee754_atan2+0x36>
 801298a:	4244      	negs	r4, r0
 801298c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012990:	4304      	orrs	r4, r0
 8012992:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012996:	4544      	cmp	r4, r8
 8012998:	468e      	mov	lr, r1
 801299a:	4681      	mov	r9, r0
 801299c:	d907      	bls.n	80129ae <__ieee754_atan2+0x46>
 801299e:	4632      	mov	r2, r6
 80129a0:	463b      	mov	r3, r7
 80129a2:	f7ed fc93 	bl	80002cc <__adddf3>
 80129a6:	ec41 0b10 	vmov	d0, r0, r1
 80129aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80129b2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80129b6:	4334      	orrs	r4, r6
 80129b8:	d103      	bne.n	80129c2 <__ieee754_atan2+0x5a>
 80129ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129be:	f000 bfdb 	b.w	8013978 <atan>
 80129c2:	17bc      	asrs	r4, r7, #30
 80129c4:	f004 0402 	and.w	r4, r4, #2
 80129c8:	ea53 0909 	orrs.w	r9, r3, r9
 80129cc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80129d0:	d107      	bne.n	80129e2 <__ieee754_atan2+0x7a>
 80129d2:	2c02      	cmp	r4, #2
 80129d4:	d05f      	beq.n	8012a96 <__ieee754_atan2+0x12e>
 80129d6:	2c03      	cmp	r4, #3
 80129d8:	d1e5      	bne.n	80129a6 <__ieee754_atan2+0x3e>
 80129da:	a141      	add	r1, pc, #260	@ (adr r1, 8012ae0 <__ieee754_atan2+0x178>)
 80129dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129e0:	e7e1      	b.n	80129a6 <__ieee754_atan2+0x3e>
 80129e2:	4315      	orrs	r5, r2
 80129e4:	d106      	bne.n	80129f4 <__ieee754_atan2+0x8c>
 80129e6:	f1be 0f00 	cmp.w	lr, #0
 80129ea:	da5f      	bge.n	8012aac <__ieee754_atan2+0x144>
 80129ec:	a13e      	add	r1, pc, #248	@ (adr r1, 8012ae8 <__ieee754_atan2+0x180>)
 80129ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129f2:	e7d8      	b.n	80129a6 <__ieee754_atan2+0x3e>
 80129f4:	4542      	cmp	r2, r8
 80129f6:	d10f      	bne.n	8012a18 <__ieee754_atan2+0xb0>
 80129f8:	4293      	cmp	r3, r2
 80129fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80129fe:	d107      	bne.n	8012a10 <__ieee754_atan2+0xa8>
 8012a00:	2c02      	cmp	r4, #2
 8012a02:	d84c      	bhi.n	8012a9e <__ieee754_atan2+0x136>
 8012a04:	4b34      	ldr	r3, [pc, #208]	@ (8012ad8 <__ieee754_atan2+0x170>)
 8012a06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a0e:	e7ca      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012a10:	2c02      	cmp	r4, #2
 8012a12:	d848      	bhi.n	8012aa6 <__ieee754_atan2+0x13e>
 8012a14:	4b31      	ldr	r3, [pc, #196]	@ (8012adc <__ieee754_atan2+0x174>)
 8012a16:	e7f6      	b.n	8012a06 <__ieee754_atan2+0x9e>
 8012a18:	4543      	cmp	r3, r8
 8012a1a:	d0e4      	beq.n	80129e6 <__ieee754_atan2+0x7e>
 8012a1c:	1a9b      	subs	r3, r3, r2
 8012a1e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012a22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012a26:	da1e      	bge.n	8012a66 <__ieee754_atan2+0xfe>
 8012a28:	2f00      	cmp	r7, #0
 8012a2a:	da01      	bge.n	8012a30 <__ieee754_atan2+0xc8>
 8012a2c:	323c      	adds	r2, #60	@ 0x3c
 8012a2e:	db1e      	blt.n	8012a6e <__ieee754_atan2+0x106>
 8012a30:	4632      	mov	r2, r6
 8012a32:	463b      	mov	r3, r7
 8012a34:	f7ed ff2a 	bl	800088c <__aeabi_ddiv>
 8012a38:	ec41 0b10 	vmov	d0, r0, r1
 8012a3c:	f001 f934 	bl	8013ca8 <fabs>
 8012a40:	f000 ff9a 	bl	8013978 <atan>
 8012a44:	ec51 0b10 	vmov	r0, r1, d0
 8012a48:	2c01      	cmp	r4, #1
 8012a4a:	d013      	beq.n	8012a74 <__ieee754_atan2+0x10c>
 8012a4c:	2c02      	cmp	r4, #2
 8012a4e:	d015      	beq.n	8012a7c <__ieee754_atan2+0x114>
 8012a50:	2c00      	cmp	r4, #0
 8012a52:	d0a8      	beq.n	80129a6 <__ieee754_atan2+0x3e>
 8012a54:	a318      	add	r3, pc, #96	@ (adr r3, 8012ab8 <__ieee754_atan2+0x150>)
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	f7ed fc35 	bl	80002c8 <__aeabi_dsub>
 8012a5e:	a318      	add	r3, pc, #96	@ (adr r3, 8012ac0 <__ieee754_atan2+0x158>)
 8012a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a64:	e014      	b.n	8012a90 <__ieee754_atan2+0x128>
 8012a66:	a118      	add	r1, pc, #96	@ (adr r1, 8012ac8 <__ieee754_atan2+0x160>)
 8012a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a6c:	e7ec      	b.n	8012a48 <__ieee754_atan2+0xe0>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	2100      	movs	r1, #0
 8012a72:	e7e9      	b.n	8012a48 <__ieee754_atan2+0xe0>
 8012a74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a78:	4619      	mov	r1, r3
 8012a7a:	e794      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012a7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ab8 <__ieee754_atan2+0x150>)
 8012a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a82:	f7ed fc21 	bl	80002c8 <__aeabi_dsub>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	a10d      	add	r1, pc, #52	@ (adr r1, 8012ac0 <__ieee754_atan2+0x158>)
 8012a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a90:	f7ed fc1a 	bl	80002c8 <__aeabi_dsub>
 8012a94:	e787      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012a96:	a10a      	add	r1, pc, #40	@ (adr r1, 8012ac0 <__ieee754_atan2+0x158>)
 8012a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a9c:	e783      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012a9e:	a10c      	add	r1, pc, #48	@ (adr r1, 8012ad0 <__ieee754_atan2+0x168>)
 8012aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012aa4:	e77f      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	e77c      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012aac:	a106      	add	r1, pc, #24	@ (adr r1, 8012ac8 <__ieee754_atan2+0x160>)
 8012aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ab2:	e778      	b.n	80129a6 <__ieee754_atan2+0x3e>
 8012ab4:	f3af 8000 	nop.w
 8012ab8:	33145c07 	.word	0x33145c07
 8012abc:	3ca1a626 	.word	0x3ca1a626
 8012ac0:	54442d18 	.word	0x54442d18
 8012ac4:	400921fb 	.word	0x400921fb
 8012ac8:	54442d18 	.word	0x54442d18
 8012acc:	3ff921fb 	.word	0x3ff921fb
 8012ad0:	54442d18 	.word	0x54442d18
 8012ad4:	3fe921fb 	.word	0x3fe921fb
 8012ad8:	08014bd0 	.word	0x08014bd0
 8012adc:	08014bb8 	.word	0x08014bb8
 8012ae0:	54442d18 	.word	0x54442d18
 8012ae4:	c00921fb 	.word	0xc00921fb
 8012ae8:	54442d18 	.word	0x54442d18
 8012aec:	bff921fb 	.word	0xbff921fb
 8012af0:	7ff00000 	.word	0x7ff00000
 8012af4:	00000000 	.word	0x00000000

08012af8 <__ieee754_pow>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	b091      	sub	sp, #68	@ 0x44
 8012afe:	ed8d 1b00 	vstr	d1, [sp]
 8012b02:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012b06:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8012b0a:	ea5a 0001 	orrs.w	r0, sl, r1
 8012b0e:	ec57 6b10 	vmov	r6, r7, d0
 8012b12:	d113      	bne.n	8012b3c <__ieee754_pow+0x44>
 8012b14:	19b3      	adds	r3, r6, r6
 8012b16:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8012b1a:	4152      	adcs	r2, r2
 8012b1c:	4298      	cmp	r0, r3
 8012b1e:	4b98      	ldr	r3, [pc, #608]	@ (8012d80 <__ieee754_pow+0x288>)
 8012b20:	4193      	sbcs	r3, r2
 8012b22:	f080 84ea 	bcs.w	80134fa <__ieee754_pow+0xa02>
 8012b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	f7ed fbcd 	bl	80002cc <__adddf3>
 8012b32:	ec41 0b10 	vmov	d0, r0, r1
 8012b36:	b011      	add	sp, #68	@ 0x44
 8012b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b3c:	4a91      	ldr	r2, [pc, #580]	@ (8012d84 <__ieee754_pow+0x28c>)
 8012b3e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012b42:	4590      	cmp	r8, r2
 8012b44:	463d      	mov	r5, r7
 8012b46:	4633      	mov	r3, r6
 8012b48:	d806      	bhi.n	8012b58 <__ieee754_pow+0x60>
 8012b4a:	d101      	bne.n	8012b50 <__ieee754_pow+0x58>
 8012b4c:	2e00      	cmp	r6, #0
 8012b4e:	d1ea      	bne.n	8012b26 <__ieee754_pow+0x2e>
 8012b50:	4592      	cmp	sl, r2
 8012b52:	d801      	bhi.n	8012b58 <__ieee754_pow+0x60>
 8012b54:	d10e      	bne.n	8012b74 <__ieee754_pow+0x7c>
 8012b56:	b169      	cbz	r1, 8012b74 <__ieee754_pow+0x7c>
 8012b58:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012b5c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012b60:	431d      	orrs	r5, r3
 8012b62:	d1e0      	bne.n	8012b26 <__ieee754_pow+0x2e>
 8012b64:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012b68:	18db      	adds	r3, r3, r3
 8012b6a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012b6e:	4152      	adcs	r2, r2
 8012b70:	429d      	cmp	r5, r3
 8012b72:	e7d4      	b.n	8012b1e <__ieee754_pow+0x26>
 8012b74:	2d00      	cmp	r5, #0
 8012b76:	46c3      	mov	fp, r8
 8012b78:	da3a      	bge.n	8012bf0 <__ieee754_pow+0xf8>
 8012b7a:	4a83      	ldr	r2, [pc, #524]	@ (8012d88 <__ieee754_pow+0x290>)
 8012b7c:	4592      	cmp	sl, r2
 8012b7e:	d84d      	bhi.n	8012c1c <__ieee754_pow+0x124>
 8012b80:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012b84:	4592      	cmp	sl, r2
 8012b86:	f240 84c7 	bls.w	8013518 <__ieee754_pow+0xa20>
 8012b8a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8012b8e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8012b92:	2a14      	cmp	r2, #20
 8012b94:	dd0f      	ble.n	8012bb6 <__ieee754_pow+0xbe>
 8012b96:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012b9a:	fa21 f402 	lsr.w	r4, r1, r2
 8012b9e:	fa04 f202 	lsl.w	r2, r4, r2
 8012ba2:	428a      	cmp	r2, r1
 8012ba4:	f040 84b8 	bne.w	8013518 <__ieee754_pow+0xa20>
 8012ba8:	f004 0401 	and.w	r4, r4, #1
 8012bac:	f1c4 0402 	rsb	r4, r4, #2
 8012bb0:	2900      	cmp	r1, #0
 8012bb2:	d158      	bne.n	8012c66 <__ieee754_pow+0x16e>
 8012bb4:	e00e      	b.n	8012bd4 <__ieee754_pow+0xdc>
 8012bb6:	2900      	cmp	r1, #0
 8012bb8:	d154      	bne.n	8012c64 <__ieee754_pow+0x16c>
 8012bba:	f1c2 0214 	rsb	r2, r2, #20
 8012bbe:	fa4a f402 	asr.w	r4, sl, r2
 8012bc2:	fa04 f202 	lsl.w	r2, r4, r2
 8012bc6:	4552      	cmp	r2, sl
 8012bc8:	f040 84a3 	bne.w	8013512 <__ieee754_pow+0xa1a>
 8012bcc:	f004 0401 	and.w	r4, r4, #1
 8012bd0:	f1c4 0402 	rsb	r4, r4, #2
 8012bd4:	4a6d      	ldr	r2, [pc, #436]	@ (8012d8c <__ieee754_pow+0x294>)
 8012bd6:	4592      	cmp	sl, r2
 8012bd8:	d12e      	bne.n	8012c38 <__ieee754_pow+0x140>
 8012bda:	f1b9 0f00 	cmp.w	r9, #0
 8012bde:	f280 8494 	bge.w	801350a <__ieee754_pow+0xa12>
 8012be2:	496a      	ldr	r1, [pc, #424]	@ (8012d8c <__ieee754_pow+0x294>)
 8012be4:	4632      	mov	r2, r6
 8012be6:	463b      	mov	r3, r7
 8012be8:	2000      	movs	r0, #0
 8012bea:	f7ed fe4f 	bl	800088c <__aeabi_ddiv>
 8012bee:	e7a0      	b.n	8012b32 <__ieee754_pow+0x3a>
 8012bf0:	2400      	movs	r4, #0
 8012bf2:	bbc1      	cbnz	r1, 8012c66 <__ieee754_pow+0x16e>
 8012bf4:	4a63      	ldr	r2, [pc, #396]	@ (8012d84 <__ieee754_pow+0x28c>)
 8012bf6:	4592      	cmp	sl, r2
 8012bf8:	d1ec      	bne.n	8012bd4 <__ieee754_pow+0xdc>
 8012bfa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8012bfe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012c02:	431a      	orrs	r2, r3
 8012c04:	f000 8479 	beq.w	80134fa <__ieee754_pow+0xa02>
 8012c08:	4b61      	ldr	r3, [pc, #388]	@ (8012d90 <__ieee754_pow+0x298>)
 8012c0a:	4598      	cmp	r8, r3
 8012c0c:	d908      	bls.n	8012c20 <__ieee754_pow+0x128>
 8012c0e:	f1b9 0f00 	cmp.w	r9, #0
 8012c12:	f2c0 8476 	blt.w	8013502 <__ieee754_pow+0xa0a>
 8012c16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c1a:	e78a      	b.n	8012b32 <__ieee754_pow+0x3a>
 8012c1c:	2402      	movs	r4, #2
 8012c1e:	e7e8      	b.n	8012bf2 <__ieee754_pow+0xfa>
 8012c20:	f1b9 0f00 	cmp.w	r9, #0
 8012c24:	f04f 0000 	mov.w	r0, #0
 8012c28:	f04f 0100 	mov.w	r1, #0
 8012c2c:	da81      	bge.n	8012b32 <__ieee754_pow+0x3a>
 8012c2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012c32:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012c36:	e77c      	b.n	8012b32 <__ieee754_pow+0x3a>
 8012c38:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012c3c:	d106      	bne.n	8012c4c <__ieee754_pow+0x154>
 8012c3e:	4632      	mov	r2, r6
 8012c40:	463b      	mov	r3, r7
 8012c42:	4630      	mov	r0, r6
 8012c44:	4639      	mov	r1, r7
 8012c46:	f7ed fcf7 	bl	8000638 <__aeabi_dmul>
 8012c4a:	e772      	b.n	8012b32 <__ieee754_pow+0x3a>
 8012c4c:	4a51      	ldr	r2, [pc, #324]	@ (8012d94 <__ieee754_pow+0x29c>)
 8012c4e:	4591      	cmp	r9, r2
 8012c50:	d109      	bne.n	8012c66 <__ieee754_pow+0x16e>
 8012c52:	2d00      	cmp	r5, #0
 8012c54:	db07      	blt.n	8012c66 <__ieee754_pow+0x16e>
 8012c56:	ec47 6b10 	vmov	d0, r6, r7
 8012c5a:	b011      	add	sp, #68	@ 0x44
 8012c5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c60:	f7ff bc22 	b.w	80124a8 <__ieee754_sqrt>
 8012c64:	2400      	movs	r4, #0
 8012c66:	ec47 6b10 	vmov	d0, r6, r7
 8012c6a:	9302      	str	r3, [sp, #8]
 8012c6c:	f001 f81c 	bl	8013ca8 <fabs>
 8012c70:	9b02      	ldr	r3, [sp, #8]
 8012c72:	ec51 0b10 	vmov	r0, r1, d0
 8012c76:	bb53      	cbnz	r3, 8012cce <__ieee754_pow+0x1d6>
 8012c78:	4b44      	ldr	r3, [pc, #272]	@ (8012d8c <__ieee754_pow+0x294>)
 8012c7a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d002      	beq.n	8012c88 <__ieee754_pow+0x190>
 8012c82:	f1b8 0f00 	cmp.w	r8, #0
 8012c86:	d122      	bne.n	8012cce <__ieee754_pow+0x1d6>
 8012c88:	f1b9 0f00 	cmp.w	r9, #0
 8012c8c:	da05      	bge.n	8012c9a <__ieee754_pow+0x1a2>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	460b      	mov	r3, r1
 8012c92:	2000      	movs	r0, #0
 8012c94:	493d      	ldr	r1, [pc, #244]	@ (8012d8c <__ieee754_pow+0x294>)
 8012c96:	f7ed fdf9 	bl	800088c <__aeabi_ddiv>
 8012c9a:	2d00      	cmp	r5, #0
 8012c9c:	f6bf af49 	bge.w	8012b32 <__ieee754_pow+0x3a>
 8012ca0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012ca4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012ca8:	ea58 0804 	orrs.w	r8, r8, r4
 8012cac:	d108      	bne.n	8012cc0 <__ieee754_pow+0x1c8>
 8012cae:	4602      	mov	r2, r0
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	4610      	mov	r0, r2
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	f7ed fb07 	bl	80002c8 <__aeabi_dsub>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	e794      	b.n	8012bea <__ieee754_pow+0xf2>
 8012cc0:	2c01      	cmp	r4, #1
 8012cc2:	f47f af36 	bne.w	8012b32 <__ieee754_pow+0x3a>
 8012cc6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012cca:	4619      	mov	r1, r3
 8012ccc:	e731      	b.n	8012b32 <__ieee754_pow+0x3a>
 8012cce:	0feb      	lsrs	r3, r5, #31
 8012cd0:	3b01      	subs	r3, #1
 8012cd2:	ea53 0204 	orrs.w	r2, r3, r4
 8012cd6:	d102      	bne.n	8012cde <__ieee754_pow+0x1e6>
 8012cd8:	4632      	mov	r2, r6
 8012cda:	463b      	mov	r3, r7
 8012cdc:	e7e9      	b.n	8012cb2 <__ieee754_pow+0x1ba>
 8012cde:	3c01      	subs	r4, #1
 8012ce0:	431c      	orrs	r4, r3
 8012ce2:	d016      	beq.n	8012d12 <__ieee754_pow+0x21a>
 8012ce4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012d70 <__ieee754_pow+0x278>
 8012ce8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012cec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cf0:	f240 8112 	bls.w	8012f18 <__ieee754_pow+0x420>
 8012cf4:	4b28      	ldr	r3, [pc, #160]	@ (8012d98 <__ieee754_pow+0x2a0>)
 8012cf6:	459a      	cmp	sl, r3
 8012cf8:	4b25      	ldr	r3, [pc, #148]	@ (8012d90 <__ieee754_pow+0x298>)
 8012cfa:	d916      	bls.n	8012d2a <__ieee754_pow+0x232>
 8012cfc:	4598      	cmp	r8, r3
 8012cfe:	d80b      	bhi.n	8012d18 <__ieee754_pow+0x220>
 8012d00:	f1b9 0f00 	cmp.w	r9, #0
 8012d04:	da0b      	bge.n	8012d1e <__ieee754_pow+0x226>
 8012d06:	2000      	movs	r0, #0
 8012d08:	b011      	add	sp, #68	@ 0x44
 8012d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0e:	f001 b887 	b.w	8013e20 <__math_oflow>
 8012d12:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8012d78 <__ieee754_pow+0x280>
 8012d16:	e7e7      	b.n	8012ce8 <__ieee754_pow+0x1f0>
 8012d18:	f1b9 0f00 	cmp.w	r9, #0
 8012d1c:	dcf3      	bgt.n	8012d06 <__ieee754_pow+0x20e>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	b011      	add	sp, #68	@ 0x44
 8012d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d26:	f001 b873 	b.w	8013e10 <__math_uflow>
 8012d2a:	4598      	cmp	r8, r3
 8012d2c:	d20c      	bcs.n	8012d48 <__ieee754_pow+0x250>
 8012d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d32:	2200      	movs	r2, #0
 8012d34:	2300      	movs	r3, #0
 8012d36:	f7ed fef1 	bl	8000b1c <__aeabi_dcmplt>
 8012d3a:	3800      	subs	r0, #0
 8012d3c:	bf18      	it	ne
 8012d3e:	2001      	movne	r0, #1
 8012d40:	f1b9 0f00 	cmp.w	r9, #0
 8012d44:	daec      	bge.n	8012d20 <__ieee754_pow+0x228>
 8012d46:	e7df      	b.n	8012d08 <__ieee754_pow+0x210>
 8012d48:	4b10      	ldr	r3, [pc, #64]	@ (8012d8c <__ieee754_pow+0x294>)
 8012d4a:	4598      	cmp	r8, r3
 8012d4c:	f04f 0200 	mov.w	r2, #0
 8012d50:	d924      	bls.n	8012d9c <__ieee754_pow+0x2a4>
 8012d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d56:	2300      	movs	r3, #0
 8012d58:	f7ed fee0 	bl	8000b1c <__aeabi_dcmplt>
 8012d5c:	3800      	subs	r0, #0
 8012d5e:	bf18      	it	ne
 8012d60:	2001      	movne	r0, #1
 8012d62:	f1b9 0f00 	cmp.w	r9, #0
 8012d66:	dccf      	bgt.n	8012d08 <__ieee754_pow+0x210>
 8012d68:	e7da      	b.n	8012d20 <__ieee754_pow+0x228>
 8012d6a:	bf00      	nop
 8012d6c:	f3af 8000 	nop.w
 8012d70:	00000000 	.word	0x00000000
 8012d74:	3ff00000 	.word	0x3ff00000
 8012d78:	00000000 	.word	0x00000000
 8012d7c:	bff00000 	.word	0xbff00000
 8012d80:	fff00000 	.word	0xfff00000
 8012d84:	7ff00000 	.word	0x7ff00000
 8012d88:	433fffff 	.word	0x433fffff
 8012d8c:	3ff00000 	.word	0x3ff00000
 8012d90:	3fefffff 	.word	0x3fefffff
 8012d94:	3fe00000 	.word	0x3fe00000
 8012d98:	43f00000 	.word	0x43f00000
 8012d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8012f08 <__ieee754_pow+0x410>)
 8012d9e:	f7ed fa93 	bl	80002c8 <__aeabi_dsub>
 8012da2:	a351      	add	r3, pc, #324	@ (adr r3, 8012ee8 <__ieee754_pow+0x3f0>)
 8012da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da8:	4604      	mov	r4, r0
 8012daa:	460d      	mov	r5, r1
 8012dac:	f7ed fc44 	bl	8000638 <__aeabi_dmul>
 8012db0:	a34f      	add	r3, pc, #316	@ (adr r3, 8012ef0 <__ieee754_pow+0x3f8>)
 8012db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db6:	4606      	mov	r6, r0
 8012db8:	460f      	mov	r7, r1
 8012dba:	4620      	mov	r0, r4
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	f7ed fc3b 	bl	8000638 <__aeabi_dmul>
 8012dc2:	4b52      	ldr	r3, [pc, #328]	@ (8012f0c <__ieee754_pow+0x414>)
 8012dc4:	4682      	mov	sl, r0
 8012dc6:	468b      	mov	fp, r1
 8012dc8:	2200      	movs	r2, #0
 8012dca:	4620      	mov	r0, r4
 8012dcc:	4629      	mov	r1, r5
 8012dce:	f7ed fc33 	bl	8000638 <__aeabi_dmul>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	a148      	add	r1, pc, #288	@ (adr r1, 8012ef8 <__ieee754_pow+0x400>)
 8012dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ddc:	f7ed fa74 	bl	80002c8 <__aeabi_dsub>
 8012de0:	4622      	mov	r2, r4
 8012de2:	462b      	mov	r3, r5
 8012de4:	f7ed fc28 	bl	8000638 <__aeabi_dmul>
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	2000      	movs	r0, #0
 8012dee:	4948      	ldr	r1, [pc, #288]	@ (8012f10 <__ieee754_pow+0x418>)
 8012df0:	f7ed fa6a 	bl	80002c8 <__aeabi_dsub>
 8012df4:	4622      	mov	r2, r4
 8012df6:	4680      	mov	r8, r0
 8012df8:	4689      	mov	r9, r1
 8012dfa:	462b      	mov	r3, r5
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f7ed fc1a 	bl	8000638 <__aeabi_dmul>
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	4640      	mov	r0, r8
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	f7ed fc14 	bl	8000638 <__aeabi_dmul>
 8012e10:	a33b      	add	r3, pc, #236	@ (adr r3, 8012f00 <__ieee754_pow+0x408>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	f7ed fc0f 	bl	8000638 <__aeabi_dmul>
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	4650      	mov	r0, sl
 8012e20:	4659      	mov	r1, fp
 8012e22:	f7ed fa51 	bl	80002c8 <__aeabi_dsub>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4680      	mov	r8, r0
 8012e2c:	4689      	mov	r9, r1
 8012e2e:	4630      	mov	r0, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	f7ed fa4b 	bl	80002cc <__adddf3>
 8012e36:	2400      	movs	r4, #0
 8012e38:	4632      	mov	r2, r6
 8012e3a:	463b      	mov	r3, r7
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	460d      	mov	r5, r1
 8012e40:	f7ed fa42 	bl	80002c8 <__aeabi_dsub>
 8012e44:	4602      	mov	r2, r0
 8012e46:	460b      	mov	r3, r1
 8012e48:	4640      	mov	r0, r8
 8012e4a:	4649      	mov	r1, r9
 8012e4c:	f7ed fa3c 	bl	80002c8 <__aeabi_dsub>
 8012e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9304      	str	r3, [sp, #16]
 8012e5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012e60:	4606      	mov	r6, r0
 8012e62:	460f      	mov	r7, r1
 8012e64:	4652      	mov	r2, sl
 8012e66:	465b      	mov	r3, fp
 8012e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e6c:	f7ed fa2c 	bl	80002c8 <__aeabi_dsub>
 8012e70:	4622      	mov	r2, r4
 8012e72:	462b      	mov	r3, r5
 8012e74:	f7ed fbe0 	bl	8000638 <__aeabi_dmul>
 8012e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e7c:	4680      	mov	r8, r0
 8012e7e:	4689      	mov	r9, r1
 8012e80:	4630      	mov	r0, r6
 8012e82:	4639      	mov	r1, r7
 8012e84:	f7ed fbd8 	bl	8000638 <__aeabi_dmul>
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4640      	mov	r0, r8
 8012e8e:	4649      	mov	r1, r9
 8012e90:	f7ed fa1c 	bl	80002cc <__adddf3>
 8012e94:	4652      	mov	r2, sl
 8012e96:	465b      	mov	r3, fp
 8012e98:	4606      	mov	r6, r0
 8012e9a:	460f      	mov	r7, r1
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	4629      	mov	r1, r5
 8012ea0:	f7ed fbca 	bl	8000638 <__aeabi_dmul>
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	4680      	mov	r8, r0
 8012eaa:	4689      	mov	r9, r1
 8012eac:	4630      	mov	r0, r6
 8012eae:	4639      	mov	r1, r7
 8012eb0:	f7ed fa0c 	bl	80002cc <__adddf3>
 8012eb4:	4b17      	ldr	r3, [pc, #92]	@ (8012f14 <__ieee754_pow+0x41c>)
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	4604      	mov	r4, r0
 8012eba:	460d      	mov	r5, r1
 8012ebc:	468a      	mov	sl, r1
 8012ebe:	468b      	mov	fp, r1
 8012ec0:	f340 82ef 	ble.w	80134a2 <__ieee754_pow+0x9aa>
 8012ec4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8012ec8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012ecc:	4303      	orrs	r3, r0
 8012ece:	f000 81e8 	beq.w	80132a2 <__ieee754_pow+0x7aa>
 8012ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f7ed fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8012ede:	3800      	subs	r0, #0
 8012ee0:	bf18      	it	ne
 8012ee2:	2001      	movne	r0, #1
 8012ee4:	e710      	b.n	8012d08 <__ieee754_pow+0x210>
 8012ee6:	bf00      	nop
 8012ee8:	60000000 	.word	0x60000000
 8012eec:	3ff71547 	.word	0x3ff71547
 8012ef0:	f85ddf44 	.word	0xf85ddf44
 8012ef4:	3e54ae0b 	.word	0x3e54ae0b
 8012ef8:	55555555 	.word	0x55555555
 8012efc:	3fd55555 	.word	0x3fd55555
 8012f00:	652b82fe 	.word	0x652b82fe
 8012f04:	3ff71547 	.word	0x3ff71547
 8012f08:	3ff00000 	.word	0x3ff00000
 8012f0c:	3fd00000 	.word	0x3fd00000
 8012f10:	3fe00000 	.word	0x3fe00000
 8012f14:	408fffff 	.word	0x408fffff
 8012f18:	4bd5      	ldr	r3, [pc, #852]	@ (8013270 <__ieee754_pow+0x778>)
 8012f1a:	402b      	ands	r3, r5
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	b92b      	cbnz	r3, 8012f2c <__ieee754_pow+0x434>
 8012f20:	4bd4      	ldr	r3, [pc, #848]	@ (8013274 <__ieee754_pow+0x77c>)
 8012f22:	f7ed fb89 	bl	8000638 <__aeabi_dmul>
 8012f26:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012f2a:	468b      	mov	fp, r1
 8012f2c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8012f30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012f34:	4413      	add	r3, r2
 8012f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f38:	4bcf      	ldr	r3, [pc, #828]	@ (8013278 <__ieee754_pow+0x780>)
 8012f3a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012f3e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012f42:	459b      	cmp	fp, r3
 8012f44:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012f48:	dd08      	ble.n	8012f5c <__ieee754_pow+0x464>
 8012f4a:	4bcc      	ldr	r3, [pc, #816]	@ (801327c <__ieee754_pow+0x784>)
 8012f4c:	459b      	cmp	fp, r3
 8012f4e:	f340 81a5 	ble.w	801329c <__ieee754_pow+0x7a4>
 8012f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f54:	3301      	adds	r3, #1
 8012f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f58:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012f5c:	f04f 0a00 	mov.w	sl, #0
 8012f60:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f66:	4bc6      	ldr	r3, [pc, #792]	@ (8013280 <__ieee754_pow+0x788>)
 8012f68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f6c:	ed93 7b00 	vldr	d7, [r3]
 8012f70:	4629      	mov	r1, r5
 8012f72:	ec53 2b17 	vmov	r2, r3, d7
 8012f76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012f7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012f7e:	f7ed f9a3 	bl	80002c8 <__aeabi_dsub>
 8012f82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012f86:	4606      	mov	r6, r0
 8012f88:	460f      	mov	r7, r1
 8012f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f8e:	f7ed f99d 	bl	80002cc <__adddf3>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	2000      	movs	r0, #0
 8012f98:	49ba      	ldr	r1, [pc, #744]	@ (8013284 <__ieee754_pow+0x78c>)
 8012f9a:	f7ed fc77 	bl	800088c <__aeabi_ddiv>
 8012f9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	f7ed fb45 	bl	8000638 <__aeabi_dmul>
 8012fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fb2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012fb6:	106d      	asrs	r5, r5, #1
 8012fb8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012fbc:	f04f 0b00 	mov.w	fp, #0
 8012fc0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012fc4:	4661      	mov	r1, ip
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012fcc:	4658      	mov	r0, fp
 8012fce:	46e1      	mov	r9, ip
 8012fd0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012fd4:	4614      	mov	r4, r2
 8012fd6:	461d      	mov	r5, r3
 8012fd8:	f7ed fb2e 	bl	8000638 <__aeabi_dmul>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	4639      	mov	r1, r7
 8012fe4:	f7ed f970 	bl	80002c8 <__aeabi_dsub>
 8012fe8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012fec:	4606      	mov	r6, r0
 8012fee:	460f      	mov	r7, r1
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	f7ed f968 	bl	80002c8 <__aeabi_dsub>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013000:	f7ed f962 	bl	80002c8 <__aeabi_dsub>
 8013004:	465a      	mov	r2, fp
 8013006:	464b      	mov	r3, r9
 8013008:	f7ed fb16 	bl	8000638 <__aeabi_dmul>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	4630      	mov	r0, r6
 8013012:	4639      	mov	r1, r7
 8013014:	f7ed f958 	bl	80002c8 <__aeabi_dsub>
 8013018:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801301c:	f7ed fb0c 	bl	8000638 <__aeabi_dmul>
 8013020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013028:	4610      	mov	r0, r2
 801302a:	4619      	mov	r1, r3
 801302c:	f7ed fb04 	bl	8000638 <__aeabi_dmul>
 8013030:	a37d      	add	r3, pc, #500	@ (adr r3, 8013228 <__ieee754_pow+0x730>)
 8013032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	f7ed fafd 	bl	8000638 <__aeabi_dmul>
 801303e:	a37c      	add	r3, pc, #496	@ (adr r3, 8013230 <__ieee754_pow+0x738>)
 8013040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013044:	f7ed f942 	bl	80002cc <__adddf3>
 8013048:	4622      	mov	r2, r4
 801304a:	462b      	mov	r3, r5
 801304c:	f7ed faf4 	bl	8000638 <__aeabi_dmul>
 8013050:	a379      	add	r3, pc, #484	@ (adr r3, 8013238 <__ieee754_pow+0x740>)
 8013052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013056:	f7ed f939 	bl	80002cc <__adddf3>
 801305a:	4622      	mov	r2, r4
 801305c:	462b      	mov	r3, r5
 801305e:	f7ed faeb 	bl	8000638 <__aeabi_dmul>
 8013062:	a377      	add	r3, pc, #476	@ (adr r3, 8013240 <__ieee754_pow+0x748>)
 8013064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013068:	f7ed f930 	bl	80002cc <__adddf3>
 801306c:	4622      	mov	r2, r4
 801306e:	462b      	mov	r3, r5
 8013070:	f7ed fae2 	bl	8000638 <__aeabi_dmul>
 8013074:	a374      	add	r3, pc, #464	@ (adr r3, 8013248 <__ieee754_pow+0x750>)
 8013076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307a:	f7ed f927 	bl	80002cc <__adddf3>
 801307e:	4622      	mov	r2, r4
 8013080:	462b      	mov	r3, r5
 8013082:	f7ed fad9 	bl	8000638 <__aeabi_dmul>
 8013086:	a372      	add	r3, pc, #456	@ (adr r3, 8013250 <__ieee754_pow+0x758>)
 8013088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308c:	f7ed f91e 	bl	80002cc <__adddf3>
 8013090:	4622      	mov	r2, r4
 8013092:	4606      	mov	r6, r0
 8013094:	460f      	mov	r7, r1
 8013096:	462b      	mov	r3, r5
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed facc 	bl	8000638 <__aeabi_dmul>
 80130a0:	4602      	mov	r2, r0
 80130a2:	460b      	mov	r3, r1
 80130a4:	4630      	mov	r0, r6
 80130a6:	4639      	mov	r1, r7
 80130a8:	f7ed fac6 	bl	8000638 <__aeabi_dmul>
 80130ac:	465a      	mov	r2, fp
 80130ae:	4604      	mov	r4, r0
 80130b0:	460d      	mov	r5, r1
 80130b2:	464b      	mov	r3, r9
 80130b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80130b8:	f7ed f908 	bl	80002cc <__adddf3>
 80130bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80130c0:	f7ed faba 	bl	8000638 <__aeabi_dmul>
 80130c4:	4622      	mov	r2, r4
 80130c6:	462b      	mov	r3, r5
 80130c8:	f7ed f900 	bl	80002cc <__adddf3>
 80130cc:	465a      	mov	r2, fp
 80130ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80130d2:	464b      	mov	r3, r9
 80130d4:	4658      	mov	r0, fp
 80130d6:	4649      	mov	r1, r9
 80130d8:	f7ed faae 	bl	8000638 <__aeabi_dmul>
 80130dc:	4b6a      	ldr	r3, [pc, #424]	@ (8013288 <__ieee754_pow+0x790>)
 80130de:	2200      	movs	r2, #0
 80130e0:	4606      	mov	r6, r0
 80130e2:	460f      	mov	r7, r1
 80130e4:	f7ed f8f2 	bl	80002cc <__adddf3>
 80130e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130ec:	f7ed f8ee 	bl	80002cc <__adddf3>
 80130f0:	46d8      	mov	r8, fp
 80130f2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80130f6:	460d      	mov	r5, r1
 80130f8:	465a      	mov	r2, fp
 80130fa:	460b      	mov	r3, r1
 80130fc:	4640      	mov	r0, r8
 80130fe:	4649      	mov	r1, r9
 8013100:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013104:	f7ed fa98 	bl	8000638 <__aeabi_dmul>
 8013108:	465c      	mov	r4, fp
 801310a:	4680      	mov	r8, r0
 801310c:	4689      	mov	r9, r1
 801310e:	4b5e      	ldr	r3, [pc, #376]	@ (8013288 <__ieee754_pow+0x790>)
 8013110:	2200      	movs	r2, #0
 8013112:	4620      	mov	r0, r4
 8013114:	4629      	mov	r1, r5
 8013116:	f7ed f8d7 	bl	80002c8 <__aeabi_dsub>
 801311a:	4632      	mov	r2, r6
 801311c:	463b      	mov	r3, r7
 801311e:	f7ed f8d3 	bl	80002c8 <__aeabi_dsub>
 8013122:	4602      	mov	r2, r0
 8013124:	460b      	mov	r3, r1
 8013126:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801312a:	f7ed f8cd 	bl	80002c8 <__aeabi_dsub>
 801312e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013132:	f7ed fa81 	bl	8000638 <__aeabi_dmul>
 8013136:	4622      	mov	r2, r4
 8013138:	4606      	mov	r6, r0
 801313a:	460f      	mov	r7, r1
 801313c:	462b      	mov	r3, r5
 801313e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013142:	f7ed fa79 	bl	8000638 <__aeabi_dmul>
 8013146:	4602      	mov	r2, r0
 8013148:	460b      	mov	r3, r1
 801314a:	4630      	mov	r0, r6
 801314c:	4639      	mov	r1, r7
 801314e:	f7ed f8bd 	bl	80002cc <__adddf3>
 8013152:	4606      	mov	r6, r0
 8013154:	460f      	mov	r7, r1
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	4640      	mov	r0, r8
 801315c:	4649      	mov	r1, r9
 801315e:	f7ed f8b5 	bl	80002cc <__adddf3>
 8013162:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013166:	a33c      	add	r3, pc, #240	@ (adr r3, 8013258 <__ieee754_pow+0x760>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	4658      	mov	r0, fp
 801316e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013172:	460d      	mov	r5, r1
 8013174:	f7ed fa60 	bl	8000638 <__aeabi_dmul>
 8013178:	465c      	mov	r4, fp
 801317a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801317e:	4642      	mov	r2, r8
 8013180:	464b      	mov	r3, r9
 8013182:	4620      	mov	r0, r4
 8013184:	4629      	mov	r1, r5
 8013186:	f7ed f89f 	bl	80002c8 <__aeabi_dsub>
 801318a:	4602      	mov	r2, r0
 801318c:	460b      	mov	r3, r1
 801318e:	4630      	mov	r0, r6
 8013190:	4639      	mov	r1, r7
 8013192:	f7ed f899 	bl	80002c8 <__aeabi_dsub>
 8013196:	a332      	add	r3, pc, #200	@ (adr r3, 8013260 <__ieee754_pow+0x768>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	f7ed fa4c 	bl	8000638 <__aeabi_dmul>
 80131a0:	a331      	add	r3, pc, #196	@ (adr r3, 8013268 <__ieee754_pow+0x770>)
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	4606      	mov	r6, r0
 80131a8:	460f      	mov	r7, r1
 80131aa:	4620      	mov	r0, r4
 80131ac:	4629      	mov	r1, r5
 80131ae:	f7ed fa43 	bl	8000638 <__aeabi_dmul>
 80131b2:	4602      	mov	r2, r0
 80131b4:	460b      	mov	r3, r1
 80131b6:	4630      	mov	r0, r6
 80131b8:	4639      	mov	r1, r7
 80131ba:	f7ed f887 	bl	80002cc <__adddf3>
 80131be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80131c0:	4b32      	ldr	r3, [pc, #200]	@ (801328c <__ieee754_pow+0x794>)
 80131c2:	4413      	add	r3, r2
 80131c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c8:	f7ed f880 	bl	80002cc <__adddf3>
 80131cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80131d2:	f7ed f9c7 	bl	8000564 <__aeabi_i2d>
 80131d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80131d8:	4b2d      	ldr	r3, [pc, #180]	@ (8013290 <__ieee754_pow+0x798>)
 80131da:	4413      	add	r3, r2
 80131dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80131e0:	4606      	mov	r6, r0
 80131e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80131e6:	460f      	mov	r7, r1
 80131e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80131ec:	f7ed f86e 	bl	80002cc <__adddf3>
 80131f0:	4642      	mov	r2, r8
 80131f2:	464b      	mov	r3, r9
 80131f4:	f7ed f86a 	bl	80002cc <__adddf3>
 80131f8:	4632      	mov	r2, r6
 80131fa:	463b      	mov	r3, r7
 80131fc:	f7ed f866 	bl	80002cc <__adddf3>
 8013200:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013204:	4632      	mov	r2, r6
 8013206:	463b      	mov	r3, r7
 8013208:	4658      	mov	r0, fp
 801320a:	460d      	mov	r5, r1
 801320c:	f7ed f85c 	bl	80002c8 <__aeabi_dsub>
 8013210:	4642      	mov	r2, r8
 8013212:	464b      	mov	r3, r9
 8013214:	f7ed f858 	bl	80002c8 <__aeabi_dsub>
 8013218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801321c:	f7ed f854 	bl	80002c8 <__aeabi_dsub>
 8013220:	465c      	mov	r4, fp
 8013222:	4602      	mov	r2, r0
 8013224:	e036      	b.n	8013294 <__ieee754_pow+0x79c>
 8013226:	bf00      	nop
 8013228:	4a454eef 	.word	0x4a454eef
 801322c:	3fca7e28 	.word	0x3fca7e28
 8013230:	93c9db65 	.word	0x93c9db65
 8013234:	3fcd864a 	.word	0x3fcd864a
 8013238:	a91d4101 	.word	0xa91d4101
 801323c:	3fd17460 	.word	0x3fd17460
 8013240:	518f264d 	.word	0x518f264d
 8013244:	3fd55555 	.word	0x3fd55555
 8013248:	db6fabff 	.word	0xdb6fabff
 801324c:	3fdb6db6 	.word	0x3fdb6db6
 8013250:	33333303 	.word	0x33333303
 8013254:	3fe33333 	.word	0x3fe33333
 8013258:	e0000000 	.word	0xe0000000
 801325c:	3feec709 	.word	0x3feec709
 8013260:	dc3a03fd 	.word	0xdc3a03fd
 8013264:	3feec709 	.word	0x3feec709
 8013268:	145b01f5 	.word	0x145b01f5
 801326c:	be3e2fe0 	.word	0xbe3e2fe0
 8013270:	7ff00000 	.word	0x7ff00000
 8013274:	43400000 	.word	0x43400000
 8013278:	0003988e 	.word	0x0003988e
 801327c:	000bb679 	.word	0x000bb679
 8013280:	08014c08 	.word	0x08014c08
 8013284:	3ff00000 	.word	0x3ff00000
 8013288:	40080000 	.word	0x40080000
 801328c:	08014be8 	.word	0x08014be8
 8013290:	08014bf8 	.word	0x08014bf8
 8013294:	460b      	mov	r3, r1
 8013296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801329a:	e5d7      	b.n	8012e4c <__ieee754_pow+0x354>
 801329c:	f04f 0a01 	mov.w	sl, #1
 80132a0:	e65e      	b.n	8012f60 <__ieee754_pow+0x468>
 80132a2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013574 <__ieee754_pow+0xa7c>)
 80132a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a8:	4630      	mov	r0, r6
 80132aa:	4639      	mov	r1, r7
 80132ac:	f7ed f80e 	bl	80002cc <__adddf3>
 80132b0:	4642      	mov	r2, r8
 80132b2:	e9cd 0100 	strd	r0, r1, [sp]
 80132b6:	464b      	mov	r3, r9
 80132b8:	4620      	mov	r0, r4
 80132ba:	4629      	mov	r1, r5
 80132bc:	f7ed f804 	bl	80002c8 <__aeabi_dsub>
 80132c0:	4602      	mov	r2, r0
 80132c2:	460b      	mov	r3, r1
 80132c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132c8:	f7ed fc46 	bl	8000b58 <__aeabi_dcmpgt>
 80132cc:	2800      	cmp	r0, #0
 80132ce:	f47f ae00 	bne.w	8012ed2 <__ieee754_pow+0x3da>
 80132d2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80132d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80132da:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80132de:	fa43 fa0a 	asr.w	sl, r3, sl
 80132e2:	44da      	add	sl, fp
 80132e4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80132e8:	489d      	ldr	r0, [pc, #628]	@ (8013560 <__ieee754_pow+0xa68>)
 80132ea:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80132ee:	4108      	asrs	r0, r1
 80132f0:	ea00 030a 	and.w	r3, r0, sl
 80132f4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80132f8:	f1c1 0114 	rsb	r1, r1, #20
 80132fc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013300:	fa4a fa01 	asr.w	sl, sl, r1
 8013304:	f1bb 0f00 	cmp.w	fp, #0
 8013308:	4640      	mov	r0, r8
 801330a:	4649      	mov	r1, r9
 801330c:	f04f 0200 	mov.w	r2, #0
 8013310:	bfb8      	it	lt
 8013312:	f1ca 0a00 	rsblt	sl, sl, #0
 8013316:	f7ec ffd7 	bl	80002c8 <__aeabi_dsub>
 801331a:	4680      	mov	r8, r0
 801331c:	4689      	mov	r9, r1
 801331e:	4632      	mov	r2, r6
 8013320:	463b      	mov	r3, r7
 8013322:	4640      	mov	r0, r8
 8013324:	4649      	mov	r1, r9
 8013326:	f7ec ffd1 	bl	80002cc <__adddf3>
 801332a:	2400      	movs	r4, #0
 801332c:	a37c      	add	r3, pc, #496	@ (adr r3, 8013520 <__ieee754_pow+0xa28>)
 801332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013332:	4620      	mov	r0, r4
 8013334:	460d      	mov	r5, r1
 8013336:	f7ed f97f 	bl	8000638 <__aeabi_dmul>
 801333a:	4642      	mov	r2, r8
 801333c:	e9cd 0100 	strd	r0, r1, [sp]
 8013340:	464b      	mov	r3, r9
 8013342:	4620      	mov	r0, r4
 8013344:	4629      	mov	r1, r5
 8013346:	f7ec ffbf 	bl	80002c8 <__aeabi_dsub>
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4630      	mov	r0, r6
 8013350:	4639      	mov	r1, r7
 8013352:	f7ec ffb9 	bl	80002c8 <__aeabi_dsub>
 8013356:	a374      	add	r3, pc, #464	@ (adr r3, 8013528 <__ieee754_pow+0xa30>)
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	f7ed f96c 	bl	8000638 <__aeabi_dmul>
 8013360:	a373      	add	r3, pc, #460	@ (adr r3, 8013530 <__ieee754_pow+0xa38>)
 8013362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013366:	4680      	mov	r8, r0
 8013368:	4689      	mov	r9, r1
 801336a:	4620      	mov	r0, r4
 801336c:	4629      	mov	r1, r5
 801336e:	f7ed f963 	bl	8000638 <__aeabi_dmul>
 8013372:	4602      	mov	r2, r0
 8013374:	460b      	mov	r3, r1
 8013376:	4640      	mov	r0, r8
 8013378:	4649      	mov	r1, r9
 801337a:	f7ec ffa7 	bl	80002cc <__adddf3>
 801337e:	4604      	mov	r4, r0
 8013380:	460d      	mov	r5, r1
 8013382:	4602      	mov	r2, r0
 8013384:	460b      	mov	r3, r1
 8013386:	e9dd 0100 	ldrd	r0, r1, [sp]
 801338a:	f7ec ff9f 	bl	80002cc <__adddf3>
 801338e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013392:	4680      	mov	r8, r0
 8013394:	4689      	mov	r9, r1
 8013396:	f7ec ff97 	bl	80002c8 <__aeabi_dsub>
 801339a:	4602      	mov	r2, r0
 801339c:	460b      	mov	r3, r1
 801339e:	4620      	mov	r0, r4
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ec ff91 	bl	80002c8 <__aeabi_dsub>
 80133a6:	4642      	mov	r2, r8
 80133a8:	4606      	mov	r6, r0
 80133aa:	460f      	mov	r7, r1
 80133ac:	464b      	mov	r3, r9
 80133ae:	4640      	mov	r0, r8
 80133b0:	4649      	mov	r1, r9
 80133b2:	f7ed f941 	bl	8000638 <__aeabi_dmul>
 80133b6:	a360      	add	r3, pc, #384	@ (adr r3, 8013538 <__ieee754_pow+0xa40>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	4604      	mov	r4, r0
 80133be:	460d      	mov	r5, r1
 80133c0:	f7ed f93a 	bl	8000638 <__aeabi_dmul>
 80133c4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013540 <__ieee754_pow+0xa48>)
 80133c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ca:	f7ec ff7d 	bl	80002c8 <__aeabi_dsub>
 80133ce:	4622      	mov	r2, r4
 80133d0:	462b      	mov	r3, r5
 80133d2:	f7ed f931 	bl	8000638 <__aeabi_dmul>
 80133d6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013548 <__ieee754_pow+0xa50>)
 80133d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133dc:	f7ec ff76 	bl	80002cc <__adddf3>
 80133e0:	4622      	mov	r2, r4
 80133e2:	462b      	mov	r3, r5
 80133e4:	f7ed f928 	bl	8000638 <__aeabi_dmul>
 80133e8:	a359      	add	r3, pc, #356	@ (adr r3, 8013550 <__ieee754_pow+0xa58>)
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	f7ec ff6b 	bl	80002c8 <__aeabi_dsub>
 80133f2:	4622      	mov	r2, r4
 80133f4:	462b      	mov	r3, r5
 80133f6:	f7ed f91f 	bl	8000638 <__aeabi_dmul>
 80133fa:	a357      	add	r3, pc, #348	@ (adr r3, 8013558 <__ieee754_pow+0xa60>)
 80133fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013400:	f7ec ff64 	bl	80002cc <__adddf3>
 8013404:	4622      	mov	r2, r4
 8013406:	462b      	mov	r3, r5
 8013408:	f7ed f916 	bl	8000638 <__aeabi_dmul>
 801340c:	4602      	mov	r2, r0
 801340e:	460b      	mov	r3, r1
 8013410:	4640      	mov	r0, r8
 8013412:	4649      	mov	r1, r9
 8013414:	f7ec ff58 	bl	80002c8 <__aeabi_dsub>
 8013418:	4604      	mov	r4, r0
 801341a:	460d      	mov	r5, r1
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4640      	mov	r0, r8
 8013422:	4649      	mov	r1, r9
 8013424:	f7ed f908 	bl	8000638 <__aeabi_dmul>
 8013428:	2200      	movs	r2, #0
 801342a:	e9cd 0100 	strd	r0, r1, [sp]
 801342e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013432:	4620      	mov	r0, r4
 8013434:	4629      	mov	r1, r5
 8013436:	f7ec ff47 	bl	80002c8 <__aeabi_dsub>
 801343a:	4602      	mov	r2, r0
 801343c:	460b      	mov	r3, r1
 801343e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013442:	f7ed fa23 	bl	800088c <__aeabi_ddiv>
 8013446:	4632      	mov	r2, r6
 8013448:	4604      	mov	r4, r0
 801344a:	460d      	mov	r5, r1
 801344c:	463b      	mov	r3, r7
 801344e:	4640      	mov	r0, r8
 8013450:	4649      	mov	r1, r9
 8013452:	f7ed f8f1 	bl	8000638 <__aeabi_dmul>
 8013456:	4632      	mov	r2, r6
 8013458:	463b      	mov	r3, r7
 801345a:	f7ec ff37 	bl	80002cc <__adddf3>
 801345e:	4602      	mov	r2, r0
 8013460:	460b      	mov	r3, r1
 8013462:	4620      	mov	r0, r4
 8013464:	4629      	mov	r1, r5
 8013466:	f7ec ff2f 	bl	80002c8 <__aeabi_dsub>
 801346a:	4642      	mov	r2, r8
 801346c:	464b      	mov	r3, r9
 801346e:	f7ec ff2b 	bl	80002c8 <__aeabi_dsub>
 8013472:	460b      	mov	r3, r1
 8013474:	4602      	mov	r2, r0
 8013476:	493b      	ldr	r1, [pc, #236]	@ (8013564 <__ieee754_pow+0xa6c>)
 8013478:	2000      	movs	r0, #0
 801347a:	f7ec ff25 	bl	80002c8 <__aeabi_dsub>
 801347e:	ec41 0b10 	vmov	d0, r0, r1
 8013482:	ee10 3a90 	vmov	r3, s1
 8013486:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801348a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801348e:	da30      	bge.n	80134f2 <__ieee754_pow+0x9fa>
 8013490:	4650      	mov	r0, sl
 8013492:	f000 fc11 	bl	8013cb8 <scalbn>
 8013496:	ec51 0b10 	vmov	r0, r1, d0
 801349a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801349e:	f7ff bbd2 	b.w	8012c46 <__ieee754_pow+0x14e>
 80134a2:	4c31      	ldr	r4, [pc, #196]	@ (8013568 <__ieee754_pow+0xa70>)
 80134a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134a8:	42a3      	cmp	r3, r4
 80134aa:	d91a      	bls.n	80134e2 <__ieee754_pow+0x9ea>
 80134ac:	4b2f      	ldr	r3, [pc, #188]	@ (801356c <__ieee754_pow+0xa74>)
 80134ae:	440b      	add	r3, r1
 80134b0:	4303      	orrs	r3, r0
 80134b2:	d009      	beq.n	80134c8 <__ieee754_pow+0x9d0>
 80134b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134b8:	2200      	movs	r2, #0
 80134ba:	2300      	movs	r3, #0
 80134bc:	f7ed fb2e 	bl	8000b1c <__aeabi_dcmplt>
 80134c0:	3800      	subs	r0, #0
 80134c2:	bf18      	it	ne
 80134c4:	2001      	movne	r0, #1
 80134c6:	e42b      	b.n	8012d20 <__ieee754_pow+0x228>
 80134c8:	4642      	mov	r2, r8
 80134ca:	464b      	mov	r3, r9
 80134cc:	f7ec fefc 	bl	80002c8 <__aeabi_dsub>
 80134d0:	4632      	mov	r2, r6
 80134d2:	463b      	mov	r3, r7
 80134d4:	f7ed fb36 	bl	8000b44 <__aeabi_dcmpge>
 80134d8:	2800      	cmp	r0, #0
 80134da:	d1eb      	bne.n	80134b4 <__ieee754_pow+0x9bc>
 80134dc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801357c <__ieee754_pow+0xa84>
 80134e0:	e6f7      	b.n	80132d2 <__ieee754_pow+0x7da>
 80134e2:	469a      	mov	sl, r3
 80134e4:	4b22      	ldr	r3, [pc, #136]	@ (8013570 <__ieee754_pow+0xa78>)
 80134e6:	459a      	cmp	sl, r3
 80134e8:	f63f aef3 	bhi.w	80132d2 <__ieee754_pow+0x7da>
 80134ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 80134f0:	e715      	b.n	801331e <__ieee754_pow+0x826>
 80134f2:	ec51 0b10 	vmov	r0, r1, d0
 80134f6:	4619      	mov	r1, r3
 80134f8:	e7cf      	b.n	801349a <__ieee754_pow+0x9a2>
 80134fa:	491a      	ldr	r1, [pc, #104]	@ (8013564 <__ieee754_pow+0xa6c>)
 80134fc:	2000      	movs	r0, #0
 80134fe:	f7ff bb18 	b.w	8012b32 <__ieee754_pow+0x3a>
 8013502:	2000      	movs	r0, #0
 8013504:	2100      	movs	r1, #0
 8013506:	f7ff bb14 	b.w	8012b32 <__ieee754_pow+0x3a>
 801350a:	4630      	mov	r0, r6
 801350c:	4639      	mov	r1, r7
 801350e:	f7ff bb10 	b.w	8012b32 <__ieee754_pow+0x3a>
 8013512:	460c      	mov	r4, r1
 8013514:	f7ff bb5e 	b.w	8012bd4 <__ieee754_pow+0xdc>
 8013518:	2400      	movs	r4, #0
 801351a:	f7ff bb49 	b.w	8012bb0 <__ieee754_pow+0xb8>
 801351e:	bf00      	nop
 8013520:	00000000 	.word	0x00000000
 8013524:	3fe62e43 	.word	0x3fe62e43
 8013528:	fefa39ef 	.word	0xfefa39ef
 801352c:	3fe62e42 	.word	0x3fe62e42
 8013530:	0ca86c39 	.word	0x0ca86c39
 8013534:	be205c61 	.word	0xbe205c61
 8013538:	72bea4d0 	.word	0x72bea4d0
 801353c:	3e663769 	.word	0x3e663769
 8013540:	c5d26bf1 	.word	0xc5d26bf1
 8013544:	3ebbbd41 	.word	0x3ebbbd41
 8013548:	af25de2c 	.word	0xaf25de2c
 801354c:	3f11566a 	.word	0x3f11566a
 8013550:	16bebd93 	.word	0x16bebd93
 8013554:	3f66c16c 	.word	0x3f66c16c
 8013558:	5555553e 	.word	0x5555553e
 801355c:	3fc55555 	.word	0x3fc55555
 8013560:	fff00000 	.word	0xfff00000
 8013564:	3ff00000 	.word	0x3ff00000
 8013568:	4090cbff 	.word	0x4090cbff
 801356c:	3f6f3400 	.word	0x3f6f3400
 8013570:	3fe00000 	.word	0x3fe00000
 8013574:	652b82fe 	.word	0x652b82fe
 8013578:	3c971547 	.word	0x3c971547
 801357c:	4090cc00 	.word	0x4090cc00

08013580 <__ieee754_rem_pio2>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	ec57 6b10 	vmov	r6, r7, d0
 8013588:	4bc5      	ldr	r3, [pc, #788]	@ (80138a0 <__ieee754_rem_pio2+0x320>)
 801358a:	b08d      	sub	sp, #52	@ 0x34
 801358c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013590:	4598      	cmp	r8, r3
 8013592:	4604      	mov	r4, r0
 8013594:	9704      	str	r7, [sp, #16]
 8013596:	d807      	bhi.n	80135a8 <__ieee754_rem_pio2+0x28>
 8013598:	2200      	movs	r2, #0
 801359a:	2300      	movs	r3, #0
 801359c:	ed80 0b00 	vstr	d0, [r0]
 80135a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80135a4:	2500      	movs	r5, #0
 80135a6:	e028      	b.n	80135fa <__ieee754_rem_pio2+0x7a>
 80135a8:	4bbe      	ldr	r3, [pc, #760]	@ (80138a4 <__ieee754_rem_pio2+0x324>)
 80135aa:	4598      	cmp	r8, r3
 80135ac:	d878      	bhi.n	80136a0 <__ieee754_rem_pio2+0x120>
 80135ae:	9b04      	ldr	r3, [sp, #16]
 80135b0:	4dbd      	ldr	r5, [pc, #756]	@ (80138a8 <__ieee754_rem_pio2+0x328>)
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	4630      	mov	r0, r6
 80135b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013868 <__ieee754_rem_pio2+0x2e8>)
 80135b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135bc:	4639      	mov	r1, r7
 80135be:	dd38      	ble.n	8013632 <__ieee754_rem_pio2+0xb2>
 80135c0:	f7ec fe82 	bl	80002c8 <__aeabi_dsub>
 80135c4:	45a8      	cmp	r8, r5
 80135c6:	4606      	mov	r6, r0
 80135c8:	460f      	mov	r7, r1
 80135ca:	d01a      	beq.n	8013602 <__ieee754_rem_pio2+0x82>
 80135cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013870 <__ieee754_rem_pio2+0x2f0>)
 80135ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d2:	f7ec fe79 	bl	80002c8 <__aeabi_dsub>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	4680      	mov	r8, r0
 80135dc:	4689      	mov	r9, r1
 80135de:	4630      	mov	r0, r6
 80135e0:	4639      	mov	r1, r7
 80135e2:	f7ec fe71 	bl	80002c8 <__aeabi_dsub>
 80135e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013870 <__ieee754_rem_pio2+0x2f0>)
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f7ec fe6c 	bl	80002c8 <__aeabi_dsub>
 80135f0:	e9c4 8900 	strd	r8, r9, [r4]
 80135f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80135f8:	2501      	movs	r5, #1
 80135fa:	4628      	mov	r0, r5
 80135fc:	b00d      	add	sp, #52	@ 0x34
 80135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013602:	a39d      	add	r3, pc, #628	@ (adr r3, 8013878 <__ieee754_rem_pio2+0x2f8>)
 8013604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013608:	f7ec fe5e 	bl	80002c8 <__aeabi_dsub>
 801360c:	a39c      	add	r3, pc, #624	@ (adr r3, 8013880 <__ieee754_rem_pio2+0x300>)
 801360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013612:	4606      	mov	r6, r0
 8013614:	460f      	mov	r7, r1
 8013616:	f7ec fe57 	bl	80002c8 <__aeabi_dsub>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	4680      	mov	r8, r0
 8013620:	4689      	mov	r9, r1
 8013622:	4630      	mov	r0, r6
 8013624:	4639      	mov	r1, r7
 8013626:	f7ec fe4f 	bl	80002c8 <__aeabi_dsub>
 801362a:	a395      	add	r3, pc, #596	@ (adr r3, 8013880 <__ieee754_rem_pio2+0x300>)
 801362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013630:	e7dc      	b.n	80135ec <__ieee754_rem_pio2+0x6c>
 8013632:	f7ec fe4b 	bl	80002cc <__adddf3>
 8013636:	45a8      	cmp	r8, r5
 8013638:	4606      	mov	r6, r0
 801363a:	460f      	mov	r7, r1
 801363c:	d018      	beq.n	8013670 <__ieee754_rem_pio2+0xf0>
 801363e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013870 <__ieee754_rem_pio2+0x2f0>)
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	f7ec fe42 	bl	80002cc <__adddf3>
 8013648:	4602      	mov	r2, r0
 801364a:	460b      	mov	r3, r1
 801364c:	4680      	mov	r8, r0
 801364e:	4689      	mov	r9, r1
 8013650:	4630      	mov	r0, r6
 8013652:	4639      	mov	r1, r7
 8013654:	f7ec fe38 	bl	80002c8 <__aeabi_dsub>
 8013658:	a385      	add	r3, pc, #532	@ (adr r3, 8013870 <__ieee754_rem_pio2+0x2f0>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec fe35 	bl	80002cc <__adddf3>
 8013662:	f04f 35ff 	mov.w	r5, #4294967295
 8013666:	e9c4 8900 	strd	r8, r9, [r4]
 801366a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801366e:	e7c4      	b.n	80135fa <__ieee754_rem_pio2+0x7a>
 8013670:	a381      	add	r3, pc, #516	@ (adr r3, 8013878 <__ieee754_rem_pio2+0x2f8>)
 8013672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013676:	f7ec fe29 	bl	80002cc <__adddf3>
 801367a:	a381      	add	r3, pc, #516	@ (adr r3, 8013880 <__ieee754_rem_pio2+0x300>)
 801367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013680:	4606      	mov	r6, r0
 8013682:	460f      	mov	r7, r1
 8013684:	f7ec fe22 	bl	80002cc <__adddf3>
 8013688:	4602      	mov	r2, r0
 801368a:	460b      	mov	r3, r1
 801368c:	4680      	mov	r8, r0
 801368e:	4689      	mov	r9, r1
 8013690:	4630      	mov	r0, r6
 8013692:	4639      	mov	r1, r7
 8013694:	f7ec fe18 	bl	80002c8 <__aeabi_dsub>
 8013698:	a379      	add	r3, pc, #484	@ (adr r3, 8013880 <__ieee754_rem_pio2+0x300>)
 801369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369e:	e7de      	b.n	801365e <__ieee754_rem_pio2+0xde>
 80136a0:	4b82      	ldr	r3, [pc, #520]	@ (80138ac <__ieee754_rem_pio2+0x32c>)
 80136a2:	4598      	cmp	r8, r3
 80136a4:	f200 80d1 	bhi.w	801384a <__ieee754_rem_pio2+0x2ca>
 80136a8:	f000 fafe 	bl	8013ca8 <fabs>
 80136ac:	ec57 6b10 	vmov	r6, r7, d0
 80136b0:	a375      	add	r3, pc, #468	@ (adr r3, 8013888 <__ieee754_rem_pio2+0x308>)
 80136b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b6:	4630      	mov	r0, r6
 80136b8:	4639      	mov	r1, r7
 80136ba:	f7ec ffbd 	bl	8000638 <__aeabi_dmul>
 80136be:	4b7c      	ldr	r3, [pc, #496]	@ (80138b0 <__ieee754_rem_pio2+0x330>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	f7ec fe03 	bl	80002cc <__adddf3>
 80136c6:	f7ed fa67 	bl	8000b98 <__aeabi_d2iz>
 80136ca:	4605      	mov	r5, r0
 80136cc:	f7ec ff4a 	bl	8000564 <__aeabi_i2d>
 80136d0:	4602      	mov	r2, r0
 80136d2:	460b      	mov	r3, r1
 80136d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80136d8:	a363      	add	r3, pc, #396	@ (adr r3, 8013868 <__ieee754_rem_pio2+0x2e8>)
 80136da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136de:	f7ec ffab 	bl	8000638 <__aeabi_dmul>
 80136e2:	4602      	mov	r2, r0
 80136e4:	460b      	mov	r3, r1
 80136e6:	4630      	mov	r0, r6
 80136e8:	4639      	mov	r1, r7
 80136ea:	f7ec fded 	bl	80002c8 <__aeabi_dsub>
 80136ee:	a360      	add	r3, pc, #384	@ (adr r3, 8013870 <__ieee754_rem_pio2+0x2f0>)
 80136f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f4:	4682      	mov	sl, r0
 80136f6:	468b      	mov	fp, r1
 80136f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136fc:	f7ec ff9c 	bl	8000638 <__aeabi_dmul>
 8013700:	2d1f      	cmp	r5, #31
 8013702:	4606      	mov	r6, r0
 8013704:	460f      	mov	r7, r1
 8013706:	dc0c      	bgt.n	8013722 <__ieee754_rem_pio2+0x1a2>
 8013708:	4b6a      	ldr	r3, [pc, #424]	@ (80138b4 <__ieee754_rem_pio2+0x334>)
 801370a:	1e6a      	subs	r2, r5, #1
 801370c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013710:	4543      	cmp	r3, r8
 8013712:	d006      	beq.n	8013722 <__ieee754_rem_pio2+0x1a2>
 8013714:	4632      	mov	r2, r6
 8013716:	463b      	mov	r3, r7
 8013718:	4650      	mov	r0, sl
 801371a:	4659      	mov	r1, fp
 801371c:	f7ec fdd4 	bl	80002c8 <__aeabi_dsub>
 8013720:	e00e      	b.n	8013740 <__ieee754_rem_pio2+0x1c0>
 8013722:	463b      	mov	r3, r7
 8013724:	4632      	mov	r2, r6
 8013726:	4650      	mov	r0, sl
 8013728:	4659      	mov	r1, fp
 801372a:	f7ec fdcd 	bl	80002c8 <__aeabi_dsub>
 801372e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013732:	9305      	str	r3, [sp, #20]
 8013734:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013738:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801373c:	2b10      	cmp	r3, #16
 801373e:	dc02      	bgt.n	8013746 <__ieee754_rem_pio2+0x1c6>
 8013740:	e9c4 0100 	strd	r0, r1, [r4]
 8013744:	e039      	b.n	80137ba <__ieee754_rem_pio2+0x23a>
 8013746:	a34c      	add	r3, pc, #304	@ (adr r3, 8013878 <__ieee754_rem_pio2+0x2f8>)
 8013748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013750:	f7ec ff72 	bl	8000638 <__aeabi_dmul>
 8013754:	4606      	mov	r6, r0
 8013756:	460f      	mov	r7, r1
 8013758:	4602      	mov	r2, r0
 801375a:	460b      	mov	r3, r1
 801375c:	4650      	mov	r0, sl
 801375e:	4659      	mov	r1, fp
 8013760:	f7ec fdb2 	bl	80002c8 <__aeabi_dsub>
 8013764:	4602      	mov	r2, r0
 8013766:	460b      	mov	r3, r1
 8013768:	4680      	mov	r8, r0
 801376a:	4689      	mov	r9, r1
 801376c:	4650      	mov	r0, sl
 801376e:	4659      	mov	r1, fp
 8013770:	f7ec fdaa 	bl	80002c8 <__aeabi_dsub>
 8013774:	4632      	mov	r2, r6
 8013776:	463b      	mov	r3, r7
 8013778:	f7ec fda6 	bl	80002c8 <__aeabi_dsub>
 801377c:	a340      	add	r3, pc, #256	@ (adr r3, 8013880 <__ieee754_rem_pio2+0x300>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	4606      	mov	r6, r0
 8013784:	460f      	mov	r7, r1
 8013786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801378a:	f7ec ff55 	bl	8000638 <__aeabi_dmul>
 801378e:	4632      	mov	r2, r6
 8013790:	463b      	mov	r3, r7
 8013792:	f7ec fd99 	bl	80002c8 <__aeabi_dsub>
 8013796:	4602      	mov	r2, r0
 8013798:	460b      	mov	r3, r1
 801379a:	4606      	mov	r6, r0
 801379c:	460f      	mov	r7, r1
 801379e:	4640      	mov	r0, r8
 80137a0:	4649      	mov	r1, r9
 80137a2:	f7ec fd91 	bl	80002c8 <__aeabi_dsub>
 80137a6:	9a05      	ldr	r2, [sp, #20]
 80137a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	2b31      	cmp	r3, #49	@ 0x31
 80137b0:	dc20      	bgt.n	80137f4 <__ieee754_rem_pio2+0x274>
 80137b2:	e9c4 0100 	strd	r0, r1, [r4]
 80137b6:	46c2      	mov	sl, r8
 80137b8:	46cb      	mov	fp, r9
 80137ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80137be:	4650      	mov	r0, sl
 80137c0:	4642      	mov	r2, r8
 80137c2:	464b      	mov	r3, r9
 80137c4:	4659      	mov	r1, fp
 80137c6:	f7ec fd7f 	bl	80002c8 <__aeabi_dsub>
 80137ca:	463b      	mov	r3, r7
 80137cc:	4632      	mov	r2, r6
 80137ce:	f7ec fd7b 	bl	80002c8 <__aeabi_dsub>
 80137d2:	9b04      	ldr	r3, [sp, #16]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80137da:	f6bf af0e 	bge.w	80135fa <__ieee754_rem_pio2+0x7a>
 80137de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80137e2:	6063      	str	r3, [r4, #4]
 80137e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80137e8:	f8c4 8000 	str.w	r8, [r4]
 80137ec:	60a0      	str	r0, [r4, #8]
 80137ee:	60e3      	str	r3, [r4, #12]
 80137f0:	426d      	negs	r5, r5
 80137f2:	e702      	b.n	80135fa <__ieee754_rem_pio2+0x7a>
 80137f4:	a326      	add	r3, pc, #152	@ (adr r3, 8013890 <__ieee754_rem_pio2+0x310>)
 80137f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137fe:	f7ec ff1b 	bl	8000638 <__aeabi_dmul>
 8013802:	4606      	mov	r6, r0
 8013804:	460f      	mov	r7, r1
 8013806:	4602      	mov	r2, r0
 8013808:	460b      	mov	r3, r1
 801380a:	4640      	mov	r0, r8
 801380c:	4649      	mov	r1, r9
 801380e:	f7ec fd5b 	bl	80002c8 <__aeabi_dsub>
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	4682      	mov	sl, r0
 8013818:	468b      	mov	fp, r1
 801381a:	4640      	mov	r0, r8
 801381c:	4649      	mov	r1, r9
 801381e:	f7ec fd53 	bl	80002c8 <__aeabi_dsub>
 8013822:	4632      	mov	r2, r6
 8013824:	463b      	mov	r3, r7
 8013826:	f7ec fd4f 	bl	80002c8 <__aeabi_dsub>
 801382a:	a31b      	add	r3, pc, #108	@ (adr r3, 8013898 <__ieee754_rem_pio2+0x318>)
 801382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013830:	4606      	mov	r6, r0
 8013832:	460f      	mov	r7, r1
 8013834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013838:	f7ec fefe 	bl	8000638 <__aeabi_dmul>
 801383c:	4632      	mov	r2, r6
 801383e:	463b      	mov	r3, r7
 8013840:	f7ec fd42 	bl	80002c8 <__aeabi_dsub>
 8013844:	4606      	mov	r6, r0
 8013846:	460f      	mov	r7, r1
 8013848:	e764      	b.n	8013714 <__ieee754_rem_pio2+0x194>
 801384a:	4b1b      	ldr	r3, [pc, #108]	@ (80138b8 <__ieee754_rem_pio2+0x338>)
 801384c:	4598      	cmp	r8, r3
 801384e:	d935      	bls.n	80138bc <__ieee754_rem_pio2+0x33c>
 8013850:	4632      	mov	r2, r6
 8013852:	463b      	mov	r3, r7
 8013854:	4630      	mov	r0, r6
 8013856:	4639      	mov	r1, r7
 8013858:	f7ec fd36 	bl	80002c8 <__aeabi_dsub>
 801385c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013860:	e9c4 0100 	strd	r0, r1, [r4]
 8013864:	e69e      	b.n	80135a4 <__ieee754_rem_pio2+0x24>
 8013866:	bf00      	nop
 8013868:	54400000 	.word	0x54400000
 801386c:	3ff921fb 	.word	0x3ff921fb
 8013870:	1a626331 	.word	0x1a626331
 8013874:	3dd0b461 	.word	0x3dd0b461
 8013878:	1a600000 	.word	0x1a600000
 801387c:	3dd0b461 	.word	0x3dd0b461
 8013880:	2e037073 	.word	0x2e037073
 8013884:	3ba3198a 	.word	0x3ba3198a
 8013888:	6dc9c883 	.word	0x6dc9c883
 801388c:	3fe45f30 	.word	0x3fe45f30
 8013890:	2e000000 	.word	0x2e000000
 8013894:	3ba3198a 	.word	0x3ba3198a
 8013898:	252049c1 	.word	0x252049c1
 801389c:	397b839a 	.word	0x397b839a
 80138a0:	3fe921fb 	.word	0x3fe921fb
 80138a4:	4002d97b 	.word	0x4002d97b
 80138a8:	3ff921fb 	.word	0x3ff921fb
 80138ac:	413921fb 	.word	0x413921fb
 80138b0:	3fe00000 	.word	0x3fe00000
 80138b4:	08014c18 	.word	0x08014c18
 80138b8:	7fefffff 	.word	0x7fefffff
 80138bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80138c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80138c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80138c8:	4630      	mov	r0, r6
 80138ca:	460f      	mov	r7, r1
 80138cc:	f7ed f964 	bl	8000b98 <__aeabi_d2iz>
 80138d0:	f7ec fe48 	bl	8000564 <__aeabi_i2d>
 80138d4:	4602      	mov	r2, r0
 80138d6:	460b      	mov	r3, r1
 80138d8:	4630      	mov	r0, r6
 80138da:	4639      	mov	r1, r7
 80138dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138e0:	f7ec fcf2 	bl	80002c8 <__aeabi_dsub>
 80138e4:	4b22      	ldr	r3, [pc, #136]	@ (8013970 <__ieee754_rem_pio2+0x3f0>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	f7ec fea6 	bl	8000638 <__aeabi_dmul>
 80138ec:	460f      	mov	r7, r1
 80138ee:	4606      	mov	r6, r0
 80138f0:	f7ed f952 	bl	8000b98 <__aeabi_d2iz>
 80138f4:	f7ec fe36 	bl	8000564 <__aeabi_i2d>
 80138f8:	4602      	mov	r2, r0
 80138fa:	460b      	mov	r3, r1
 80138fc:	4630      	mov	r0, r6
 80138fe:	4639      	mov	r1, r7
 8013900:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013904:	f7ec fce0 	bl	80002c8 <__aeabi_dsub>
 8013908:	4b19      	ldr	r3, [pc, #100]	@ (8013970 <__ieee754_rem_pio2+0x3f0>)
 801390a:	2200      	movs	r2, #0
 801390c:	f7ec fe94 	bl	8000638 <__aeabi_dmul>
 8013910:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013914:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013918:	f04f 0803 	mov.w	r8, #3
 801391c:	2600      	movs	r6, #0
 801391e:	2700      	movs	r7, #0
 8013920:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013924:	4632      	mov	r2, r6
 8013926:	463b      	mov	r3, r7
 8013928:	46c2      	mov	sl, r8
 801392a:	f108 38ff 	add.w	r8, r8, #4294967295
 801392e:	f7ed f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 8013932:	2800      	cmp	r0, #0
 8013934:	d1f4      	bne.n	8013920 <__ieee754_rem_pio2+0x3a0>
 8013936:	4b0f      	ldr	r3, [pc, #60]	@ (8013974 <__ieee754_rem_pio2+0x3f4>)
 8013938:	9301      	str	r3, [sp, #4]
 801393a:	2302      	movs	r3, #2
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	462a      	mov	r2, r5
 8013940:	4653      	mov	r3, sl
 8013942:	4621      	mov	r1, r4
 8013944:	a806      	add	r0, sp, #24
 8013946:	f000 fa73 	bl	8013e30 <__kernel_rem_pio2>
 801394a:	9b04      	ldr	r3, [sp, #16]
 801394c:	2b00      	cmp	r3, #0
 801394e:	4605      	mov	r5, r0
 8013950:	f6bf ae53 	bge.w	80135fa <__ieee754_rem_pio2+0x7a>
 8013954:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013958:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801395c:	e9c4 2300 	strd	r2, r3, [r4]
 8013960:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013968:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801396c:	e740      	b.n	80137f0 <__ieee754_rem_pio2+0x270>
 801396e:	bf00      	nop
 8013970:	41700000 	.word	0x41700000
 8013974:	08014c98 	.word	0x08014c98

08013978 <atan>:
 8013978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801397c:	ec55 4b10 	vmov	r4, r5, d0
 8013980:	4bbf      	ldr	r3, [pc, #764]	@ (8013c80 <atan+0x308>)
 8013982:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013986:	429e      	cmp	r6, r3
 8013988:	46ab      	mov	fp, r5
 801398a:	d918      	bls.n	80139be <atan+0x46>
 801398c:	4bbd      	ldr	r3, [pc, #756]	@ (8013c84 <atan+0x30c>)
 801398e:	429e      	cmp	r6, r3
 8013990:	d801      	bhi.n	8013996 <atan+0x1e>
 8013992:	d109      	bne.n	80139a8 <atan+0x30>
 8013994:	b144      	cbz	r4, 80139a8 <atan+0x30>
 8013996:	4622      	mov	r2, r4
 8013998:	462b      	mov	r3, r5
 801399a:	4620      	mov	r0, r4
 801399c:	4629      	mov	r1, r5
 801399e:	f7ec fc95 	bl	80002cc <__adddf3>
 80139a2:	4604      	mov	r4, r0
 80139a4:	460d      	mov	r5, r1
 80139a6:	e006      	b.n	80139b6 <atan+0x3e>
 80139a8:	f1bb 0f00 	cmp.w	fp, #0
 80139ac:	f340 812b 	ble.w	8013c06 <atan+0x28e>
 80139b0:	a597      	add	r5, pc, #604	@ (adr r5, 8013c10 <atan+0x298>)
 80139b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80139b6:	ec45 4b10 	vmov	d0, r4, r5
 80139ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139be:	4bb2      	ldr	r3, [pc, #712]	@ (8013c88 <atan+0x310>)
 80139c0:	429e      	cmp	r6, r3
 80139c2:	d813      	bhi.n	80139ec <atan+0x74>
 80139c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80139c8:	429e      	cmp	r6, r3
 80139ca:	d80c      	bhi.n	80139e6 <atan+0x6e>
 80139cc:	a392      	add	r3, pc, #584	@ (adr r3, 8013c18 <atan+0x2a0>)
 80139ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d2:	4620      	mov	r0, r4
 80139d4:	4629      	mov	r1, r5
 80139d6:	f7ec fc79 	bl	80002cc <__adddf3>
 80139da:	4bac      	ldr	r3, [pc, #688]	@ (8013c8c <atan+0x314>)
 80139dc:	2200      	movs	r2, #0
 80139de:	f7ed f8bb 	bl	8000b58 <__aeabi_dcmpgt>
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d1e7      	bne.n	80139b6 <atan+0x3e>
 80139e6:	f04f 3aff 	mov.w	sl, #4294967295
 80139ea:	e029      	b.n	8013a40 <atan+0xc8>
 80139ec:	f000 f95c 	bl	8013ca8 <fabs>
 80139f0:	4ba7      	ldr	r3, [pc, #668]	@ (8013c90 <atan+0x318>)
 80139f2:	429e      	cmp	r6, r3
 80139f4:	ec55 4b10 	vmov	r4, r5, d0
 80139f8:	f200 80bc 	bhi.w	8013b74 <atan+0x1fc>
 80139fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013a00:	429e      	cmp	r6, r3
 8013a02:	f200 809e 	bhi.w	8013b42 <atan+0x1ca>
 8013a06:	4622      	mov	r2, r4
 8013a08:	462b      	mov	r3, r5
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	4629      	mov	r1, r5
 8013a0e:	f7ec fc5d 	bl	80002cc <__adddf3>
 8013a12:	4b9e      	ldr	r3, [pc, #632]	@ (8013c8c <atan+0x314>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	f7ec fc57 	bl	80002c8 <__aeabi_dsub>
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	4606      	mov	r6, r0
 8013a1e:	460f      	mov	r7, r1
 8013a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a24:	4620      	mov	r0, r4
 8013a26:	4629      	mov	r1, r5
 8013a28:	f7ec fc50 	bl	80002cc <__adddf3>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4630      	mov	r0, r6
 8013a32:	4639      	mov	r1, r7
 8013a34:	f7ec ff2a 	bl	800088c <__aeabi_ddiv>
 8013a38:	f04f 0a00 	mov.w	sl, #0
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	460d      	mov	r5, r1
 8013a40:	4622      	mov	r2, r4
 8013a42:	462b      	mov	r3, r5
 8013a44:	4620      	mov	r0, r4
 8013a46:	4629      	mov	r1, r5
 8013a48:	f7ec fdf6 	bl	8000638 <__aeabi_dmul>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4680      	mov	r8, r0
 8013a52:	4689      	mov	r9, r1
 8013a54:	f7ec fdf0 	bl	8000638 <__aeabi_dmul>
 8013a58:	a371      	add	r3, pc, #452	@ (adr r3, 8013c20 <atan+0x2a8>)
 8013a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5e:	4606      	mov	r6, r0
 8013a60:	460f      	mov	r7, r1
 8013a62:	f7ec fde9 	bl	8000638 <__aeabi_dmul>
 8013a66:	a370      	add	r3, pc, #448	@ (adr r3, 8013c28 <atan+0x2b0>)
 8013a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6c:	f7ec fc2e 	bl	80002cc <__adddf3>
 8013a70:	4632      	mov	r2, r6
 8013a72:	463b      	mov	r3, r7
 8013a74:	f7ec fde0 	bl	8000638 <__aeabi_dmul>
 8013a78:	a36d      	add	r3, pc, #436	@ (adr r3, 8013c30 <atan+0x2b8>)
 8013a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7e:	f7ec fc25 	bl	80002cc <__adddf3>
 8013a82:	4632      	mov	r2, r6
 8013a84:	463b      	mov	r3, r7
 8013a86:	f7ec fdd7 	bl	8000638 <__aeabi_dmul>
 8013a8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013c38 <atan+0x2c0>)
 8013a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a90:	f7ec fc1c 	bl	80002cc <__adddf3>
 8013a94:	4632      	mov	r2, r6
 8013a96:	463b      	mov	r3, r7
 8013a98:	f7ec fdce 	bl	8000638 <__aeabi_dmul>
 8013a9c:	a368      	add	r3, pc, #416	@ (adr r3, 8013c40 <atan+0x2c8>)
 8013a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa2:	f7ec fc13 	bl	80002cc <__adddf3>
 8013aa6:	4632      	mov	r2, r6
 8013aa8:	463b      	mov	r3, r7
 8013aaa:	f7ec fdc5 	bl	8000638 <__aeabi_dmul>
 8013aae:	a366      	add	r3, pc, #408	@ (adr r3, 8013c48 <atan+0x2d0>)
 8013ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab4:	f7ec fc0a 	bl	80002cc <__adddf3>
 8013ab8:	4642      	mov	r2, r8
 8013aba:	464b      	mov	r3, r9
 8013abc:	f7ec fdbc 	bl	8000638 <__aeabi_dmul>
 8013ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8013c50 <atan+0x2d8>)
 8013ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac6:	4680      	mov	r8, r0
 8013ac8:	4689      	mov	r9, r1
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	f7ec fdb3 	bl	8000638 <__aeabi_dmul>
 8013ad2:	a361      	add	r3, pc, #388	@ (adr r3, 8013c58 <atan+0x2e0>)
 8013ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad8:	f7ec fbf6 	bl	80002c8 <__aeabi_dsub>
 8013adc:	4632      	mov	r2, r6
 8013ade:	463b      	mov	r3, r7
 8013ae0:	f7ec fdaa 	bl	8000638 <__aeabi_dmul>
 8013ae4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013c60 <atan+0x2e8>)
 8013ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aea:	f7ec fbed 	bl	80002c8 <__aeabi_dsub>
 8013aee:	4632      	mov	r2, r6
 8013af0:	463b      	mov	r3, r7
 8013af2:	f7ec fda1 	bl	8000638 <__aeabi_dmul>
 8013af6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013c68 <atan+0x2f0>)
 8013af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afc:	f7ec fbe4 	bl	80002c8 <__aeabi_dsub>
 8013b00:	4632      	mov	r2, r6
 8013b02:	463b      	mov	r3, r7
 8013b04:	f7ec fd98 	bl	8000638 <__aeabi_dmul>
 8013b08:	a359      	add	r3, pc, #356	@ (adr r3, 8013c70 <atan+0x2f8>)
 8013b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0e:	f7ec fbdb 	bl	80002c8 <__aeabi_dsub>
 8013b12:	4632      	mov	r2, r6
 8013b14:	463b      	mov	r3, r7
 8013b16:	f7ec fd8f 	bl	8000638 <__aeabi_dmul>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	4640      	mov	r0, r8
 8013b20:	4649      	mov	r1, r9
 8013b22:	f7ec fbd3 	bl	80002cc <__adddf3>
 8013b26:	4622      	mov	r2, r4
 8013b28:	462b      	mov	r3, r5
 8013b2a:	f7ec fd85 	bl	8000638 <__aeabi_dmul>
 8013b2e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	d148      	bne.n	8013bca <atan+0x252>
 8013b38:	4620      	mov	r0, r4
 8013b3a:	4629      	mov	r1, r5
 8013b3c:	f7ec fbc4 	bl	80002c8 <__aeabi_dsub>
 8013b40:	e72f      	b.n	80139a2 <atan+0x2a>
 8013b42:	4b52      	ldr	r3, [pc, #328]	@ (8013c8c <atan+0x314>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	4620      	mov	r0, r4
 8013b48:	4629      	mov	r1, r5
 8013b4a:	f7ec fbbd 	bl	80002c8 <__aeabi_dsub>
 8013b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8013c8c <atan+0x314>)
 8013b50:	4606      	mov	r6, r0
 8013b52:	460f      	mov	r7, r1
 8013b54:	2200      	movs	r2, #0
 8013b56:	4620      	mov	r0, r4
 8013b58:	4629      	mov	r1, r5
 8013b5a:	f7ec fbb7 	bl	80002cc <__adddf3>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	460b      	mov	r3, r1
 8013b62:	4630      	mov	r0, r6
 8013b64:	4639      	mov	r1, r7
 8013b66:	f7ec fe91 	bl	800088c <__aeabi_ddiv>
 8013b6a:	f04f 0a01 	mov.w	sl, #1
 8013b6e:	4604      	mov	r4, r0
 8013b70:	460d      	mov	r5, r1
 8013b72:	e765      	b.n	8013a40 <atan+0xc8>
 8013b74:	4b47      	ldr	r3, [pc, #284]	@ (8013c94 <atan+0x31c>)
 8013b76:	429e      	cmp	r6, r3
 8013b78:	d21c      	bcs.n	8013bb4 <atan+0x23c>
 8013b7a:	4b47      	ldr	r3, [pc, #284]	@ (8013c98 <atan+0x320>)
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4620      	mov	r0, r4
 8013b80:	4629      	mov	r1, r5
 8013b82:	f7ec fba1 	bl	80002c8 <__aeabi_dsub>
 8013b86:	4b44      	ldr	r3, [pc, #272]	@ (8013c98 <atan+0x320>)
 8013b88:	4606      	mov	r6, r0
 8013b8a:	460f      	mov	r7, r1
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	4620      	mov	r0, r4
 8013b90:	4629      	mov	r1, r5
 8013b92:	f7ec fd51 	bl	8000638 <__aeabi_dmul>
 8013b96:	4b3d      	ldr	r3, [pc, #244]	@ (8013c8c <atan+0x314>)
 8013b98:	2200      	movs	r2, #0
 8013b9a:	f7ec fb97 	bl	80002cc <__adddf3>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	f7ec fe71 	bl	800088c <__aeabi_ddiv>
 8013baa:	f04f 0a02 	mov.w	sl, #2
 8013bae:	4604      	mov	r4, r0
 8013bb0:	460d      	mov	r5, r1
 8013bb2:	e745      	b.n	8013a40 <atan+0xc8>
 8013bb4:	4622      	mov	r2, r4
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	4938      	ldr	r1, [pc, #224]	@ (8013c9c <atan+0x324>)
 8013bba:	2000      	movs	r0, #0
 8013bbc:	f7ec fe66 	bl	800088c <__aeabi_ddiv>
 8013bc0:	f04f 0a03 	mov.w	sl, #3
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	460d      	mov	r5, r1
 8013bc8:	e73a      	b.n	8013a40 <atan+0xc8>
 8013bca:	4b35      	ldr	r3, [pc, #212]	@ (8013ca0 <atan+0x328>)
 8013bcc:	4e35      	ldr	r6, [pc, #212]	@ (8013ca4 <atan+0x32c>)
 8013bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd6:	f7ec fb77 	bl	80002c8 <__aeabi_dsub>
 8013bda:	4622      	mov	r2, r4
 8013bdc:	462b      	mov	r3, r5
 8013bde:	f7ec fb73 	bl	80002c8 <__aeabi_dsub>
 8013be2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013be6:	4602      	mov	r2, r0
 8013be8:	460b      	mov	r3, r1
 8013bea:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013bee:	f7ec fb6b 	bl	80002c8 <__aeabi_dsub>
 8013bf2:	f1bb 0f00 	cmp.w	fp, #0
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	460d      	mov	r5, r1
 8013bfa:	f6bf aedc 	bge.w	80139b6 <atan+0x3e>
 8013bfe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c02:	461d      	mov	r5, r3
 8013c04:	e6d7      	b.n	80139b6 <atan+0x3e>
 8013c06:	a51c      	add	r5, pc, #112	@ (adr r5, 8013c78 <atan+0x300>)
 8013c08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013c0c:	e6d3      	b.n	80139b6 <atan+0x3e>
 8013c0e:	bf00      	nop
 8013c10:	54442d18 	.word	0x54442d18
 8013c14:	3ff921fb 	.word	0x3ff921fb
 8013c18:	8800759c 	.word	0x8800759c
 8013c1c:	7e37e43c 	.word	0x7e37e43c
 8013c20:	e322da11 	.word	0xe322da11
 8013c24:	3f90ad3a 	.word	0x3f90ad3a
 8013c28:	24760deb 	.word	0x24760deb
 8013c2c:	3fa97b4b 	.word	0x3fa97b4b
 8013c30:	a0d03d51 	.word	0xa0d03d51
 8013c34:	3fb10d66 	.word	0x3fb10d66
 8013c38:	c54c206e 	.word	0xc54c206e
 8013c3c:	3fb745cd 	.word	0x3fb745cd
 8013c40:	920083ff 	.word	0x920083ff
 8013c44:	3fc24924 	.word	0x3fc24924
 8013c48:	5555550d 	.word	0x5555550d
 8013c4c:	3fd55555 	.word	0x3fd55555
 8013c50:	2c6a6c2f 	.word	0x2c6a6c2f
 8013c54:	bfa2b444 	.word	0xbfa2b444
 8013c58:	52defd9a 	.word	0x52defd9a
 8013c5c:	3fadde2d 	.word	0x3fadde2d
 8013c60:	af749a6d 	.word	0xaf749a6d
 8013c64:	3fb3b0f2 	.word	0x3fb3b0f2
 8013c68:	fe231671 	.word	0xfe231671
 8013c6c:	3fbc71c6 	.word	0x3fbc71c6
 8013c70:	9998ebc4 	.word	0x9998ebc4
 8013c74:	3fc99999 	.word	0x3fc99999
 8013c78:	54442d18 	.word	0x54442d18
 8013c7c:	bff921fb 	.word	0xbff921fb
 8013c80:	440fffff 	.word	0x440fffff
 8013c84:	7ff00000 	.word	0x7ff00000
 8013c88:	3fdbffff 	.word	0x3fdbffff
 8013c8c:	3ff00000 	.word	0x3ff00000
 8013c90:	3ff2ffff 	.word	0x3ff2ffff
 8013c94:	40038000 	.word	0x40038000
 8013c98:	3ff80000 	.word	0x3ff80000
 8013c9c:	bff00000 	.word	0xbff00000
 8013ca0:	08014da0 	.word	0x08014da0
 8013ca4:	08014dc0 	.word	0x08014dc0

08013ca8 <fabs>:
 8013ca8:	ec51 0b10 	vmov	r0, r1, d0
 8013cac:	4602      	mov	r2, r0
 8013cae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013cb2:	ec43 2b10 	vmov	d0, r2, r3
 8013cb6:	4770      	bx	lr

08013cb8 <scalbn>:
 8013cb8:	b570      	push	{r4, r5, r6, lr}
 8013cba:	ec55 4b10 	vmov	r4, r5, d0
 8013cbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	462b      	mov	r3, r5
 8013cc6:	b991      	cbnz	r1, 8013cee <scalbn+0x36>
 8013cc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013ccc:	4323      	orrs	r3, r4
 8013cce:	d03d      	beq.n	8013d4c <scalbn+0x94>
 8013cd0:	4b35      	ldr	r3, [pc, #212]	@ (8013da8 <scalbn+0xf0>)
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	4629      	mov	r1, r5
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f7ec fcae 	bl	8000638 <__aeabi_dmul>
 8013cdc:	4b33      	ldr	r3, [pc, #204]	@ (8013dac <scalbn+0xf4>)
 8013cde:	429e      	cmp	r6, r3
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	460d      	mov	r5, r1
 8013ce4:	da0f      	bge.n	8013d06 <scalbn+0x4e>
 8013ce6:	a328      	add	r3, pc, #160	@ (adr r3, 8013d88 <scalbn+0xd0>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	e01e      	b.n	8013d2c <scalbn+0x74>
 8013cee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013cf2:	4291      	cmp	r1, r2
 8013cf4:	d10b      	bne.n	8013d0e <scalbn+0x56>
 8013cf6:	4622      	mov	r2, r4
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	4629      	mov	r1, r5
 8013cfc:	f7ec fae6 	bl	80002cc <__adddf3>
 8013d00:	4604      	mov	r4, r0
 8013d02:	460d      	mov	r5, r1
 8013d04:	e022      	b.n	8013d4c <scalbn+0x94>
 8013d06:	460b      	mov	r3, r1
 8013d08:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013d0c:	3936      	subs	r1, #54	@ 0x36
 8013d0e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013d12:	4296      	cmp	r6, r2
 8013d14:	dd0d      	ble.n	8013d32 <scalbn+0x7a>
 8013d16:	2d00      	cmp	r5, #0
 8013d18:	a11d      	add	r1, pc, #116	@ (adr r1, 8013d90 <scalbn+0xd8>)
 8013d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d1e:	da02      	bge.n	8013d26 <scalbn+0x6e>
 8013d20:	a11d      	add	r1, pc, #116	@ (adr r1, 8013d98 <scalbn+0xe0>)
 8013d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d26:	a31a      	add	r3, pc, #104	@ (adr r3, 8013d90 <scalbn+0xd8>)
 8013d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2c:	f7ec fc84 	bl	8000638 <__aeabi_dmul>
 8013d30:	e7e6      	b.n	8013d00 <scalbn+0x48>
 8013d32:	1872      	adds	r2, r6, r1
 8013d34:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013d38:	428a      	cmp	r2, r1
 8013d3a:	dcec      	bgt.n	8013d16 <scalbn+0x5e>
 8013d3c:	2a00      	cmp	r2, #0
 8013d3e:	dd08      	ble.n	8013d52 <scalbn+0x9a>
 8013d40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013d48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d4c:	ec45 4b10 	vmov	d0, r4, r5
 8013d50:	bd70      	pop	{r4, r5, r6, pc}
 8013d52:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013d56:	da08      	bge.n	8013d6a <scalbn+0xb2>
 8013d58:	2d00      	cmp	r5, #0
 8013d5a:	a10b      	add	r1, pc, #44	@ (adr r1, 8013d88 <scalbn+0xd0>)
 8013d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d60:	dac1      	bge.n	8013ce6 <scalbn+0x2e>
 8013d62:	a10f      	add	r1, pc, #60	@ (adr r1, 8013da0 <scalbn+0xe8>)
 8013d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d68:	e7bd      	b.n	8013ce6 <scalbn+0x2e>
 8013d6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d6e:	3236      	adds	r2, #54	@ 0x36
 8013d70:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013d74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d78:	4620      	mov	r0, r4
 8013d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8013db0 <scalbn+0xf8>)
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	2200      	movs	r2, #0
 8013d80:	e7d4      	b.n	8013d2c <scalbn+0x74>
 8013d82:	bf00      	nop
 8013d84:	f3af 8000 	nop.w
 8013d88:	c2f8f359 	.word	0xc2f8f359
 8013d8c:	01a56e1f 	.word	0x01a56e1f
 8013d90:	8800759c 	.word	0x8800759c
 8013d94:	7e37e43c 	.word	0x7e37e43c
 8013d98:	8800759c 	.word	0x8800759c
 8013d9c:	fe37e43c 	.word	0xfe37e43c
 8013da0:	c2f8f359 	.word	0xc2f8f359
 8013da4:	81a56e1f 	.word	0x81a56e1f
 8013da8:	43500000 	.word	0x43500000
 8013dac:	ffff3cb0 	.word	0xffff3cb0
 8013db0:	3c900000 	.word	0x3c900000

08013db4 <with_errno>:
 8013db4:	b510      	push	{r4, lr}
 8013db6:	ed2d 8b02 	vpush	{d8}
 8013dba:	eeb0 8a40 	vmov.f32	s16, s0
 8013dbe:	eef0 8a60 	vmov.f32	s17, s1
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	f7fb fd78 	bl	800f8b8 <__errno>
 8013dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8013dcc:	eef0 0a68 	vmov.f32	s1, s17
 8013dd0:	ecbd 8b02 	vpop	{d8}
 8013dd4:	6004      	str	r4, [r0, #0]
 8013dd6:	bd10      	pop	{r4, pc}

08013dd8 <xflow>:
 8013dd8:	4603      	mov	r3, r0
 8013dda:	b507      	push	{r0, r1, r2, lr}
 8013ddc:	ec51 0b10 	vmov	r0, r1, d0
 8013de0:	b183      	cbz	r3, 8013e04 <xflow+0x2c>
 8013de2:	4602      	mov	r2, r0
 8013de4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013de8:	e9cd 2300 	strd	r2, r3, [sp]
 8013dec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013df0:	f7ec fc22 	bl	8000638 <__aeabi_dmul>
 8013df4:	ec41 0b10 	vmov	d0, r0, r1
 8013df8:	2022      	movs	r0, #34	@ 0x22
 8013dfa:	b003      	add	sp, #12
 8013dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e00:	f7ff bfd8 	b.w	8013db4 <with_errno>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	e7ee      	b.n	8013de8 <xflow+0x10>
 8013e0a:	0000      	movs	r0, r0
 8013e0c:	0000      	movs	r0, r0
	...

08013e10 <__math_uflow>:
 8013e10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013e18 <__math_uflow+0x8>
 8013e14:	f7ff bfe0 	b.w	8013dd8 <xflow>
 8013e18:	00000000 	.word	0x00000000
 8013e1c:	10000000 	.word	0x10000000

08013e20 <__math_oflow>:
 8013e20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013e28 <__math_oflow+0x8>
 8013e24:	f7ff bfd8 	b.w	8013dd8 <xflow>
 8013e28:	00000000 	.word	0x00000000
 8013e2c:	70000000 	.word	0x70000000

08013e30 <__kernel_rem_pio2>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	ed2d 8b02 	vpush	{d8}
 8013e38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013e3c:	f112 0f14 	cmn.w	r2, #20
 8013e40:	9306      	str	r3, [sp, #24]
 8013e42:	9104      	str	r1, [sp, #16]
 8013e44:	4bbe      	ldr	r3, [pc, #760]	@ (8014140 <__kernel_rem_pio2+0x310>)
 8013e46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013e48:	9008      	str	r0, [sp, #32]
 8013e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	9b06      	ldr	r3, [sp, #24]
 8013e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e56:	bfa8      	it	ge
 8013e58:	1ed4      	subge	r4, r2, #3
 8013e5a:	9305      	str	r3, [sp, #20]
 8013e5c:	bfb2      	itee	lt
 8013e5e:	2400      	movlt	r4, #0
 8013e60:	2318      	movge	r3, #24
 8013e62:	fb94 f4f3 	sdivge	r4, r4, r3
 8013e66:	f06f 0317 	mvn.w	r3, #23
 8013e6a:	fb04 3303 	mla	r3, r4, r3, r3
 8013e6e:	eb03 0b02 	add.w	fp, r3, r2
 8013e72:	9b00      	ldr	r3, [sp, #0]
 8013e74:	9a05      	ldr	r2, [sp, #20]
 8013e76:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8014130 <__kernel_rem_pio2+0x300>
 8013e7a:	eb03 0802 	add.w	r8, r3, r2
 8013e7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013e80:	1aa7      	subs	r7, r4, r2
 8013e82:	ae20      	add	r6, sp, #128	@ 0x80
 8013e84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013e88:	2500      	movs	r5, #0
 8013e8a:	4545      	cmp	r5, r8
 8013e8c:	dd13      	ble.n	8013eb6 <__kernel_rem_pio2+0x86>
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	aa20      	add	r2, sp, #128	@ 0x80
 8013e92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013e96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013e9a:	f04f 0800 	mov.w	r8, #0
 8013e9e:	9b00      	ldr	r3, [sp, #0]
 8013ea0:	4598      	cmp	r8, r3
 8013ea2:	dc31      	bgt.n	8013f08 <__kernel_rem_pio2+0xd8>
 8013ea4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8014130 <__kernel_rem_pio2+0x300>
 8013ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013eac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013eb0:	462f      	mov	r7, r5
 8013eb2:	2600      	movs	r6, #0
 8013eb4:	e01b      	b.n	8013eee <__kernel_rem_pio2+0xbe>
 8013eb6:	42ef      	cmn	r7, r5
 8013eb8:	d407      	bmi.n	8013eca <__kernel_rem_pio2+0x9a>
 8013eba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013ebe:	f7ec fb51 	bl	8000564 <__aeabi_i2d>
 8013ec2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013ec6:	3501      	adds	r5, #1
 8013ec8:	e7df      	b.n	8013e8a <__kernel_rem_pio2+0x5a>
 8013eca:	ec51 0b18 	vmov	r0, r1, d8
 8013ece:	e7f8      	b.n	8013ec2 <__kernel_rem_pio2+0x92>
 8013ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ed4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013ed8:	f7ec fbae 	bl	8000638 <__aeabi_dmul>
 8013edc:	4602      	mov	r2, r0
 8013ede:	460b      	mov	r3, r1
 8013ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ee4:	f7ec f9f2 	bl	80002cc <__adddf3>
 8013ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eec:	3601      	adds	r6, #1
 8013eee:	9b05      	ldr	r3, [sp, #20]
 8013ef0:	429e      	cmp	r6, r3
 8013ef2:	f1a7 0708 	sub.w	r7, r7, #8
 8013ef6:	ddeb      	ble.n	8013ed0 <__kernel_rem_pio2+0xa0>
 8013ef8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013efc:	f108 0801 	add.w	r8, r8, #1
 8013f00:	ecaa 7b02 	vstmia	sl!, {d7}
 8013f04:	3508      	adds	r5, #8
 8013f06:	e7ca      	b.n	8013e9e <__kernel_rem_pio2+0x6e>
 8013f08:	9b00      	ldr	r3, [sp, #0]
 8013f0a:	f8dd 8000 	ldr.w	r8, [sp]
 8013f0e:	aa0c      	add	r2, sp, #48	@ 0x30
 8013f10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f14:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013f18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013f22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f24:	ab98      	add	r3, sp, #608	@ 0x260
 8013f26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013f2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f32:	ac0c      	add	r4, sp, #48	@ 0x30
 8013f34:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013f36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013f3a:	46a1      	mov	r9, r4
 8013f3c:	46c2      	mov	sl, r8
 8013f3e:	f1ba 0f00 	cmp.w	sl, #0
 8013f42:	f1a5 0508 	sub.w	r5, r5, #8
 8013f46:	dc77      	bgt.n	8014038 <__kernel_rem_pio2+0x208>
 8013f48:	4658      	mov	r0, fp
 8013f4a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013f4e:	f7ff feb3 	bl	8013cb8 <scalbn>
 8013f52:	ec57 6b10 	vmov	r6, r7, d0
 8013f56:	2200      	movs	r2, #0
 8013f58:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	4639      	mov	r1, r7
 8013f60:	f7ec fb6a 	bl	8000638 <__aeabi_dmul>
 8013f64:	ec41 0b10 	vmov	d0, r0, r1
 8013f68:	f000 faba 	bl	80144e0 <floor>
 8013f6c:	4b75      	ldr	r3, [pc, #468]	@ (8014144 <__kernel_rem_pio2+0x314>)
 8013f6e:	ec51 0b10 	vmov	r0, r1, d0
 8013f72:	2200      	movs	r2, #0
 8013f74:	f7ec fb60 	bl	8000638 <__aeabi_dmul>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	4639      	mov	r1, r7
 8013f80:	f7ec f9a2 	bl	80002c8 <__aeabi_dsub>
 8013f84:	460f      	mov	r7, r1
 8013f86:	4606      	mov	r6, r0
 8013f88:	f7ec fe06 	bl	8000b98 <__aeabi_d2iz>
 8013f8c:	9002      	str	r0, [sp, #8]
 8013f8e:	f7ec fae9 	bl	8000564 <__aeabi_i2d>
 8013f92:	4602      	mov	r2, r0
 8013f94:	460b      	mov	r3, r1
 8013f96:	4630      	mov	r0, r6
 8013f98:	4639      	mov	r1, r7
 8013f9a:	f7ec f995 	bl	80002c8 <__aeabi_dsub>
 8013f9e:	f1bb 0f00 	cmp.w	fp, #0
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	460f      	mov	r7, r1
 8013fa6:	dd6c      	ble.n	8014082 <__kernel_rem_pio2+0x252>
 8013fa8:	f108 31ff 	add.w	r1, r8, #4294967295
 8013fac:	ab0c      	add	r3, sp, #48	@ 0x30
 8013fae:	9d02      	ldr	r5, [sp, #8]
 8013fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fb4:	f1cb 0018 	rsb	r0, fp, #24
 8013fb8:	fa43 f200 	asr.w	r2, r3, r0
 8013fbc:	4415      	add	r5, r2
 8013fbe:	4082      	lsls	r2, r0
 8013fc0:	1a9b      	subs	r3, r3, r2
 8013fc2:	aa0c      	add	r2, sp, #48	@ 0x30
 8013fc4:	9502      	str	r5, [sp, #8]
 8013fc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013fca:	f1cb 0217 	rsb	r2, fp, #23
 8013fce:	fa43 f902 	asr.w	r9, r3, r2
 8013fd2:	f1b9 0f00 	cmp.w	r9, #0
 8013fd6:	dd64      	ble.n	80140a2 <__kernel_rem_pio2+0x272>
 8013fd8:	9b02      	ldr	r3, [sp, #8]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	3301      	adds	r3, #1
 8013fde:	9302      	str	r3, [sp, #8]
 8013fe0:	4615      	mov	r5, r2
 8013fe2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013fe6:	4590      	cmp	r8, r2
 8013fe8:	f300 80b8 	bgt.w	801415c <__kernel_rem_pio2+0x32c>
 8013fec:	f1bb 0f00 	cmp.w	fp, #0
 8013ff0:	dd07      	ble.n	8014002 <__kernel_rem_pio2+0x1d2>
 8013ff2:	f1bb 0f01 	cmp.w	fp, #1
 8013ff6:	f000 80bf 	beq.w	8014178 <__kernel_rem_pio2+0x348>
 8013ffa:	f1bb 0f02 	cmp.w	fp, #2
 8013ffe:	f000 80c6 	beq.w	801418e <__kernel_rem_pio2+0x35e>
 8014002:	f1b9 0f02 	cmp.w	r9, #2
 8014006:	d14c      	bne.n	80140a2 <__kernel_rem_pio2+0x272>
 8014008:	4632      	mov	r2, r6
 801400a:	463b      	mov	r3, r7
 801400c:	494e      	ldr	r1, [pc, #312]	@ (8014148 <__kernel_rem_pio2+0x318>)
 801400e:	2000      	movs	r0, #0
 8014010:	f7ec f95a 	bl	80002c8 <__aeabi_dsub>
 8014014:	4606      	mov	r6, r0
 8014016:	460f      	mov	r7, r1
 8014018:	2d00      	cmp	r5, #0
 801401a:	d042      	beq.n	80140a2 <__kernel_rem_pio2+0x272>
 801401c:	4658      	mov	r0, fp
 801401e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8014138 <__kernel_rem_pio2+0x308>
 8014022:	f7ff fe49 	bl	8013cb8 <scalbn>
 8014026:	4630      	mov	r0, r6
 8014028:	4639      	mov	r1, r7
 801402a:	ec53 2b10 	vmov	r2, r3, d0
 801402e:	f7ec f94b 	bl	80002c8 <__aeabi_dsub>
 8014032:	4606      	mov	r6, r0
 8014034:	460f      	mov	r7, r1
 8014036:	e034      	b.n	80140a2 <__kernel_rem_pio2+0x272>
 8014038:	4b44      	ldr	r3, [pc, #272]	@ (801414c <__kernel_rem_pio2+0x31c>)
 801403a:	2200      	movs	r2, #0
 801403c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014040:	f7ec fafa 	bl	8000638 <__aeabi_dmul>
 8014044:	f7ec fda8 	bl	8000b98 <__aeabi_d2iz>
 8014048:	f7ec fa8c 	bl	8000564 <__aeabi_i2d>
 801404c:	4b40      	ldr	r3, [pc, #256]	@ (8014150 <__kernel_rem_pio2+0x320>)
 801404e:	2200      	movs	r2, #0
 8014050:	4606      	mov	r6, r0
 8014052:	460f      	mov	r7, r1
 8014054:	f7ec faf0 	bl	8000638 <__aeabi_dmul>
 8014058:	4602      	mov	r2, r0
 801405a:	460b      	mov	r3, r1
 801405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014060:	f7ec f932 	bl	80002c8 <__aeabi_dsub>
 8014064:	f7ec fd98 	bl	8000b98 <__aeabi_d2iz>
 8014068:	e9d5 2300 	ldrd	r2, r3, [r5]
 801406c:	f849 0b04 	str.w	r0, [r9], #4
 8014070:	4639      	mov	r1, r7
 8014072:	4630      	mov	r0, r6
 8014074:	f7ec f92a 	bl	80002cc <__adddf3>
 8014078:	f10a 3aff 	add.w	sl, sl, #4294967295
 801407c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014080:	e75d      	b.n	8013f3e <__kernel_rem_pio2+0x10e>
 8014082:	d107      	bne.n	8014094 <__kernel_rem_pio2+0x264>
 8014084:	f108 33ff 	add.w	r3, r8, #4294967295
 8014088:	aa0c      	add	r2, sp, #48	@ 0x30
 801408a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801408e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014092:	e79e      	b.n	8013fd2 <__kernel_rem_pio2+0x1a2>
 8014094:	4b2f      	ldr	r3, [pc, #188]	@ (8014154 <__kernel_rem_pio2+0x324>)
 8014096:	2200      	movs	r2, #0
 8014098:	f7ec fd54 	bl	8000b44 <__aeabi_dcmpge>
 801409c:	2800      	cmp	r0, #0
 801409e:	d143      	bne.n	8014128 <__kernel_rem_pio2+0x2f8>
 80140a0:	4681      	mov	r9, r0
 80140a2:	2200      	movs	r2, #0
 80140a4:	2300      	movs	r3, #0
 80140a6:	4630      	mov	r0, r6
 80140a8:	4639      	mov	r1, r7
 80140aa:	f7ec fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	f000 80bf 	beq.w	8014232 <__kernel_rem_pio2+0x402>
 80140b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80140b8:	2200      	movs	r2, #0
 80140ba:	9900      	ldr	r1, [sp, #0]
 80140bc:	428b      	cmp	r3, r1
 80140be:	da6e      	bge.n	801419e <__kernel_rem_pio2+0x36e>
 80140c0:	2a00      	cmp	r2, #0
 80140c2:	f000 8089 	beq.w	80141d8 <__kernel_rem_pio2+0x3a8>
 80140c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80140ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80140cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80140d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d0f6      	beq.n	80140c6 <__kernel_rem_pio2+0x296>
 80140d8:	4658      	mov	r0, fp
 80140da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8014138 <__kernel_rem_pio2+0x308>
 80140de:	f7ff fdeb 	bl	8013cb8 <scalbn>
 80140e2:	f108 0301 	add.w	r3, r8, #1
 80140e6:	00da      	lsls	r2, r3, #3
 80140e8:	9205      	str	r2, [sp, #20]
 80140ea:	ec55 4b10 	vmov	r4, r5, d0
 80140ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80140f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801414c <__kernel_rem_pio2+0x31c>
 80140f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80140f8:	4646      	mov	r6, r8
 80140fa:	f04f 0a00 	mov.w	sl, #0
 80140fe:	2e00      	cmp	r6, #0
 8014100:	f280 80cf 	bge.w	80142a2 <__kernel_rem_pio2+0x472>
 8014104:	4644      	mov	r4, r8
 8014106:	2c00      	cmp	r4, #0
 8014108:	f2c0 80fd 	blt.w	8014306 <__kernel_rem_pio2+0x4d6>
 801410c:	4b12      	ldr	r3, [pc, #72]	@ (8014158 <__kernel_rem_pio2+0x328>)
 801410e:	461f      	mov	r7, r3
 8014110:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014116:	9306      	str	r3, [sp, #24]
 8014118:	f04f 0a00 	mov.w	sl, #0
 801411c:	f04f 0b00 	mov.w	fp, #0
 8014120:	2600      	movs	r6, #0
 8014122:	eba8 0504 	sub.w	r5, r8, r4
 8014126:	e0e2      	b.n	80142ee <__kernel_rem_pio2+0x4be>
 8014128:	f04f 0902 	mov.w	r9, #2
 801412c:	e754      	b.n	8013fd8 <__kernel_rem_pio2+0x1a8>
 801412e:	bf00      	nop
	...
 801413c:	3ff00000 	.word	0x3ff00000
 8014140:	08014e20 	.word	0x08014e20
 8014144:	40200000 	.word	0x40200000
 8014148:	3ff00000 	.word	0x3ff00000
 801414c:	3e700000 	.word	0x3e700000
 8014150:	41700000 	.word	0x41700000
 8014154:	3fe00000 	.word	0x3fe00000
 8014158:	08014de0 	.word	0x08014de0
 801415c:	f854 3b04 	ldr.w	r3, [r4], #4
 8014160:	b945      	cbnz	r5, 8014174 <__kernel_rem_pio2+0x344>
 8014162:	b123      	cbz	r3, 801416e <__kernel_rem_pio2+0x33e>
 8014164:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014168:	f844 3c04 	str.w	r3, [r4, #-4]
 801416c:	2301      	movs	r3, #1
 801416e:	3201      	adds	r2, #1
 8014170:	461d      	mov	r5, r3
 8014172:	e738      	b.n	8013fe6 <__kernel_rem_pio2+0x1b6>
 8014174:	1acb      	subs	r3, r1, r3
 8014176:	e7f7      	b.n	8014168 <__kernel_rem_pio2+0x338>
 8014178:	f108 32ff 	add.w	r2, r8, #4294967295
 801417c:	ab0c      	add	r3, sp, #48	@ 0x30
 801417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014182:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014186:	a90c      	add	r1, sp, #48	@ 0x30
 8014188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801418c:	e739      	b.n	8014002 <__kernel_rem_pio2+0x1d2>
 801418e:	f108 32ff 	add.w	r2, r8, #4294967295
 8014192:	ab0c      	add	r3, sp, #48	@ 0x30
 8014194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014198:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801419c:	e7f3      	b.n	8014186 <__kernel_rem_pio2+0x356>
 801419e:	a90c      	add	r1, sp, #48	@ 0x30
 80141a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80141a4:	3b01      	subs	r3, #1
 80141a6:	430a      	orrs	r2, r1
 80141a8:	e787      	b.n	80140ba <__kernel_rem_pio2+0x28a>
 80141aa:	3401      	adds	r4, #1
 80141ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80141b0:	2a00      	cmp	r2, #0
 80141b2:	d0fa      	beq.n	80141aa <__kernel_rem_pio2+0x37a>
 80141b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80141ba:	eb0d 0503 	add.w	r5, sp, r3
 80141be:	9b06      	ldr	r3, [sp, #24]
 80141c0:	aa20      	add	r2, sp, #128	@ 0x80
 80141c2:	4443      	add	r3, r8
 80141c4:	f108 0701 	add.w	r7, r8, #1
 80141c8:	3d98      	subs	r5, #152	@ 0x98
 80141ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80141ce:	4444      	add	r4, r8
 80141d0:	42bc      	cmp	r4, r7
 80141d2:	da04      	bge.n	80141de <__kernel_rem_pio2+0x3ae>
 80141d4:	46a0      	mov	r8, r4
 80141d6:	e6a2      	b.n	8013f1e <__kernel_rem_pio2+0xee>
 80141d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141da:	2401      	movs	r4, #1
 80141dc:	e7e6      	b.n	80141ac <__kernel_rem_pio2+0x37c>
 80141de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80141e4:	f7ec f9be 	bl	8000564 <__aeabi_i2d>
 80141e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80144b0 <__kernel_rem_pio2+0x680>
 80141ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80141f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80141f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80141f8:	46b2      	mov	sl, r6
 80141fa:	f04f 0800 	mov.w	r8, #0
 80141fe:	9b05      	ldr	r3, [sp, #20]
 8014200:	4598      	cmp	r8, r3
 8014202:	dd05      	ble.n	8014210 <__kernel_rem_pio2+0x3e0>
 8014204:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014208:	3701      	adds	r7, #1
 801420a:	eca5 7b02 	vstmia	r5!, {d7}
 801420e:	e7df      	b.n	80141d0 <__kernel_rem_pio2+0x3a0>
 8014210:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014214:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014218:	f7ec fa0e 	bl	8000638 <__aeabi_dmul>
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014224:	f7ec f852 	bl	80002cc <__adddf3>
 8014228:	f108 0801 	add.w	r8, r8, #1
 801422c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014230:	e7e5      	b.n	80141fe <__kernel_rem_pio2+0x3ce>
 8014232:	f1cb 0000 	rsb	r0, fp, #0
 8014236:	ec47 6b10 	vmov	d0, r6, r7
 801423a:	f7ff fd3d 	bl	8013cb8 <scalbn>
 801423e:	ec55 4b10 	vmov	r4, r5, d0
 8014242:	4b9d      	ldr	r3, [pc, #628]	@ (80144b8 <__kernel_rem_pio2+0x688>)
 8014244:	2200      	movs	r2, #0
 8014246:	4620      	mov	r0, r4
 8014248:	4629      	mov	r1, r5
 801424a:	f7ec fc7b 	bl	8000b44 <__aeabi_dcmpge>
 801424e:	b300      	cbz	r0, 8014292 <__kernel_rem_pio2+0x462>
 8014250:	4b9a      	ldr	r3, [pc, #616]	@ (80144bc <__kernel_rem_pio2+0x68c>)
 8014252:	2200      	movs	r2, #0
 8014254:	4620      	mov	r0, r4
 8014256:	4629      	mov	r1, r5
 8014258:	f7ec f9ee 	bl	8000638 <__aeabi_dmul>
 801425c:	f7ec fc9c 	bl	8000b98 <__aeabi_d2iz>
 8014260:	4606      	mov	r6, r0
 8014262:	f7ec f97f 	bl	8000564 <__aeabi_i2d>
 8014266:	4b94      	ldr	r3, [pc, #592]	@ (80144b8 <__kernel_rem_pio2+0x688>)
 8014268:	2200      	movs	r2, #0
 801426a:	f7ec f9e5 	bl	8000638 <__aeabi_dmul>
 801426e:	460b      	mov	r3, r1
 8014270:	4602      	mov	r2, r0
 8014272:	4629      	mov	r1, r5
 8014274:	4620      	mov	r0, r4
 8014276:	f7ec f827 	bl	80002c8 <__aeabi_dsub>
 801427a:	f7ec fc8d 	bl	8000b98 <__aeabi_d2iz>
 801427e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014280:	f10b 0b18 	add.w	fp, fp, #24
 8014284:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014288:	f108 0801 	add.w	r8, r8, #1
 801428c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014290:	e722      	b.n	80140d8 <__kernel_rem_pio2+0x2a8>
 8014292:	4620      	mov	r0, r4
 8014294:	4629      	mov	r1, r5
 8014296:	f7ec fc7f 	bl	8000b98 <__aeabi_d2iz>
 801429a:	ab0c      	add	r3, sp, #48	@ 0x30
 801429c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80142a0:	e71a      	b.n	80140d8 <__kernel_rem_pio2+0x2a8>
 80142a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80142a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80142a8:	f7ec f95c 	bl	8000564 <__aeabi_i2d>
 80142ac:	4622      	mov	r2, r4
 80142ae:	462b      	mov	r3, r5
 80142b0:	f7ec f9c2 	bl	8000638 <__aeabi_dmul>
 80142b4:	4652      	mov	r2, sl
 80142b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80142ba:	465b      	mov	r3, fp
 80142bc:	4620      	mov	r0, r4
 80142be:	4629      	mov	r1, r5
 80142c0:	f7ec f9ba 	bl	8000638 <__aeabi_dmul>
 80142c4:	3e01      	subs	r6, #1
 80142c6:	4604      	mov	r4, r0
 80142c8:	460d      	mov	r5, r1
 80142ca:	e718      	b.n	80140fe <__kernel_rem_pio2+0x2ce>
 80142cc:	9906      	ldr	r1, [sp, #24]
 80142ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80142d2:	9106      	str	r1, [sp, #24]
 80142d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80142d8:	f7ec f9ae 	bl	8000638 <__aeabi_dmul>
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	4650      	mov	r0, sl
 80142e2:	4659      	mov	r1, fp
 80142e4:	f7eb fff2 	bl	80002cc <__adddf3>
 80142e8:	3601      	adds	r6, #1
 80142ea:	4682      	mov	sl, r0
 80142ec:	468b      	mov	fp, r1
 80142ee:	9b00      	ldr	r3, [sp, #0]
 80142f0:	429e      	cmp	r6, r3
 80142f2:	dc01      	bgt.n	80142f8 <__kernel_rem_pio2+0x4c8>
 80142f4:	42b5      	cmp	r5, r6
 80142f6:	dae9      	bge.n	80142cc <__kernel_rem_pio2+0x49c>
 80142f8:	ab48      	add	r3, sp, #288	@ 0x120
 80142fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80142fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8014302:	3c01      	subs	r4, #1
 8014304:	e6ff      	b.n	8014106 <__kernel_rem_pio2+0x2d6>
 8014306:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014308:	2b02      	cmp	r3, #2
 801430a:	dc0b      	bgt.n	8014324 <__kernel_rem_pio2+0x4f4>
 801430c:	2b00      	cmp	r3, #0
 801430e:	dc39      	bgt.n	8014384 <__kernel_rem_pio2+0x554>
 8014310:	d05d      	beq.n	80143ce <__kernel_rem_pio2+0x59e>
 8014312:	9b02      	ldr	r3, [sp, #8]
 8014314:	f003 0007 	and.w	r0, r3, #7
 8014318:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801431c:	ecbd 8b02 	vpop	{d8}
 8014320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014324:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014326:	2b03      	cmp	r3, #3
 8014328:	d1f3      	bne.n	8014312 <__kernel_rem_pio2+0x4e2>
 801432a:	9b05      	ldr	r3, [sp, #20]
 801432c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014330:	eb0d 0403 	add.w	r4, sp, r3
 8014334:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014338:	4625      	mov	r5, r4
 801433a:	46c2      	mov	sl, r8
 801433c:	f1ba 0f00 	cmp.w	sl, #0
 8014340:	f1a5 0508 	sub.w	r5, r5, #8
 8014344:	dc6b      	bgt.n	801441e <__kernel_rem_pio2+0x5ee>
 8014346:	4645      	mov	r5, r8
 8014348:	2d01      	cmp	r5, #1
 801434a:	f1a4 0408 	sub.w	r4, r4, #8
 801434e:	f300 8087 	bgt.w	8014460 <__kernel_rem_pio2+0x630>
 8014352:	9c05      	ldr	r4, [sp, #20]
 8014354:	ab48      	add	r3, sp, #288	@ 0x120
 8014356:	441c      	add	r4, r3
 8014358:	2000      	movs	r0, #0
 801435a:	2100      	movs	r1, #0
 801435c:	f1b8 0f01 	cmp.w	r8, #1
 8014360:	f300 809c 	bgt.w	801449c <__kernel_rem_pio2+0x66c>
 8014364:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014368:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801436c:	f1b9 0f00 	cmp.w	r9, #0
 8014370:	f040 80a6 	bne.w	80144c0 <__kernel_rem_pio2+0x690>
 8014374:	9b04      	ldr	r3, [sp, #16]
 8014376:	e9c3 7800 	strd	r7, r8, [r3]
 801437a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801437e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014382:	e7c6      	b.n	8014312 <__kernel_rem_pio2+0x4e2>
 8014384:	9d05      	ldr	r5, [sp, #20]
 8014386:	ab48      	add	r3, sp, #288	@ 0x120
 8014388:	441d      	add	r5, r3
 801438a:	4644      	mov	r4, r8
 801438c:	2000      	movs	r0, #0
 801438e:	2100      	movs	r1, #0
 8014390:	2c00      	cmp	r4, #0
 8014392:	da35      	bge.n	8014400 <__kernel_rem_pio2+0x5d0>
 8014394:	f1b9 0f00 	cmp.w	r9, #0
 8014398:	d038      	beq.n	801440c <__kernel_rem_pio2+0x5dc>
 801439a:	4602      	mov	r2, r0
 801439c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143a0:	9c04      	ldr	r4, [sp, #16]
 80143a2:	e9c4 2300 	strd	r2, r3, [r4]
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80143ae:	f7eb ff8b 	bl	80002c8 <__aeabi_dsub>
 80143b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80143b4:	2401      	movs	r4, #1
 80143b6:	45a0      	cmp	r8, r4
 80143b8:	da2b      	bge.n	8014412 <__kernel_rem_pio2+0x5e2>
 80143ba:	f1b9 0f00 	cmp.w	r9, #0
 80143be:	d002      	beq.n	80143c6 <__kernel_rem_pio2+0x596>
 80143c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143c4:	4619      	mov	r1, r3
 80143c6:	9b04      	ldr	r3, [sp, #16]
 80143c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80143cc:	e7a1      	b.n	8014312 <__kernel_rem_pio2+0x4e2>
 80143ce:	9c05      	ldr	r4, [sp, #20]
 80143d0:	ab48      	add	r3, sp, #288	@ 0x120
 80143d2:	441c      	add	r4, r3
 80143d4:	2000      	movs	r0, #0
 80143d6:	2100      	movs	r1, #0
 80143d8:	f1b8 0f00 	cmp.w	r8, #0
 80143dc:	da09      	bge.n	80143f2 <__kernel_rem_pio2+0x5c2>
 80143de:	f1b9 0f00 	cmp.w	r9, #0
 80143e2:	d002      	beq.n	80143ea <__kernel_rem_pio2+0x5ba>
 80143e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143e8:	4619      	mov	r1, r3
 80143ea:	9b04      	ldr	r3, [sp, #16]
 80143ec:	e9c3 0100 	strd	r0, r1, [r3]
 80143f0:	e78f      	b.n	8014312 <__kernel_rem_pio2+0x4e2>
 80143f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80143f6:	f7eb ff69 	bl	80002cc <__adddf3>
 80143fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80143fe:	e7eb      	b.n	80143d8 <__kernel_rem_pio2+0x5a8>
 8014400:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014404:	f7eb ff62 	bl	80002cc <__adddf3>
 8014408:	3c01      	subs	r4, #1
 801440a:	e7c1      	b.n	8014390 <__kernel_rem_pio2+0x560>
 801440c:	4602      	mov	r2, r0
 801440e:	460b      	mov	r3, r1
 8014410:	e7c6      	b.n	80143a0 <__kernel_rem_pio2+0x570>
 8014412:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014416:	f7eb ff59 	bl	80002cc <__adddf3>
 801441a:	3401      	adds	r4, #1
 801441c:	e7cb      	b.n	80143b6 <__kernel_rem_pio2+0x586>
 801441e:	ed95 7b00 	vldr	d7, [r5]
 8014422:	ed8d 7b00 	vstr	d7, [sp]
 8014426:	ed95 7b02 	vldr	d7, [r5, #8]
 801442a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801442e:	ec53 2b17 	vmov	r2, r3, d7
 8014432:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014436:	f7eb ff49 	bl	80002cc <__adddf3>
 801443a:	4602      	mov	r2, r0
 801443c:	460b      	mov	r3, r1
 801443e:	4606      	mov	r6, r0
 8014440:	460f      	mov	r7, r1
 8014442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014446:	f7eb ff3f 	bl	80002c8 <__aeabi_dsub>
 801444a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801444e:	f7eb ff3d 	bl	80002cc <__adddf3>
 8014452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014456:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801445a:	e9c5 6700 	strd	r6, r7, [r5]
 801445e:	e76d      	b.n	801433c <__kernel_rem_pio2+0x50c>
 8014460:	ed94 7b00 	vldr	d7, [r4]
 8014464:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014468:	ec51 0b17 	vmov	r0, r1, d7
 801446c:	4652      	mov	r2, sl
 801446e:	465b      	mov	r3, fp
 8014470:	ed8d 7b00 	vstr	d7, [sp]
 8014474:	f7eb ff2a 	bl	80002cc <__adddf3>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	4606      	mov	r6, r0
 801447e:	460f      	mov	r7, r1
 8014480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014484:	f7eb ff20 	bl	80002c8 <__aeabi_dsub>
 8014488:	4652      	mov	r2, sl
 801448a:	465b      	mov	r3, fp
 801448c:	f7eb ff1e 	bl	80002cc <__adddf3>
 8014490:	3d01      	subs	r5, #1
 8014492:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014496:	e9c4 6700 	strd	r6, r7, [r4]
 801449a:	e755      	b.n	8014348 <__kernel_rem_pio2+0x518>
 801449c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144a0:	f7eb ff14 	bl	80002cc <__adddf3>
 80144a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80144a8:	e758      	b.n	801435c <__kernel_rem_pio2+0x52c>
 80144aa:	bf00      	nop
 80144ac:	f3af 8000 	nop.w
	...
 80144b8:	41700000 	.word	0x41700000
 80144bc:	3e700000 	.word	0x3e700000
 80144c0:	9b04      	ldr	r3, [sp, #16]
 80144c2:	9a04      	ldr	r2, [sp, #16]
 80144c4:	601f      	str	r7, [r3, #0]
 80144c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80144ca:	605c      	str	r4, [r3, #4]
 80144cc:	609d      	str	r5, [r3, #8]
 80144ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80144d2:	60d3      	str	r3, [r2, #12]
 80144d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144d8:	6110      	str	r0, [r2, #16]
 80144da:	6153      	str	r3, [r2, #20]
 80144dc:	e719      	b.n	8014312 <__kernel_rem_pio2+0x4e2>
 80144de:	bf00      	nop

080144e0 <floor>:
 80144e0:	ec51 0b10 	vmov	r0, r1, d0
 80144e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80144e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80144f0:	2e13      	cmp	r6, #19
 80144f2:	460c      	mov	r4, r1
 80144f4:	4605      	mov	r5, r0
 80144f6:	4680      	mov	r8, r0
 80144f8:	dc34      	bgt.n	8014564 <floor+0x84>
 80144fa:	2e00      	cmp	r6, #0
 80144fc:	da17      	bge.n	801452e <floor+0x4e>
 80144fe:	a332      	add	r3, pc, #200	@ (adr r3, 80145c8 <floor+0xe8>)
 8014500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014504:	f7eb fee2 	bl	80002cc <__adddf3>
 8014508:	2200      	movs	r2, #0
 801450a:	2300      	movs	r3, #0
 801450c:	f7ec fb24 	bl	8000b58 <__aeabi_dcmpgt>
 8014510:	b150      	cbz	r0, 8014528 <floor+0x48>
 8014512:	2c00      	cmp	r4, #0
 8014514:	da55      	bge.n	80145c2 <floor+0xe2>
 8014516:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801451a:	432c      	orrs	r4, r5
 801451c:	2500      	movs	r5, #0
 801451e:	42ac      	cmp	r4, r5
 8014520:	4c2b      	ldr	r4, [pc, #172]	@ (80145d0 <floor+0xf0>)
 8014522:	bf08      	it	eq
 8014524:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014528:	4621      	mov	r1, r4
 801452a:	4628      	mov	r0, r5
 801452c:	e023      	b.n	8014576 <floor+0x96>
 801452e:	4f29      	ldr	r7, [pc, #164]	@ (80145d4 <floor+0xf4>)
 8014530:	4137      	asrs	r7, r6
 8014532:	ea01 0307 	and.w	r3, r1, r7
 8014536:	4303      	orrs	r3, r0
 8014538:	d01d      	beq.n	8014576 <floor+0x96>
 801453a:	a323      	add	r3, pc, #140	@ (adr r3, 80145c8 <floor+0xe8>)
 801453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014540:	f7eb fec4 	bl	80002cc <__adddf3>
 8014544:	2200      	movs	r2, #0
 8014546:	2300      	movs	r3, #0
 8014548:	f7ec fb06 	bl	8000b58 <__aeabi_dcmpgt>
 801454c:	2800      	cmp	r0, #0
 801454e:	d0eb      	beq.n	8014528 <floor+0x48>
 8014550:	2c00      	cmp	r4, #0
 8014552:	bfbe      	ittt	lt
 8014554:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014558:	4133      	asrlt	r3, r6
 801455a:	18e4      	addlt	r4, r4, r3
 801455c:	ea24 0407 	bic.w	r4, r4, r7
 8014560:	2500      	movs	r5, #0
 8014562:	e7e1      	b.n	8014528 <floor+0x48>
 8014564:	2e33      	cmp	r6, #51	@ 0x33
 8014566:	dd0a      	ble.n	801457e <floor+0x9e>
 8014568:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801456c:	d103      	bne.n	8014576 <floor+0x96>
 801456e:	4602      	mov	r2, r0
 8014570:	460b      	mov	r3, r1
 8014572:	f7eb feab 	bl	80002cc <__adddf3>
 8014576:	ec41 0b10 	vmov	d0, r0, r1
 801457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801457e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014582:	f04f 37ff 	mov.w	r7, #4294967295
 8014586:	40df      	lsrs	r7, r3
 8014588:	4207      	tst	r7, r0
 801458a:	d0f4      	beq.n	8014576 <floor+0x96>
 801458c:	a30e      	add	r3, pc, #56	@ (adr r3, 80145c8 <floor+0xe8>)
 801458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014592:	f7eb fe9b 	bl	80002cc <__adddf3>
 8014596:	2200      	movs	r2, #0
 8014598:	2300      	movs	r3, #0
 801459a:	f7ec fadd 	bl	8000b58 <__aeabi_dcmpgt>
 801459e:	2800      	cmp	r0, #0
 80145a0:	d0c2      	beq.n	8014528 <floor+0x48>
 80145a2:	2c00      	cmp	r4, #0
 80145a4:	da0a      	bge.n	80145bc <floor+0xdc>
 80145a6:	2e14      	cmp	r6, #20
 80145a8:	d101      	bne.n	80145ae <floor+0xce>
 80145aa:	3401      	adds	r4, #1
 80145ac:	e006      	b.n	80145bc <floor+0xdc>
 80145ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80145b2:	2301      	movs	r3, #1
 80145b4:	40b3      	lsls	r3, r6
 80145b6:	441d      	add	r5, r3
 80145b8:	4545      	cmp	r5, r8
 80145ba:	d3f6      	bcc.n	80145aa <floor+0xca>
 80145bc:	ea25 0507 	bic.w	r5, r5, r7
 80145c0:	e7b2      	b.n	8014528 <floor+0x48>
 80145c2:	2500      	movs	r5, #0
 80145c4:	462c      	mov	r4, r5
 80145c6:	e7af      	b.n	8014528 <floor+0x48>
 80145c8:	8800759c 	.word	0x8800759c
 80145cc:	7e37e43c 	.word	0x7e37e43c
 80145d0:	bff00000 	.word	0xbff00000
 80145d4:	000fffff 	.word	0x000fffff

080145d8 <_init>:
 80145d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145da:	bf00      	nop
 80145dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145de:	bc08      	pop	{r3}
 80145e0:	469e      	mov	lr, r3
 80145e2:	4770      	bx	lr

080145e4 <_fini>:
 80145e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145e6:	bf00      	nop
 80145e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ea:	bc08      	pop	{r3}
 80145ec:	469e      	mov	lr, r3
 80145ee:	4770      	bx	lr
