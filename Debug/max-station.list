
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08014d68  08014d68  00015d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155b0  080155b0  00017300  2**0
                  CONTENTS
  4 .ARM          00000008  080155b0  080155b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155b8  080155b8  00017300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155b8  080155b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155bc  080155bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  080155c0  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e8  20000300  080158c0  00017300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200026e8  080158c0  000176e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218aa  00000000  00000000  00017330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c71  00000000  00000000  00038bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  0003d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001652  00000000  00000000  0003f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297df  00000000  00000000  00040b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027817  00000000  00000000  0006a339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f89  00000000  00000000  00091b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009400  00000000  00000000  0017bb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00184f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000300 	.word	0x20000300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014d50 	.word	0x08014d50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000304 	.word	0x20000304
 800020c:	08014d50 	.word	0x08014d50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00d ff90 	bl	800f00c <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e fec6 	bl	800ff56 <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00e febc 	bl	800ff56 <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00e fead 	bl	800ff56 <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00e fea3 	bl	800ff56 <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00e fe94 	bl	800ff56 <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00e fe8a 	bl	800ff56 <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00e fe7b 	bl	800ff56 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00e fe71 	bl	800ff56 <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	08014d68 	.word	0x08014d68
 80014b0:	08014d70 	.word	0x08014d70
 80014b4:	08014d78 	.word	0x08014d78
 80014b8:	08014d80 	.word	0x08014d80
 80014bc:	08014d88 	.word	0x08014d88
 80014c0:	08014d90 	.word	0x08014d90
 80014c4:	08014d98 	.word	0x08014d98
 80014c8:	08014da0 	.word	0x08014da0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00e fbd4 	bl	801008a <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00e fae8 	bl	800ff46 <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00e facf 	bl	800ff46 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_UART_RxCpltCallback>:
//{
//	counthalf++;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if(huart == &huart6){ // RS232 Alım
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d11e      	bne.n	8001b4e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d00f      	beq.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b1e:	d80b      	bhi.n	8001b38 <HAL_UART_RxCpltCallback+0x38>
		RS_rx_buffer[rx_index_lora++]=rx_data_lora;
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	b2d1      	uxtb	r1, r2
 8001b28:	4a27      	ldr	r2, [pc, #156]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b2a:	7011      	strb	r1, [r2, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b25      	ldr	r3, [pc, #148]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_UART_RxCpltCallback+0xcc>)
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	e005      	b.n	8001b44 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8001b38:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 8001b3e:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_lora, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	491f      	ldr	r1, [pc, #124]	@ (8001bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8001b48:	481d      	ldr	r0, [pc, #116]	@ (8001bc0 <HAL_UART_RxCpltCallback+0xc0>)
 8001b4a:	f006 ff82 	bl	8008a52 <HAL_UART_Receive_IT>
	}
//
	if(huart == &huart3){ // Lora alım
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d104      	bne.n	8001b60 <HAL_UART_RxCpltCallback+0x60>

		HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
 8001b56:	224b      	movs	r2, #75	@ 0x4b
 8001b58:	491e      	ldr	r1, [pc, #120]	@ (8001bd4 <HAL_UART_RxCpltCallback+0xd4>)
 8001b5a:	481d      	ldr	r0, [pc, #116]	@ (8001bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8001b5c:	f006 ffa9 	bl	8008ab2 <HAL_UART_Receive_DMA>
	}


	if(huart == &huart2) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd8 <HAL_UART_RxCpltCallback+0xd8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d127      	bne.n	8001bb8 <HAL_UART_RxCpltCallback+0xb8>
			if( rx_data != '\n'&& rx_index < RX_BUFFER_SIZE) {
 8001b68:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_UART_RxCpltCallback+0xdc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b0a      	cmp	r3, #10
 8001b6e:	d010      	beq.n	8001b92 <HAL_UART_RxCpltCallback+0x92>
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_UART_RxCpltCallback+0xe0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <HAL_UART_RxCpltCallback+0x92>
				gps_rx_buffer[rx_index++] = rx_data;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_UART_RxCpltCallback+0xe0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	b2d1      	uxtb	r1, r2
 8001b82:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <HAL_UART_RxCpltCallback+0xe0>)
 8001b84:	7011      	strb	r1, [r2, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <HAL_UART_RxCpltCallback+0xdc>)
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_RxCpltCallback+0xe4>)
 8001b8e:	5499      	strb	r1, [r3, r2]
 8001b90:	e00d      	b.n	8001bae <HAL_UART_RxCpltCallback+0xae>
			} else {
				lwgps_process(&gps, gps_rx_buffer, rx_index+1);
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_UART_RxCpltCallback+0xe0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4912      	ldr	r1, [pc, #72]	@ (8001be4 <HAL_UART_RxCpltCallback+0xe4>)
 8001b9c:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <HAL_UART_RxCpltCallback+0xe8>)
 8001b9e:	f7ff feef 	bl	8001980 <lwgps_process>
				rx_index = 0;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_UART_RxCpltCallback+0xe0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
				rx_data = 0;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_UART_RxCpltCallback+0xdc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	490a      	ldr	r1, [pc, #40]	@ (8001bdc <HAL_UART_RxCpltCallback+0xdc>)
 8001bb2:	4809      	ldr	r0, [pc, #36]	@ (8001bd8 <HAL_UART_RxCpltCallback+0xd8>)
 8001bb4:	f006 ff4d 	bl	8008a52 <HAL_UART_Receive_IT>
		}
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000524 	.word	0x20000524
 8001bc4:	200006c0 	.word	0x200006c0
 8001bc8:	200006bf 	.word	0x200006bf
 8001bcc:	20000674 	.word	0x20000674
 8001bd0:	200004e0 	.word	0x200004e0
 8001bd4:	20000628 	.word	0x20000628
 8001bd8:	2000049c 	.word	0x2000049c
 8001bdc:	20000795 	.word	0x20000795
 8001be0:	20000794 	.word	0x20000794
 8001be4:	20000714 	.word	0x20000714
 8001be8:	200008c0 	.word	0x200008c0

08001bec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){ // 1 sn
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x16>
   adc_flag=1;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]

	}


}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000410 	.word	0x20000410
 8001c14:	200008a8 	.word	0x200008a8

08001c18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <HAL_ADC_ConvCpltCallback+0x30>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_ConvCpltCallback+0x26>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8001c2a:	4808      	ldr	r0, [pc, #32]	@ (8001c4c <HAL_ADC_ConvCpltCallback+0x34>)
 8001c2c:	f002 fcca 	bl	80045c4 <HAL_ADC_GetValue>
 8001c30:	ee07 0a90 	vmov	s15, r0
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_ADC_ConvCpltCallback+0x38>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]


		//adc_flag = 1;
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	2000031c 	.word	0x2000031c
 8001c50:	200008a0 	.word	0x200008a0
 8001c54:	00000000 	.word	0x00000000

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	ed2d 8b04 	vpush	{d8-d9}
 8001c5e:	b094      	sub	sp, #80	@ 0x50
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001c62:	f002 f9e7 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c66:	f000 fcab 	bl	80025c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6a:	f000 fecd 	bl	8002a08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c6e:	f000 fe95 	bl	800299c <MX_DMA_Init>
  MX_ADC1_Init();
 8001c72:	f000 fd11 	bl	8002698 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c76:	f000 fd61 	bl	800273c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c7a:	f000 fd8d 	bl	8002798 <MX_SPI1_Init>
  MX_UART4_Init();
 8001c7e:	f000 fde5 	bl	800284c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001c82:	f000 fe0d 	bl	80028a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c86:	f000 fe35 	bl	80028f4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001c8a:	f009 fcbb 	bl	800b604 <MX_FATFS_Init>
  MX_TIM11_Init();
 8001c8e:	f000 fdb9 	bl	8002804 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001c92:	f00b fd6d 	bl	800d770 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 8001c96:	f000 fe57 	bl	8002948 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


 // HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
  HAL_UART_Receive_DMA(&huart3, lora_rx_buffer, 75);
 8001c9a:	224b      	movs	r2, #75	@ 0x4b
 8001c9c:	49b7      	ldr	r1, [pc, #732]	@ (8001f7c <main+0x324>)
 8001c9e:	48b8      	ldr	r0, [pc, #736]	@ (8001f80 <main+0x328>)
 8001ca0:	f006 ff07 	bl	8008ab2 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &rx_data_lora, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	49b7      	ldr	r1, [pc, #732]	@ (8001f84 <main+0x32c>)
 8001ca8:	48b7      	ldr	r0, [pc, #732]	@ (8001f88 <main+0x330>)
 8001caa:	f006 fed2 	bl	8008a52 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	49b6      	ldr	r1, [pc, #728]	@ (8001f8c <main+0x334>)
 8001cb2:	48b7      	ldr	r0, [pc, #732]	@ (8001f90 <main+0x338>)
 8001cb4:	f006 fecd 	bl	8008a52 <HAL_UART_Receive_IT>
  E220_CONFIG(0x8,0x2A,0x10,1); //0x8,0x2A,0x10,1
 8001cb8:	2301      	movs	r3, #1
 8001cba:	2210      	movs	r2, #16
 8001cbc:	212a      	movs	r1, #42	@ 0x2a
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	f000 ff4e 	bl	8002b60 <E220_CONFIG>
  lwgps_init(&gps);
 8001cc4:	48b3      	ldr	r0, [pc, #716]	@ (8001f94 <main+0x33c>)
 8001cc6:	f7ff fe4d 	bl	8001964 <lwgps_init>

  HAL_ADC_Start_IT(&hadc1);
 8001cca:	48b3      	ldr	r0, [pc, #716]	@ (8001f98 <main+0x340>)
 8001ccc:	f002 fa8c 	bl	80041e8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001cd0:	48b2      	ldr	r0, [pc, #712]	@ (8001f9c <main+0x344>)
 8001cd2:	f006 fb8b 	bl	80083ec <HAL_TIM_Base_Start_IT>

  tim1=HAL_GetTick();
 8001cd6:	f002 fa13 	bl	8004100 <HAL_GetTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4ab0      	ldr	r2, [pc, #704]	@ (8001fa0 <main+0x348>)
 8001cde:	6013      	str	r3, [r2, #0]
  while (1)
  {
	//  HAL_UART_Receive(&huart4, nextion_rx_data, 5 , 1000);


		  HYI_BUFFER_Fill();
 8001ce0:	f001 f8ec 	bl	8002ebc <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 8001ce4:	4ba5      	ldr	r3, [pc, #660]	@ (8001f7c <main+0x324>)
 8001ce6:	78db      	ldrb	r3, [r3, #3]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	f040 8238 	bne.w	800215e <main+0x506>
 8001cee:	4ba3      	ldr	r3, [pc, #652]	@ (8001f7c <main+0x324>)
 8001cf0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cf4:	2b31      	cmp	r3, #49	@ 0x31
 8001cf6:	f040 8232 	bne.w	800215e <main+0x506>

		  Sustainer.satsinview=lora_rx_buffer[4];
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	@ (8001f7c <main+0x324>)
 8001cfc:	791a      	ldrb	r2, [r3, #4]
 8001cfe:	4ba9      	ldr	r3, [pc, #676]	@ (8001fa4 <main+0x34c>)
 8001d00:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001d08:	e01b      	b.n	8001d42 <main+0xea>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8001d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d0e:	1d5a      	adds	r2, r3, #5
 8001d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d14:	4999      	ldr	r1, [pc, #612]	@ (8001f7c <main+0x324>)
 8001d16:	5c8a      	ldrb	r2, [r1, r2]
 8001d18:	3348      	adds	r3, #72	@ 0x48
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	440b      	add	r3, r1
 8001d20:	f803 2c14 	strb.w	r2, [r3, #-20]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8001d24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d28:	1d5a      	adds	r2, r3, #5
 8001d2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d2e:	330a      	adds	r3, #10
 8001d30:	4992      	ldr	r1, [pc, #584]	@ (8001f7c <main+0x324>)
 8001d32:	5c89      	ldrb	r1, [r1, r2]
 8001d34:	4a9c      	ldr	r2, [pc, #624]	@ (8001fa8 <main+0x350>)
 8001d36:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d38:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001d42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9df      	bls.n	8001d0a <main+0xb2>
				 }
				 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 8001d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d4c:	4a95      	ldr	r2, [pc, #596]	@ (8001fa4 <main+0x34c>)
 8001d4e:	6053      	str	r3, [r2, #4]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001d56:	e01d      	b.n	8001d94 <main+0x13c>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8001d58:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d5c:	f103 0209 	add.w	r2, r3, #9
 8001d60:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d64:	4985      	ldr	r1, [pc, #532]	@ (8001f7c <main+0x324>)
 8001d66:	5c8a      	ldrb	r2, [r1, r2]
 8001d68:	3348      	adds	r3, #72	@ 0x48
 8001d6a:	f107 0108 	add.w	r1, r7, #8
 8001d6e:	440b      	add	r3, r1
 8001d70:	f803 2c18 	strb.w	r2, [r3, #-24]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 8001d74:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d78:	f103 0209 	add.w	r2, r3, #9
 8001d7c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d80:	330e      	adds	r3, #14
 8001d82:	497e      	ldr	r1, [pc, #504]	@ (8001f7c <main+0x324>)
 8001d84:	5c89      	ldrb	r1, [r1, r2]
 8001d86:	4a88      	ldr	r2, [pc, #544]	@ (8001fa8 <main+0x350>)
 8001d88:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001d8a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001d94:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d9dd      	bls.n	8001d58 <main+0x100>
				 }
				 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	4a81      	ldr	r2, [pc, #516]	@ (8001fa4 <main+0x34c>)
 8001da0:	6093      	str	r3, [r2, #8]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001da8:	e01d      	b.n	8001de6 <main+0x18e>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8001daa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dae:	f103 020d 	add.w	r2, r3, #13
 8001db2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001db6:	4971      	ldr	r1, [pc, #452]	@ (8001f7c <main+0x324>)
 8001db8:	5c8a      	ldrb	r2, [r1, r2]
 8001dba:	3348      	adds	r3, #72	@ 0x48
 8001dbc:	f107 0108 	add.w	r1, r7, #8
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 8001dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dca:	f103 020d 	add.w	r2, r3, #13
 8001dce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dd2:	3312      	adds	r3, #18
 8001dd4:	4969      	ldr	r1, [pc, #420]	@ (8001f7c <main+0x324>)
 8001dd6:	5c89      	ldrb	r1, [r1, r2]
 8001dd8:	4a73      	ldr	r2, [pc, #460]	@ (8001fa8 <main+0x350>)
 8001dda:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001ddc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001de0:	3301      	adds	r3, #1
 8001de2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001de6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d9dd      	bls.n	8001daa <main+0x152>
				 }
				 Sustainer.gpslongitude=f2u8_longitude.fVal;
 8001dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df0:	4a6c      	ldr	r2, [pc, #432]	@ (8001fa4 <main+0x34c>)
 8001df2:	60d3      	str	r3, [r2, #12]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001dfa:	e01d      	b.n	8001e38 <main+0x1e0>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 8001dfc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e00:	f103 0211 	add.w	r2, r3, #17
 8001e04:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e08:	495c      	ldr	r1, [pc, #368]	@ (8001f7c <main+0x324>)
 8001e0a:	5c8a      	ldrb	r2, [r1, r2]
 8001e0c:	3348      	adds	r3, #72	@ 0x48
 8001e0e:	f107 0108 	add.w	r1, r7, #8
 8001e12:	440b      	add	r3, r1
 8001e14:	f803 2c20 	strb.w	r2, [r3, #-32]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 8001e18:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e1c:	f103 0211 	add.w	r2, r3, #17
 8001e20:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e24:	3306      	adds	r3, #6
 8001e26:	4955      	ldr	r1, [pc, #340]	@ (8001f7c <main+0x324>)
 8001e28:	5c89      	ldrb	r1, [r1, r2]
 8001e2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa8 <main+0x350>)
 8001e2c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8001e2e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e32:	3301      	adds	r3, #1
 8001e34:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001e38:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d9dd      	bls.n	8001dfc <main+0x1a4>
				 }
				 Sustainer.altitude=f2u8_altitude.fVal;
 8001e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e42:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <main+0x34c>)
 8001e44:	6153      	str	r3, [r2, #20]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001e4c:	e012      	b.n	8001e74 <main+0x21c>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8001e4e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e52:	f103 0215 	add.w	r2, r3, #21
 8001e56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e5a:	4948      	ldr	r1, [pc, #288]	@ (8001f7c <main+0x324>)
 8001e5c:	5c8a      	ldrb	r2, [r1, r2]
 8001e5e:	3348      	adds	r3, #72	@ 0x48
 8001e60:	f107 0108 	add.w	r1, r7, #8
 8001e64:	440b      	add	r3, r1
 8001e66:	f803 2c24 	strb.w	r2, [r3, #-36]
				 for(uint8_t i=0;i<4;i++)
 8001e6a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001e74:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d9e8      	bls.n	8001e4e <main+0x1f6>
				 }
				 Sustainer.speed=f2u8_speed.fVal;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	4a49      	ldr	r2, [pc, #292]	@ (8001fa4 <main+0x34c>)
 8001e80:	6113      	str	r3, [r2, #16]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001e88:	e012      	b.n	8001eb0 <main+0x258>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8001e8a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e8e:	f103 0219 	add.w	r2, r3, #25
 8001e92:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e96:	4939      	ldr	r1, [pc, #228]	@ (8001f7c <main+0x324>)
 8001e98:	5c8a      	ldrb	r2, [r1, r2]
 8001e9a:	3348      	adds	r3, #72	@ 0x48
 8001e9c:	f107 0108 	add.w	r1, r7, #8
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f803 2c28 	strb.w	r2, [r3, #-40]
				 for(uint8_t i=0;i<4;i++)
 8001ea6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001eb0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d9e8      	bls.n	8001e8a <main+0x232>
				 }
				 Sustainer.temperature=f2u8_temp.fVal;
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa4 <main+0x34c>)
 8001ebc:	6193      	str	r3, [r2, #24]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8001ec4:	e012      	b.n	8001eec <main+0x294>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 8001ec6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001eca:	f103 021d 	add.w	r2, r3, #29
 8001ece:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001ed2:	492a      	ldr	r1, [pc, #168]	@ (8001f7c <main+0x324>)
 8001ed4:	5c8a      	ldrb	r2, [r1, r2]
 8001ed6:	3348      	adds	r3, #72	@ 0x48
 8001ed8:	f107 0108 	add.w	r1, r7, #8
 8001edc:	440b      	add	r3, r1
 8001ede:	f803 2c2c 	strb.w	r2, [r3, #-44]
				 for(uint8_t i=0;i<4;i++)
 8001ee2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8001eec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d9e8      	bls.n	8001ec6 <main+0x26e>
					// HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
				 }
				 Sustainer.accx=f2u8_accx.fVal;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa4 <main+0x34c>)
 8001ef8:	61d3      	str	r3, [r2, #28]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8001f00:	e012      	b.n	8001f28 <main+0x2d0>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 8001f02:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f06:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001f0a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f0e:	491b      	ldr	r1, [pc, #108]	@ (8001f7c <main+0x324>)
 8001f10:	5c8a      	ldrb	r2, [r1, r2]
 8001f12:	3348      	adds	r3, #72	@ 0x48
 8001f14:	f107 0108 	add.w	r1, r7, #8
 8001f18:	440b      	add	r3, r1
 8001f1a:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8001f1e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f22:	3301      	adds	r3, #1
 8001f24:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8001f28:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d9e8      	bls.n	8001f02 <main+0x2aa>
					 //HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
				 }
				 Sustainer.accy=f2u8_accy.fVal;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <main+0x34c>)
 8001f34:	6213      	str	r3, [r2, #32]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f3c:	e012      	b.n	8001f64 <main+0x30c>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 8001f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f42:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001f46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f4a:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <main+0x324>)
 8001f4c:	5c8a      	ldrb	r2, [r1, r2]
 8001f4e:	3348      	adds	r3, #72	@ 0x48
 8001f50:	f107 0108 	add.w	r1, r7, #8
 8001f54:	440b      	add	r3, r1
 8001f56:	f803 2c34 	strb.w	r2, [r3, #-52]
			      for(uint8_t i=0;i<4;i++)
 8001f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d9e8      	bls.n	8001f3e <main+0x2e6>
			    	//  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
				 }
			      Sustainer.accz=f2u8_accz.fVal;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <main+0x34c>)
 8001f70:	6253      	str	r3, [r2, #36]	@ 0x24

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001f78:	e02b      	b.n	8001fd2 <main+0x37a>
 8001f7a:	bf00      	nop
 8001f7c:	20000628 	.word	0x20000628
 8001f80:	200004e0 	.word	0x200004e0
 8001f84:	200006c0 	.word	0x200006c0
 8001f88:	20000524 	.word	0x20000524
 8001f8c:	20000795 	.word	0x20000795
 8001f90:	2000049c 	.word	0x2000049c
 8001f94:	200008c0 	.word	0x200008c0
 8001f98:	2000031c 	.word	0x2000031c
 8001f9c:	20000410 	.word	0x20000410
 8001fa0:	200008b0 	.word	0x200008b0
 8001fa4:	20000838 	.word	0x20000838
 8001fa8:	200006c4 	.word	0x200006c4
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 8001fac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001fb0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001fb4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001fb8:	4986      	ldr	r1, [pc, #536]	@ (80021d4 <main+0x57c>)
 8001fba:	5c8a      	ldrb	r2, [r1, r2]
 8001fbc:	3348      	adds	r3, #72	@ 0x48
 8001fbe:	f107 0108 	add.w	r1, r7, #8
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for(uint8_t i=0;i<4;i++)
 8001fc8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001fd2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d9e8      	bls.n	8001fac <main+0x354>
				 }
				  Sustainer.normal=f2u8_roll.fVal;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4a7e      	ldr	r2, [pc, #504]	@ (80021d8 <main+0x580>)
 8001fde:	6293      	str	r3, [r2, #40]	@ 0x28

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001fe6:	e012      	b.n	800200e <main+0x3b6>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8001fe8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001fec:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8001ff0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001ff4:	4977      	ldr	r1, [pc, #476]	@ (80021d4 <main+0x57c>)
 8001ff6:	5c8a      	ldrb	r2, [r1, r2]
 8001ff8:	3348      	adds	r3, #72	@ 0x48
 8001ffa:	f107 0108 	add.w	r1, r7, #8
 8001ffe:	440b      	add	r3, r1
 8002000:	f803 2c3c 	strb.w	r2, [r3, #-60]
				  for(uint8_t i=0;i<4;i++)
 8002004:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002008:	3301      	adds	r3, #1
 800200a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800200e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002012:	2b03      	cmp	r3, #3
 8002014:	d9e8      	bls.n	8001fe8 <main+0x390>
				 }
				  Sustainer.pitch=f2u8_pitch.fVal;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4a6f      	ldr	r2, [pc, #444]	@ (80021d8 <main+0x580>)
 800201a:	62d3      	str	r3, [r2, #44]	@ 0x2c

				  Sustainer.battery=lora_rx_buffer[49];
 800201c:	4b6d      	ldr	r3, [pc, #436]	@ (80021d4 <main+0x57c>)
 800201e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <main+0x580>)
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				  Sustainer.mod=lora_rx_buffer[73];
 8002028:	4b6a      	ldr	r3, [pc, #424]	@ (80021d4 <main+0x57c>)
 800202a:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800202e:	4b6a      	ldr	r3, [pc, #424]	@ (80021d8 <main+0x580>)
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				  Sustainer.communication=lora_rx_buffer[51];
 8002034:	4b67      	ldr	r3, [pc, #412]	@ (80021d4 <main+0x57c>)
 8002036:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800203a:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <main+0x580>)
 800203c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8002040:	4b64      	ldr	r3, [pc, #400]	@ (80021d4 <main+0x57c>)
 8002042:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8002046:	4b65      	ldr	r3, [pc, #404]	@ (80021dc <main+0x584>)
 8002048:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 800204a:	4b62      	ldr	r3, [pc, #392]	@ (80021d4 <main+0x57c>)
 800204c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8002050:	4b63      	ldr	r3, [pc, #396]	@ (80021e0 <main+0x588>)
 8002052:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800205a:	e012      	b.n	8002082 <main+0x42a>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 800205c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002060:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8002064:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002068:	495a      	ldr	r1, [pc, #360]	@ (80021d4 <main+0x57c>)
 800206a:	5c8a      	ldrb	r2, [r1, r2]
 800206c:	3348      	adds	r3, #72	@ 0x48
 800206e:	f107 0108 	add.w	r1, r7, #8
 8002072:	440b      	add	r3, r1
 8002074:	f803 2c40 	strb.w	r2, [r3, #-64]
					for(uint8_t i=0;i<4;i++)
 8002078:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800207c:	3301      	adds	r3, #1
 800207e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8002082:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9e8      	bls.n	800205c <main+0x404>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4a55      	ldr	r2, [pc, #340]	@ (80021e4 <main+0x58c>)
 800208e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002096:	e012      	b.n	80020be <main+0x466>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 8002098:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800209c:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 80020a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80020a4:	494b      	ldr	r1, [pc, #300]	@ (80021d4 <main+0x57c>)
 80020a6:	5c8a      	ldrb	r2, [r1, r2]
 80020a8:	3348      	adds	r3, #72	@ 0x48
 80020aa:	f107 0108 	add.w	r1, r7, #8
 80020ae:	440b      	add	r3, r1
 80020b0:	f803 2c44 	strb.w	r2, [r3, #-68]
					for(uint8_t i=0;i<4;i++)
 80020b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80020b8:	3301      	adds	r3, #1
 80020ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80020be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9e8      	bls.n	8002098 <main+0x440>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4a47      	ldr	r2, [pc, #284]	@ (80021e8 <main+0x590>)
 80020ca:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80020d2:	e012      	b.n	80020fa <main+0x4a2>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 80020d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80020d8:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80020dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80020e0:	493c      	ldr	r1, [pc, #240]	@ (80021d4 <main+0x57c>)
 80020e2:	5c8a      	ldrb	r2, [r1, r2]
 80020e4:	3348      	adds	r3, #72	@ 0x48
 80020e6:	f107 0108 	add.w	r1, r7, #8
 80020ea:	440b      	add	r3, r1
 80020ec:	f803 2c48 	strb.w	r2, [r3, #-72]
					for(uint8_t i=0;i<4;i++)
 80020f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80020fa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d9e8      	bls.n	80020d4 <main+0x47c>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a39      	ldr	r2, [pc, #228]	@ (80021ec <main+0x594>)
 8002106:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 8002108:	4b32      	ldr	r3, [pc, #200]	@ (80021d4 <main+0x57c>)
 800210a:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <main+0x598>)
 8002110:	701a      	strb	r2, [r3, #0]
	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=lora_rx_buffer[66];
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <main+0x57c>)
 8002114:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8002118:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <main+0x59c>)
 800211a:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <main+0x57c>)
 800211e:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8002122:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <main+0x5a0>)
 8002124:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 8002126:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <main+0x57c>)
 8002128:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800212c:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <main+0x5a4>)
 800212e:	701a      	strb	r2, [r3, #0]

					  f2u8_altitude.array[0] = lora_rx_buffer[69];
 8002130:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <main+0x57c>)
 8002132:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002136:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
					  f2u8_altitude.array[1] = lora_rx_buffer[70];
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <main+0x57c>)
 800213c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002140:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
					  f2u8_altitude.array[2] = lora_rx_buffer[71];
 8002144:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <main+0x57c>)
 8002146:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800214a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
					  f2u8_altitude.array[3] = lora_rx_buffer[72];
 800214e:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <main+0x57c>)
 8002150:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002154:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					  Sustainer.maxAltitude=f2u8_altitude.fVal;
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	4a1f      	ldr	r2, [pc, #124]	@ (80021d8 <main+0x580>)
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30



}

	   if(RS_rx_buffer[3]==1 && RS_rx_buffer[50]==0x32){
 800215e:	4b28      	ldr	r3, [pc, #160]	@ (8002200 <main+0x5a8>)
 8002160:	78db      	ldrb	r3, [r3, #3]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d152      	bne.n	800220c <main+0x5b4>
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <main+0x5a8>)
 8002168:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800216c:	2b32      	cmp	r3, #50	@ 0x32
 800216e:	d14d      	bne.n	800220c <main+0x5b4>

		  Booster.satsinview=RS_rx_buffer[4];
 8002170:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <main+0x5a8>)
 8002172:	791a      	ldrb	r2, [r3, #4]
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <main+0x5ac>)
 8002176:	701a      	strb	r2, [r3, #0]

    	  Booster_union_converter();
 8002178:	f001 fa0e 	bl	8003598 <Booster_union_converter>
		  Booster.battery=RS_rx_buffer[49];
 800217c:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <main+0x5a8>)
 800217e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <main+0x5ac>)
 8002184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Booster.mod=RS_rx_buffer[73];
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <main+0x5a8>)
 800218a:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <main+0x5ac>)
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Booster.communication=RS_rx_buffer[51];
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <main+0x5a8>)
 8002196:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <main+0x5ac>)
 800219c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

		  f2u8_booster.array[0] = RS_rx_buffer[69];
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <main+0x5a8>)
 80021a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <main+0x5b0>)
 80021a8:	701a      	strb	r2, [r3, #0]
		  f2u8_booster.array[1] = RS_rx_buffer[70];
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <main+0x5a8>)
 80021ac:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <main+0x5b0>)
 80021b2:	705a      	strb	r2, [r3, #1]
		  f2u8_booster.array[2] = RS_rx_buffer[71];
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <main+0x5a8>)
 80021b6:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <main+0x5b0>)
 80021bc:	709a      	strb	r2, [r3, #2]
		  f2u8_booster.array[3] = RS_rx_buffer[72];
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <main+0x5a8>)
 80021c0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80021c4:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <main+0x5b0>)
 80021c6:	70da      	strb	r2, [r3, #3]
		  Booster.maxAltitude = f2u8_booster.fVal;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <main+0x5b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <main+0x5ac>)
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	e03d      	b.n	800224e <main+0x5f6>
 80021d2:	bf00      	nop
 80021d4:	20000628 	.word	0x20000628
 80021d8:	20000838 	.word	0x20000838
 80021dc:	200007a8 	.word	0x200007a8
 80021e0:	200007a9 	.word	0x200007a9
 80021e4:	200007b0 	.word	0x200007b0
 80021e8:	200007b8 	.word	0x200007b8
 80021ec:	200007b4 	.word	0x200007b4
 80021f0:	200007ac 	.word	0x200007ac
 80021f4:	200007a0 	.word	0x200007a0
 80021f8:	200007ab 	.word	0x200007ab
 80021fc:	200007aa 	.word	0x200007aa
 8002200:	20000674 	.word	0x20000674
 8002204:	20000800 	.word	0x20000800
 8002208:	20000970 	.word	0x20000970


	  	  }

	     else if(RS_rx_buffer[3]==3 && RS_rx_buffer[50]==0x33)
 800220c:	4b85      	ldr	r3, [pc, #532]	@ (8002424 <main+0x7cc>)
 800220e:	78db      	ldrb	r3, [r3, #3]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d11c      	bne.n	800224e <main+0x5f6>
 8002214:	4b83      	ldr	r3, [pc, #524]	@ (8002424 <main+0x7cc>)
 8002216:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800221a:	2b33      	cmp	r3, #51	@ 0x33
 800221c:	d117      	bne.n	800224e <main+0x5f6>
		  {

		  Payload.satsinview=RS_rx_buffer[4];
 800221e:	4b81      	ldr	r3, [pc, #516]	@ (8002424 <main+0x7cc>)
 8002220:	791a      	ldrb	r2, [r3, #4]
 8002222:	4b81      	ldr	r3, [pc, #516]	@ (8002428 <main+0x7d0>)
 8002224:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8002226:	f000 fe6d 	bl	8002f04 <Payload_union_converter>

		  Payload.battery=RS_rx_buffer[49];
 800222a:	4b7e      	ldr	r3, [pc, #504]	@ (8002424 <main+0x7cc>)
 800222c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002230:	4b7d      	ldr	r3, [pc, #500]	@ (8002428 <main+0x7d0>)
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=RS_rx_buffer[73];
 8002236:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <main+0x7cc>)
 8002238:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800223c:	4b7a      	ldr	r3, [pc, #488]	@ (8002428 <main+0x7d0>)
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=RS_rx_buffer[51];
 8002242:	4b78      	ldr	r3, [pc, #480]	@ (8002424 <main+0x7cc>)
 8002244:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8002248:	4b77      	ldr	r3, [pc, #476]	@ (8002428 <main+0x7d0>)
 800224a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		  }




	  s_distance=distance_in_m(gps.latitude,gps.longitude,sustgpslatitude,sustgpslongitude);
 800224e:	4b77      	ldr	r3, [pc, #476]	@ (800242c <main+0x7d4>)
 8002250:	ed93 8b00 	vldr	d8, [r3]
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <main+0x7d4>)
 8002256:	ed93 9b02 	vldr	d9, [r3, #8]
 800225a:	4b75      	ldr	r3, [pc, #468]	@ (8002430 <main+0x7d8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f992 	bl	8000588 <__aeabi_f2d>
 8002264:	4604      	mov	r4, r0
 8002266:	460d      	mov	r5, r1
 8002268:	4b72      	ldr	r3, [pc, #456]	@ (8002434 <main+0x7dc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f98b 	bl	8000588 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ec43 2b13 	vmov	d3, r2, r3
 800227a:	ec45 4b12 	vmov	d2, r4, r5
 800227e:	eeb0 1a49 	vmov.f32	s2, s18
 8002282:	eef0 1a69 	vmov.f32	s3, s19
 8002286:	eeb0 0a48 	vmov.f32	s0, s16
 800228a:	eef0 0a68 	vmov.f32	s1, s17
 800228e:	f000 fcc7 	bl	8002c20 <distance_in_m>
 8002292:	ec53 2b10 	vmov	r2, r3, d0
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fcc5 	bl	8000c28 <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a65      	ldr	r2, [pc, #404]	@ (8002438 <main+0x7e0>)
 80022a2:	6013      	str	r3, [r2, #0]
	  bs_distance=distance_in_m(gps.latitude,gps.longitude,boostgpslatitude,boostgpslongitude);
 80022a4:	4b61      	ldr	r3, [pc, #388]	@ (800242c <main+0x7d4>)
 80022a6:	ed93 8b00 	vldr	d8, [r3]
 80022aa:	4b60      	ldr	r3, [pc, #384]	@ (800242c <main+0x7d4>)
 80022ac:	ed93 9b02 	vldr	d9, [r3, #8]
 80022b0:	4b62      	ldr	r3, [pc, #392]	@ (800243c <main+0x7e4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f967 	bl	8000588 <__aeabi_f2d>
 80022ba:	4604      	mov	r4, r0
 80022bc:	460d      	mov	r5, r1
 80022be:	4b60      	ldr	r3, [pc, #384]	@ (8002440 <main+0x7e8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f960 	bl	8000588 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	ec43 2b13 	vmov	d3, r2, r3
 80022d0:	ec45 4b12 	vmov	d2, r4, r5
 80022d4:	eeb0 1a49 	vmov.f32	s2, s18
 80022d8:	eef0 1a69 	vmov.f32	s3, s19
 80022dc:	eeb0 0a48 	vmov.f32	s0, s16
 80022e0:	eef0 0a68 	vmov.f32	s1, s17
 80022e4:	f000 fc9c 	bl	8002c20 <distance_in_m>
 80022e8:	ec53 2b10 	vmov	r2, r3, d0
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fc9a 	bl	8000c28 <__aeabi_d2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a53      	ldr	r2, [pc, #332]	@ (8002444 <main+0x7ec>)
 80022f8:	6013      	str	r3, [r2, #0]

	  // EKRANA YAZMA



    	sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 80022fa:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <main+0x7f0>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002304:	edc7 7a01 	vstr	s15, [r7, #4]
 8002308:	793b      	ldrb	r3, [r7, #4]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	494f      	ldr	r1, [pc, #316]	@ (800244c <main+0x7f4>)
 8002310:	484f      	ldr	r0, [pc, #316]	@ (8002450 <main+0x7f8>)
 8002312:	f00d fdb5 	bl	800fe80 <siprintf>
    	NEXTION_SendString("t54", st_bat);
 8002316:	494e      	ldr	r1, [pc, #312]	@ (8002450 <main+0x7f8>)
 8002318:	484e      	ldr	r0, [pc, #312]	@ (8002454 <main+0x7fc>)
 800231a:	f000 fda9 	bl	8002e70 <NEXTION_SendString>

        Enum_State_bs();
 800231e:	f000 ff0b 	bl	8003138 <Enum_State_bs>
        Enum_State_s();
 8002322:	f001 f831 	bl	8003388 <Enum_State_s>
     //   NEXTION_SendString("t58", &EGU_MOTOR_ATESLEME_TALEP_IN);
    	sprintf(seconds,"%2d",gps.seconds);
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <main+0x7d4>)
 8002328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800232c:	461a      	mov	r2, r3
 800232e:	4947      	ldr	r1, [pc, #284]	@ (800244c <main+0x7f4>)
 8002330:	4849      	ldr	r0, [pc, #292]	@ (8002458 <main+0x800>)
 8002332:	f00d fda5 	bl	800fe80 <siprintf>
    	sprintf(minutes,"%2d",gps.minutes);
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <main+0x7d4>)
 8002338:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800233c:	461a      	mov	r2, r3
 800233e:	4943      	ldr	r1, [pc, #268]	@ (800244c <main+0x7f4>)
 8002340:	4846      	ldr	r0, [pc, #280]	@ (800245c <main+0x804>)
 8002342:	f00d fd9d 	bl	800fe80 <siprintf>
    	sprintf(hours,"%2d",gps.hours);
 8002346:	4b39      	ldr	r3, [pc, #228]	@ (800242c <main+0x7d4>)
 8002348:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800234c:	461a      	mov	r2, r3
 800234e:	493f      	ldr	r1, [pc, #252]	@ (800244c <main+0x7f4>)
 8002350:	4843      	ldr	r0, [pc, #268]	@ (8002460 <main+0x808>)
 8002352:	f00d fd95 	bl	800fe80 <siprintf>


        NEXTION_SendString("t4", hours);
 8002356:	4942      	ldr	r1, [pc, #264]	@ (8002460 <main+0x808>)
 8002358:	4842      	ldr	r0, [pc, #264]	@ (8002464 <main+0x80c>)
 800235a:	f000 fd89 	bl	8002e70 <NEXTION_SendString>
        NEXTION_SendString("t6", minutes);
 800235e:	493f      	ldr	r1, [pc, #252]	@ (800245c <main+0x804>)
 8002360:	4841      	ldr	r0, [pc, #260]	@ (8002468 <main+0x810>)
 8002362:	f000 fd85 	bl	8002e70 <NEXTION_SendString>
        NEXTION_SendString("t8", seconds);
 8002366:	493c      	ldr	r1, [pc, #240]	@ (8002458 <main+0x800>)
 8002368:	4840      	ldr	r0, [pc, #256]	@ (800246c <main+0x814>)
 800236a:	f000 fd81 	bl	8002e70 <NEXTION_SendString>

        //megü ekran


        if(EGU_MOTOR_ATESLEME_TALEP_IN==1){
 800236e:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <main+0x818>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d109      	bne.n	800238a <main+0x732>
        	e_engine_request[0]='Y';
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <main+0x81c>)
 8002378:	2259      	movs	r2, #89	@ 0x59
 800237a:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='E';
 800237c:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <main+0x81c>)
 800237e:	2245      	movs	r2, #69	@ 0x45
 8002380:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='S';
 8002382:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <main+0x81c>)
 8002384:	2253      	movs	r2, #83	@ 0x53
 8002386:	709a      	strb	r2, [r3, #2]
 8002388:	e008      	b.n	800239c <main+0x744>
        }
        else{
        	e_engine_request[0]='N';
 800238a:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <main+0x81c>)
 800238c:	224e      	movs	r2, #78	@ 0x4e
 800238e:	701a      	strb	r2, [r3, #0]
        	e_engine_request[1]='O';
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <main+0x81c>)
 8002392:	224f      	movs	r2, #79	@ 0x4f
 8002394:	705a      	strb	r2, [r3, #1]
        	e_engine_request[2]='\0';
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <main+0x81c>)
 8002398:	2200      	movs	r2, #0
 800239a:	709a      	strb	r2, [r3, #2]
        }

        if(EGU_BATTERY>0)
 800239c:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <main+0x820>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	dd27      	ble.n	80023fc <main+0x7a4>
        {
        	if(EGU_FITIL==0){
 80023ac:	4b33      	ldr	r3, [pc, #204]	@ (800247c <main+0x824>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <main+0x77c>
            	e_fitil[0]='R';
 80023b4:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <main+0x828>)
 80023b6:	2252      	movs	r2, #82	@ 0x52
 80023b8:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='E';
 80023ba:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <main+0x828>)
 80023bc:	2245      	movs	r2, #69	@ 0x45
 80023be:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='A';
 80023c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <main+0x828>)
 80023c2:	2241      	movs	r2, #65	@ 0x41
 80023c4:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='D';
 80023c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002480 <main+0x828>)
 80023c8:	2244      	movs	r2, #68	@ 0x44
 80023ca:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='Y';
 80023cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002480 <main+0x828>)
 80023ce:	2259      	movs	r2, #89	@ 0x59
 80023d0:	711a      	strb	r2, [r3, #4]
 80023d2:	e022      	b.n	800241a <main+0x7c2>

        	}
        	else if(EGU_FITIL==1){
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <main+0x824>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d11e      	bne.n	800241a <main+0x7c2>
            	e_fitil[0]='F';
 80023dc:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <main+0x828>)
 80023de:	2246      	movs	r2, #70	@ 0x46
 80023e0:	701a      	strb	r2, [r3, #0]
            	e_fitil[1]='I';
 80023e2:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <main+0x828>)
 80023e4:	2249      	movs	r2, #73	@ 0x49
 80023e6:	705a      	strb	r2, [r3, #1]
            	e_fitil[2]='R';
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <main+0x828>)
 80023ea:	2252      	movs	r2, #82	@ 0x52
 80023ec:	709a      	strb	r2, [r3, #2]
            	e_fitil[3]='E';
 80023ee:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <main+0x828>)
 80023f0:	2245      	movs	r2, #69	@ 0x45
 80023f2:	70da      	strb	r2, [r3, #3]
            	e_fitil[4]='D';
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <main+0x828>)
 80023f6:	2244      	movs	r2, #68	@ 0x44
 80023f8:	711a      	strb	r2, [r3, #4]
 80023fa:	e00e      	b.n	800241a <main+0x7c2>
        	}

        }
        else {

        	e_fitil[0]='O';
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <main+0x828>)
 80023fe:	224f      	movs	r2, #79	@ 0x4f
 8002400:	701a      	strb	r2, [r3, #0]
        	e_fitil[1]='F';
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <main+0x828>)
 8002404:	2246      	movs	r2, #70	@ 0x46
 8002406:	705a      	strb	r2, [r3, #1]
        	e_fitil[2]='F';
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <main+0x828>)
 800240a:	2246      	movs	r2, #70	@ 0x46
 800240c:	709a      	strb	r2, [r3, #2]
        	e_fitil[3]='\0';
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <main+0x828>)
 8002410:	2200      	movs	r2, #0
 8002412:	70da      	strb	r2, [r3, #3]
        	e_fitil[4]='\0';
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <main+0x828>)
 8002416:	2200      	movs	r2, #0
 8002418:	711a      	strb	r2, [r3, #4]

        }



    	for(uint8_t i=4;i<75;i++)
 800241a:	2304      	movs	r3, #4
 800241c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8002420:	e044      	b.n	80024ac <main+0x854>
 8002422:	bf00      	nop
 8002424:	20000674 	.word	0x20000674
 8002428:	200007c8 	.word	0x200007c8
 800242c:	200008c0 	.word	0x200008c0
 8002430:	20000798 	.word	0x20000798
 8002434:	2000079c 	.word	0x2000079c
 8002438:	200007a4 	.word	0x200007a4
 800243c:	200007bc 	.word	0x200007bc
 8002440:	200007c0 	.word	0x200007c0
 8002444:	200007c4 	.word	0x200007c4
 8002448:	200008a4 	.word	0x200008a4
 800244c:	08014da8 	.word	0x08014da8
 8002450:	200008ac 	.word	0x200008ac
 8002454:	08014dac 	.word	0x08014dac
 8002458:	20000888 	.word	0x20000888
 800245c:	2000088c 	.word	0x2000088c
 8002460:	20000890 	.word	0x20000890
 8002464:	08014db0 	.word	0x08014db0
 8002468:	08014db4 	.word	0x08014db4
 800246c:	08014db8 	.word	0x08014db8
 8002470:	200007aa 	.word	0x200007aa
 8002474:	2000089c 	.word	0x2000089c
 8002478:	200007b0 	.word	0x200007b0
 800247c:	200007ac 	.word	0x200007ac
 8002480:	20000894 	.word	0x20000894
    	{
    		crc+=HYI_BUFFER[i];
 8002484:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002488:	4a41      	ldr	r2, [pc, #260]	@ (8002590 <main+0x938>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	461a      	mov	r2, r3
 800248e:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <main+0x93c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a3f      	ldr	r2, [pc, #252]	@ (8002594 <main+0x93c>)
 8002496:	6013      	str	r3, [r2, #0]
    		chs=crc % 256;
 8002498:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <main+0x93c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <main+0x940>)
 80024a0:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i=4;i<75;i++)
 80024a2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80024a6:	3301      	adds	r3, #1
 80024a8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80024ac:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80024b0:	2b4a      	cmp	r3, #74	@ 0x4a
 80024b2:	d9e7      	bls.n	8002484 <main+0x82c>


    	}
         HYI_BUFFER[75]= chs; // CRC
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <main+0x940>)
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <main+0x938>)
 80024ba:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
     	 CDC_Transmit_FS(HYI_BUFFER,HYI_BUFFER_SIZE);
 80024be:	214e      	movs	r1, #78	@ 0x4e
 80024c0:	4833      	ldr	r0, [pc, #204]	@ (8002590 <main+0x938>)
 80024c2:	f00b fa13 	bl	800d8ec <CDC_Transmit_FS>
     	 crc=0;
 80024c6:	4b33      	ldr	r3, [pc, #204]	@ (8002594 <main+0x93c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
          // CDC_Transmit_FS("LLLL",4);



if(adc_flag ==1)
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <main+0x944>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f47f ac05 	bne.w	8001ce0 <main+0x88>
	  {
		  if(adc > 2476) adc = 2234;
 80024d6:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <main+0x948>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80025a4 <main+0x94c>
 80024e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	dd02      	ble.n	80024f0 <main+0x898>
 80024ea:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <main+0x948>)
 80024ec:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <main+0x950>)
 80024ee:	601a      	str	r2, [r3, #0]
		  if(adc < 1755) adc = 1755;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <main+0x948>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80025ac <main+0x954>
 80024fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d502      	bpl.n	800250a <main+0x8b2>
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <main+0x948>)
 8002506:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <main+0x958>)
 8002508:	601a      	str	r2, [r3, #0]
		  // 6V = 1755 adc val 1,41V
		  // 8.4V = 2476 adc val 1,99V 0,58V
		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 800250a:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <main+0x948>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80025b4 <main+0x95c>
 8002514:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002518:	ee16 0a90 	vmov	r0, s13
 800251c:	f7fe f834 	bl	8000588 <__aeabi_f2d>
 8002520:	a315      	add	r3, pc, #84	@ (adr r3, 8002578 <main+0x920>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f887 	bl	8000638 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	a313      	add	r3, pc, #76	@ (adr r3, 8002580 <main+0x928>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fd fec6 	bl	80002c8 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	a310      	add	r3, pc, #64	@ (adr r3, 8002588 <main+0x930>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f99f 	bl	800088c <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb67 	bl	8000c28 <__aeabi_d2f>
 800255a:	ee07 0a10 	vmov	s14, r0
 800255e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80025b8 <main+0x960>
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <main+0x964>)
 8002568:	edc3 7a00 	vstr	s15, [r3]
		 // adc_pil_val = (adc-1755)/(2746-1755)*100;
		  adc_flag=0;
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <main+0x944>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
  {
 8002572:	f7ff bbb5 	b.w	8001ce0 <main+0x88>
 8002576:	bf00      	nop
 8002578:	66666666 	.word	0x66666666
 800257c:	400a6666 	.word	0x400a6666
 8002580:	28f5c28f 	.word	0x28f5c28f
 8002584:	3ff68f5c 	.word	0x3ff68f5c
 8002588:	28f5c290 	.word	0x28f5c290
 800258c:	3fe28f5c 	.word	0x3fe28f5c
 8002590:	200006c4 	.word	0x200006c4
 8002594:	200008b4 	.word	0x200008b4
 8002598:	200008b8 	.word	0x200008b8
 800259c:	200008a8 	.word	0x200008a8
 80025a0:	200008a0 	.word	0x200008a0
 80025a4:	451ac000 	.word	0x451ac000
 80025a8:	450ba000 	.word	0x450ba000
 80025ac:	44db6000 	.word	0x44db6000
 80025b0:	44db6000 	.word	0x44db6000
 80025b4:	457ff000 	.word	0x457ff000
 80025b8:	42c80000 	.word	0x42c80000
 80025bc:	200008a4 	.word	0x200008a4

080025c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b094      	sub	sp, #80	@ 0x50
 80025c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	2234      	movs	r2, #52	@ 0x34
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f00d fcb9 	bl	800ff46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <SystemClock_Config+0xd0>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <SystemClock_Config+0xd0>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <SystemClock_Config+0xd0>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002600:	2300      	movs	r3, #0
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <SystemClock_Config+0xd4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <SystemClock_Config+0xd4>)
 800260a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <SystemClock_Config+0xd4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800261c:	2301      	movs	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002626:	2302      	movs	r3, #2
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002630:	2304      	movs	r3, #4
 8002632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002634:	23a8      	movs	r3, #168	@ 0xa8
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002638:	2302      	movs	r3, #2
 800263a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800263c:	2307      	movs	r3, #7
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002640:	2302      	movs	r3, #2
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fb59 	bl	8007d00 <HAL_RCC_OscConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002654:	f001 f8b2 	bl	80037bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002658:	230f      	movs	r3, #15
 800265a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800265c:	2303      	movs	r3, #3
 800265e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800266a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800266e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	2105      	movs	r1, #5
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fcce 	bl	8007018 <HAL_RCC_ClockConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002682:	f001 f89b 	bl	80037bc <Error_Handler>
  }
}
 8002686:	bf00      	nop
 8002688:	3750      	adds	r7, #80	@ 0x50
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000

08002698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800269e:	463b      	mov	r3, r7
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026aa:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026ac:	4a21      	ldr	r2, [pc, #132]	@ (8002734 <MX_ADC1_Init+0x9c>)
 80026ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80026be:	4b1c      	ldr	r3, [pc, #112]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026ca:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026da:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <MX_ADC1_Init+0xa0>)
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026f8:	480d      	ldr	r0, [pc, #52]	@ (8002730 <MX_ADC1_Init+0x98>)
 80026fa:	f001 fd31 	bl	8004160 <HAL_ADC_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002704:	f001 f85a 	bl	80037bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002708:	230c      	movs	r3, #12
 800270a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002714:	463b      	mov	r3, r7
 8002716:	4619      	mov	r1, r3
 8002718:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_ADC1_Init+0x98>)
 800271a:	f001 ff75 	bl	8004608 <HAL_ADC_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002724:	f001 f84a 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000031c 	.word	0x2000031c
 8002734:	40012000 	.word	0x40012000
 8002738:	0f000001 	.word	0x0f000001

0800273c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <MX_I2C1_Init+0x50>)
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <MX_I2C1_Init+0x54>)
 8002744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <MX_I2C1_Init+0x50>)
 8002748:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <MX_I2C1_Init+0x58>)
 800274a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <MX_I2C1_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <MX_I2C1_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <MX_I2C1_Init+0x50>)
 800275a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800275e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <MX_I2C1_Init+0x50>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MX_I2C1_Init+0x50>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276c:	4b07      	ldr	r3, [pc, #28]	@ (800278c <MX_I2C1_Init+0x50>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <MX_I2C1_Init+0x50>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002778:	4804      	ldr	r0, [pc, #16]	@ (800278c <MX_I2C1_Init+0x50>)
 800277a:	f003 f83f 	bl	80057fc <HAL_I2C_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002784:	f001 f81a 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000364 	.word	0x20000364
 8002790:	40005400 	.word	0x40005400
 8002794:	000186a0 	.word	0x000186a0

08002798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800279c:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <MX_SPI1_Init+0x64>)
 800279e:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <MX_SPI1_Init+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027cc:	2220      	movs	r2, #32
 80027ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027e4:	220a      	movs	r2, #10
 80027e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <MX_SPI1_Init+0x64>)
 80027ea:	f005 fd27 	bl	800823c <HAL_SPI_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027f4:	f000 ffe2 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200003b8 	.word	0x200003b8
 8002800:	40013000 	.word	0x40013000

08002804 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <MX_TIM11_Init+0x40>)
 800280a:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <MX_TIM11_Init+0x44>)
 800280c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 800280e:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <MX_TIM11_Init+0x40>)
 8002810:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8002814:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <MX_TIM11_Init+0x40>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15000-1;
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <MX_TIM11_Init+0x40>)
 800281e:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002822:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <MX_TIM11_Init+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_TIM11_Init+0x40>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	@ (8002844 <MX_TIM11_Init+0x40>)
 8002832:	f005 fd8c 	bl	800834e <HAL_TIM_Base_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800283c:	f000 ffbe 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000410 	.word	0x20000410
 8002848:	40014800 	.word	0x40014800

0800284c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <MX_UART4_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002858:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800285c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <MX_UART4_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <MX_UART4_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002884:	f006 f806 	bl	8008894 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800288e:	f000 ff95 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000458 	.word	0x20000458
 800289c:	40004c00 	.word	0x40004c00

080028a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <MX_USART2_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	@ (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d8:	f005 ffdc 	bl	8008894 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 ff6b 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000049c 	.word	0x2000049c
 80028f0:	40004400 	.word	0x40004400

080028f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	@ (8002944 <MX_USART3_UART_Init+0x50>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 8002900:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <MX_USART3_UART_Init+0x4c>)
 800292c:	f005 ffb2 	bl	8008894 <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002936:	f000 ff41 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200004e0 	.word	0x200004e0
 8002944:	40004800 	.word	0x40004800

08002948 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <MX_USART6_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	@ (8002994 <MX_USART6_UART_Init+0x4c>)
 8002980:	f005 ff88 	bl	8008894 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f000 ff17 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000524 	.word	0x20000524
 8002998:	40011400 	.word	0x40011400

0800299c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <MX_DMA_Init+0x68>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	200c      	movs	r0, #12
 80029e0:	f002 f925 	bl	8004c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80029e4:	200c      	movs	r0, #12
 80029e6:	f002 f93e 	bl	8004c66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2039      	movs	r0, #57	@ 0x39
 80029f0:	f002 f91d 	bl	8004c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80029f4:	2039      	movs	r0, #57	@ 0x39
 80029f6:	f002 f936 	bl	8004c66 <HAL_NVIC_EnableIRQ>

}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a4b      	ldr	r2, [pc, #300]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b45      	ldr	r3, [pc, #276]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a44      	ldr	r2, [pc, #272]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a36      	ldr	r2, [pc, #216]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <MX_GPIO_Init+0x14c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f640 4112 	movw	r1, #3090	@ 0xc12
 8002a94:	4830      	ldr	r0, [pc, #192]	@ (8002b58 <MX_GPIO_Init+0x150>)
 8002a96:	f002 fe97 	bl	80057c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f246 011f 	movw	r1, #24607	@ 0x601f
 8002aa0:	482e      	ldr	r0, [pc, #184]	@ (8002b5c <MX_GPIO_Init+0x154>)
 8002aa2:	f002 fe91 	bl	80057c8 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002aa6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4827      	ldr	r0, [pc, #156]	@ (8002b58 <MX_GPIO_Init+0x150>)
 8002abc:	f002 fcf0 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 8002ac0:	f640 4312 	movw	r3, #3090	@ 0xc12
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	481f      	ldr	r0, [pc, #124]	@ (8002b58 <MX_GPIO_Init+0x150>)
 8002ada:	f002 fce1 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8002ade:	f246 031f 	movw	r3, #24607	@ 0x601f
 8002ae2:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	4819      	ldr	r0, [pc, #100]	@ (8002b5c <MX_GPIO_Init+0x154>)
 8002af8:	f002 fcd2 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8002afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4812      	ldr	r0, [pc, #72]	@ (8002b5c <MX_GPIO_Init+0x154>)
 8002b12:	f002 fcc5 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <MX_GPIO_Init+0x150>)
 8002b2c:	f002 fcb8 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8002b30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4805      	ldr	r0, [pc, #20]	@ (8002b5c <MX_GPIO_Init+0x154>)
 8002b48:	f002 fcaa 	bl	80054a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	@ 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020400 	.word	0x40020400

08002b60 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4604      	mov	r4, r0
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	4603      	mov	r3, r0
 8002b74:	71bb      	strb	r3, [r7, #6]
 8002b76:	460b      	mov	r3, r1
 8002b78:	717b      	strb	r3, [r7, #5]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2104      	movs	r1, #4
 8002b82:	4824      	ldr	r0, [pc, #144]	@ (8002c14 <E220_CONFIG+0xb4>)
 8002b84:	f002 fe20 	bl	80057c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4821      	ldr	r0, [pc, #132]	@ (8002c14 <E220_CONFIG+0xb4>)
 8002b8e:	f002 fe1b 	bl	80057c8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002b92:	2032      	movs	r0, #50	@ 0x32
 8002b94:	f001 fac0 	bl	8004118 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8002ba0:	793b      	ldrb	r3, [r7, #4]
 8002ba2:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8002ba8:	79bb      	ldrb	r3, [r7, #6]
 8002baa:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8002bac:	2362      	movs	r3, #98	@ 0x62
 8002bae:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8002bb4:	797b      	ldrb	r3, [r7, #5]
 8002bb6:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <E220_CONFIG+0x64>
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d003      	beq.n	8002bca <E220_CONFIG+0x6a>
 8002bc2:	e005      	b.n	8002bd0 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	747b      	strb	r3, [r7, #17]
            break;
 8002bc8:	e004      	b.n	8002bd4 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8002bca:	2311      	movs	r3, #17
 8002bcc:	747b      	strb	r3, [r7, #17]
            break;
 8002bce:	e001      	b.n	8002bd4 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8002bd0:	2311      	movs	r3, #17
 8002bd2:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8002bdc:	f107 010c 	add.w	r1, r7, #12
 8002be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be4:	2208      	movs	r2, #8
 8002be6:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <E220_CONFIG+0xb8>)
 8002be8:	f005 fea1 	bl	800892e <HAL_UART_Transmit>

    HAL_Delay(25);
 8002bec:	2019      	movs	r0, #25
 8002bee:	f001 fa93 	bl	8004118 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4807      	ldr	r0, [pc, #28]	@ (8002c14 <E220_CONFIG+0xb4>)
 8002bf8:	f002 fde6 	bl	80057c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4804      	ldr	r0, [pc, #16]	@ (8002c14 <E220_CONFIG+0xb4>)
 8002c02:	f002 fde1 	bl	80057c8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8002c06:	2019      	movs	r0, #25
 8002c08:	f001 fa86 	bl	8004118 <HAL_Delay>
}
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	40020400 	.word	0x40020400
 8002c18:	200004e0 	.word	0x200004e0
 8002c1c:	00000000 	.word	0x00000000

08002c20 <distance_in_m>:
double distance_in_m(double lat1, double long1, double lat2, double long2) {
 8002c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c24:	ed2d 8b02 	vpush	{d8}
 8002c28:	b09a      	sub	sp, #104	@ 0x68
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	ed87 0b06 	vstr	d0, [r7, #24]
 8002c30:	ed87 1b04 	vstr	d1, [r7, #16]
 8002c34:	ed87 2b02 	vstr	d2, [r7, #8]
 8002c38:	ed87 3b00 	vstr	d3, [r7]


    double dlat1=lat1*(PI/180);
 8002c3c:	a184      	add	r1, pc, #528	@ (adr r1, 8002e50 <distance_in_m+0x230>)
 8002c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <distance_in_m+0x248>)
 8002c48:	f7fd fe20 	bl	800088c <__aeabi_ddiv>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c54:	f7fd fcf0 	bl	8000638 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double dlong1=long1*(PI/180);
 8002c60:	a17b      	add	r1, pc, #492	@ (adr r1, 8002e50 <distance_in_m+0x230>)
 8002c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e68 <distance_in_m+0x248>)
 8002c6c:	f7fd fe0e 	bl	800088c <__aeabi_ddiv>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c78:	f7fd fcde 	bl	8000638 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dlat2=lat2*(PI/180);
 8002c84:	a172      	add	r1, pc, #456	@ (adr r1, 8002e50 <distance_in_m+0x230>)
 8002c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <distance_in_m+0x248>)
 8002c90:	f7fd fdfc 	bl	800088c <__aeabi_ddiv>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9c:	f7fd fccc 	bl	8000638 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dlong2=long2*(PI/180);
 8002ca8:	a169      	add	r1, pc, #420	@ (adr r1, 8002e50 <distance_in_m+0x230>)
 8002caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e68 <distance_in_m+0x248>)
 8002cb4:	f7fd fdea 	bl	800088c <__aeabi_ddiv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cc0:	f7fd fcba 	bl	8000638 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double dLong=dlong1-dlong2;
 8002ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cd0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002cd4:	f7fd faf8 	bl	80002c8 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double dLat=dlat1-dlat2;
 8002ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002ce8:	f7fd faee 	bl	80002c8 <__aeabi_dsub>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    double aHarv= pow(sin(dLat/2.0),2.0)+cos(dlat1)*cos(dlat2)*pow(sin(dLong/2),2);
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002d00:	f7fd fdc4 	bl	800088c <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	ec43 2b17 	vmov	d7, r2, r3
 8002d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d10:	eef0 0a67 	vmov.f32	s1, s15
 8002d14:	f00f ff24 	bl	8012b60 <sin>
 8002d18:	eeb0 7a40 	vmov.f32	s14, s0
 8002d1c:	eef0 7a60 	vmov.f32	s15, s1
 8002d20:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8002e58 <distance_in_m+0x238>
 8002d24:	eeb0 0a47 	vmov.f32	s0, s14
 8002d28:	eef0 0a67 	vmov.f32	s1, s15
 8002d2c:	f00f fe26 	bl	801297c <pow>
 8002d30:	ec59 8b10 	vmov	r8, r9, d0
 8002d34:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8002d38:	f00f febe 	bl	8012ab8 <cos>
 8002d3c:	ec55 4b10 	vmov	r4, r5, d0
 8002d40:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002d44:	f00f feb8 	bl	8012ab8 <cos>
 8002d48:	ec53 2b10 	vmov	r2, r3, d0
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f7fd fc72 	bl	8000638 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002d68:	f7fd fd90 	bl	800088c <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	ec43 2b17 	vmov	d7, r2, r3
 8002d74:	eeb0 0a47 	vmov.f32	s0, s14
 8002d78:	eef0 0a67 	vmov.f32	s1, s15
 8002d7c:	f00f fef0 	bl	8012b60 <sin>
 8002d80:	eeb0 7a40 	vmov.f32	s14, s0
 8002d84:	eef0 7a60 	vmov.f32	s15, s1
 8002d88:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002e58 <distance_in_m+0x238>
 8002d8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d90:	eef0 0a67 	vmov.f32	s1, s15
 8002d94:	f00f fdf2 	bl	801297c <pow>
 8002d98:	ec53 2b10 	vmov	r2, r3, d0
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fc4a 	bl	8000638 <__aeabi_dmul>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4640      	mov	r0, r8
 8002daa:	4649      	mov	r1, r9
 8002dac:	f7fd fa8e 	bl	80002cc <__adddf3>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double cHarv=2*atan2(sqrt(aHarv),sqrt(1.0-aHarv));
 8002db8:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8002dbc:	f00f fe4e 	bl	8012a5c <sqrt>
 8002dc0:	eeb0 8a40 	vmov.f32	s16, s0
 8002dc4:	eef0 8a60 	vmov.f32	s17, s1
 8002dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dcc:	f04f 0000 	mov.w	r0, #0
 8002dd0:	4926      	ldr	r1, [pc, #152]	@ (8002e6c <distance_in_m+0x24c>)
 8002dd2:	f7fd fa79 	bl	80002c8 <__aeabi_dsub>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	ec43 2b17 	vmov	d7, r2, r3
 8002dde:	eeb0 0a47 	vmov.f32	s0, s14
 8002de2:	eef0 0a67 	vmov.f32	s1, s15
 8002de6:	f00f fe39 	bl	8012a5c <sqrt>
 8002dea:	eeb0 7a40 	vmov.f32	s14, s0
 8002dee:	eef0 7a60 	vmov.f32	s15, s1
 8002df2:	eeb0 1a47 	vmov.f32	s2, s14
 8002df6:	eef0 1a67 	vmov.f32	s3, s15
 8002dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8002dfe:	eef0 0a68 	vmov.f32	s1, s17
 8002e02:	f00f fdb9 	bl	8012978 <atan2>
 8002e06:	ec51 0b10 	vmov	r0, r1, d0
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	f7fd fa5d 	bl	80002cc <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double distance=radius_of_earth*cHarv;
 8002e1a:	a311      	add	r3, pc, #68	@ (adr r3, 8002e60 <distance_in_m+0x240>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e24:	f7fd fc08 	bl	8000638 <__aeabi_dmul>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return (distance);
 8002e30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e34:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002e38:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3c:	eef0 0a67 	vmov.f32	s1, s15
 8002e40:	3768      	adds	r7, #104	@ 0x68
 8002e42:	46bd      	mov	sp, r7
 8002e44:	ecbd 8b02 	vpop	{d8}
 8002e48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e4c:	f3af 8000 	nop.w
 8002e50:	54442d18 	.word	0x54442d18
 8002e54:	400921fb 	.word	0x400921fb
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	40000000 	.word	0x40000000
 8002e60:	03089a02 	.word	0x03089a02
 8002e64:	415854a6 	.word	0x415854a6
 8002e68:	40668000 	.word	0x40668000
 8002e6c:	3ff00000 	.word	0x3ff00000

08002e70 <NEXTION_SendString>:
    double angle_deg = angle_rad * 180.0 / PI;
    return angle_deg;
}

void NEXTION_SendString (char *ID, char *string)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b090      	sub	sp, #64	@ 0x40
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 8002e7a:	f107 0008 	add.w	r0, r7, #8
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	490b      	ldr	r1, [pc, #44]	@ (8002eb0 <NEXTION_SendString+0x40>)
 8002e84:	f00c fffc 	bl	800fe80 <siprintf>
 8002e88:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	f107 0108 	add.w	r1, r7, #8
 8002e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e96:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <NEXTION_SendString+0x44>)
 8002e98:	f005 fd49 	bl	800892e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 8002e9c:	2364      	movs	r3, #100	@ 0x64
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	4905      	ldr	r1, [pc, #20]	@ (8002eb8 <NEXTION_SendString+0x48>)
 8002ea2:	4804      	ldr	r0, [pc, #16]	@ (8002eb4 <NEXTION_SendString+0x44>)
 8002ea4:	f005 fd43 	bl	800892e <HAL_UART_Transmit>
}
 8002ea8:	bf00      	nop
 8002eaa:	3740      	adds	r7, #64	@ 0x40
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	08014dbc 	.word	0x08014dbc
 8002eb4:	20000458 	.word	0x20000458
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HYI_BUFFER_Fill>:
    // Send the command to the Nextion display
    Nextion_SendCommand(command);
}

void HYI_BUFFER_Fill()
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ec2:	22ff      	movs	r2, #255	@ 0xff
 8002ec4:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ec8:	22ff      	movs	r2, #255	@ 0xff
 8002eca:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[2] =0x54;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ece:	2254      	movs	r2, #84	@ 0x54
 8002ed0:	709a      	strb	r2, [r3, #2]
	HYI_BUFFER[3] =0X52;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ed4:	2252      	movs	r2, #82	@ 0x52
 8002ed6:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002eda:	221f      	movs	r2, #31
 8002edc:	711a      	strb	r2, [r3, #4]
//	HYI_BUFFER[71] =takim_sayac;
//	HYI_BUFFER[72] =takim_sayac;
//	HYI_BUFFER[73] =takim_sayac;


	HYI_BUFFER[74]= 1;//EGU_AYRILMA_TESPIT;
 8002ede:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	//HYI_BUFFER[75]= crc; // CRC
	HYI_BUFFER[76]= 0x0D;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ee8:	220d      	movs	r2, #13
 8002eea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <HYI_BUFFER_Fill+0x44>)
 8002ef0:	220a      	movs	r2, #10
 8002ef2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	200006c4 	.word	0x200006c4

08002f04 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e013      	b.n	8002f38 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+5];
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	1d5a      	adds	r2, r3, #5
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	4985      	ldr	r1, [pc, #532]	@ (800312c <Payload_union_converter+0x228>)
 8002f18:	5c8a      	ldrb	r2, [r1, r2]
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	443b      	add	r3, r7
 8002f1e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=RS_rx_buffer[i+5]; // 34 35 36 37
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	1d5a      	adds	r2, r3, #5
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	3316      	adds	r3, #22
 8002f2a:	4980      	ldr	r1, [pc, #512]	@ (800312c <Payload_union_converter+0x228>)
 8002f2c:	5c89      	ldrb	r1, [r1, r2]
 8002f2e:	4a80      	ldr	r2, [pc, #512]	@ (8003130 <Payload_union_converter+0x22c>)
 8002f30:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3301      	adds	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d9e8      	bls.n	8002f10 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	4a7c      	ldr	r2, [pc, #496]	@ (8003134 <Payload_union_converter+0x230>)
 8002f42:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	73bb      	strb	r3, [r7, #14]
 8002f48:	e015      	b.n	8002f76 <Payload_union_converter+0x72>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+9];
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	f103 0209 	add.w	r2, r3, #9
 8002f50:	7bbb      	ldrb	r3, [r7, #14]
 8002f52:	4976      	ldr	r1, [pc, #472]	@ (800312c <Payload_union_converter+0x228>)
 8002f54:	5c8a      	ldrb	r2, [r1, r2]
 8002f56:	3310      	adds	r3, #16
 8002f58:	443b      	add	r3, r7
 8002f5a:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=RS_rx_buffer[i+9]; // 38 39 40 41
 8002f5e:	7bbb      	ldrb	r3, [r7, #14]
 8002f60:	f103 0209 	add.w	r2, r3, #9
 8002f64:	7bbb      	ldrb	r3, [r7, #14]
 8002f66:	331a      	adds	r3, #26
 8002f68:	4970      	ldr	r1, [pc, #448]	@ (800312c <Payload_union_converter+0x228>)
 8002f6a:	5c89      	ldrb	r1, [r1, r2]
 8002f6c:	4a70      	ldr	r2, [pc, #448]	@ (8003130 <Payload_union_converter+0x22c>)
 8002f6e:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73bb      	strb	r3, [r7, #14]
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d9e6      	bls.n	8002f4a <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003134 <Payload_union_converter+0x230>)
 8002f80:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	737b      	strb	r3, [r7, #13]
 8002f86:	e015      	b.n	8002fb4 <Payload_union_converter+0xb0>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+13];
 8002f88:	7b7b      	ldrb	r3, [r7, #13]
 8002f8a:	f103 020d 	add.w	r2, r3, #13
 8002f8e:	7b7b      	ldrb	r3, [r7, #13]
 8002f90:	4966      	ldr	r1, [pc, #408]	@ (800312c <Payload_union_converter+0x228>)
 8002f92:	5c8a      	ldrb	r2, [r1, r2]
 8002f94:	3310      	adds	r3, #16
 8002f96:	443b      	add	r3, r7
 8002f98:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=RS_rx_buffer[i+13]; // 42 43 44 45
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f103 020d 	add.w	r2, r3, #13
 8002fa2:	7b7b      	ldrb	r3, [r7, #13]
 8002fa4:	331e      	adds	r3, #30
 8002fa6:	4961      	ldr	r1, [pc, #388]	@ (800312c <Payload_union_converter+0x228>)
 8002fa8:	5c89      	ldrb	r1, [r1, r2]
 8002faa:	4a61      	ldr	r2, [pc, #388]	@ (8003130 <Payload_union_converter+0x22c>)
 8002fac:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002fae:	7b7b      	ldrb	r3, [r7, #13]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	737b      	strb	r3, [r7, #13]
 8002fb4:	7b7b      	ldrb	r3, [r7, #13]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d9e6      	bls.n	8002f88 <Payload_union_converter+0x84>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003134 <Payload_union_converter+0x230>)
 8002fbe:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	733b      	strb	r3, [r7, #12]
 8002fc4:	e00c      	b.n	8002fe0 <Payload_union_converter+0xdc>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+17];
 8002fc6:	7b3b      	ldrb	r3, [r7, #12]
 8002fc8:	f103 0211 	add.w	r2, r3, #17
 8002fcc:	7b3b      	ldrb	r3, [r7, #12]
 8002fce:	4957      	ldr	r1, [pc, #348]	@ (800312c <Payload_union_converter+0x228>)
 8002fd0:	5c8a      	ldrb	r2, [r1, r2]
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	443b      	add	r3, r7
 8002fd6:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	733b      	strb	r3, [r7, #12]
 8002fe0:	7b3b      	ldrb	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d9ef      	bls.n	8002fc6 <Payload_union_converter+0xc2>
			 }
			 Payload.altitude=f2u8.fVal;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <Payload_union_converter+0x230>)
 8002fea:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	72fb      	strb	r3, [r7, #11]
 8002ff0:	e00c      	b.n	800300c <Payload_union_converter+0x108>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+21];
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f103 0215 	add.w	r2, r3, #21
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	494c      	ldr	r1, [pc, #304]	@ (800312c <Payload_union_converter+0x228>)
 8002ffc:	5c8a      	ldrb	r2, [r1, r2]
 8002ffe:	3310      	adds	r3, #16
 8003000:	443b      	add	r3, r7
 8003002:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	3301      	adds	r3, #1
 800300a:	72fb      	strb	r3, [r7, #11]
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d9ef      	bls.n	8002ff2 <Payload_union_converter+0xee>
			 }
			 Payload.speed=f2u8.fVal;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4a47      	ldr	r2, [pc, #284]	@ (8003134 <Payload_union_converter+0x230>)
 8003016:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8003018:	2300      	movs	r3, #0
 800301a:	72bb      	strb	r3, [r7, #10]
 800301c:	e00c      	b.n	8003038 <Payload_union_converter+0x134>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+25];
 800301e:	7abb      	ldrb	r3, [r7, #10]
 8003020:	f103 0219 	add.w	r2, r3, #25
 8003024:	7abb      	ldrb	r3, [r7, #10]
 8003026:	4941      	ldr	r1, [pc, #260]	@ (800312c <Payload_union_converter+0x228>)
 8003028:	5c8a      	ldrb	r2, [r1, r2]
 800302a:	3310      	adds	r3, #16
 800302c:	443b      	add	r3, r7
 800302e:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003032:	7abb      	ldrb	r3, [r7, #10]
 8003034:	3301      	adds	r3, #1
 8003036:	72bb      	strb	r3, [r7, #10]
 8003038:	7abb      	ldrb	r3, [r7, #10]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d9ef      	bls.n	800301e <Payload_union_converter+0x11a>
			 }
			 Payload.temperature=f2u8.fVal;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <Payload_union_converter+0x230>)
 8003042:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8003044:	2300      	movs	r3, #0
 8003046:	727b      	strb	r3, [r7, #9]
 8003048:	e00c      	b.n	8003064 <Payload_union_converter+0x160>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+29];
 800304a:	7a7b      	ldrb	r3, [r7, #9]
 800304c:	f103 021d 	add.w	r2, r3, #29
 8003050:	7a7b      	ldrb	r3, [r7, #9]
 8003052:	4936      	ldr	r1, [pc, #216]	@ (800312c <Payload_union_converter+0x228>)
 8003054:	5c8a      	ldrb	r2, [r1, r2]
 8003056:	3310      	adds	r3, #16
 8003058:	443b      	add	r3, r7
 800305a:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800305e:	7a7b      	ldrb	r3, [r7, #9]
 8003060:	3301      	adds	r3, #1
 8003062:	727b      	strb	r3, [r7, #9]
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d9ef      	bls.n	800304a <Payload_union_converter+0x146>
			 }
			 Payload.accx=f2u8.fVal;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <Payload_union_converter+0x230>)
 800306e:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8003070:	2300      	movs	r3, #0
 8003072:	723b      	strb	r3, [r7, #8]
 8003074:	e00c      	b.n	8003090 <Payload_union_converter+0x18c>
			 {
				 f2u8.array[i]=RS_rx_buffer[i+33];
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800307c:	7a3b      	ldrb	r3, [r7, #8]
 800307e:	492b      	ldr	r1, [pc, #172]	@ (800312c <Payload_union_converter+0x228>)
 8003080:	5c8a      	ldrb	r2, [r1, r2]
 8003082:	3310      	adds	r3, #16
 8003084:	443b      	add	r3, r7
 8003086:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800308a:	7a3b      	ldrb	r3, [r7, #8]
 800308c:	3301      	adds	r3, #1
 800308e:	723b      	strb	r3, [r7, #8]
 8003090:	7a3b      	ldrb	r3, [r7, #8]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d9ef      	bls.n	8003076 <Payload_union_converter+0x172>
			 }
			 Payload.accy=f2u8.fVal;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	4a26      	ldr	r2, [pc, #152]	@ (8003134 <Payload_union_converter+0x230>)
 800309a:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	e00c      	b.n	80030bc <Payload_union_converter+0x1b8>
			 {
		    	  f2u8.array[i]=RS_rx_buffer[i+37];
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4920      	ldr	r1, [pc, #128]	@ (800312c <Payload_union_converter+0x228>)
 80030ac:	5c8a      	ldrb	r2, [r1, r2]
 80030ae:	3310      	adds	r3, #16
 80030b0:	443b      	add	r3, r7
 80030b2:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	3301      	adds	r3, #1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d9ef      	bls.n	80030a2 <Payload_union_converter+0x19e>
			 }
		      Payload.accz=f2u8.fVal;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <Payload_union_converter+0x230>)
 80030c6:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	71bb      	strb	r3, [r7, #6]
 80030cc:	e00c      	b.n	80030e8 <Payload_union_converter+0x1e4>
			 {
				  f2u8.array[i]=RS_rx_buffer[i+41];
 80030ce:	79bb      	ldrb	r3, [r7, #6]
 80030d0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	4915      	ldr	r1, [pc, #84]	@ (800312c <Payload_union_converter+0x228>)
 80030d8:	5c8a      	ldrb	r2, [r1, r2]
 80030da:	3310      	adds	r3, #16
 80030dc:	443b      	add	r3, r7
 80030de:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 80030e2:	79bb      	ldrb	r3, [r7, #6]
 80030e4:	3301      	adds	r3, #1
 80030e6:	71bb      	strb	r3, [r7, #6]
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d9ef      	bls.n	80030ce <Payload_union_converter+0x1ca>
			 }
			  Payload.normal=f2u8.fVal;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <Payload_union_converter+0x230>)
 80030f2:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	717b      	strb	r3, [r7, #5]
 80030f8:	e00c      	b.n	8003114 <Payload_union_converter+0x210>
			 {
				  f2u8.array[i]=RS_rx_buffer[i+45];
 80030fa:	797b      	ldrb	r3, [r7, #5]
 80030fc:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8003100:	797b      	ldrb	r3, [r7, #5]
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <Payload_union_converter+0x228>)
 8003104:	5c8a      	ldrb	r2, [r1, r2]
 8003106:	3310      	adds	r3, #16
 8003108:	443b      	add	r3, r7
 800310a:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800310e:	797b      	ldrb	r3, [r7, #5]
 8003110:	3301      	adds	r3, #1
 8003112:	717b      	strb	r3, [r7, #5]
 8003114:	797b      	ldrb	r3, [r7, #5]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d9ef      	bls.n	80030fa <Payload_union_converter+0x1f6>
			 }
			  Payload.pitch=f2u8.fVal;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4a05      	ldr	r2, [pc, #20]	@ (8003134 <Payload_union_converter+0x230>)
 800311e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	20000674 	.word	0x20000674
 8003130:	200006c4 	.word	0x200006c4
 8003134:	200007c8 	.word	0x200007c8

08003138 <Enum_State_bs>:
void Enum_State_bs(void){
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0

    switch(Booster.mod){
 800313c:	4b8e      	ldr	r3, [pc, #568]	@ (8003378 <Enum_State_bs+0x240>)
 800313e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003142:	2b08      	cmp	r3, #8
 8003144:	f200 8112 	bhi.w	800336c <Enum_State_bs+0x234>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <Enum_State_bs+0x18>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003175 	.word	0x08003175
 8003154:	080031ad 	.word	0x080031ad
 8003158:	080031e5 	.word	0x080031e5
 800315c:	0800321d 	.word	0x0800321d
 8003160:	08003255 	.word	0x08003255
 8003164:	0800328d 	.word	0x0800328d
 8003168:	080032c5 	.word	0x080032c5
 800316c:	080032fd 	.word	0x080032fd
 8003170:	08003335 	.word	0x08003335

    case 0:
    	enum_bs[0]='O';
 8003174:	4b81      	ldr	r3, [pc, #516]	@ (800337c <Enum_State_bs+0x244>)
 8003176:	224f      	movs	r2, #79	@ 0x4f
 8003178:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='F';
 800317a:	4b80      	ldr	r3, [pc, #512]	@ (800337c <Enum_State_bs+0x244>)
 800317c:	2246      	movs	r2, #70	@ 0x46
 800317e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='F';
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <Enum_State_bs+0x244>)
 8003182:	2246      	movs	r2, #70	@ 0x46
 8003184:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='\0';
 8003186:	4b7d      	ldr	r3, [pc, #500]	@ (800337c <Enum_State_bs+0x244>)
 8003188:	2200      	movs	r2, #0
 800318a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800318c:	4b7b      	ldr	r3, [pc, #492]	@ (800337c <Enum_State_bs+0x244>)
 800318e:	2200      	movs	r2, #0
 8003190:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003192:	4b7a      	ldr	r3, [pc, #488]	@ (800337c <Enum_State_bs+0x244>)
 8003194:	2200      	movs	r2, #0
 8003196:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003198:	4b78      	ldr	r3, [pc, #480]	@ (800337c <Enum_State_bs+0x244>)
 800319a:	2200      	movs	r2, #0
 800319c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800319e:	4b77      	ldr	r3, [pc, #476]	@ (800337c <Enum_State_bs+0x244>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80031a4:	4b75      	ldr	r3, [pc, #468]	@ (800337c <Enum_State_bs+0x244>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	721a      	strb	r2, [r3, #8]
    	break;
 80031aa:	e0df      	b.n	800336c <Enum_State_bs+0x234>

    case 1:
    	enum_bs[0]='R';
 80031ac:	4b73      	ldr	r3, [pc, #460]	@ (800337c <Enum_State_bs+0x244>)
 80031ae:	2252      	movs	r2, #82	@ 0x52
 80031b0:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='A';
 80031b2:	4b72      	ldr	r3, [pc, #456]	@ (800337c <Enum_State_bs+0x244>)
 80031b4:	2241      	movs	r2, #65	@ 0x41
 80031b6:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='M';
 80031b8:	4b70      	ldr	r3, [pc, #448]	@ (800337c <Enum_State_bs+0x244>)
 80031ba:	224d      	movs	r2, #77	@ 0x4d
 80031bc:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='P';
 80031be:	4b6f      	ldr	r3, [pc, #444]	@ (800337c <Enum_State_bs+0x244>)
 80031c0:	2250      	movs	r2, #80	@ 0x50
 80031c2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='A';
 80031c4:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <Enum_State_bs+0x244>)
 80031c6:	2241      	movs	r2, #65	@ 0x41
 80031c8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 80031ca:	4b6c      	ldr	r3, [pc, #432]	@ (800337c <Enum_State_bs+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 80031d0:	4b6a      	ldr	r3, [pc, #424]	@ (800337c <Enum_State_bs+0x244>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80031d6:	4b69      	ldr	r3, [pc, #420]	@ (800337c <Enum_State_bs+0x244>)
 80031d8:	2200      	movs	r2, #0
 80031da:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80031dc:	4b67      	ldr	r3, [pc, #412]	@ (800337c <Enum_State_bs+0x244>)
 80031de:	2200      	movs	r2, #0
 80031e0:	721a      	strb	r2, [r3, #8]
    	break;
 80031e2:	e0c3      	b.n	800336c <Enum_State_bs+0x234>

    case 2:
    	enum_bs[0]='U';
 80031e4:	4b65      	ldr	r3, [pc, #404]	@ (800337c <Enum_State_bs+0x244>)
 80031e6:	2255      	movs	r2, #85	@ 0x55
 80031e8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='C';
 80031ea:	4b64      	ldr	r3, [pc, #400]	@ (800337c <Enum_State_bs+0x244>)
 80031ec:	2243      	movs	r2, #67	@ 0x43
 80031ee:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='U';
 80031f0:	4b62      	ldr	r3, [pc, #392]	@ (800337c <Enum_State_bs+0x244>)
 80031f2:	2255      	movs	r2, #85	@ 0x55
 80031f4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='S';
 80031f6:	4b61      	ldr	r3, [pc, #388]	@ (800337c <Enum_State_bs+0x244>)
 80031f8:	2253      	movs	r2, #83	@ 0x53
 80031fa:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 80031fc:	4b5f      	ldr	r3, [pc, #380]	@ (800337c <Enum_State_bs+0x244>)
 80031fe:	2200      	movs	r2, #0
 8003200:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003202:	4b5e      	ldr	r3, [pc, #376]	@ (800337c <Enum_State_bs+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003208:	4b5c      	ldr	r3, [pc, #368]	@ (800337c <Enum_State_bs+0x244>)
 800320a:	2200      	movs	r2, #0
 800320c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <Enum_State_bs+0x244>)
 8003210:	2200      	movs	r2, #0
 8003212:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003214:	4b5a      	ldr	r3, [pc, #360]	@ (8003380 <Enum_State_bs+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	721a      	strb	r2, [r3, #8]
    	break;
 800321a:	e0a7      	b.n	800336c <Enum_State_bs+0x234>
    case 3:
    	enum_bs[0]='B';
 800321c:	4b57      	ldr	r3, [pc, #348]	@ (800337c <Enum_State_bs+0x244>)
 800321e:	2242      	movs	r2, #66	@ 0x42
 8003220:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='U';
 8003222:	4b56      	ldr	r3, [pc, #344]	@ (800337c <Enum_State_bs+0x244>)
 8003224:	2255      	movs	r2, #85	@ 0x55
 8003226:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003228:	4b54      	ldr	r3, [pc, #336]	@ (800337c <Enum_State_bs+0x244>)
 800322a:	2252      	movs	r2, #82	@ 0x52
 800322c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='N';
 800322e:	4b53      	ldr	r3, [pc, #332]	@ (800337c <Enum_State_bs+0x244>)
 8003230:	224e      	movs	r2, #78	@ 0x4e
 8003232:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='O';
 8003234:	4b51      	ldr	r3, [pc, #324]	@ (800337c <Enum_State_bs+0x244>)
 8003236:	224f      	movs	r2, #79	@ 0x4f
 8003238:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='U';
 800323a:	4b50      	ldr	r3, [pc, #320]	@ (800337c <Enum_State_bs+0x244>)
 800323c:	2255      	movs	r2, #85	@ 0x55
 800323e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='T';
 8003240:	4b4e      	ldr	r3, [pc, #312]	@ (800337c <Enum_State_bs+0x244>)
 8003242:	2254      	movs	r2, #84	@ 0x54
 8003244:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 8003246:	4b4d      	ldr	r3, [pc, #308]	@ (800337c <Enum_State_bs+0x244>)
 8003248:	2200      	movs	r2, #0
 800324a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 800324c:	4b4b      	ldr	r3, [pc, #300]	@ (800337c <Enum_State_bs+0x244>)
 800324e:	2200      	movs	r2, #0
 8003250:	721a      	strb	r2, [r3, #8]
    	break;
 8003252:	e08b      	b.n	800336c <Enum_State_bs+0x234>
    case 4:
    	enum_bs[0]='A';
 8003254:	4b49      	ldr	r3, [pc, #292]	@ (800337c <Enum_State_bs+0x244>)
 8003256:	2241      	movs	r2, #65	@ 0x41
 8003258:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 800325a:	4b48      	ldr	r3, [pc, #288]	@ (800337c <Enum_State_bs+0x244>)
 800325c:	2259      	movs	r2, #89	@ 0x59
 800325e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='I';
 8003260:	4b46      	ldr	r3, [pc, #280]	@ (800337c <Enum_State_bs+0x244>)
 8003262:	2249      	movs	r2, #73	@ 0x49
 8003264:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='R';
 8003266:	4b45      	ldr	r3, [pc, #276]	@ (800337c <Enum_State_bs+0x244>)
 8003268:	2252      	movs	r2, #82	@ 0x52
 800326a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='\0';
 800326c:	4b43      	ldr	r3, [pc, #268]	@ (800337c <Enum_State_bs+0x244>)
 800326e:	2200      	movs	r2, #0
 8003270:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='\0';
 8003272:	4b42      	ldr	r3, [pc, #264]	@ (800337c <Enum_State_bs+0x244>)
 8003274:	2200      	movs	r2, #0
 8003276:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003278:	4b40      	ldr	r3, [pc, #256]	@ (800337c <Enum_State_bs+0x244>)
 800327a:	2200      	movs	r2, #0
 800327c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800327e:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <Enum_State_bs+0x244>)
 8003280:	2200      	movs	r2, #0
 8003282:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003284:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <Enum_State_bs+0x244>)
 8003286:	2200      	movs	r2, #0
 8003288:	721a      	strb	r2, [r3, #8]
    	break;
 800328a:	e06f      	b.n	800336c <Enum_State_bs+0x234>
    case 5:
    	enum_bs[0]='A';
 800328c:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <Enum_State_bs+0x244>)
 800328e:	2241      	movs	r2, #65	@ 0x41
 8003290:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003292:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <Enum_State_bs+0x244>)
 8003294:	2259      	movs	r2, #89	@ 0x59
 8003296:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003298:	4b38      	ldr	r3, [pc, #224]	@ (800337c <Enum_State_bs+0x244>)
 800329a:	2252      	movs	r2, #82	@ 0x52
 800329c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <Enum_State_bs+0x244>)
 80032a0:	2249      	movs	r2, #73	@ 0x49
 80032a2:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80032a4:	4b35      	ldr	r3, [pc, #212]	@ (800337c <Enum_State_bs+0x244>)
 80032a6:	224c      	movs	r2, #76	@ 0x4c
 80032a8:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <Enum_State_bs+0x244>)
 80032ac:	2244      	movs	r2, #68	@ 0x44
 80032ae:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80032b0:	4b32      	ldr	r3, [pc, #200]	@ (800337c <Enum_State_bs+0x244>)
 80032b2:	2249      	movs	r2, #73	@ 0x49
 80032b4:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='?';
 80032b6:	4b31      	ldr	r3, [pc, #196]	@ (800337c <Enum_State_bs+0x244>)
 80032b8:	223f      	movs	r2, #63	@ 0x3f
 80032ba:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80032bc:	4b2f      	ldr	r3, [pc, #188]	@ (800337c <Enum_State_bs+0x244>)
 80032be:	2200      	movs	r2, #0
 80032c0:	721a      	strb	r2, [r3, #8]
    	break;
 80032c2:	e053      	b.n	800336c <Enum_State_bs+0x234>
    case 6:
    	enum_bs[0]='A';
 80032c4:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <Enum_State_bs+0x244>)
 80032c6:	2241      	movs	r2, #65	@ 0x41
 80032c8:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 80032ca:	4b2c      	ldr	r3, [pc, #176]	@ (800337c <Enum_State_bs+0x244>)
 80032cc:	2259      	movs	r2, #89	@ 0x59
 80032ce:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 80032d0:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <Enum_State_bs+0x244>)
 80032d2:	2252      	movs	r2, #82	@ 0x52
 80032d4:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 80032d6:	4b29      	ldr	r3, [pc, #164]	@ (800337c <Enum_State_bs+0x244>)
 80032d8:	2249      	movs	r2, #73	@ 0x49
 80032da:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 80032dc:	4b27      	ldr	r3, [pc, #156]	@ (800337c <Enum_State_bs+0x244>)
 80032de:	224c      	movs	r2, #76	@ 0x4c
 80032e0:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='D';
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <Enum_State_bs+0x244>)
 80032e4:	2244      	movs	r2, #68	@ 0x44
 80032e6:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='I';
 80032e8:	4b24      	ldr	r3, [pc, #144]	@ (800337c <Enum_State_bs+0x244>)
 80032ea:	2249      	movs	r2, #73	@ 0x49
 80032ec:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 80032ee:	4b23      	ldr	r3, [pc, #140]	@ (800337c <Enum_State_bs+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 80032f4:	4b21      	ldr	r3, [pc, #132]	@ (800337c <Enum_State_bs+0x244>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	721a      	strb	r2, [r3, #8]
    	break;
 80032fa:	e037      	b.n	800336c <Enum_State_bs+0x234>
    case 7:
    	enum_bs[0]='A';
 80032fc:	4b1f      	ldr	r3, [pc, #124]	@ (800337c <Enum_State_bs+0x244>)
 80032fe:	2241      	movs	r2, #65	@ 0x41
 8003300:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='Y';
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <Enum_State_bs+0x244>)
 8003304:	2259      	movs	r2, #89	@ 0x59
 8003306:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='R';
 8003308:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <Enum_State_bs+0x244>)
 800330a:	2252      	movs	r2, #82	@ 0x52
 800330c:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <Enum_State_bs+0x244>)
 8003310:	2249      	movs	r2, #73	@ 0x49
 8003312:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='L';
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <Enum_State_bs+0x244>)
 8003316:	224c      	movs	r2, #76	@ 0x4c
 8003318:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='M';
 800331a:	4b18      	ldr	r3, [pc, #96]	@ (800337c <Enum_State_bs+0x244>)
 800331c:	224d      	movs	r2, #77	@ 0x4d
 800331e:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='A';
 8003320:	4b16      	ldr	r3, [pc, #88]	@ (800337c <Enum_State_bs+0x244>)
 8003322:	2241      	movs	r2, #65	@ 0x41
 8003324:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='D';
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <Enum_State_bs+0x244>)
 8003328:	2244      	movs	r2, #68	@ 0x44
 800332a:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='I';
 800332c:	4b13      	ldr	r3, [pc, #76]	@ (800337c <Enum_State_bs+0x244>)
 800332e:	2249      	movs	r2, #73	@ 0x49
 8003330:	721a      	strb	r2, [r3, #8]
    	break;
 8003332:	e01b      	b.n	800336c <Enum_State_bs+0x234>
    case 8:
    	enum_bs[0]='F';
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <Enum_State_bs+0x244>)
 8003336:	2246      	movs	r2, #70	@ 0x46
 8003338:	701a      	strb	r2, [r3, #0]
    	enum_bs[1]='I';
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <Enum_State_bs+0x244>)
 800333c:	2249      	movs	r2, #73	@ 0x49
 800333e:	705a      	strb	r2, [r3, #1]
    	enum_bs[2]='N';
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <Enum_State_bs+0x244>)
 8003342:	224e      	movs	r2, #78	@ 0x4e
 8003344:	709a      	strb	r2, [r3, #2]
    	enum_bs[3]='I';
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <Enum_State_bs+0x244>)
 8003348:	2249      	movs	r2, #73	@ 0x49
 800334a:	70da      	strb	r2, [r3, #3]
    	enum_bs[4]='S';
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <Enum_State_bs+0x244>)
 800334e:	2253      	movs	r2, #83	@ 0x53
 8003350:	711a      	strb	r2, [r3, #4]
    	enum_bs[5]='H';
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <Enum_State_bs+0x244>)
 8003354:	2248      	movs	r2, #72	@ 0x48
 8003356:	715a      	strb	r2, [r3, #5]
    	enum_bs[6]='\0';
 8003358:	4b08      	ldr	r3, [pc, #32]	@ (800337c <Enum_State_bs+0x244>)
 800335a:	2200      	movs	r2, #0
 800335c:	719a      	strb	r2, [r3, #6]
    	enum_bs[7]='\0';
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <Enum_State_bs+0x244>)
 8003360:	2200      	movs	r2, #0
 8003362:	71da      	strb	r2, [r3, #7]
    	enum_bs[8]='\0';
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <Enum_State_bs+0x244>)
 8003366:	2200      	movs	r2, #0
 8003368:	721a      	strb	r2, [r3, #8]
    	break;
 800336a:	bf00      	nop

    	 }

    NEXTION_SendString("bs10", &enum_bs);
 800336c:	4903      	ldr	r1, [pc, #12]	@ (800337c <Enum_State_bs+0x244>)
 800336e:	4805      	ldr	r0, [pc, #20]	@ (8003384 <Enum_State_bs+0x24c>)
 8003370:	f7ff fd7e 	bl	8002e70 <NEXTION_SendString>


}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000800 	.word	0x20000800
 800337c:	20000870 	.word	0x20000870
 8003380:	2000087c 	.word	0x2000087c
 8003384:	08014dec 	.word	0x08014dec

08003388 <Enum_State_s>:
void Enum_State_s(void){
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0

    switch(Sustainer.mod){
 800338c:	4b7f      	ldr	r3, [pc, #508]	@ (800358c <Enum_State_s+0x204>)
 800338e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003392:	2b07      	cmp	r3, #7
 8003394:	f200 80f4 	bhi.w	8003580 <Enum_State_s+0x1f8>
 8003398:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <Enum_State_s+0x18>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033c1 	.word	0x080033c1
 80033a4:	080033f9 	.word	0x080033f9
 80033a8:	08003431 	.word	0x08003431
 80033ac:	08003469 	.word	0x08003469
 80033b0:	080034a1 	.word	0x080034a1
 80033b4:	080034d9 	.word	0x080034d9
 80033b8:	08003511 	.word	0x08003511
 80033bc:	08003549 	.word	0x08003549


    case 0:
    	enum_s[0]='O';
 80033c0:	4b73      	ldr	r3, [pc, #460]	@ (8003590 <Enum_State_s+0x208>)
 80033c2:	224f      	movs	r2, #79	@ 0x4f
 80033c4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='F';
 80033c6:	4b72      	ldr	r3, [pc, #456]	@ (8003590 <Enum_State_s+0x208>)
 80033c8:	2246      	movs	r2, #70	@ 0x46
 80033ca:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='F';
 80033cc:	4b70      	ldr	r3, [pc, #448]	@ (8003590 <Enum_State_s+0x208>)
 80033ce:	2246      	movs	r2, #70	@ 0x46
 80033d0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='\0';
 80033d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003590 <Enum_State_s+0x208>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 80033d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003590 <Enum_State_s+0x208>)
 80033da:	2200      	movs	r2, #0
 80033dc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 80033de:	4b6c      	ldr	r3, [pc, #432]	@ (8003590 <Enum_State_s+0x208>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80033e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <Enum_State_s+0x208>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80033ea:	4b69      	ldr	r3, [pc, #420]	@ (8003590 <Enum_State_s+0x208>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 80033f0:	4b67      	ldr	r3, [pc, #412]	@ (8003590 <Enum_State_s+0x208>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	721a      	strb	r2, [r3, #8]
    	break;
 80033f6:	e0c3      	b.n	8003580 <Enum_State_s+0x1f8>
    case 1:
    	enum_s[0]='R';
 80033f8:	4b65      	ldr	r3, [pc, #404]	@ (8003590 <Enum_State_s+0x208>)
 80033fa:	2252      	movs	r2, #82	@ 0x52
 80033fc:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 80033fe:	4b64      	ldr	r3, [pc, #400]	@ (8003590 <Enum_State_s+0x208>)
 8003400:	2241      	movs	r2, #65	@ 0x41
 8003402:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='M';
 8003404:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <Enum_State_s+0x208>)
 8003406:	224d      	movs	r2, #77	@ 0x4d
 8003408:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='P';
 800340a:	4b61      	ldr	r3, [pc, #388]	@ (8003590 <Enum_State_s+0x208>)
 800340c:	2250      	movs	r2, #80	@ 0x50
 800340e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='A';
 8003410:	4b5f      	ldr	r3, [pc, #380]	@ (8003590 <Enum_State_s+0x208>)
 8003412:	2241      	movs	r2, #65	@ 0x41
 8003414:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 8003416:	4b5e      	ldr	r3, [pc, #376]	@ (8003590 <Enum_State_s+0x208>)
 8003418:	2200      	movs	r2, #0
 800341a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 800341c:	4b5c      	ldr	r3, [pc, #368]	@ (8003590 <Enum_State_s+0x208>)
 800341e:	2200      	movs	r2, #0
 8003420:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003422:	4b5b      	ldr	r3, [pc, #364]	@ (8003590 <Enum_State_s+0x208>)
 8003424:	2200      	movs	r2, #0
 8003426:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <Enum_State_s+0x208>)
 800342a:	2200      	movs	r2, #0
 800342c:	721a      	strb	r2, [r3, #8]
    	break;
 800342e:	e0a7      	b.n	8003580 <Enum_State_s+0x1f8>

    case 2:
    	enum_s[0]='U';
 8003430:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <Enum_State_s+0x208>)
 8003432:	2255      	movs	r2, #85	@ 0x55
 8003434:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='C';
 8003436:	4b56      	ldr	r3, [pc, #344]	@ (8003590 <Enum_State_s+0x208>)
 8003438:	2243      	movs	r2, #67	@ 0x43
 800343a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='U';
 800343c:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <Enum_State_s+0x208>)
 800343e:	2255      	movs	r2, #85	@ 0x55
 8003440:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='S';
 8003442:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <Enum_State_s+0x208>)
 8003444:	2253      	movs	r2, #83	@ 0x53
 8003446:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003448:	4b51      	ldr	r3, [pc, #324]	@ (8003590 <Enum_State_s+0x208>)
 800344a:	2200      	movs	r2, #0
 800344c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 800344e:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <Enum_State_s+0x208>)
 8003450:	2200      	movs	r2, #0
 8003452:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003454:	4b4e      	ldr	r3, [pc, #312]	@ (8003590 <Enum_State_s+0x208>)
 8003456:	2200      	movs	r2, #0
 8003458:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 800345a:	4b4d      	ldr	r3, [pc, #308]	@ (8003590 <Enum_State_s+0x208>)
 800345c:	2200      	movs	r2, #0
 800345e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003460:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <Enum_State_s+0x208>)
 8003462:	2200      	movs	r2, #0
 8003464:	721a      	strb	r2, [r3, #8]
    	break;
 8003466:	e08b      	b.n	8003580 <Enum_State_s+0x1f8>
    case 3:
    	enum_s[0]='A';
 8003468:	4b49      	ldr	r3, [pc, #292]	@ (8003590 <Enum_State_s+0x208>)
 800346a:	2241      	movs	r2, #65	@ 0x41
 800346c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 800346e:	4b48      	ldr	r3, [pc, #288]	@ (8003590 <Enum_State_s+0x208>)
 8003470:	2259      	movs	r2, #89	@ 0x59
 8003472:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 8003474:	4b46      	ldr	r3, [pc, #280]	@ (8003590 <Enum_State_s+0x208>)
 8003476:	2252      	movs	r2, #82	@ 0x52
 8003478:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 800347a:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <Enum_State_s+0x208>)
 800347c:	2249      	movs	r2, #73	@ 0x49
 800347e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 8003480:	4b43      	ldr	r3, [pc, #268]	@ (8003590 <Enum_State_s+0x208>)
 8003482:	224c      	movs	r2, #76	@ 0x4c
 8003484:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 8003486:	4b42      	ldr	r3, [pc, #264]	@ (8003590 <Enum_State_s+0x208>)
 8003488:	2244      	movs	r2, #68	@ 0x44
 800348a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 800348c:	4b40      	ldr	r3, [pc, #256]	@ (8003590 <Enum_State_s+0x208>)
 800348e:	2249      	movs	r2, #73	@ 0x49
 8003490:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='?';
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <Enum_State_s+0x208>)
 8003494:	223f      	movs	r2, #63	@ 0x3f
 8003496:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003498:	4b3d      	ldr	r3, [pc, #244]	@ (8003590 <Enum_State_s+0x208>)
 800349a:	2200      	movs	r2, #0
 800349c:	721a      	strb	r2, [r3, #8]
    	break;
 800349e:	e06f      	b.n	8003580 <Enum_State_s+0x1f8>
    case 4:
    	enum_s[0]='A';
 80034a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <Enum_State_s+0x208>)
 80034a2:	2241      	movs	r2, #65	@ 0x41
 80034a4:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='Y';
 80034a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <Enum_State_s+0x208>)
 80034a8:	2259      	movs	r2, #89	@ 0x59
 80034aa:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='R';
 80034ac:	4b38      	ldr	r3, [pc, #224]	@ (8003590 <Enum_State_s+0x208>)
 80034ae:	2252      	movs	r2, #82	@ 0x52
 80034b0:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 80034b2:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <Enum_State_s+0x208>)
 80034b4:	2249      	movs	r2, #73	@ 0x49
 80034b6:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='L';
 80034b8:	4b35      	ldr	r3, [pc, #212]	@ (8003590 <Enum_State_s+0x208>)
 80034ba:	224c      	movs	r2, #76	@ 0x4c
 80034bc:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='D';
 80034be:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <Enum_State_s+0x208>)
 80034c0:	2244      	movs	r2, #68	@ 0x44
 80034c2:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='I';
 80034c4:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <Enum_State_s+0x208>)
 80034c6:	2249      	movs	r2, #73	@ 0x49
 80034c8:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 80034ca:	4b31      	ldr	r3, [pc, #196]	@ (8003590 <Enum_State_s+0x208>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 80034d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <Enum_State_s+0x208>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	721a      	strb	r2, [r3, #8]
    	break;
 80034d6:	e053      	b.n	8003580 <Enum_State_s+0x1f8>
    case 5:
    	enum_s[0]='A';
 80034d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <Enum_State_s+0x208>)
 80034da:	2241      	movs	r2, #65	@ 0x41
 80034dc:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='P';
 80034de:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <Enum_State_s+0x208>)
 80034e0:	2250      	movs	r2, #80	@ 0x50
 80034e2:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='O';
 80034e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <Enum_State_s+0x208>)
 80034e6:	224f      	movs	r2, #79	@ 0x4f
 80034e8:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='G';
 80034ea:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <Enum_State_s+0x208>)
 80034ec:	2247      	movs	r2, #71	@ 0x47
 80034ee:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='E';
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <Enum_State_s+0x208>)
 80034f2:	2245      	movs	r2, #69	@ 0x45
 80034f4:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='E';
 80034f6:	4b26      	ldr	r3, [pc, #152]	@ (8003590 <Enum_State_s+0x208>)
 80034f8:	2245      	movs	r2, #69	@ 0x45
 80034fa:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <Enum_State_s+0x208>)
 80034fe:	2200      	movs	r2, #0
 8003500:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003502:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <Enum_State_s+0x208>)
 8003504:	2200      	movs	r2, #0
 8003506:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <Enum_State_s+0x208>)
 800350a:	2200      	movs	r2, #0
 800350c:	721a      	strb	r2, [r3, #8]
    	break;
 800350e:	e037      	b.n	8003580 <Enum_State_s+0x1f8>
    case 6:
    	enum_s[0]='M';
 8003510:	4b1f      	ldr	r3, [pc, #124]	@ (8003590 <Enum_State_s+0x208>)
 8003512:	224d      	movs	r2, #77	@ 0x4d
 8003514:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='A';
 8003516:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <Enum_State_s+0x208>)
 8003518:	2241      	movs	r2, #65	@ 0x41
 800351a:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='I';
 800351c:	4b1c      	ldr	r3, [pc, #112]	@ (8003590 <Enum_State_s+0x208>)
 800351e:	2249      	movs	r2, #73	@ 0x49
 8003520:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='N';
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <Enum_State_s+0x208>)
 8003524:	224e      	movs	r2, #78	@ 0x4e
 8003526:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='\0';
 8003528:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <Enum_State_s+0x208>)
 800352a:	2200      	movs	r2, #0
 800352c:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='\0';
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <Enum_State_s+0x208>)
 8003530:	2200      	movs	r2, #0
 8003532:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 8003534:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <Enum_State_s+0x208>)
 8003536:	2200      	movs	r2, #0
 8003538:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <Enum_State_s+0x208>)
 800353c:	2200      	movs	r2, #0
 800353e:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <Enum_State_s+0x208>)
 8003542:	2200      	movs	r2, #0
 8003544:	721a      	strb	r2, [r3, #8]
    	break;
 8003546:	e01b      	b.n	8003580 <Enum_State_s+0x1f8>
    case 7:
    	enum_s[0]='F';
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <Enum_State_s+0x208>)
 800354a:	2246      	movs	r2, #70	@ 0x46
 800354c:	701a      	strb	r2, [r3, #0]
    	enum_s[1]='I';
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <Enum_State_s+0x208>)
 8003550:	2249      	movs	r2, #73	@ 0x49
 8003552:	705a      	strb	r2, [r3, #1]
    	enum_s[2]='N';
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <Enum_State_s+0x208>)
 8003556:	224e      	movs	r2, #78	@ 0x4e
 8003558:	709a      	strb	r2, [r3, #2]
    	enum_s[3]='I';
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <Enum_State_s+0x208>)
 800355c:	2249      	movs	r2, #73	@ 0x49
 800355e:	70da      	strb	r2, [r3, #3]
    	enum_s[4]='S';
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <Enum_State_s+0x208>)
 8003562:	2253      	movs	r2, #83	@ 0x53
 8003564:	711a      	strb	r2, [r3, #4]
    	enum_s[5]='H';
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <Enum_State_s+0x208>)
 8003568:	2248      	movs	r2, #72	@ 0x48
 800356a:	715a      	strb	r2, [r3, #5]
    	enum_s[6]='\0';
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <Enum_State_s+0x208>)
 800356e:	2200      	movs	r2, #0
 8003570:	719a      	strb	r2, [r3, #6]
    	enum_s[7]='\0';
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <Enum_State_s+0x208>)
 8003574:	2200      	movs	r2, #0
 8003576:	71da      	strb	r2, [r3, #7]
    	enum_s[8]='\0';
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <Enum_State_s+0x208>)
 800357a:	2200      	movs	r2, #0
 800357c:	721a      	strb	r2, [r3, #8]
    	break;
 800357e:	bf00      	nop



    	 }

    NEXTION_SendString("s10", &enum_s);
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <Enum_State_s+0x208>)
 8003582:	4804      	ldr	r0, [pc, #16]	@ (8003594 <Enum_State_s+0x20c>)
 8003584:	f7ff fc74 	bl	8002e70 <NEXTION_SendString>


}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000838 	.word	0x20000838
 8003590:	2000087c 	.word	0x2000087c
 8003594:	08014df4 	.word	0x08014df4

08003598 <Booster_union_converter>:


void Booster_union_converter(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0

					 for(uint8_t i=0;i<4;i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e011      	b.n	80035c8 <Booster_union_converter+0x30>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+5];
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	1d5a      	adds	r2, r3, #5
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	4980      	ldr	r1, [pc, #512]	@ (80037ac <Booster_union_converter+0x214>)
 80035ac:	5c89      	ldrb	r1, [r1, r2]
 80035ae:	4a80      	ldr	r2, [pc, #512]	@ (80037b0 <Booster_union_converter+0x218>)
 80035b0:	54d1      	strb	r1, [r2, r3]
						 HYI_BUFFER[34+i]=RS_rx_buffer[i+5]; // 34 35 36 37
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	1d5a      	adds	r2, r3, #5
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	3322      	adds	r3, #34	@ 0x22
 80035ba:	497c      	ldr	r1, [pc, #496]	@ (80037ac <Booster_union_converter+0x214>)
 80035bc:	5c89      	ldrb	r1, [r1, r2]
 80035be:	4a7d      	ldr	r2, [pc, #500]	@ (80037b4 <Booster_union_converter+0x21c>)
 80035c0:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	3301      	adds	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d9ea      	bls.n	80035a4 <Booster_union_converter+0xc>
					 }
					 Booster.gpsaltitude=f2u8_booster.fVal;
 80035ce:	4b78      	ldr	r3, [pc, #480]	@ (80037b0 <Booster_union_converter+0x218>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a79      	ldr	r2, [pc, #484]	@ (80037b8 <Booster_union_converter+0x220>)
 80035d4:	6053      	str	r3, [r2, #4]


					 for(uint8_t i=0;i<4;i++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	73bb      	strb	r3, [r7, #14]
 80035da:	e013      	b.n	8003604 <Booster_union_converter+0x6c>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+9];
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	f103 0209 	add.w	r2, r3, #9
 80035e2:	7bbb      	ldrb	r3, [r7, #14]
 80035e4:	4971      	ldr	r1, [pc, #452]	@ (80037ac <Booster_union_converter+0x214>)
 80035e6:	5c89      	ldrb	r1, [r1, r2]
 80035e8:	4a71      	ldr	r2, [pc, #452]	@ (80037b0 <Booster_union_converter+0x218>)
 80035ea:	54d1      	strb	r1, [r2, r3]
						 HYI_BUFFER[38+i]=RS_rx_buffer[i+9]; // 38 39 40 41
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	f103 0209 	add.w	r2, r3, #9
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	3326      	adds	r3, #38	@ 0x26
 80035f6:	496d      	ldr	r1, [pc, #436]	@ (80037ac <Booster_union_converter+0x214>)
 80035f8:	5c89      	ldrb	r1, [r1, r2]
 80035fa:	4a6e      	ldr	r2, [pc, #440]	@ (80037b4 <Booster_union_converter+0x21c>)
 80035fc:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80035fe:	7bbb      	ldrb	r3, [r7, #14]
 8003600:	3301      	adds	r3, #1
 8003602:	73bb      	strb	r3, [r7, #14]
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d9e8      	bls.n	80035dc <Booster_union_converter+0x44>
					 }
					 Booster.gpslatitude=f2u8_booster.fVal;
 800360a:	4b69      	ldr	r3, [pc, #420]	@ (80037b0 <Booster_union_converter+0x218>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6a      	ldr	r2, [pc, #424]	@ (80037b8 <Booster_union_converter+0x220>)
 8003610:	6093      	str	r3, [r2, #8]

					 for(uint8_t i=0;i<4;i++)
 8003612:	2300      	movs	r3, #0
 8003614:	737b      	strb	r3, [r7, #13]
 8003616:	e013      	b.n	8003640 <Booster_union_converter+0xa8>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+13];
 8003618:	7b7b      	ldrb	r3, [r7, #13]
 800361a:	f103 020d 	add.w	r2, r3, #13
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	4962      	ldr	r1, [pc, #392]	@ (80037ac <Booster_union_converter+0x214>)
 8003622:	5c89      	ldrb	r1, [r1, r2]
 8003624:	4a62      	ldr	r2, [pc, #392]	@ (80037b0 <Booster_union_converter+0x218>)
 8003626:	54d1      	strb	r1, [r2, r3]
						 HYI_BUFFER[42+i]=RS_rx_buffer[i+13]; // 42 43 44 45
 8003628:	7b7b      	ldrb	r3, [r7, #13]
 800362a:	f103 020d 	add.w	r2, r3, #13
 800362e:	7b7b      	ldrb	r3, [r7, #13]
 8003630:	332a      	adds	r3, #42	@ 0x2a
 8003632:	495e      	ldr	r1, [pc, #376]	@ (80037ac <Booster_union_converter+0x214>)
 8003634:	5c89      	ldrb	r1, [r1, r2]
 8003636:	4a5f      	ldr	r2, [pc, #380]	@ (80037b4 <Booster_union_converter+0x21c>)
 8003638:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	3301      	adds	r3, #1
 800363e:	737b      	strb	r3, [r7, #13]
 8003640:	7b7b      	ldrb	r3, [r7, #13]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d9e8      	bls.n	8003618 <Booster_union_converter+0x80>
					 }
					 Booster.gpslongitude=f2u8_booster.fVal;
 8003646:	4b5a      	ldr	r3, [pc, #360]	@ (80037b0 <Booster_union_converter+0x218>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <Booster_union_converter+0x220>)
 800364c:	60d3      	str	r3, [r2, #12]

					 for(uint8_t i=0;i<4;i++)
 800364e:	2300      	movs	r3, #0
 8003650:	733b      	strb	r3, [r7, #12]
 8003652:	e00a      	b.n	800366a <Booster_union_converter+0xd2>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+17];
 8003654:	7b3b      	ldrb	r3, [r7, #12]
 8003656:	f103 0211 	add.w	r2, r3, #17
 800365a:	7b3b      	ldrb	r3, [r7, #12]
 800365c:	4953      	ldr	r1, [pc, #332]	@ (80037ac <Booster_union_converter+0x214>)
 800365e:	5c89      	ldrb	r1, [r1, r2]
 8003660:	4a53      	ldr	r2, [pc, #332]	@ (80037b0 <Booster_union_converter+0x218>)
 8003662:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8003664:	7b3b      	ldrb	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	733b      	strb	r3, [r7, #12]
 800366a:	7b3b      	ldrb	r3, [r7, #12]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d9f1      	bls.n	8003654 <Booster_union_converter+0xbc>
					 }
					 Booster.altitude=f2u8_booster.fVal;
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <Booster_union_converter+0x218>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <Booster_union_converter+0x220>)
 8003676:	6153      	str	r3, [r2, #20]



					 for(uint8_t i=0;i<4;i++)
 8003678:	2300      	movs	r3, #0
 800367a:	72fb      	strb	r3, [r7, #11]
 800367c:	e00a      	b.n	8003694 <Booster_union_converter+0xfc>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+21];
 800367e:	7afb      	ldrb	r3, [r7, #11]
 8003680:	f103 0215 	add.w	r2, r3, #21
 8003684:	7afb      	ldrb	r3, [r7, #11]
 8003686:	4949      	ldr	r1, [pc, #292]	@ (80037ac <Booster_union_converter+0x214>)
 8003688:	5c89      	ldrb	r1, [r1, r2]
 800368a:	4a49      	ldr	r2, [pc, #292]	@ (80037b0 <Booster_union_converter+0x218>)
 800368c:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	3301      	adds	r3, #1
 8003692:	72fb      	strb	r3, [r7, #11]
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d9f1      	bls.n	800367e <Booster_union_converter+0xe6>
					 }
					 Booster.speed=f2u8_booster.fVal;
 800369a:	4b45      	ldr	r3, [pc, #276]	@ (80037b0 <Booster_union_converter+0x218>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a46      	ldr	r2, [pc, #280]	@ (80037b8 <Booster_union_converter+0x220>)
 80036a0:	6113      	str	r3, [r2, #16]


					 for(uint8_t i=0;i<4;i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	72bb      	strb	r3, [r7, #10]
 80036a6:	e00a      	b.n	80036be <Booster_union_converter+0x126>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+25];
 80036a8:	7abb      	ldrb	r3, [r7, #10]
 80036aa:	f103 0219 	add.w	r2, r3, #25
 80036ae:	7abb      	ldrb	r3, [r7, #10]
 80036b0:	493e      	ldr	r1, [pc, #248]	@ (80037ac <Booster_union_converter+0x214>)
 80036b2:	5c89      	ldrb	r1, [r1, r2]
 80036b4:	4a3e      	ldr	r2, [pc, #248]	@ (80037b0 <Booster_union_converter+0x218>)
 80036b6:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80036b8:	7abb      	ldrb	r3, [r7, #10]
 80036ba:	3301      	adds	r3, #1
 80036bc:	72bb      	strb	r3, [r7, #10]
 80036be:	7abb      	ldrb	r3, [r7, #10]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d9f1      	bls.n	80036a8 <Booster_union_converter+0x110>
					 }
					 Booster.temperature=f2u8_booster.fVal;
 80036c4:	4b3a      	ldr	r3, [pc, #232]	@ (80037b0 <Booster_union_converter+0x218>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3b      	ldr	r2, [pc, #236]	@ (80037b8 <Booster_union_converter+0x220>)
 80036ca:	6193      	str	r3, [r2, #24]


					 for(uint8_t i=0;i<4;i++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	727b      	strb	r3, [r7, #9]
 80036d0:	e00a      	b.n	80036e8 <Booster_union_converter+0x150>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+29];
 80036d2:	7a7b      	ldrb	r3, [r7, #9]
 80036d4:	f103 021d 	add.w	r2, r3, #29
 80036d8:	7a7b      	ldrb	r3, [r7, #9]
 80036da:	4934      	ldr	r1, [pc, #208]	@ (80037ac <Booster_union_converter+0x214>)
 80036dc:	5c89      	ldrb	r1, [r1, r2]
 80036de:	4a34      	ldr	r2, [pc, #208]	@ (80037b0 <Booster_union_converter+0x218>)
 80036e0:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80036e2:	7a7b      	ldrb	r3, [r7, #9]
 80036e4:	3301      	adds	r3, #1
 80036e6:	727b      	strb	r3, [r7, #9]
 80036e8:	7a7b      	ldrb	r3, [r7, #9]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d9f1      	bls.n	80036d2 <Booster_union_converter+0x13a>
					 }
					 Booster.accx=f2u8_booster.fVal;
 80036ee:	4b30      	ldr	r3, [pc, #192]	@ (80037b0 <Booster_union_converter+0x218>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <Booster_union_converter+0x220>)
 80036f4:	61d3      	str	r3, [r2, #28]


					 for(uint8_t i=0;i<4;i++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	723b      	strb	r3, [r7, #8]
 80036fa:	e00a      	b.n	8003712 <Booster_union_converter+0x17a>
					 {
						 f2u8_booster.array[i]=RS_rx_buffer[i+33];
 80036fc:	7a3b      	ldrb	r3, [r7, #8]
 80036fe:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8003702:	7a3b      	ldrb	r3, [r7, #8]
 8003704:	4929      	ldr	r1, [pc, #164]	@ (80037ac <Booster_union_converter+0x214>)
 8003706:	5c89      	ldrb	r1, [r1, r2]
 8003708:	4a29      	ldr	r2, [pc, #164]	@ (80037b0 <Booster_union_converter+0x218>)
 800370a:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800370c:	7a3b      	ldrb	r3, [r7, #8]
 800370e:	3301      	adds	r3, #1
 8003710:	723b      	strb	r3, [r7, #8]
 8003712:	7a3b      	ldrb	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d9f1      	bls.n	80036fc <Booster_union_converter+0x164>
					 }
					 Booster.accy=f2u8_booster.fVal;
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <Booster_union_converter+0x218>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <Booster_union_converter+0x220>)
 800371e:	6213      	str	r3, [r2, #32]


				      for(uint8_t i=0;i<4;i++)
 8003720:	2300      	movs	r3, #0
 8003722:	71fb      	strb	r3, [r7, #7]
 8003724:	e00a      	b.n	800373c <Booster_union_converter+0x1a4>
					 {
				    	  f2u8_booster.array[i]=RS_rx_buffer[i+37];
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	491f      	ldr	r1, [pc, #124]	@ (80037ac <Booster_union_converter+0x214>)
 8003730:	5c89      	ldrb	r1, [r1, r2]
 8003732:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <Booster_union_converter+0x218>)
 8003734:	54d1      	strb	r1, [r2, r3]
				      for(uint8_t i=0;i<4;i++)
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	3301      	adds	r3, #1
 800373a:	71fb      	strb	r3, [r7, #7]
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d9f1      	bls.n	8003726 <Booster_union_converter+0x18e>
					 }
				      Booster.accz=f2u8_booster.fVal;
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <Booster_union_converter+0x218>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	@ (80037b8 <Booster_union_converter+0x220>)
 8003748:	6253      	str	r3, [r2, #36]	@ 0x24

					  for(uint8_t i=0;i<4;i++)
 800374a:	2300      	movs	r3, #0
 800374c:	71bb      	strb	r3, [r7, #6]
 800374e:	e00a      	b.n	8003766 <Booster_union_converter+0x1ce>
					 {
						  f2u8_booster.array[i]=RS_rx_buffer[i+41];
 8003750:	79bb      	ldrb	r3, [r7, #6]
 8003752:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8003756:	79bb      	ldrb	r3, [r7, #6]
 8003758:	4914      	ldr	r1, [pc, #80]	@ (80037ac <Booster_union_converter+0x214>)
 800375a:	5c89      	ldrb	r1, [r1, r2]
 800375c:	4a14      	ldr	r2, [pc, #80]	@ (80037b0 <Booster_union_converter+0x218>)
 800375e:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t i=0;i<4;i++)
 8003760:	79bb      	ldrb	r3, [r7, #6]
 8003762:	3301      	adds	r3, #1
 8003764:	71bb      	strb	r3, [r7, #6]
 8003766:	79bb      	ldrb	r3, [r7, #6]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d9f1      	bls.n	8003750 <Booster_union_converter+0x1b8>
					 }
					  Booster.normal=f2u8_booster.fVal;
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <Booster_union_converter+0x218>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a11      	ldr	r2, [pc, #68]	@ (80037b8 <Booster_union_converter+0x220>)
 8003772:	6293      	str	r3, [r2, #40]	@ 0x28

					  for(uint8_t i=0;i<4;i++)
 8003774:	2300      	movs	r3, #0
 8003776:	717b      	strb	r3, [r7, #5]
 8003778:	e00a      	b.n	8003790 <Booster_union_converter+0x1f8>
					 {
						  f2u8_booster.array[i]=RS_rx_buffer[i+45];
 800377a:	797b      	ldrb	r3, [r7, #5]
 800377c:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8003780:	797b      	ldrb	r3, [r7, #5]
 8003782:	490a      	ldr	r1, [pc, #40]	@ (80037ac <Booster_union_converter+0x214>)
 8003784:	5c89      	ldrb	r1, [r1, r2]
 8003786:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <Booster_union_converter+0x218>)
 8003788:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t i=0;i<4;i++)
 800378a:	797b      	ldrb	r3, [r7, #5]
 800378c:	3301      	adds	r3, #1
 800378e:	717b      	strb	r3, [r7, #5]
 8003790:	797b      	ldrb	r3, [r7, #5]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d9f1      	bls.n	800377a <Booster_union_converter+0x1e2>
					 }
					  Booster.pitch=f2u8_booster.fVal;
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <Booster_union_converter+0x218>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <Booster_union_converter+0x220>)
 800379c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000674 	.word	0x20000674
 80037b0:	20000970 	.word	0x20000970
 80037b4:	200006c4 	.word	0x200006c4
 80037b8:	20000800 	.word	0x20000800

080037bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c0:	b672      	cpsid	i
}
 80037c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <Error_Handler+0x8>

080037c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <HAL_MspInit+0x4c>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <HAL_MspInit+0x4c>)
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <HAL_MspInit+0x4c>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_MspInit+0x4c>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	4a08      	ldr	r2, [pc, #32]	@ (8003814 <HAL_MspInit+0x4c>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037fa:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <HAL_MspInit+0x4c>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_ADC_MspInit+0x8c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d12f      	bne.n	800389a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	6453      	str	r3, [r2, #68]	@ 0x44
 800384a:	4b17      	ldr	r3, [pc, #92]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6313      	str	r3, [r2, #48]	@ 0x30
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_ADC_MspInit+0x90>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8003872:	2304      	movs	r3, #4
 8003874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003876:	2303      	movs	r3, #3
 8003878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	4619      	mov	r1, r3
 8003884:	4809      	ldr	r0, [pc, #36]	@ (80038ac <HAL_ADC_MspInit+0x94>)
 8003886:	f001 fe0b 	bl	80054a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	2012      	movs	r0, #18
 8003890:	f001 f9cd 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003894:	2012      	movs	r0, #18
 8003896:	f001 f9e6 	bl	8004c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800389a:	bf00      	nop
 800389c:	3728      	adds	r7, #40	@ 0x28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40012000 	.word	0x40012000
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40020800 	.word	0x40020800

080038b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	@ 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a19      	ldr	r2, [pc, #100]	@ (8003934 <HAL_I2C_MspInit+0x84>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d12b      	bne.n	800392a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038ee:	23c0      	movs	r3, #192	@ 0xc0
 80038f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038f2:	2312      	movs	r3, #18
 80038f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fa:	2303      	movs	r3, #3
 80038fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038fe:	2304      	movs	r3, #4
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	4619      	mov	r1, r3
 8003908:	480c      	ldr	r0, [pc, #48]	@ (800393c <HAL_I2C_MspInit+0x8c>)
 800390a:	f001 fdc9 	bl	80054a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 8003918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800391c:	6413      	str	r3, [r2, #64]	@ 0x40
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_I2C_MspInit+0x88>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	@ 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40005400 	.word	0x40005400
 8003938:	40023800 	.word	0x40023800
 800393c:	40020400 	.word	0x40020400

08003940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	@ (80039c4 <HAL_SPI_MspInit+0x84>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d12b      	bne.n	80039ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 800396c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003970:	6453      	str	r3, [r2, #68]	@ 0x44
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a10      	ldr	r2, [pc, #64]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <HAL_SPI_MspInit+0x88>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800399a:	23e0      	movs	r3, #224	@ 0xe0
 800399c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039aa:	2305      	movs	r3, #5
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	4805      	ldr	r0, [pc, #20]	@ (80039cc <HAL_SPI_MspInit+0x8c>)
 80039b6:	f001 fd73 	bl	80054a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	@ 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40013000 	.word	0x40013000
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020000 	.word	0x40020000

080039d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a18 <HAL_TIM_Base_MspInit+0x48>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d115      	bne.n	8003a0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <HAL_TIM_Base_MspInit+0x4c>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	4a0c      	ldr	r2, [pc, #48]	@ (8003a1c <HAL_TIM_Base_MspInit+0x4c>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <HAL_TIM_Base_MspInit+0x4c>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	201a      	movs	r0, #26
 8003a04:	f001 f913 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a08:	201a      	movs	r0, #26
 8003a0a:	f001 f92c 	bl	8004c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40023800 	.word	0x40023800

08003a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b090      	sub	sp, #64	@ 0x40
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a78      	ldr	r2, [pc, #480]	@ (8003c20 <HAL_UART_MspInit+0x200>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d12c      	bne.n	8003a9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a46:	4b77      	ldr	r3, [pc, #476]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	4a76      	ldr	r2, [pc, #472]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a52:	4b74      	ldr	r3, [pc, #464]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a62:	4b70      	ldr	r3, [pc, #448]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4a6f      	ldr	r2, [pc, #444]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a92:	4619      	mov	r1, r3
 8003a94:	4864      	ldr	r0, [pc, #400]	@ (8003c28 <HAL_UART_MspInit+0x208>)
 8003a96:	f001 fd03 	bl	80054a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a9a:	e13a      	b.n	8003d12 <HAL_UART_MspInit+0x2f2>
  else if(huart->Instance==USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a62      	ldr	r2, [pc, #392]	@ (8003c2c <HAL_UART_MspInit+0x20c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d134      	bne.n	8003b10 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	4a5d      	ldr	r2, [pc, #372]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	4b57      	ldr	r3, [pc, #348]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad2:	4b54      	ldr	r3, [pc, #336]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8003ade:	230c      	movs	r3, #12
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aee:	2307      	movs	r3, #7
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003af6:	4619      	mov	r1, r3
 8003af8:	484b      	ldr	r0, [pc, #300]	@ (8003c28 <HAL_UART_MspInit+0x208>)
 8003afa:	f001 fcd1 	bl	80054a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2101      	movs	r1, #1
 8003b02:	2026      	movs	r0, #38	@ 0x26
 8003b04:	f001 f893 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b08:	2026      	movs	r0, #38	@ 0x26
 8003b0a:	f001 f8ac 	bl	8004c66 <HAL_NVIC_EnableIRQ>
}
 8003b0e:	e100      	b.n	8003d12 <HAL_UART_MspInit+0x2f2>
  else if(huart->Instance==USART3)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a46      	ldr	r2, [pc, #280]	@ (8003c30 <HAL_UART_MspInit+0x210>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f040 8094 	bne.w	8003c44 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	4a3f      	ldr	r2, [pc, #252]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	4a38      	ldr	r2, [pc, #224]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4a31      	ldr	r2, [pc, #196]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b64:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <HAL_UART_MspInit+0x204>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8003b70:	2320      	movs	r3, #32
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b80:	2307      	movs	r3, #7
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b88:	4619      	mov	r1, r3
 8003b8a:	482a      	ldr	r0, [pc, #168]	@ (8003c34 <HAL_UART_MspInit+0x214>)
 8003b8c:	f001 fc88 	bl	80054a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8003b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	2302      	movs	r3, #2
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ba2:	2307      	movs	r3, #7
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8003ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	4822      	ldr	r0, [pc, #136]	@ (8003c38 <HAL_UART_MspInit+0x218>)
 8003bae:	f001 fc77 	bl	80054a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003bb2:	4b22      	ldr	r3, [pc, #136]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bb4:	4a22      	ldr	r2, [pc, #136]	@ (8003c40 <HAL_UART_MspInit+0x220>)
 8003bb6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003bb8:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003bbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bda:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003be0:	4b16      	ldr	r3, [pc, #88]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003bf2:	4812      	ldr	r0, [pc, #72]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003bf4:	f001 f852 	bl	8004c9c <HAL_DMA_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8003bfe:	f7ff fddd 	bl	80037bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c08:	4a0c      	ldr	r2, [pc, #48]	@ (8003c3c <HAL_UART_MspInit+0x21c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2027      	movs	r0, #39	@ 0x27
 8003c14:	f001 f80b 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c18:	2027      	movs	r0, #39	@ 0x27
 8003c1a:	f001 f824 	bl	8004c66 <HAL_NVIC_EnableIRQ>
}
 8003c1e:	e078      	b.n	8003d12 <HAL_UART_MspInit+0x2f2>
 8003c20:	40004c00 	.word	0x40004c00
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020000 	.word	0x40020000
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40004800 	.word	0x40004800
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	20000568 	.word	0x20000568
 8003c40:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <HAL_UART_MspInit+0x2fc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d161      	bne.n	8003d12 <HAL_UART_MspInit+0x2f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b33      	ldr	r3, [pc, #204]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	4a32      	ldr	r2, [pc, #200]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5e:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7a:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <HAL_UART_MspInit+0x300>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c86:	23c0      	movs	r3, #192	@ 0xc0
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c96:	2308      	movs	r3, #8
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4820      	ldr	r0, [pc, #128]	@ (8003d24 <HAL_UART_MspInit+0x304>)
 8003ca2:	f001 fbfd 	bl	80054a0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003ca8:	4a20      	ldr	r2, [pc, #128]	@ (8003d2c <HAL_UART_MspInit+0x30c>)
 8003caa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cae:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003cb2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cba:	4b1b      	ldr	r3, [pc, #108]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cc8:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cce:	4b16      	ldr	r3, [pc, #88]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003cd4:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cda:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003ce6:	4810      	ldr	r0, [pc, #64]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003ce8:	f000 ffd8 	bl	8004c9c <HAL_DMA_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 8003cf2:	f7ff fd63 	bl	80037bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <HAL_UART_MspInit+0x308>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	2047      	movs	r0, #71	@ 0x47
 8003d08:	f000 ff91 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d0c:	2047      	movs	r0, #71	@ 0x47
 8003d0e:	f000 ffaa 	bl	8004c66 <HAL_NVIC_EnableIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3740      	adds	r7, #64	@ 0x40
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40011400 	.word	0x40011400
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020800 	.word	0x40020800
 8003d28:	200005c8 	.word	0x200005c8
 8003d2c:	40026428 	.word	0x40026428

08003d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <NMI_Handler+0x4>

08003d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <HardFault_Handler+0x4>

08003d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <MemManage_Handler+0x4>

08003d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <BusFault_Handler+0x4>

08003d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <UsageFault_Handler+0x4>

08003d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d86:	f000 f9a7 	bl	80040d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d94:	4802      	ldr	r0, [pc, #8]	@ (8003da0 <DMA1_Stream1_IRQHandler+0x10>)
 8003d96:	f001 f919 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000568 	.word	0x20000568

08003da4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003da8:	4802      	ldr	r0, [pc, #8]	@ (8003db4 <ADC_IRQHandler+0x10>)
 8003daa:	f000 fafb 	bl	80043a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000031c 	.word	0x2000031c

08003db8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003dbc:	4802      	ldr	r0, [pc, #8]	@ (8003dc8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003dbe:	f004 fb85 	bl	80084cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000410 	.word	0x20000410

08003dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dd0:	4802      	ldr	r0, [pc, #8]	@ (8003ddc <USART2_IRQHandler+0x10>)
 8003dd2:	f004 fe9f 	bl	8008b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000049c 	.word	0x2000049c

08003de0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003de4:	4802      	ldr	r0, [pc, #8]	@ (8003df0 <USART3_IRQHandler+0x10>)
 8003de6:	f004 fe95 	bl	8008b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200004e0 	.word	0x200004e0

08003df4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003df8:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <DMA2_Stream1_IRQHandler+0x10>)
 8003dfa:	f001 f8e7 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200005c8 	.word	0x200005c8

08003e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e0c:	4802      	ldr	r0, [pc, #8]	@ (8003e18 <OTG_FS_IRQHandler+0x10>)
 8003e0e:	f001 ff90 	bl	8005d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20001e70 	.word	0x20001e70

08003e1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e20:	4802      	ldr	r0, [pc, #8]	@ (8003e2c <USART6_IRQHandler+0x10>)
 8003e22:	f004 fe77 	bl	8008b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000524 	.word	0x20000524

08003e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return 1;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_kill>:

int _kill(int pid, int sig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e4a:	f00c f8f1 	bl	8010030 <__errno>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2216      	movs	r2, #22
 8003e52:	601a      	str	r2, [r3, #0]
  return -1;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_exit>:

void _exit (int status)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ffe7 	bl	8003e40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <_exit+0x12>

08003e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e00a      	b.n	8003e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e88:	f3af 8000 	nop.w
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	60ba      	str	r2, [r7, #8]
 8003e94:	b2ca      	uxtb	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	dbf0      	blt.n	8003e88 <_read+0x12>
  }

  return len;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e009      	b.n	8003ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	60ba      	str	r2, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dbf1      	blt.n	8003ec2 <_write+0x12>
  }
  return len;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_close>:

int _close(int file)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f10:	605a      	str	r2, [r3, #4]
  return 0;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_isatty>:

int _isatty(int file)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f28:	2301      	movs	r3, #1
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <_sbrk+0x5c>)
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <_sbrk+0x60>)
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <_sbrk+0x64>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <_sbrk+0x64>)
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <_sbrk+0x68>)
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f72:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <_sbrk+0x64>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d207      	bcs.n	8003f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f80:	f00c f856 	bl	8010030 <__errno>
 8003f84:	4603      	mov	r3, r0
 8003f86:	220c      	movs	r2, #12
 8003f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e009      	b.n	8003fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f90:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <_sbrk+0x64>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <_sbrk+0x64>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4a05      	ldr	r2, [pc, #20]	@ (8003fb4 <_sbrk+0x64>)
 8003fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20020000 	.word	0x20020000
 8003fb0:	00000400 	.word	0x00000400
 8003fb4:	20000974 	.word	0x20000974
 8003fb8:	200026e8 	.word	0x200026e8

08003fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <SystemInit+0x20>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	4a05      	ldr	r2, [pc, #20]	@ (8003fdc <SystemInit+0x20>)
 8003fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fe6:	490e      	ldr	r1, [pc, #56]	@ (8004020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8004024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fec:	e002      	b.n	8003ff4 <LoopCopyDataInit>

08003fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ff2:	3304      	adds	r3, #4

08003ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff8:	d3f9      	bcc.n	8003fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8004028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800402c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004000:	e001      	b.n	8004006 <LoopFillZerobss>

08004002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004004:	3204      	adds	r2, #4

08004006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004008:	d3fb      	bcc.n	8004002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800400a:	f7ff ffd7 	bl	8003fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400e:	f00c f815 	bl	801003c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004012:	f7fd fe21 	bl	8001c58 <main>
  bx  lr    
 8004016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800401c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004020:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8004024:	080155c0 	.word	0x080155c0
  ldr r2, =_sbss
 8004028:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 800402c:	200026e8 	.word	0x200026e8

08004030 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004030:	e7fe      	b.n	8004030 <CAN1_RX0_IRQHandler>
	...

08004034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <HAL_Init+0x40>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0d      	ldr	r2, [pc, #52]	@ (8004074 <HAL_Init+0x40>)
 800403e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <HAL_Init+0x40>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800404e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <HAL_Init+0x40>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 fddb 	bl	8004c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	200f      	movs	r0, #15
 8004064:	f000 f808 	bl	8004078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7ff fbae 	bl	80037c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_InitTick+0x54>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_InitTick+0x58>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fdf3 	bl	8004c82 <HAL_SYSTICK_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00e      	b.n	80040c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d80a      	bhi.n	80040c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f000 fdbb 	bl	8004c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b8:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <HAL_InitTick+0x5c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000004 	.word	0x20000004
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	20000008 	.word	0x20000008

080040d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_IncTick+0x20>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_IncTick+0x24>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <HAL_IncTick+0x24>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	20000978 	.word	0x20000978

08004100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return uwTick;
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_GetTick+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000978 	.word	0x20000978

08004118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7ff ffee 	bl	8004100 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d005      	beq.n	800413e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <HAL_Delay+0x44>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413e:	bf00      	nop
 8004140:	f7ff ffde 	bl	8004100 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	429a      	cmp	r2, r3
 800414e:	d8f7      	bhi.n	8004140 <HAL_Delay+0x28>
  {
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c

08004160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e033      	b.n	80041de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fb4a 	bl	8003818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041a6:	f023 0302 	bic.w	r3, r3, #2
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fb5a 	bl	800486c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	f043 0201 	orr.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80041ce:	e001      	b.n	80041d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_Start_IT+0x1a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0bd      	b.n	800437e <HAL_ADC_Start_IT+0x196>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d018      	beq.n	800424a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004228:	4b58      	ldr	r3, [pc, #352]	@ (800438c <HAL_ADC_Start_IT+0x1a4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a58      	ldr	r2, [pc, #352]	@ (8004390 <HAL_ADC_Start_IT+0x1a8>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0c9a      	lsrs	r2, r3, #18
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800423c:	e002      	b.n	8004244 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3b01      	subs	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f9      	bne.n	800423e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	f040 8085 	bne.w	8004364 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004284:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004298:	d106      	bne.n	80042a8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f023 0206 	bic.w	r2, r3, #6
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80042a6:	e002      	b.n	80042ae <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <HAL_ADC_Start_IT+0x1ac>)
 80042b8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80042c2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042d2:	f043 0320 	orr.w	r3, r3, #32
 80042d6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d12a      	bne.n	800433a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <HAL_ADC_Start_IT+0x1b0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d015      	beq.n	800431a <HAL_ADC_Start_IT+0x132>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <HAL_ADC_Start_IT+0x1b4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d105      	bne.n	8004304 <HAL_ADC_Start_IT+0x11c>
 80042f8:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <HAL_ADC_Start_IT+0x1ac>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a25      	ldr	r2, [pc, #148]	@ (80043a0 <HAL_ADC_Start_IT+0x1b8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d136      	bne.n	800437c <HAL_ADC_Start_IT+0x194>
 800430e:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <HAL_ADC_Start_IT+0x1ac>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d130      	bne.n	800437c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d129      	bne.n	800437c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e020      	b.n	800437c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <HAL_ADC_Start_IT+0x1b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d11b      	bne.n	800437c <HAL_ADC_Start_IT+0x194>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d114      	bne.n	800437c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004360:	609a      	str	r2, [r3, #8]
 8004362:	e00b      	b.n	800437c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	f043 0210 	orr.w	r2, r3, #16
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000004 	.word	0x20000004
 8004390:	431bde83 	.word	0x431bde83
 8004394:	40012300 	.word	0x40012300
 8004398:	40012000 	.word	0x40012000
 800439c:	40012100 	.word	0x40012100
 80043a0:	40012200 	.word	0x40012200

080043a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d049      	beq.n	800446e <HAL_ADC_IRQHandler+0xca>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d046      	beq.n	800446e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d12b      	bne.n	800445e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	d127      	bne.n	800445e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004426:	2b00      	cmp	r3, #0
 8004428:	d119      	bne.n	800445e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0220 	bic.w	r2, r2, #32
 8004438:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fbda 	bl	8001c18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0212 	mvn.w	r2, #18
 800446c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d057      	beq.n	8004534 <HAL_ADC_IRQHandler+0x190>
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d054      	beq.n	8004534 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d139      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d12b      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d124      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11d      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d119      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa9d 	bl	8004a64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 020c 	mvn.w	r2, #12
 8004532:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d017      	beq.n	800457a <HAL_ADC_IRQHandler+0x1d6>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d014      	beq.n	800457a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10d      	bne.n	800457a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f837 	bl	80045de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0201 	mvn.w	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004588:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_ADC_IRQHandler+0x218>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d012      	beq.n	80045bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f043 0202 	orr.w	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0220 	mvn.w	r2, #32
 80045aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f820 	bl	80045f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0220 	mvn.w	r2, #32
 80045ba:	601a      	str	r2, [r3, #0]
  }
}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x1c>
 8004620:	2302      	movs	r3, #2
 8004622:	e113      	b.n	800484c <HAL_ADC_ConfigChannel+0x244>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d925      	bls.n	8004680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68d9      	ldr	r1, [r3, #12]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	3b1e      	subs	r3, #30
 800464a:	2207      	movs	r2, #7
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43da      	mvns	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	400a      	ands	r2, r1
 8004658:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68d9      	ldr	r1, [r3, #12]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	4618      	mov	r0, r3
 800466c:	4603      	mov	r3, r0
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4403      	add	r3, r0
 8004672:	3b1e      	subs	r3, #30
 8004674:	409a      	lsls	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e022      	b.n	80046c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6919      	ldr	r1, [r3, #16]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	2207      	movs	r2, #7
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43da      	mvns	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	400a      	ands	r2, r1
 80046a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6919      	ldr	r1, [r3, #16]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4618      	mov	r0, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4403      	add	r3, r0
 80046bc:	409a      	lsls	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d824      	bhi.n	8004718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	3b05      	subs	r3, #5
 80046e0:	221f      	movs	r2, #31
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4618      	mov	r0, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	3b05      	subs	r3, #5
 800470a:	fa00 f203 	lsl.w	r2, r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34
 8004716:	e04c      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d824      	bhi.n	800476a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	3b23      	subs	r3, #35	@ 0x23
 8004732:	221f      	movs	r2, #31
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43da      	mvns	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	400a      	ands	r2, r1
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	4618      	mov	r0, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	3b23      	subs	r3, #35	@ 0x23
 800475c:	fa00 f203 	lsl.w	r2, r0, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
 8004768:	e023      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	3b41      	subs	r3, #65	@ 0x41
 800477c:	221f      	movs	r2, #31
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	400a      	ands	r2, r1
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	4618      	mov	r0, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	3b41      	subs	r3, #65	@ 0x41
 80047a6:	fa00 f203 	lsl.w	r2, r0, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047b2:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <HAL_ADC_ConfigChannel+0x250>)
 80047b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a28      	ldr	r2, [pc, #160]	@ (800485c <HAL_ADC_ConfigChannel+0x254>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10f      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1d8>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b12      	cmp	r3, #18
 80047c6:	d10b      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <HAL_ADC_ConfigChannel+0x254>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d12b      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x23a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <HAL_ADC_ConfigChannel+0x258>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <HAL_ADC_ConfigChannel+0x1f4>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b11      	cmp	r3, #17
 80047fa:	d122      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a11      	ldr	r2, [pc, #68]	@ (8004860 <HAL_ADC_ConfigChannel+0x258>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d111      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800481e:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_ADC_ConfigChannel+0x25c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a11      	ldr	r2, [pc, #68]	@ (8004868 <HAL_ADC_ConfigChannel+0x260>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	0c9a      	lsrs	r2, r3, #18
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004834:	e002      	b.n	800483c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	3b01      	subs	r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f9      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40012300 	.word	0x40012300
 800485c:	40012000 	.word	0x40012000
 8004860:	10000012 	.word	0x10000012
 8004864:	20000004 	.word	0x20000004
 8004868:	431bde83 	.word	0x431bde83

0800486c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004874:	4b79      	ldr	r3, [pc, #484]	@ (8004a5c <ADC_Init+0x1f0>)
 8004876:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80048c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	4a58      	ldr	r2, [pc, #352]	@ (8004a60 <ADC_Init+0x1f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	e00f      	b.n	800496a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004968:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0202 	bic.w	r2, r2, #2
 8004978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e1b      	ldrb	r3, [r3, #24]
 8004984:	005a      	lsls	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	3b01      	subs	r3, #1
 80049c4:	035a      	lsls	r2, r3, #13
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	e007      	b.n	80049e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	051a      	lsls	r2, r3, #20
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6899      	ldr	r1, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a22:	025a      	lsls	r2, r3, #9
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	029a      	lsls	r2, r3, #10
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012300 	.word	0x40012300
 8004a60:	0f000001 	.word	0x0f000001

08004a64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a88:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <__NVIC_SetPriorityGrouping+0x44>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a94:	4013      	ands	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aaa:	4a04      	ldr	r2, [pc, #16]	@ (8004abc <__NVIC_SetPriorityGrouping+0x44>)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	60d3      	str	r3, [r2, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac4:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f003 0307 	and.w	r3, r3, #7
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	db0b      	blt.n	8004b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	f003 021f 	and.w	r2, r3, #31
 8004af4:	4907      	ldr	r1, [pc, #28]	@ (8004b14 <__NVIC_EnableIRQ+0x38>)
 8004af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2001      	movs	r0, #1
 8004afe:	fa00 f202 	lsl.w	r2, r0, r2
 8004b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	@ (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	@ (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	@ 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f1c3 0307 	rsb	r3, r3, #7
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf28      	it	cs
 8004b8a:	2304      	movcs	r3, #4
 8004b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d902      	bls.n	8004b9c <NVIC_EncodePriority+0x30>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3b03      	subs	r3, #3
 8004b9a:	e000      	b.n	8004b9e <NVIC_EncodePriority+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	4313      	orrs	r3, r2
         );
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	@ 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be4:	d301      	bcc.n	8004bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00f      	b.n	8004c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <SysTick_Config+0x40>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bf2:	210f      	movs	r1, #15
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	f7ff ff8e 	bl	8004b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <SysTick_Config+0x40>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c02:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <SysTick_Config+0x40>)
 8004c04:	2207      	movs	r2, #7
 8004c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000e010 	.word	0xe000e010

08004c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff29 	bl	8004a78 <__NVIC_SetPriorityGrouping>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	4603      	mov	r3, r0
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
 8004c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c40:	f7ff ff3e 	bl	8004ac0 <__NVIC_GetPriorityGrouping>
 8004c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f7ff ff8e 	bl	8004b6c <NVIC_EncodePriority>
 8004c50:	4602      	mov	r2, r0
 8004c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff5d 	bl	8004b18 <__NVIC_SetPriority>
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff31 	bl	8004adc <__NVIC_EnableIRQ>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ffa2 	bl	8004bd4 <SysTick_Config>
 8004c90:	4603      	mov	r3, r0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ca8:	f7ff fa2a 	bl	8004100 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e099      	b.n	8004dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd8:	e00f      	b.n	8004cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cda:	f7ff fa11 	bl	8004100 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d908      	bls.n	8004cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e078      	b.n	8004dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e8      	bne.n	8004cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4b38      	ldr	r3, [pc, #224]	@ (8004df4 <HAL_DMA_Init+0x158>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d107      	bne.n	8004d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d117      	bne.n	8004dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb01 	bl	80053a8 <DMA_CheckFifoParam>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2240      	movs	r2, #64	@ 0x40
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e016      	b.n	8004dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fab8 	bl	800533c <DMA_CalcBaseAndBitshift>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	223f      	movs	r2, #63	@ 0x3f
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	f010803f 	.word	0xf010803f

08004df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_DMA_Start_IT+0x26>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e040      	b.n	8004ea0 <HAL_DMA_Start_IT+0xa8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d12f      	bne.n	8004e92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa4a 	bl	80052e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	223f      	movs	r2, #63	@ 0x3f
 8004e52:	409a      	lsls	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0216 	orr.w	r2, r2, #22
 8004e66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e005      	b.n	8004e9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004eb6:	f7ff f923 	bl	8004100 <HAL_GetTick>
 8004eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d008      	beq.n	8004eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2280      	movs	r2, #128	@ 0x80
 8004ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e052      	b.n	8004f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0216 	bic.w	r2, r2, #22
 8004ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_DMA_Abort+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0208 	bic.w	r2, r2, #8
 8004f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f2a:	e013      	b.n	8004f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f2c:	f7ff f8e8 	bl	8004100 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d90c      	bls.n	8004f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e015      	b.n	8004f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e4      	bne.n	8004f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f66:	223f      	movs	r2, #63	@ 0x3f
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00c      	b.n	8004fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8005214 <HAL_DMA_IRQHandler+0x248>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8005218 <HAL_DMA_IRQHandler+0x24c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d013      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	2208      	movs	r2, #8
 8005026:	409a      	lsls	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	2204      	movs	r2, #4
 8005074:	409a      	lsls	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d012      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	2204      	movs	r2, #4
 8005092:	409a      	lsls	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a8:	2210      	movs	r2, #16
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d043      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03c      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c6:	2210      	movs	r2, #16
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d024      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	e01f      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	e016      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0208 	bic.w	r2, r2, #8
 800512a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	2220      	movs	r2, #32
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 808f 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8087 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005162:	2220      	movs	r2, #32
 8005164:	409a      	lsls	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	d136      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0216 	bic.w	r2, r2, #22
 8005184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x1da>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	223f      	movs	r2, #63	@ 0x3f
 80051bc:	409a      	lsls	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d07e      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
        }
        return;
 80051e2:	e079      	b.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10d      	bne.n	800521c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	2b00      	cmp	r3, #0
 8005206:	d031      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
 8005210:	e02c      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
 8005212:	bf00      	nop
 8005214:	20000004 	.word	0x20000004
 8005218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d023      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
 800522c:	e01e      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	2b00      	cmp	r3, #0
 8005272:	d032      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d022      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2205      	movs	r2, #5
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d307      	bcc.n	80052b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <HAL_DMA_IRQHandler+0x2cc>
 80052b2:	e000      	b.n	80052b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	e000      	b.n	80052da <HAL_DMA_IRQHandler+0x30e>
        return;
 80052d8:	bf00      	nop
    }
  }
}
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	d108      	bne.n	8005320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800531e:	e007      	b.n	8005330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	3b10      	subs	r3, #16
 800534c:	4a14      	ldr	r2, [pc, #80]	@ (80053a0 <DMA_CalcBaseAndBitshift+0x64>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005356:	4a13      	ldr	r2, [pc, #76]	@ (80053a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d909      	bls.n	800537e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	659a      	str	r2, [r3, #88]	@ 0x58
 800537c:	e007      	b.n	800538e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	aaaaaaab 	.word	0xaaaaaaab
 80053a4:	08014f04 	.word	0x08014f04

080053a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11f      	bne.n	8005402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d856      	bhi.n	8005476 <DMA_CheckFifoParam+0xce>
 80053c8:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <DMA_CheckFifoParam+0x28>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	080053f3 	.word	0x080053f3
 80053d8:	080053e1 	.word	0x080053e1
 80053dc:	08005477 	.word	0x08005477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d046      	beq.n	800547a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e043      	b.n	800547a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053fa:	d140      	bne.n	800547e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005400:	e03d      	b.n	800547e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800540a:	d121      	bne.n	8005450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d837      	bhi.n	8005482 <DMA_CheckFifoParam+0xda>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <DMA_CheckFifoParam+0x70>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005429 	.word	0x08005429
 800541c:	0800542f 	.word	0x0800542f
 8005420:	08005429 	.word	0x08005429
 8005424:	08005441 	.word	0x08005441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e030      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d025      	beq.n	8005486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800543e:	e022      	b.n	8005486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005448:	d11f      	bne.n	800548a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800544e:	e01c      	b.n	800548a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d903      	bls.n	800545e <DMA_CheckFifoParam+0xb6>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d003      	beq.n	8005464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800545c:	e018      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      break;
 8005462:	e015      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      break;
 8005474:	e00b      	b.n	800548e <DMA_CheckFifoParam+0xe6>
      break;
 8005476:	bf00      	nop
 8005478:	e00a      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800547a:	bf00      	nop
 800547c:	e008      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800547e:	bf00      	nop
 8005480:	e006      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;   
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800548e:	bf00      	nop
    }
  } 
  
  return status; 
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop

080054a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e165      	b.n	8005788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054bc:	2201      	movs	r2, #1
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	f040 8154 	bne.w	8005782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d005      	beq.n	80054f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d130      	bne.n	8005554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	2203      	movs	r2, #3
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005528:	2201      	movs	r2, #1
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 0201 	and.w	r2, r3, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4313      	orrs	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b03      	cmp	r3, #3
 800555e:	d017      	beq.n	8005590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d123      	bne.n	80055e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	08da      	lsrs	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3208      	adds	r2, #8
 80055a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	220f      	movs	r2, #15
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4013      	ands	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	08da      	lsrs	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3208      	adds	r2, #8
 80055de:	69b9      	ldr	r1, [r7, #24]
 80055e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	2203      	movs	r2, #3
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 0203 	and.w	r2, r3, #3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80ae 	beq.w	8005782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	4b5d      	ldr	r3, [pc, #372]	@ (80057a0 <HAL_GPIO_Init+0x300>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	4a5c      	ldr	r2, [pc, #368]	@ (80057a0 <HAL_GPIO_Init+0x300>)
 8005630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005634:	6453      	str	r3, [r2, #68]	@ 0x44
 8005636:	4b5a      	ldr	r3, [pc, #360]	@ (80057a0 <HAL_GPIO_Init+0x300>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005642:	4a58      	ldr	r2, [pc, #352]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a4f      	ldr	r2, [pc, #316]	@ (80057a8 <HAL_GPIO_Init+0x308>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d025      	beq.n	80056ba <HAL_GPIO_Init+0x21a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a4e      	ldr	r2, [pc, #312]	@ (80057ac <HAL_GPIO_Init+0x30c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01f      	beq.n	80056b6 <HAL_GPIO_Init+0x216>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a4d      	ldr	r2, [pc, #308]	@ (80057b0 <HAL_GPIO_Init+0x310>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d019      	beq.n	80056b2 <HAL_GPIO_Init+0x212>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a4c      	ldr	r2, [pc, #304]	@ (80057b4 <HAL_GPIO_Init+0x314>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_GPIO_Init+0x20e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a4b      	ldr	r2, [pc, #300]	@ (80057b8 <HAL_GPIO_Init+0x318>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00d      	beq.n	80056aa <HAL_GPIO_Init+0x20a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a4a      	ldr	r2, [pc, #296]	@ (80057bc <HAL_GPIO_Init+0x31c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <HAL_GPIO_Init+0x206>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a49      	ldr	r2, [pc, #292]	@ (80057c0 <HAL_GPIO_Init+0x320>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d101      	bne.n	80056a2 <HAL_GPIO_Init+0x202>
 800569e:	2306      	movs	r3, #6
 80056a0:	e00c      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056a2:	2307      	movs	r3, #7
 80056a4:	e00a      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056a6:	2305      	movs	r3, #5
 80056a8:	e008      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056aa:	2304      	movs	r3, #4
 80056ac:	e006      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056ae:	2303      	movs	r3, #3
 80056b0:	e004      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_GPIO_Init+0x21c>
 80056ba:	2300      	movs	r3, #0
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	f002 0203 	and.w	r2, r2, #3
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	4093      	lsls	r3, r2
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056cc:	4935      	ldr	r1, [pc, #212]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	3302      	adds	r3, #2
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056da:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056fe:	4a31      	ldr	r2, [pc, #196]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005704:	4b2f      	ldr	r3, [pc, #188]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005728:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800572e:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005752:	4a1c      	ldr	r2, [pc, #112]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005758:	4b1a      	ldr	r3, [pc, #104]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800577c:	4a11      	ldr	r2, [pc, #68]	@ (80057c4 <HAL_GPIO_Init+0x324>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	f67f ae96 	bls.w	80054bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	@ 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40020000 	.word	0x40020000
 80057ac:	40020400 	.word	0x40020400
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020c00 	.word	0x40020c00
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40021400 	.word	0x40021400
 80057c0:	40021800 	.word	0x40021800
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
 80057d4:	4613      	mov	r3, r2
 80057d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057d8:	787b      	ldrb	r3, [r7, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057de:	887a      	ldrh	r2, [r7, #2]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057e4:	e003      	b.n	80057ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	041a      	lsls	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e12b      	b.n	8005a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe f844 	bl	80038b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2224      	movs	r2, #36	@ 0x24
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800584e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800585e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005860:	f001 fccc 	bl	80071fc <HAL_RCC_GetPCLK1Freq>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4a81      	ldr	r2, [pc, #516]	@ (8005a70 <HAL_I2C_Init+0x274>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d807      	bhi.n	8005880 <HAL_I2C_Init+0x84>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a80      	ldr	r2, [pc, #512]	@ (8005a74 <HAL_I2C_Init+0x278>)
 8005874:	4293      	cmp	r3, r2
 8005876:	bf94      	ite	ls
 8005878:	2301      	movls	r3, #1
 800587a:	2300      	movhi	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e006      	b.n	800588e <HAL_I2C_Init+0x92>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a7d      	ldr	r2, [pc, #500]	@ (8005a78 <HAL_I2C_Init+0x27c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	bf94      	ite	ls
 8005888:	2301      	movls	r3, #1
 800588a:	2300      	movhi	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0e7      	b.n	8005a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a78      	ldr	r2, [pc, #480]	@ (8005a7c <HAL_I2C_Init+0x280>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0c9b      	lsrs	r3, r3, #18
 80058a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005a70 <HAL_I2C_Init+0x274>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d802      	bhi.n	80058d0 <HAL_I2C_Init+0xd4>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3301      	adds	r3, #1
 80058ce:	e009      	b.n	80058e4 <HAL_I2C_Init+0xe8>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	4a69      	ldr	r2, [pc, #420]	@ (8005a80 <HAL_I2C_Init+0x284>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	3301      	adds	r3, #1
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	495c      	ldr	r1, [pc, #368]	@ (8005a70 <HAL_I2C_Init+0x274>)
 8005900:	428b      	cmp	r3, r1
 8005902:	d819      	bhi.n	8005938 <HAL_I2C_Init+0x13c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1e59      	subs	r1, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005918:	400b      	ands	r3, r1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_I2C_Init+0x138>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1e59      	subs	r1, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fbb1 f3f3 	udiv	r3, r1, r3
 800592c:	3301      	adds	r3, #1
 800592e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005932:	e051      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005934:	2304      	movs	r3, #4
 8005936:	e04f      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d111      	bne.n	8005964 <HAL_I2C_Init+0x168>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1e58      	subs	r0, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	440b      	add	r3, r1
 800594e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005952:	3301      	adds	r3, #1
 8005954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e012      	b.n	800598a <HAL_I2C_Init+0x18e>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_Init+0x196>
 800598e:	2301      	movs	r3, #1
 8005990:	e022      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <HAL_I2C_Init+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1e58      	subs	r0, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	440b      	add	r3, r1
 80059a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b6:	e00f      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1e58      	subs	r0, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	0099      	lsls	r1, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	6809      	ldr	r1, [r1, #0]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6911      	ldr	r1, [r2, #16]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	000186a0 	.word	0x000186a0
 8005a74:	001e847f 	.word	0x001e847f
 8005a78:	003d08ff 	.word	0x003d08ff
 8005a7c:	431bde83 	.word	0x431bde83
 8005a80:	10624dd3 	.word	0x10624dd3

08005a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b08f      	sub	sp, #60	@ 0x3c
 8005a88:	af0a      	add	r7, sp, #40	@ 0x28
 8005a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e116      	b.n	8005cc4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f008 f875 	bl	800dba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f004 fa62 	bl	8009f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	687e      	ldr	r6, [r7, #4]
 8005ae2:	466d      	mov	r5, sp
 8005ae4:	f106 0410 	add.w	r4, r6, #16
 8005ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005af8:	1d33      	adds	r3, r6, #4
 8005afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005afc:	6838      	ldr	r0, [r7, #0]
 8005afe:	f004 f939 	bl	8009d74 <USB_CoreInit>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0d7      	b.n	8005cc4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f004 fa50 	bl	8009fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	e04a      	b.n	8005bbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	333d      	adds	r3, #61	@ 0x3d
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	333c      	adds	r3, #60	@ 0x3c
 8005b4a:	7bfa      	ldrb	r2, [r7, #15]
 8005b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b4e:	7bfa      	ldrb	r2, [r7, #15]
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	b298      	uxth	r0, r3
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3344      	adds	r3, #68	@ 0x44
 8005b62:	4602      	mov	r2, r0
 8005b64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b66:	7bfa      	ldrb	r2, [r7, #15]
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3340      	adds	r3, #64	@ 0x40
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b7a:	7bfa      	ldrb	r2, [r7, #15]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3348      	adds	r3, #72	@ 0x48
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b8e:	7bfa      	ldrb	r2, [r7, #15]
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	334c      	adds	r3, #76	@ 0x4c
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3354      	adds	r3, #84	@ 0x54
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d3af      	bcc.n	8005b26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	e044      	b.n	8005c56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005be2:	7bfa      	ldrb	r2, [r7, #15]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005bf4:	7bfa      	ldrb	r2, [r7, #15]
 8005bf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	3301      	adds	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
 8005c56:	7bfa      	ldrb	r2, [r7, #15]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d3b5      	bcc.n	8005bcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	687e      	ldr	r6, [r7, #4]
 8005c68:	466d      	mov	r5, sp
 8005c6a:	f106 0410 	add.w	r4, r6, #16
 8005c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c7e:	1d33      	adds	r3, r6, #4
 8005c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f004 f9e8 	bl	800a058 <USB_DevInit>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e014      	b.n	8005cc4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d102      	bne.n	8005cb8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f98c 	bl	8006fd0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f005 fb2a 	bl	800b316 <USB_DevDisconnect>

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ccc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_PCD_Start+0x1c>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e020      	b.n	8005d2a <HAL_PCD_Start+0x5e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d109      	bne.n	8005d0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d005      	beq.n	8005d0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f004 f933 	bl	8009f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f005 fada 	bl	800b2d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d32:	b590      	push	{r4, r7, lr}
 8005d34:	b08d      	sub	sp, #52	@ 0x34
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f005 fb98 	bl	800b47e <USB_GetMode>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 84b7 	bne.w	80066c4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f005 fafc 	bl	800b358 <USB_ReadInterrupts>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 84ad 	beq.w	80066c2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f005 fae9 	bl	800b358 <USB_ReadInterrupts>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d107      	bne.n	8005da0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f002 0202 	and.w	r2, r2, #2
 8005d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 fad7 	bl	800b358 <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d161      	bne.n	8005e78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
 8005dc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	4413      	add	r3, r2
 8005de0:	3304      	adds	r3, #4
 8005de2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	0c5b      	lsrs	r3, r3, #17
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d124      	bne.n	8005e3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d035      	beq.n	8005e68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6a38      	ldr	r0, [r7, #32]
 8005e10:	f005 f90e 	bl	800b030 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e20:	441a      	add	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e32:	441a      	add	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
 8005e38:	e016      	b.n	8005e68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	0c5b      	lsrs	r3, r3, #17
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d110      	bne.n	8005e68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6a38      	ldr	r0, [r7, #32]
 8005e52:	f005 f8ed 	bl	800b030 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e62:	441a      	add	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0210 	orr.w	r2, r2, #16
 8005e76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f005 fa6b 	bl	800b358 <USB_ReadInterrupts>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e8c:	f040 80a7 	bne.w	8005fde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f005 fa70 	bl	800b37e <USB_ReadDevAllOutEpInterrupt>
 8005e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005ea0:	e099      	b.n	8005fd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 808e 	beq.w	8005fca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f005 fa94 	bl	800b3e6 <USB_ReadDevOutEPInterrupt>
 8005ebe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fef0 	bl	8006cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00c      	beq.n	8005f08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	461a      	mov	r2, r3
 8005efc:	2308      	movs	r3, #8
 8005efe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 ffc6 	bl	8006e94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2310      	movs	r3, #16
 8005f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d030      	beq.n	8005f90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f36:	2b80      	cmp	r3, #128	@ 0x80
 8005f38:	d109      	bne.n	8005f4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	78db      	ldrb	r3, [r3, #3]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d108      	bne.n	8005f7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f007 ff2d 	bl	800ddd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2320      	movs	r3, #32
 8005faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	3301      	adds	r3, #1
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f af62 	bne.w	8005ea2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f005 f9b8 	bl	800b358 <USB_ReadInterrupts>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ff2:	f040 80db 	bne.w	80061ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f005 f9d9 	bl	800b3b2 <USB_ReadDevAllInEpInterrupt>
 8006000:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006006:	e0cd      	b.n	80061a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80c2 	beq.w	8006198 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f005 f9ff 	bl	800b422 <USB_ReadDevInEPInterrupt>
 8006024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d057      	beq.n	80060e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	2201      	movs	r2, #1
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	43db      	mvns	r3, r3
 800604a:	69f9      	ldr	r1, [r7, #28]
 800604c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006050:	4013      	ands	r3, r2
 8006052:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2301      	movs	r3, #1
 8006064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d132      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006072:	4613      	mov	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	334c      	adds	r3, #76	@ 0x4c
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4403      	add	r3, r0
 800608e:	3348      	adds	r3, #72	@ 0x48
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4419      	add	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4403      	add	r3, r0
 80060a2:	334c      	adds	r3, #76	@ 0x4c
 80060a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d113      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x3a2>
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	4613      	mov	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	3354      	adds	r3, #84	@ 0x54
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d108      	bne.n	80060d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80060cc:	461a      	mov	r2, r3
 80060ce:	2101      	movs	r1, #1
 80060d0:	f005 fa06 	bl	800b4e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f007 fdf7 	bl	800dcce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f6:	461a      	mov	r2, r3
 80060f8:	2308      	movs	r3, #8
 80060fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006112:	461a      	mov	r2, r3
 8006114:	2310      	movs	r3, #16
 8006116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612e:	461a      	mov	r2, r3
 8006130:	2340      	movs	r3, #64	@ 0x40
 8006132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d023      	beq.n	8006186 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800613e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006140:	6a38      	ldr	r0, [r7, #32]
 8006142:	f004 f8e7 	bl	800a314 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	3338      	adds	r3, #56	@ 0x38
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	78db      	ldrb	r3, [r3, #3]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d108      	bne.n	8006174 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2200      	movs	r2, #0
 8006166:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f007 fe44 	bl	800ddfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006180:	461a      	mov	r2, r3
 8006182:	2302      	movs	r3, #2
 8006184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fd08 	bl	8006ba8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	3301      	adds	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f47f af2e 	bne.w	8006008 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f005 f8d1 	bl	800b358 <USB_ReadInterrupts>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c0:	d122      	bne.n	8006208 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d108      	bne.n	80061f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061e8:	2100      	movs	r1, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f007 ffbe 	bl	800e16c <HAL_PCDEx_LPM_Callback>
 80061f0:	e002      	b.n	80061f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f007 fde2 	bl	800ddbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f005 f8a3 	bl	800b358 <USB_ReadInterrupts>
 8006212:	4603      	mov	r3, r0
 8006214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800621c:	d112      	bne.n	8006244 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f007 fd9e 	bl	800dd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006242:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f005 f885 	bl	800b358 <USB_ReadInterrupts>
 800624e:	4603      	mov	r3, r0
 8006250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006258:	d121      	bne.n	800629e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006268:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d111      	bne.n	8006298 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800628e:	2101      	movs	r1, #1
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f007 ff6b 	bl	800e16c <HAL_PCDEx_LPM_Callback>
 8006296:	e002      	b.n	800629e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f007 fd69 	bl	800dd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f005 f858 	bl	800b358 <USB_ReadInterrupts>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b2:	f040 80b7 	bne.w	8006424 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2110      	movs	r1, #16
 80062d0:	4618      	mov	r0, r3
 80062d2:	f004 f81f 	bl	800a314 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062da:	e046      	b.n	800636a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e8:	461a      	mov	r2, r3
 80062ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800630e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631c:	461a      	mov	r2, r3
 800631e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006322:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006342:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800635e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006362:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	3301      	adds	r3, #1
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006370:	429a      	cmp	r2, r3
 8006372:	d3b3      	bcc.n	80062dc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006382:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006386:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	2b00      	cmp	r3, #0
 800638e:	d016      	beq.n	80063be <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063a0:	f043 030b 	orr.w	r3, r3, #11
 80063a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b6:	f043 030b 	orr.w	r3, r3, #11
 80063ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80063bc:	e015      	b.n	80063ea <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80063d0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80063d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e4:	f043 030b 	orr.w	r3, r3, #11
 80063e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80063fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800640e:	461a      	mov	r2, r3
 8006410:	f005 f866 	bl	800b4e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f004 ff95 	bl	800b358 <USB_ReadInterrupts>
 800642e:	4603      	mov	r3, r0
 8006430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006438:	d124      	bne.n	8006484 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f005 f82b 	bl	800b49a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f003 ffe0 	bl	800a40e <USB_GetDevSpeed>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681c      	ldr	r4, [r3, #0]
 800645a:	f000 fec3 	bl	80071e4 <HAL_RCC_GetHCLKFreq>
 800645e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	4620      	mov	r0, r4
 800646a:	f003 fce5 	bl	8009e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f007 fc55 	bl	800dd1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006482:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f004 ff65 	bl	800b358 <USB_ReadInterrupts>
 800648e:	4603      	mov	r3, r0
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10a      	bne.n	80064ae <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f007 fc32 	bl	800dd02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695a      	ldr	r2, [r3, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f002 0208 	and.w	r2, r2, #8
 80064ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f004 ff50 	bl	800b358 <USB_ReadInterrupts>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064be:	2b80      	cmp	r3, #128	@ 0x80
 80064c0:	d122      	bne.n	8006508 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064ce:	2301      	movs	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d2:	e014      	b.n	80064fe <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d105      	bne.n	80064f8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb27 	bl	8006b46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	429a      	cmp	r2, r3
 8006506:	d3e5      	bcc.n	80064d4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f004 ff23 	bl	800b358 <USB_ReadInterrupts>
 8006512:	4603      	mov	r3, r0
 8006514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800651c:	d13b      	bne.n	8006596 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800651e:	2301      	movs	r3, #1
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
 8006522:	e02b      	b.n	800657c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	3340      	adds	r3, #64	@ 0x40
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d115      	bne.n	8006576 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800654a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800654c:	2b00      	cmp	r3, #0
 800654e:	da12      	bge.n	8006576 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	333f      	adds	r3, #63	@ 0x3f
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fae8 	bl	8006b46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	3301      	adds	r3, #1
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006582:	429a      	cmp	r2, r3
 8006584:	d3ce      	bcc.n	8006524 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f004 fedc 	bl	800b358 <USB_ReadInterrupts>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065aa:	d155      	bne.n	8006658 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065ac:	2301      	movs	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b0:	e045      	b.n	800663e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d12e      	bne.n	8006638 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80065da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da2b      	bge.n	8006638 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80065ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d121      	bne.n	8006638 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f8:	4613      	mov	r3, r2
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006630:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006634:	6053      	str	r3, [r2, #4]
            break;
 8006636:	e007      	b.n	8006648 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	3301      	adds	r3, #1
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006644:	429a      	cmp	r2, r3
 8006646:	d3b4      	bcc.n	80065b2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f004 fe7b 	bl	800b358 <USB_ReadInterrupts>
 8006662:	4603      	mov	r3, r0
 8006664:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666c:	d10a      	bne.n	8006684 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f007 fbd6 	bl	800de20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f004 fe65 	bl	800b358 <USB_ReadInterrupts>
 800668e:	4603      	mov	r3, r0
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d115      	bne.n	80066c4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f007 fbc6 	bl	800de3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e000      	b.n	80066c4 <HAL_PCD_IRQHandler+0x992>
      return;
 80066c2:	bf00      	nop
    }
  }
}
 80066c4:	3734      	adds	r7, #52	@ 0x34
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_PCD_SetAddress+0x1a>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e013      	b.n	800670c <HAL_PCD_SetAddress+0x42>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f004 fdc3 	bl	800b288 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	4603      	mov	r3, r0
 8006724:	70fb      	strb	r3, [r7, #3]
 8006726:	460b      	mov	r3, r1
 8006728:	803b      	strh	r3, [r7, #0]
 800672a:	4613      	mov	r3, r2
 800672c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006736:	2b00      	cmp	r3, #0
 8006738:	da0f      	bge.n	800675a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	f003 020f 	and.w	r2, r3, #15
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	3338      	adds	r3, #56	@ 0x38
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	3304      	adds	r3, #4
 8006750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	705a      	strb	r2, [r3, #1]
 8006758:	e00f      	b.n	800677a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	3304      	adds	r3, #4
 8006772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	b2da      	uxtb	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006786:	883a      	ldrh	r2, [r7, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	78ba      	ldrb	r2, [r7, #2]
 8006790:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067a4:	78bb      	ldrb	r3, [r7, #2]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d102      	bne.n	80067b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_PCD_EP_Open+0xaa>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e00e      	b.n	80067dc <HAL_PCD_EP_Open+0xc8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f003 fe43 	bl	800a458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80067da:	7afb      	ldrb	r3, [r7, #11]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da0f      	bge.n	8006818 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	3338      	adds	r3, #56	@ 0x38
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4413      	add	r3, r2
 800680c:	3304      	adds	r3, #4
 800680e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	705a      	strb	r2, [r3, #1]
 8006816:	e00f      	b.n	8006838 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	f003 020f 	and.w	r2, r3, #15
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_PCD_EP_Close+0x6e>
 800684e:	2302      	movs	r3, #2
 8006850:	e00e      	b.n	8006870 <HAL_PCD_EP_Close+0x8c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	f003 fe81 	bl	800a568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	f003 020f 	and.w	r2, r3, #15
 800688e:	4613      	mov	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2200      	movs	r2, #0
 80068b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d102      	bne.n	80068d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	6979      	ldr	r1, [r7, #20]
 80068ec:	f004 f960 	bl	800abb0 <USB_EP0StartXfer>
 80068f0:	e008      	b.n	8006904 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	f003 ff0e 	bl	800a720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8006930:	681b      	ldr	r3, [r3, #0]
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	460b      	mov	r3, r1
 800694c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3338      	adds	r3, #56	@ 0x38
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2201      	movs	r2, #1
 800697c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	b2da      	uxtb	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d102      	bne.n	8006998 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	f004 f8fe 	bl	800abb0 <USB_EP0StartXfer>
 80069b4:	e008      	b.n	80069c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	f003 feac 	bl	800a720 <USB_EPStartXfer>
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d901      	bls.n	80069f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e050      	b.n	8006a92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	da0f      	bge.n	8006a18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	f003 020f 	and.w	r2, r3, #15
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	3338      	adds	r3, #56	@ 0x38
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	705a      	strb	r2, [r3, #1]
 8006a16:	e00d      	b.n	8006a34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_PCD_EP_SetStall+0x82>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e01e      	b.n	8006a92 <HAL_PCD_EP_SetStall+0xc0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f004 fb3c 	bl	800b0e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	b2d9      	uxtb	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006a82:	461a      	mov	r2, r3
 8006a84:	f004 fd2c 	bl	800b4e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d901      	bls.n	8006ab8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e042      	b.n	8006b3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	da0f      	bge.n	8006ae0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	3338      	adds	r3, #56	@ 0x38
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	705a      	strb	r2, [r3, #1]
 8006ade:	e00f      	b.n	8006b00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	3304      	adds	r3, #4
 8006af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_PCD_EP_ClrStall+0x86>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e00e      	b.n	8006b3e <HAL_PCD_EP_ClrStall+0xa4>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f004 fb44 	bl	800b1bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da0c      	bge.n	8006b74 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	3338      	adds	r3, #56	@ 0x38
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3304      	adds	r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	e00c      	b.n	8006b8e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f004 f963 	bl	800ae60 <USB_EPStopXfer>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3338      	adds	r3, #56	@ 0x38
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3304      	adds	r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d901      	bls.n	8006be0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e06c      	b.n	8006cba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d902      	bls.n	8006bfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3303      	adds	r3, #3
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c04:	e02b      	b.n	8006c5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d902      	bls.n	8006c22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3303      	adds	r3, #3
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6919      	ldr	r1, [r3, #16]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4603      	mov	r3, r0
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f004 f9b7 	bl	800afb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	441a      	add	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d809      	bhi.n	8006c88 <PCD_WriteEmptyTxFifo+0xe0>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d203      	bcs.n	8006c88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1be      	bne.n	8006c06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d811      	bhi.n	8006cb8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	43db      	mvns	r3, r3
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	333c      	adds	r3, #60	@ 0x3c
 8006cdc:	3304      	adds	r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d17b      	bne.n	8006df2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d015      	beq.n	8006d30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4a61      	ldr	r2, [pc, #388]	@ (8006e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	f240 80b9 	bls.w	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80b3 	beq.w	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d26:	461a      	mov	r2, r3
 8006d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2c:	6093      	str	r3, [r2, #8]
 8006d2e:	e0a7      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d46:	461a      	mov	r2, r3
 8006d48:	2320      	movs	r3, #32
 8006d4a:	6093      	str	r3, [r2, #8]
 8006d4c:	e098      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 8093 	bne.w	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8006e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d90f      	bls.n	8006d82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7e:	6093      	str	r3, [r2, #8]
 8006d80:	e07e      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	3304      	adds	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	0159      	lsls	r1, r3, #5
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	440b      	add	r3, r1
 8006da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d114      	bne.n	8006de4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2101      	movs	r1, #1
 8006dd0:	f004 fb86 	bl	800b4e0 <USB_EP0_OutStart>
 8006dd4:	e006      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	691a      	ldr	r2, [r3, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f006 ff54 	bl	800dc98 <HAL_PCD_DataOutStageCallback>
 8006df0:	e046      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d124      	bne.n	8006e44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e10:	461a      	mov	r2, r3
 8006e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e16:	6093      	str	r3, [r2, #8]
 8006e18:	e032      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e30:	461a      	mov	r2, r3
 8006e32:	2320      	movs	r3, #32
 8006e34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f006 ff2b 	bl	800dc98 <HAL_PCD_DataOutStageCallback>
 8006e42:	e01d      	b.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d114      	bne.n	8006e74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f004 fb36 	bl	800b4e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f006 ff0c 	bl	800dc98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	4f54300a 	.word	0x4f54300a
 8006e90:	4f54310a 	.word	0x4f54310a

08006e94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	333c      	adds	r3, #60	@ 0x3c
 8006eac:	3304      	adds	r3, #4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4a15      	ldr	r2, [pc, #84]	@ (8006f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d90e      	bls.n	8006ee8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f006 fec3 	bl	800dc74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d90c      	bls.n	8006f10 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d108      	bne.n	8006f10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	f004 fae8 	bl	800b4e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	4f54300a 	.word	0x4f54300a

08006f20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d107      	bne.n	8006f4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f3e:	883b      	ldrh	r3, [r7, #0]
 8006f40:	0419      	lsls	r1, r3, #16
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f4c:	e028      	b.n	8006fa0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
 8006f60:	e00d      	b.n	8006f7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3340      	adds	r3, #64	@ 0x40
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4413      	add	r3, r2
 8006f76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3ec      	bcc.n	8006f62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f88:	883b      	ldrh	r3, [r7, #0]
 8006f8a:	0418      	lsls	r0, r3, #16
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	4302      	orrs	r2, r0
 8006f98:	3340      	adds	r3, #64	@ 0x40
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	887a      	ldrh	r2, [r7, #2]
 8006fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007002:	f043 0303 	orr.w	r3, r3, #3
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0cc      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800702c:	4b68      	ldr	r3, [pc, #416]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d90c      	bls.n	8007054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	4b65      	ldr	r3, [pc, #404]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007042:	4b63      	ldr	r3, [pc, #396]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0b8      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d020      	beq.n	80070a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800706c:	4b59      	ldr	r3, [pc, #356]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4a58      	ldr	r2, [pc, #352]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007084:	4b53      	ldr	r3, [pc, #332]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4a52      	ldr	r2, [pc, #328]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800708a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800708e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007090:	4b50      	ldr	r3, [pc, #320]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	494d      	ldr	r1, [pc, #308]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d044      	beq.n	8007138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d107      	bne.n	80070c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	4b47      	ldr	r3, [pc, #284]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d119      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e07f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d003      	beq.n	80070d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d6:	4b3f      	ldr	r3, [pc, #252]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e6:	4b3b      	ldr	r3, [pc, #236]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e067      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f6:	4b37      	ldr	r3, [pc, #220]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f023 0203 	bic.w	r2, r3, #3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4934      	ldr	r1, [pc, #208]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	4313      	orrs	r3, r2
 8007106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007108:	f7fc fffa 	bl	8004100 <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710e:	e00a      	b.n	8007126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007110:	f7fc fff6 	bl	8004100 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e04f      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007126:	4b2b      	ldr	r3, [pc, #172]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 020c 	and.w	r2, r3, #12
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	429a      	cmp	r2, r3
 8007136:	d1eb      	bne.n	8007110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007138:	4b25      	ldr	r3, [pc, #148]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d20c      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007146:	4b22      	ldr	r3, [pc, #136]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714e:	4b20      	ldr	r3, [pc, #128]	@ (80071d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e032      	b.n	80071c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800716c:	4b19      	ldr	r3, [pc, #100]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4916      	ldr	r1, [pc, #88]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800717a:	4313      	orrs	r3, r2
 800717c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800718a:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	490e      	ldr	r1, [pc, #56]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800719e:	f000 fb7f 	bl	80078a0 <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	490a      	ldr	r1, [pc, #40]	@ (80071d8 <HAL_RCC_ClockConfig+0x1c0>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	fa22 f303 	lsr.w	r3, r2, r3
 80071b6:	4a09      	ldr	r2, [pc, #36]	@ (80071dc <HAL_RCC_ClockConfig+0x1c4>)
 80071b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ba:	4b09      	ldr	r3, [pc, #36]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc ff5a 	bl	8004078 <HAL_InitTick>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40023c00 	.word	0x40023c00
 80071d4:	40023800 	.word	0x40023800
 80071d8:	08014eec 	.word	0x08014eec
 80071dc:	20000004 	.word	0x20000004
 80071e0:	20000008 	.word	0x20000008

080071e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071e8:	4b03      	ldr	r3, [pc, #12]	@ (80071f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071ea:	681b      	ldr	r3, [r3, #0]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000004 	.word	0x20000004

080071fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007200:	f7ff fff0 	bl	80071e4 <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b05      	ldr	r3, [pc, #20]	@ (800721c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	0a9b      	lsrs	r3, r3, #10
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4903      	ldr	r1, [pc, #12]	@ (8007220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40023800 	.word	0x40023800
 8007220:	08014efc 	.word	0x08014efc

08007224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007228:	f7ff ffdc 	bl	80071e4 <HAL_RCC_GetHCLKFreq>
 800722c:	4602      	mov	r2, r0
 800722e:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	0b5b      	lsrs	r3, r3, #13
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	4903      	ldr	r1, [pc, #12]	@ (8007248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800723a:	5ccb      	ldrb	r3, [r1, r3]
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40023800 	.word	0x40023800
 8007248:	08014efc 	.word	0x08014efc

0800724c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	@ 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d010      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007284:	4b6f      	ldr	r3, [pc, #444]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800728a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	496c      	ldr	r1, [pc, #432]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80072a2:	2301      	movs	r3, #1
 80072a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d010      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80072b2:	4b64      	ldr	r3, [pc, #400]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80072b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c0:	4960      	ldr	r1, [pc, #384]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80072d0:	2301      	movs	r3, #1
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d017      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072e0:	4b58      	ldr	r3, [pc, #352]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80072e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	4955      	ldr	r1, [pc, #340]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fe:	d101      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007300:	2301      	movs	r3, #1
 8007302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800730c:	2301      	movs	r3, #1
 800730e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d017      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800731c:	4b49      	ldr	r3, [pc, #292]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007322:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732a:	4946      	ldr	r1, [pc, #280]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800733a:	d101      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800733c:	2301      	movs	r3, #1
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007348:	2301      	movs	r3, #1
 800734a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 808a 	beq.w	800746e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	4b39      	ldr	r3, [pc, #228]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	4a38      	ldr	r2, [pc, #224]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	@ 0x40
 800736a:	4b36      	ldr	r3, [pc, #216]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007376:	4b34      	ldr	r3, [pc, #208]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a33      	ldr	r2, [pc, #204]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800737c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007380:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007382:	f7fc febd 	bl	8004100 <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007388:	e008      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800738a:	f7fc feb9 	bl	8004100 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e278      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800739c:	4b2a      	ldr	r3, [pc, #168]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073a8:	4b26      	ldr	r3, [pc, #152]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02f      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c0:	6a3a      	ldr	r2, [r7, #32]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d028      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073d0:	4b1e      	ldr	r3, [pc, #120]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073d6:	4b1d      	ldr	r3, [pc, #116]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073dc:	4a19      	ldr	r2, [pc, #100]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073e2:	4b18      	ldr	r3, [pc, #96]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d114      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073ee:	f7fc fe87 	bl	8004100 <HAL_GetTick>
 80073f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fc fe83 	bl	8004100 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e240      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007424:	d114      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007426:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800743a:	4902      	ldr	r1, [pc, #8]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800743c:	4313      	orrs	r3, r2
 800743e:	608b      	str	r3, [r1, #8]
 8007440:	e00c      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007442:	bf00      	nop
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000
 800744c:	42470e40 	.word	0x42470e40
 8007450:	4b4a      	ldr	r3, [pc, #296]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a49      	ldr	r2, [pc, #292]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007456:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800745a:	6093      	str	r3, [r2, #8]
 800745c:	4b47      	ldr	r3, [pc, #284]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800745e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007468:	4944      	ldr	r1, [pc, #272]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800746a:	4313      	orrs	r3, r2
 800746c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007480:	4b3f      	ldr	r3, [pc, #252]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007482:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007490:	4b3a      	ldr	r3, [pc, #232]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007496:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800749e:	4937      	ldr	r1, [pc, #220]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074b2:	4b32      	ldr	r3, [pc, #200]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80074b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074b8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c0:	492e      	ldr	r1, [pc, #184]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d011      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074d4:	4b29      	ldr	r3, [pc, #164]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80074d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074da:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e2:	4926      	ldr	r1, [pc, #152]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074f2:	d101      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80074f4:	2301      	movs	r3, #1
 80074f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007504:	4b1d      	ldr	r3, [pc, #116]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800750a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007512:	491a      	ldr	r1, [pc, #104]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007522:	2b00      	cmp	r3, #0
 8007524:	d011      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007526:	4b15      	ldr	r3, [pc, #84]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800752c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007534:	4911      	ldr	r1, [pc, #68]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007544:	d101      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007546:	2301      	movs	r3, #1
 8007548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d005      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007558:	f040 80ff 	bne.w	800775a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800755c:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007562:	f7fc fdcd 	bl	8004100 <HAL_GetTick>
 8007566:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007568:	e00e      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800756a:	f7fc fdc9 	bl	8004100 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d907      	bls.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e188      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800757c:	40023800 	.word	0x40023800
 8007580:	424711e0 	.word	0x424711e0
 8007584:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007588:	4b7e      	ldr	r3, [pc, #504]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1ea      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d028      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d124      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80075bc:	4b71      	ldr	r3, [pc, #452]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80075be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c2:	0c1b      	lsrs	r3, r3, #16
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	3301      	adds	r3, #1
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	019b      	lsls	r3, r3, #6
 80075e6:	431a      	orrs	r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	3b01      	subs	r3, #1
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	431a      	orrs	r2, r3
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	4961      	ldr	r1, [pc, #388]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d035      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007630:	d130      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007632:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007638:	0c1b      	lsrs	r3, r3, #16
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	3301      	adds	r3, #1
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007644:	4b4f      	ldr	r3, [pc, #316]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800764a:	0f1b      	lsrs	r3, r3, #28
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	019b      	lsls	r3, r3, #6
 800765c:	431a      	orrs	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	3b01      	subs	r3, #1
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	431a      	orrs	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	071b      	lsls	r3, r3, #28
 8007674:	4943      	ldr	r1, [pc, #268]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800767c:	4b41      	ldr	r3, [pc, #260]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800767e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007682:	f023 021f 	bic.w	r2, r3, #31
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	3b01      	subs	r3, #1
 800768c:	493d      	ldr	r1, [pc, #244]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800768e:	4313      	orrs	r3, r2
 8007690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800769c:	2b00      	cmp	r3, #0
 800769e:	d029      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076a8:	d124      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80076aa:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	3301      	adds	r3, #1
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076bc:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	019b      	lsls	r3, r3, #6
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	3b01      	subs	r3, #1
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	431a      	orrs	r2, r3
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	061b      	lsls	r3, r3, #24
 80076e6:	431a      	orrs	r2, r3
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	071b      	lsls	r3, r3, #28
 80076ec:	4925      	ldr	r1, [pc, #148]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d016      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	019b      	lsls	r3, r3, #6
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	3b01      	subs	r3, #1
 8007714:	041b      	lsls	r3, r3, #16
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	4917      	ldr	r1, [pc, #92]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800772e:	4b16      	ldr	r3, [pc, #88]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007734:	f7fc fce4 	bl	8004100 <HAL_GetTick>
 8007738:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800773a:	e008      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800773c:	f7fc fce0 	bl	8004100 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e09f      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	2b01      	cmp	r3, #1
 800775e:	f040 8095 	bne.w	800788c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007768:	f7fc fcca 	bl	8004100 <HAL_GetTick>
 800776c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800776e:	e00f      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007770:	f7fc fcc6 	bl	8004100 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d908      	bls.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e085      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007782:	bf00      	nop
 8007784:	40023800 	.word	0x40023800
 8007788:	42470068 	.word	0x42470068
 800778c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007790:	4b41      	ldr	r3, [pc, #260]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779c:	d0e8      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d009      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02b      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d127      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80077c6:	4b34      	ldr	r3, [pc, #208]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	0c1b      	lsrs	r3, r3, #16
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	3301      	adds	r3, #1
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699a      	ldr	r2, [r3, #24]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	019b      	lsls	r3, r3, #6
 80077e2:	431a      	orrs	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	3b01      	subs	r3, #1
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	061b      	lsls	r3, r3, #24
 80077f4:	4928      	ldr	r1, [pc, #160]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077fc:	4b26      	ldr	r3, [pc, #152]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80077fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007802:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	3b01      	subs	r3, #1
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01d      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800782a:	d118      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800782c:	4b1a      	ldr	r3, [pc, #104]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007832:	0e1b      	lsrs	r3, r3, #24
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	019b      	lsls	r3, r3, #6
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	3b01      	subs	r3, #1
 800784e:	041b      	lsls	r3, r3, #16
 8007850:	431a      	orrs	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	061b      	lsls	r3, r3, #24
 8007856:	4910      	ldr	r1, [pc, #64]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800785e:	4b0f      	ldr	r3, [pc, #60]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007864:	f7fc fc4c 	bl	8004100 <HAL_GetTick>
 8007868:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800786a:	e008      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800786c:	f7fc fc48 	bl	8004100 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d901      	bls.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e007      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800787e:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800788a:	d1ef      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3730      	adds	r7, #48	@ 0x30
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	40023800 	.word	0x40023800
 800789c:	42470070 	.word	0x42470070

080078a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a4:	b0ae      	sub	sp, #184	@ 0xb8
 80078a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078c6:	4bcb      	ldr	r3, [pc, #812]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 030c 	and.w	r3, r3, #12
 80078ce:	2b0c      	cmp	r3, #12
 80078d0:	f200 8206 	bhi.w	8007ce0 <HAL_RCC_GetSysClockFreq+0x440>
 80078d4:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007ce1 	.word	0x08007ce1
 80078e4:	08007ce1 	.word	0x08007ce1
 80078e8:	08007ce1 	.word	0x08007ce1
 80078ec:	08007919 	.word	0x08007919
 80078f0:	08007ce1 	.word	0x08007ce1
 80078f4:	08007ce1 	.word	0x08007ce1
 80078f8:	08007ce1 	.word	0x08007ce1
 80078fc:	08007921 	.word	0x08007921
 8007900:	08007ce1 	.word	0x08007ce1
 8007904:	08007ce1 	.word	0x08007ce1
 8007908:	08007ce1 	.word	0x08007ce1
 800790c:	08007b11 	.word	0x08007b11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4bb9      	ldr	r3, [pc, #740]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007916:	e1e7      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007918:	4bb8      	ldr	r3, [pc, #736]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x35c>)
 800791a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800791e:	e1e3      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007920:	4bb4      	ldr	r3, [pc, #720]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800792c:	4bb1      	ldr	r3, [pc, #708]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d071      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007938:	4bae      	ldr	r3, [pc, #696]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007944:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800794c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800795a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800795e:	4622      	mov	r2, r4
 8007960:	462b      	mov	r3, r5
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f04f 0100 	mov.w	r1, #0
 800796a:	0159      	lsls	r1, r3, #5
 800796c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007970:	0150      	lsls	r0, r2, #5
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4621      	mov	r1, r4
 8007978:	1a51      	subs	r1, r2, r1
 800797a:	6439      	str	r1, [r7, #64]	@ 0x40
 800797c:	4629      	mov	r1, r5
 800797e:	eb63 0301 	sbc.w	r3, r3, r1
 8007982:	647b      	str	r3, [r7, #68]	@ 0x44
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007990:	4649      	mov	r1, r9
 8007992:	018b      	lsls	r3, r1, #6
 8007994:	4641      	mov	r1, r8
 8007996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800799a:	4641      	mov	r1, r8
 800799c:	018a      	lsls	r2, r1, #6
 800799e:	4641      	mov	r1, r8
 80079a0:	1a51      	subs	r1, r2, r1
 80079a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80079a4:	4649      	mov	r1, r9
 80079a6:	eb63 0301 	sbc.w	r3, r3, r1
 80079aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80079b8:	4649      	mov	r1, r9
 80079ba:	00cb      	lsls	r3, r1, #3
 80079bc:	4641      	mov	r1, r8
 80079be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c2:	4641      	mov	r1, r8
 80079c4:	00ca      	lsls	r2, r1, #3
 80079c6:	4610      	mov	r0, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	4622      	mov	r2, r4
 80079ce:	189b      	adds	r3, r3, r2
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d2:	462b      	mov	r3, r5
 80079d4:	460a      	mov	r2, r1
 80079d6:	eb42 0303 	adc.w	r3, r2, r3
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80079e8:	4629      	mov	r1, r5
 80079ea:	024b      	lsls	r3, r1, #9
 80079ec:	4621      	mov	r1, r4
 80079ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079f2:	4621      	mov	r1, r4
 80079f4:	024a      	lsls	r2, r1, #9
 80079f6:	4610      	mov	r0, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007a0c:	f7f9 f95c 	bl	8000cc8 <__aeabi_uldivmod>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4613      	mov	r3, r2
 8007a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a1a:	e067      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a1c:	4b75      	ldr	r3, [pc, #468]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	099b      	lsrs	r3, r3, #6
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a36:	2300      	movs	r3, #0
 8007a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	0159      	lsls	r1, r3, #5
 8007a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a50:	0150      	lsls	r0, r2, #5
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4621      	mov	r1, r4
 8007a58:	1a51      	subs	r1, r2, r1
 8007a5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007a70:	4649      	mov	r1, r9
 8007a72:	018b      	lsls	r3, r1, #6
 8007a74:	4641      	mov	r1, r8
 8007a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	018a      	lsls	r2, r1, #6
 8007a7e:	4641      	mov	r1, r8
 8007a80:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a84:	4649      	mov	r1, r9
 8007a86:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a9e:	4692      	mov	sl, r2
 8007aa0:	469b      	mov	fp, r3
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	eb1a 0303 	adds.w	r3, sl, r3
 8007aa8:	623b      	str	r3, [r7, #32]
 8007aaa:	462b      	mov	r3, r5
 8007aac:	eb4b 0303 	adc.w	r3, fp, r3
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	f04f 0300 	mov.w	r3, #0
 8007aba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007abe:	4629      	mov	r1, r5
 8007ac0:	028b      	lsls	r3, r1, #10
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ac8:	4621      	mov	r1, r4
 8007aca:	028a      	lsls	r2, r1, #10
 8007acc:	4610      	mov	r0, r2
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ad8:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ada:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007ade:	f7f9 f8f3 	bl	8000cc8 <__aeabi_uldivmod>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007aec:	4b41      	ldr	r3, [pc, #260]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	3301      	adds	r3, #1
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b0e:	e0eb      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b10:	4b38      	ldr	r3, [pc, #224]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b1c:	4b35      	ldr	r3, [pc, #212]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d06b      	beq.n	8007c00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b28:	4b32      	ldr	r3, [pc, #200]	@ (8007bf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	099b      	lsrs	r3, r3, #6
 8007b2e:	2200      	movs	r2, #0
 8007b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007b44:	4622      	mov	r2, r4
 8007b46:	462b      	mov	r3, r5
 8007b48:	f04f 0000 	mov.w	r0, #0
 8007b4c:	f04f 0100 	mov.w	r1, #0
 8007b50:	0159      	lsls	r1, r3, #5
 8007b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b56:	0150      	lsls	r0, r2, #5
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	1a51      	subs	r1, r2, r1
 8007b60:	61b9      	str	r1, [r7, #24]
 8007b62:	4629      	mov	r1, r5
 8007b64:	eb63 0301 	sbc.w	r3, r3, r1
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007b76:	4659      	mov	r1, fp
 8007b78:	018b      	lsls	r3, r1, #6
 8007b7a:	4651      	mov	r1, sl
 8007b7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b80:	4651      	mov	r1, sl
 8007b82:	018a      	lsls	r2, r1, #6
 8007b84:	4651      	mov	r1, sl
 8007b86:	ebb2 0801 	subs.w	r8, r2, r1
 8007b8a:	4659      	mov	r1, fp
 8007b8c:	eb63 0901 	sbc.w	r9, r3, r1
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ba0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ba4:	4690      	mov	r8, r2
 8007ba6:	4699      	mov	r9, r3
 8007ba8:	4623      	mov	r3, r4
 8007baa:	eb18 0303 	adds.w	r3, r8, r3
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	462b      	mov	r3, r5
 8007bb2:	eb49 0303 	adc.w	r3, r9, r3
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	024b      	lsls	r3, r1, #9
 8007bc8:	4621      	mov	r1, r4
 8007bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bce:	4621      	mov	r1, r4
 8007bd0:	024a      	lsls	r2, r1, #9
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bda:	2200      	movs	r2, #0
 8007bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bde:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007be0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007be4:	f7f9 f870 	bl	8000cc8 <__aeabi_uldivmod>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4613      	mov	r3, r2
 8007bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bf2:	e065      	b.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x420>
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	00f42400 	.word	0x00f42400
 8007bfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c00:	4b3d      	ldr	r3, [pc, #244]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	099b      	lsrs	r3, r3, #6
 8007c06:	2200      	movs	r2, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c12:	2300      	movs	r3, #0
 8007c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007c1a:	4642      	mov	r2, r8
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	f04f 0000 	mov.w	r0, #0
 8007c22:	f04f 0100 	mov.w	r1, #0
 8007c26:	0159      	lsls	r1, r3, #5
 8007c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c2c:	0150      	lsls	r0, r2, #5
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4641      	mov	r1, r8
 8007c34:	1a51      	subs	r1, r2, r1
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4649      	mov	r1, r9
 8007c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007c4c:	4659      	mov	r1, fp
 8007c4e:	018b      	lsls	r3, r1, #6
 8007c50:	4651      	mov	r1, sl
 8007c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c56:	4651      	mov	r1, sl
 8007c58:	018a      	lsls	r2, r1, #6
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	1a54      	subs	r4, r2, r1
 8007c5e:	4659      	mov	r1, fp
 8007c60:	eb63 0501 	sbc.w	r5, r3, r1
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	00eb      	lsls	r3, r5, #3
 8007c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c72:	00e2      	lsls	r2, r4, #3
 8007c74:	4614      	mov	r4, r2
 8007c76:	461d      	mov	r5, r3
 8007c78:	4643      	mov	r3, r8
 8007c7a:	18e3      	adds	r3, r4, r3
 8007c7c:	603b      	str	r3, [r7, #0]
 8007c7e:	464b      	mov	r3, r9
 8007c80:	eb45 0303 	adc.w	r3, r5, r3
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c92:	4629      	mov	r1, r5
 8007c94:	028b      	lsls	r3, r1, #10
 8007c96:	4621      	mov	r1, r4
 8007c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	028a      	lsls	r2, r1, #10
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ca8:	2200      	movs	r2, #0
 8007caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007cae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cb2:	f7f9 f809 	bl	8000cc8 <__aeabi_uldivmod>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4613      	mov	r3, r2
 8007cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	0f1b      	lsrs	r3, r3, #28
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007cde:	e003      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ce0:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8007ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ce8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	37b8      	adds	r7, #184	@ 0xb8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	00f42400 	.word	0x00f42400

08007d00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e28d      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8083 	beq.w	8007e26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007d20:	4b94      	ldr	r3, [pc, #592]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 030c 	and.w	r3, r3, #12
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d019      	beq.n	8007d60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d2c:	4b91      	ldr	r3, [pc, #580]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d106      	bne.n	8007d46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d38:	4b8e      	ldr	r3, [pc, #568]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d44:	d00c      	beq.n	8007d60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d46:	4b8b      	ldr	r3, [pc, #556]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d4e:	2b0c      	cmp	r3, #12
 8007d50:	d112      	bne.n	8007d78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d52:	4b88      	ldr	r3, [pc, #544]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d5e:	d10b      	bne.n	8007d78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d60:	4b84      	ldr	r3, [pc, #528]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05b      	beq.n	8007e24 <HAL_RCC_OscConfig+0x124>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d157      	bne.n	8007e24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e25a      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d80:	d106      	bne.n	8007d90 <HAL_RCC_OscConfig+0x90>
 8007d82:	4b7c      	ldr	r3, [pc, #496]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a7b      	ldr	r2, [pc, #492]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e01d      	b.n	8007dcc <HAL_RCC_OscConfig+0xcc>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d98:	d10c      	bne.n	8007db4 <HAL_RCC_OscConfig+0xb4>
 8007d9a:	4b76      	ldr	r3, [pc, #472]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a75      	ldr	r2, [pc, #468]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	4b73      	ldr	r3, [pc, #460]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a72      	ldr	r2, [pc, #456]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e00b      	b.n	8007dcc <HAL_RCC_OscConfig+0xcc>
 8007db4:	4b6f      	ldr	r3, [pc, #444]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a6e      	ldr	r2, [pc, #440]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d013      	beq.n	8007dfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd4:	f7fc f994 	bl	8004100 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ddc:	f7fc f990 	bl	8004100 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b64      	cmp	r3, #100	@ 0x64
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e21f      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dee:	4b61      	ldr	r3, [pc, #388]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0f0      	beq.n	8007ddc <HAL_RCC_OscConfig+0xdc>
 8007dfa:	e014      	b.n	8007e26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fc f980 	bl	8004100 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e04:	f7fc f97c 	bl	8004100 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b64      	cmp	r3, #100	@ 0x64
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e20b      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e16:	4b57      	ldr	r3, [pc, #348]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0x104>
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d06f      	beq.n	8007f12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007e32:	4b50      	ldr	r3, [pc, #320]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 030c 	and.w	r3, r3, #12
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d105      	bne.n	8007e56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e56:	4b47      	ldr	r3, [pc, #284]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e5e:	2b0c      	cmp	r3, #12
 8007e60:	d11c      	bne.n	8007e9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e62:	4b44      	ldr	r3, [pc, #272]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d116      	bne.n	8007e9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e6e:	4b41      	ldr	r3, [pc, #260]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_RCC_OscConfig+0x186>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d001      	beq.n	8007e86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e1d3      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e86:	4b3b      	ldr	r3, [pc, #236]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4937      	ldr	r1, [pc, #220]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9a:	e03a      	b.n	8007f12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d020      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ea4:	4b34      	ldr	r3, [pc, #208]	@ (8007f78 <HAL_RCC_OscConfig+0x278>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eaa:	f7fc f929 	bl	8004100 <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eb2:	f7fc f925 	bl	8004100 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e1b4      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f0      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed0:	4b28      	ldr	r3, [pc, #160]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	4925      	ldr	r1, [pc, #148]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	600b      	str	r3, [r1, #0]
 8007ee4:	e015      	b.n	8007f12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ee6:	4b24      	ldr	r3, [pc, #144]	@ (8007f78 <HAL_RCC_OscConfig+0x278>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fc f908 	bl	8004100 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef4:	f7fc f904 	bl	8004100 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e193      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f06:	4b1b      	ldr	r3, [pc, #108]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d036      	beq.n	8007f8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f26:	4b15      	ldr	r3, [pc, #84]	@ (8007f7c <HAL_RCC_OscConfig+0x27c>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7fc f8e8 	bl	8004100 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f34:	f7fc f8e4 	bl	8004100 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e173      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f46:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <HAL_RCC_OscConfig+0x274>)
 8007f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x234>
 8007f52:	e01b      	b.n	8007f8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f54:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <HAL_RCC_OscConfig+0x27c>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5a:	f7fc f8d1 	bl	8004100 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f60:	e00e      	b.n	8007f80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f62:	f7fc f8cd 	bl	8004100 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d907      	bls.n	8007f80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e15c      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
 8007f74:	40023800 	.word	0x40023800
 8007f78:	42470000 	.word	0x42470000
 8007f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f80:	4b8a      	ldr	r3, [pc, #552]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8007f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ea      	bne.n	8007f62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8097 	beq.w	80080c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9e:	4b83      	ldr	r3, [pc, #524]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10f      	bne.n	8007fca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	4b7f      	ldr	r3, [pc, #508]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8007fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fba:	4b7c      	ldr	r3, [pc, #496]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fca:	4b79      	ldr	r3, [pc, #484]	@ (80081b0 <HAL_RCC_OscConfig+0x4b0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d118      	bne.n	8008008 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fd6:	4b76      	ldr	r3, [pc, #472]	@ (80081b0 <HAL_RCC_OscConfig+0x4b0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a75      	ldr	r2, [pc, #468]	@ (80081b0 <HAL_RCC_OscConfig+0x4b0>)
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fe2:	f7fc f88d 	bl	8004100 <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe8:	e008      	b.n	8007ffc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fea:	f7fc f889 	bl	8004100 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e118      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80081b0 <HAL_RCC_OscConfig+0x4b0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f0      	beq.n	8007fea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d106      	bne.n	800801e <HAL_RCC_OscConfig+0x31e>
 8008010:	4b66      	ldr	r3, [pc, #408]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008014:	4a65      	ldr	r2, [pc, #404]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	6713      	str	r3, [r2, #112]	@ 0x70
 800801c:	e01c      	b.n	8008058 <HAL_RCC_OscConfig+0x358>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b05      	cmp	r3, #5
 8008024:	d10c      	bne.n	8008040 <HAL_RCC_OscConfig+0x340>
 8008026:	4b61      	ldr	r3, [pc, #388]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802a:	4a60      	ldr	r2, [pc, #384]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 800802c:	f043 0304 	orr.w	r3, r3, #4
 8008030:	6713      	str	r3, [r2, #112]	@ 0x70
 8008032:	4b5e      	ldr	r3, [pc, #376]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008036:	4a5d      	ldr	r2, [pc, #372]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	6713      	str	r3, [r2, #112]	@ 0x70
 800803e:	e00b      	b.n	8008058 <HAL_RCC_OscConfig+0x358>
 8008040:	4b5a      	ldr	r3, [pc, #360]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008044:	4a59      	ldr	r2, [pc, #356]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	6713      	str	r3, [r2, #112]	@ 0x70
 800804c:	4b57      	ldr	r3, [pc, #348]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008050:	4a56      	ldr	r2, [pc, #344]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008052:	f023 0304 	bic.w	r3, r3, #4
 8008056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d015      	beq.n	800808c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008060:	f7fc f84e 	bl	8004100 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008066:	e00a      	b.n	800807e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008068:	f7fc f84a 	bl	8004100 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e0d7      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807e:	4b4b      	ldr	r3, [pc, #300]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0ee      	beq.n	8008068 <HAL_RCC_OscConfig+0x368>
 800808a:	e014      	b.n	80080b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808c:	f7fc f838 	bl	8004100 <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008092:	e00a      	b.n	80080aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008094:	f7fc f834 	bl	8004100 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e0c1      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080aa:	4b40      	ldr	r3, [pc, #256]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1ee      	bne.n	8008094 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080bc:	4b3b      	ldr	r3, [pc, #236]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	4a3a      	ldr	r2, [pc, #232]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 80080c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80ad 	beq.w	800822c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080d2:	4b36      	ldr	r3, [pc, #216]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 030c 	and.w	r3, r3, #12
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d060      	beq.n	80081a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d145      	bne.n	8008172 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e6:	4b33      	ldr	r3, [pc, #204]	@ (80081b4 <HAL_RCC_OscConfig+0x4b4>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fc f808 	bl	8004100 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f4:	f7fc f804 	bl	8004100 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e093      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008106:	4b29      	ldr	r3, [pc, #164]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	019b      	lsls	r3, r3, #6
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	071b      	lsls	r3, r3, #28
 800813e:	491b      	ldr	r1, [pc, #108]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008140:	4313      	orrs	r3, r2
 8008142:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008144:	4b1b      	ldr	r3, [pc, #108]	@ (80081b4 <HAL_RCC_OscConfig+0x4b4>)
 8008146:	2201      	movs	r2, #1
 8008148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7fb ffd9 	bl	8004100 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008152:	f7fb ffd5 	bl	8004100 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e064      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008164:	4b11      	ldr	r3, [pc, #68]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x452>
 8008170:	e05c      	b.n	800822c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008172:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <HAL_RCC_OscConfig+0x4b4>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fb ffc2 	bl	8004100 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008180:	f7fb ffbe 	bl	8004100 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e04d      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008192:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <HAL_RCC_OscConfig+0x4ac>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f0      	bne.n	8008180 <HAL_RCC_OscConfig+0x480>
 800819e:	e045      	b.n	800822c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d107      	bne.n	80081b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e040      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
 80081ac:	40023800 	.word	0x40023800
 80081b0:	40007000 	.word	0x40007000
 80081b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <HAL_RCC_OscConfig+0x538>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d030      	beq.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d129      	bne.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081de:	429a      	cmp	r2, r3
 80081e0:	d122      	bne.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d119      	bne.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	3b01      	subs	r3, #1
 8008202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008204:	429a      	cmp	r2, r3
 8008206:	d10f      	bne.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008214:	429a      	cmp	r2, r3
 8008216:	d107      	bne.n	8008228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008222:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008224:	429a      	cmp	r2, r3
 8008226:	d001      	beq.n	800822c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40023800 	.word	0x40023800

0800823c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e07b      	b.n	8008346 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800825e:	d009      	beq.n	8008274 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	61da      	str	r2, [r3, #28]
 8008266:	e005      	b.n	8008274 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fb fb56 	bl	8003940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f8:	ea42 0103 	orr.w	r1, r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	0c1b      	lsrs	r3, r3, #16
 8008312:	f003 0104 	and.w	r1, r3, #4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	f003 0210 	and.w	r2, r3, #16
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e041      	b.n	80083e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fb fb2b 	bl	80039d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3304      	adds	r3, #4
 800838a:	4619      	mov	r1, r3
 800838c:	4610      	mov	r0, r2
 800838e:	f000 f9cd 	bl	800872c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d001      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e04e      	b.n	80084a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a23      	ldr	r2, [pc, #140]	@ (80084b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d022      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842e:	d01d      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1f      	ldr	r2, [pc, #124]	@ (80084b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d018      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1e      	ldr	r2, [pc, #120]	@ (80084b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <HAL_TIM_Base_Start_IT+0xd0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00e      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d009      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a19      	ldr	r2, [pc, #100]	@ (80084c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d004      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x80>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	@ (80084c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d111      	bne.n	8008490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b06      	cmp	r3, #6
 800847c:	d010      	beq.n	80084a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0201 	orr.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848e:	e007      	b.n	80084a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40000800 	.word	0x40000800
 80084bc:	40000c00 	.word	0x40000c00
 80084c0:	40010400 	.word	0x40010400
 80084c4:	40014000 	.word	0x40014000
 80084c8:	40001800 	.word	0x40001800

080084cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d122      	bne.n	8008528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d11b      	bne.n	8008528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0202 	mvn.w	r2, #2
 80084f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8ee 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8008514:	e005      	b.n	8008522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8e0 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f8f1 	bl	8008704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b04      	cmp	r3, #4
 8008534:	d122      	bne.n	800857c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b04      	cmp	r3, #4
 8008542:	d11b      	bne.n	800857c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0204 	mvn.w	r2, #4
 800854c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8c4 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8008568:	e005      	b.n	8008576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8b6 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f8c7 	bl	8008704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b08      	cmp	r3, #8
 8008588:	d122      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b08      	cmp	r3, #8
 8008596:	d11b      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0208 	mvn.w	r2, #8
 80085a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2204      	movs	r2, #4
 80085a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f89a 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 80085bc:	e005      	b.n	80085ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f88c 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f89d 	bl	8008704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d122      	bne.n	8008624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d11b      	bne.n	8008624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0210 	mvn.w	r2, #16
 80085f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2208      	movs	r2, #8
 80085fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f870 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8008610:	e005      	b.n	800861e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f862 	bl	80086dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f873 	bl	8008704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b01      	cmp	r3, #1
 8008630:	d10e      	bne.n	8008650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b01      	cmp	r3, #1
 800863e:	d107      	bne.n	8008650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0201 	mvn.w	r2, #1
 8008648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7f9 face 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865a:	2b80      	cmp	r3, #128	@ 0x80
 800865c:	d10e      	bne.n	800867c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008668:	2b80      	cmp	r3, #128	@ 0x80
 800866a:	d107      	bne.n	800867c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f902 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008686:	2b40      	cmp	r3, #64	@ 0x40
 8008688:	d10e      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d107      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f838 	bl	8008718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d10e      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0320 	and.w	r3, r3, #32
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d107      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0220 	mvn.w	r2, #32
 80086cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8cc 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a40      	ldr	r2, [pc, #256]	@ (8008840 <TIM_Base_SetConfig+0x114>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d013      	beq.n	800876c <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874a:	d00f      	beq.n	800876c <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a3d      	ldr	r2, [pc, #244]	@ (8008844 <TIM_Base_SetConfig+0x118>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00b      	beq.n	800876c <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a3c      	ldr	r2, [pc, #240]	@ (8008848 <TIM_Base_SetConfig+0x11c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d007      	beq.n	800876c <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a3b      	ldr	r2, [pc, #236]	@ (800884c <TIM_Base_SetConfig+0x120>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a3a      	ldr	r2, [pc, #232]	@ (8008850 <TIM_Base_SetConfig+0x124>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d108      	bne.n	800877e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2f      	ldr	r2, [pc, #188]	@ (8008840 <TIM_Base_SetConfig+0x114>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d02b      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878c:	d027      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2c      	ldr	r2, [pc, #176]	@ (8008844 <TIM_Base_SetConfig+0x118>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d023      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2b      	ldr	r2, [pc, #172]	@ (8008848 <TIM_Base_SetConfig+0x11c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01f      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a2a      	ldr	r2, [pc, #168]	@ (800884c <TIM_Base_SetConfig+0x120>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d01b      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a29      	ldr	r2, [pc, #164]	@ (8008850 <TIM_Base_SetConfig+0x124>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d017      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a28      	ldr	r2, [pc, #160]	@ (8008854 <TIM_Base_SetConfig+0x128>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a27      	ldr	r2, [pc, #156]	@ (8008858 <TIM_Base_SetConfig+0x12c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00f      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a26      	ldr	r2, [pc, #152]	@ (800885c <TIM_Base_SetConfig+0x130>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00b      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a25      	ldr	r2, [pc, #148]	@ (8008860 <TIM_Base_SetConfig+0x134>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d007      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a24      	ldr	r2, [pc, #144]	@ (8008864 <TIM_Base_SetConfig+0x138>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a23      	ldr	r2, [pc, #140]	@ (8008868 <TIM_Base_SetConfig+0x13c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d108      	bne.n	80087f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a0a      	ldr	r2, [pc, #40]	@ (8008840 <TIM_Base_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d003      	beq.n	8008824 <TIM_Base_SetConfig+0xf8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a0c      	ldr	r2, [pc, #48]	@ (8008850 <TIM_Base_SetConfig+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d103      	bne.n	800882c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	615a      	str	r2, [r3, #20]
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40010000 	.word	0x40010000
 8008844:	40000400 	.word	0x40000400
 8008848:	40000800 	.word	0x40000800
 800884c:	40000c00 	.word	0x40000c00
 8008850:	40010400 	.word	0x40010400
 8008854:	40014000 	.word	0x40014000
 8008858:	40014400 	.word	0x40014400
 800885c:	40014800 	.word	0x40014800
 8008860:	40001800 	.word	0x40001800
 8008864:	40001c00 	.word	0x40001c00
 8008868:	40002000 	.word	0x40002000

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e03f      	b.n	8008926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fb f8b0 	bl	8003a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2224      	movs	r2, #36	@ 0x24
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 ffd7 	bl	800988c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800890c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08a      	sub	sp, #40	@ 0x28
 8008932:	af02      	add	r7, sp, #8
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b20      	cmp	r3, #32
 800894c:	d17c      	bne.n	8008a48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <HAL_UART_Transmit+0x2c>
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e075      	b.n	8008a4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UART_Transmit+0x3e>
 8008968:	2302      	movs	r3, #2
 800896a:	e06e      	b.n	8008a4a <HAL_UART_Transmit+0x11c>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2221      	movs	r2, #33	@ 0x21
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008982:	f7fb fbbd 	bl	8004100 <HAL_GetTick>
 8008986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899c:	d108      	bne.n	80089b0 <HAL_UART_Transmit+0x82>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e003      	b.n	80089b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80089c0:	e02a      	b.n	8008a18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fc51 	bl	8009274 <UART_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e036      	b.n	8008a4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3302      	adds	r3, #2
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e007      	b.n	8008a0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	3301      	adds	r3, #1
 8008a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1cf      	bne.n	80089c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2140      	movs	r1, #64	@ 0x40
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fc21 	bl	8009274 <UART_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e006      	b.n	8008a4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e000      	b.n	8008a4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3720      	adds	r7, #32
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	d11d      	bne.n	8008aa8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <HAL_UART_Receive_IT+0x26>
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e016      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Receive_IT+0x38>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e00f      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fc56 	bl	8009350 <UART_Start_Receive_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	e000      	b.n	8008aaa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d11d      	bne.n	8008b08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_UART_Receive_DMA+0x26>
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e016      	b.n	8008b0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Receive_DMA+0x38>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e00f      	b.n	8008b0a <HAL_UART_Receive_DMA+0x58>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	461a      	mov	r2, r3
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fc64 	bl	80093cc <UART_Start_Receive_DMA>
 8008b04:	4603      	mov	r3, r0
 8008b06:	e000      	b.n	8008b0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b08:	2302      	movs	r3, #2
  }
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b0ba      	sub	sp, #232	@ 0xe8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10f      	bne.n	8008b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <HAL_UART_IRQHandler+0x66>
 8008b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fdcf 	bl	8009716 <UART_Receive_IT>
      return;
 8008b78:	e256      	b.n	8009028 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 80de 	beq.w	8008d40 <HAL_UART_IRQHandler+0x22c>
 8008b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80d1 	beq.w	8008d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <HAL_UART_IRQHandler+0xae>
 8008baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bba:	f043 0201 	orr.w	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <HAL_UART_IRQHandler+0xd2>
 8008bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bde:	f043 0202 	orr.w	r2, r3, #2
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <HAL_UART_IRQHandler+0xf6>
 8008bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d005      	beq.n	8008c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c02:	f043 0204 	orr.w	r2, r3, #4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d011      	beq.n	8008c3a <HAL_UART_IRQHandler+0x126>
 8008c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c32:	f043 0208 	orr.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 81ed 	beq.w	800901e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <HAL_UART_IRQHandler+0x14e>
 8008c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fd5a 	bl	8009716 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6c:	2b40      	cmp	r3, #64	@ 0x40
 8008c6e:	bf0c      	ite	eq
 8008c70:	2301      	moveq	r3, #1
 8008c72:	2300      	movne	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <HAL_UART_IRQHandler+0x17a>
 8008c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d04f      	beq.n	8008d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fc62 	bl	8009558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ca0:	d141      	bne.n	8008d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3314      	adds	r3, #20
 8008ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3314      	adds	r3, #20
 8008cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1d9      	bne.n	8008ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d013      	beq.n	8008d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8008ef0 <HAL_UART_IRQHandler+0x3dc>)
 8008cfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fc f940 	bl	8004f88 <HAL_DMA_Abort_IT>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d016      	beq.n	8008d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1c:	e00e      	b.n	8008d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f99a 	bl	8009058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d24:	e00a      	b.n	8008d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f996 	bl	8009058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2c:	e006      	b.n	8008d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f992 	bl	8009058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008d3a:	e170      	b.n	800901e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3c:	bf00      	nop
    return;
 8008d3e:	e16e      	b.n	800901e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	f040 814a 	bne.w	8008fde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4e:	f003 0310 	and.w	r3, r3, #16
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8143 	beq.w	8008fde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 813c 	beq.w	8008fde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60bb      	str	r3, [r7, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b40      	cmp	r3, #64	@ 0x40
 8008d88:	f040 80b4 	bne.w	8008ef4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8140 	beq.w	8009022 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008daa:	429a      	cmp	r2, r3
 8008dac:	f080 8139 	bcs.w	8009022 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc2:	f000 8088 	beq.w	8008ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	330c      	adds	r3, #12
 8008dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1d9      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3314      	adds	r3, #20
 8008e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3314      	adds	r3, #20
 8008e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e1      	bne.n	8008e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3314      	adds	r3, #20
 8008e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3314      	adds	r3, #20
 8008e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e3      	bne.n	8008e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea6:	f023 0310 	bic.w	r3, r3, #16
 8008eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	330c      	adds	r3, #12
 8008eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008eb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008eba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e3      	bne.n	8008e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fb ffe9 	bl	8004ea8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f8c0 	bl	800906c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eec:	e099      	b.n	8009022 <HAL_UART_IRQHandler+0x50e>
 8008eee:	bf00      	nop
 8008ef0:	0800961f 	.word	0x0800961f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 808b 	beq.w	8009026 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8086 	beq.w	8009026 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e3      	bne.n	8008f1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3314      	adds	r3, #20
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	623b      	str	r3, [r7, #32]
   return(result);
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3314      	adds	r3, #20
 8008f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e3      	bne.n	8008f52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0310 	bic.w	r3, r3, #16
 8008fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008fbc:	61fa      	str	r2, [r7, #28]
 8008fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	69b9      	ldr	r1, [r7, #24]
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e3      	bne.n	8008f98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f848 	bl	800906c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fdc:	e023      	b.n	8009026 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <HAL_UART_IRQHandler+0x4ea>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fb25 	bl	8009646 <UART_Transmit_IT>
    return;
 8008ffc:	e014      	b.n	8009028 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <HAL_UART_IRQHandler+0x514>
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800900e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d008      	beq.n	8009028 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb65 	bl	80096e6 <UART_EndTransmit_IT>
    return;
 800901c:	e004      	b.n	8009028 <HAL_UART_IRQHandler+0x514>
    return;
 800901e:	bf00      	nop
 8009020:	e002      	b.n	8009028 <HAL_UART_IRQHandler+0x514>
      return;
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <HAL_UART_IRQHandler+0x514>
      return;
 8009026:	bf00      	nop
  }
}
 8009028:	37e8      	adds	r7, #232	@ 0xe8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop

08009030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b09c      	sub	sp, #112	@ 0x70
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009090:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800909c:	2b00      	cmp	r3, #0
 800909e:	d172      	bne.n	8009186 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80090a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a2:	2200      	movs	r2, #0
 80090a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	330c      	adds	r3, #12
 80090ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	330c      	adds	r3, #12
 80090c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e5      	bne.n	80090a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3314      	adds	r3, #20
 80090e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80090f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3314      	adds	r3, #20
 80090f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80090fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80090fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800910e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	623b      	str	r3, [r7, #32]
   return(result);
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009124:	663b      	str	r3, [r7, #96]	@ 0x60
 8009126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800912e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e5      	bne.n	800910e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009144:	2220      	movs	r2, #32
 8009146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914e:	2b01      	cmp	r3, #1
 8009150:	d119      	bne.n	8009186 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	60fb      	str	r3, [r7, #12]
   return(result);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f023 0310 	bic.w	r3, r3, #16
 8009168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800916a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	330c      	adds	r3, #12
 8009170:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009172:	61fa      	str	r2, [r7, #28]
 8009174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	617b      	str	r3, [r7, #20]
   return(result);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e5      	bne.n	8009152 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918a:	2b01      	cmp	r3, #1
 800918c:	d106      	bne.n	800919c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009190:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009192:	4619      	mov	r1, r3
 8009194:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009196:	f7ff ff69 	bl	800906c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800919a:	e002      	b.n	80091a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800919c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800919e:	f7f8 fcaf 	bl	8001b00 <HAL_UART_RxCpltCallback>
}
 80091a2:	bf00      	nop
 80091a4:	3770      	adds	r7, #112	@ 0x70
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d108      	bne.n	80091d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	4619      	mov	r1, r3
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff ff4e 	bl	800906c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d0:	e002      	b.n	80091d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff ff36 	bl	8009044 <HAL_UART_RxHalfCpltCallback>
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fc:	2b80      	cmp	r3, #128	@ 0x80
 80091fe:	bf0c      	ite	eq
 8009200:	2301      	moveq	r3, #1
 8009202:	2300      	movne	r3, #0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b21      	cmp	r3, #33	@ 0x21
 8009212:	d108      	bne.n	8009226 <UART_DMAError+0x46>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d005      	beq.n	8009226 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2200      	movs	r2, #0
 800921e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009220:	68b8      	ldr	r0, [r7, #8]
 8009222:	f000 f971 	bl	8009508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009230:	2b40      	cmp	r3, #64	@ 0x40
 8009232:	bf0c      	ite	eq
 8009234:	2301      	moveq	r3, #1
 8009236:	2300      	movne	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b22      	cmp	r3, #34	@ 0x22
 8009246:	d108      	bne.n	800925a <UART_DMAError+0x7a>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d005      	beq.n	800925a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2200      	movs	r2, #0
 8009252:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f000 f97f 	bl	8009558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009266:	68b8      	ldr	r0, [r7, #8]
 8009268:	f7ff fef6 	bl	8009058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800926c:	bf00      	nop
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b090      	sub	sp, #64	@ 0x40
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009284:	e050      	b.n	8009328 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d04c      	beq.n	8009328 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800928e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009294:	f7fa ff34 	bl	8004100 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d241      	bcs.n	8009328 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80092ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	330c      	adds	r3, #12
 80092c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80092c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3314      	adds	r3, #20
 80092de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	613b      	str	r3, [r7, #16]
   return(result);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f023 0301 	bic.w	r3, r3, #1
 80092ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3314      	adds	r3, #20
 80092f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092f8:	623a      	str	r2, [r7, #32]
 80092fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	69f9      	ldr	r1, [r7, #28]
 80092fe:	6a3a      	ldr	r2, [r7, #32]
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	61bb      	str	r3, [r7, #24]
   return(result);
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e5      	bne.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2220      	movs	r2, #32
 8009318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e00f      	b.n	8009348 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	4013      	ands	r3, r2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	bf0c      	ite	eq
 8009338:	2301      	moveq	r3, #1
 800933a:	2300      	movne	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	429a      	cmp	r2, r3
 8009344:	d09f      	beq.n	8009286 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3740      	adds	r7, #64	@ 0x40
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	88fa      	ldrh	r2, [r7, #6]
 8009368:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	88fa      	ldrh	r2, [r7, #6]
 800936e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2222      	movs	r2, #34	@ 0x22
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800939c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695a      	ldr	r2, [r3, #20]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0201 	orr.w	r2, r2, #1
 80093ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0220 	orr.w	r2, r2, #32
 80093bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b098      	sub	sp, #96	@ 0x60
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2222      	movs	r2, #34	@ 0x22
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	4a40      	ldr	r2, [pc, #256]	@ (80094fc <UART_Start_Receive_DMA+0x130>)
 80093fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009400:	4a3f      	ldr	r2, [pc, #252]	@ (8009500 <UART_Start_Receive_DMA+0x134>)
 8009402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009408:	4a3e      	ldr	r2, [pc, #248]	@ (8009504 <UART_Start_Receive_DMA+0x138>)
 800940a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009410:	2200      	movs	r2, #0
 8009412:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	f7fb fce4 	bl	8004df8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d019      	beq.n	800948a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800946c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	330c      	adds	r3, #12
 8009474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009476:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009478:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800947c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e5      	bne.n	8009456 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800949a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3314      	adds	r3, #20
 80094a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80094ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80094b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e5      	bne.n	800948a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3314      	adds	r3, #20
 80094c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	617b      	str	r3, [r7, #20]
   return(result);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3314      	adds	r3, #20
 80094dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094de:	627a      	str	r2, [r7, #36]	@ 0x24
 80094e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6a39      	ldr	r1, [r7, #32]
 80094e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3760      	adds	r7, #96	@ 0x60
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	08009085 	.word	0x08009085
 8009500:	080091ab 	.word	0x080091ab
 8009504:	080091e1 	.word	0x080091e1

08009508 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b089      	sub	sp, #36	@ 0x24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	330c      	adds	r3, #12
 8009516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	330c      	adds	r3, #12
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	61ba      	str	r2, [r7, #24]
 8009532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	613b      	str	r3, [r7, #16]
   return(result);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e5      	bne.n	8009510 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800954c:	bf00      	nop
 800954e:	3724      	adds	r7, #36	@ 0x24
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b095      	sub	sp, #84	@ 0x54
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	330c      	adds	r3, #12
 800957e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009580:	643a      	str	r2, [r7, #64]	@ 0x40
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800958e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3314      	adds	r3, #20
 800959a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3314      	adds	r3, #20
 80095b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e5      	bne.n	8009594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d119      	bne.n	8009604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	330c      	adds	r3, #12
 80095d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	60bb      	str	r3, [r7, #8]
   return(result);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f023 0310 	bic.w	r3, r3, #16
 80095e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	330c      	adds	r3, #12
 80095ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f0:	61ba      	str	r2, [r7, #24]
 80095f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6979      	ldr	r1, [r7, #20]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	613b      	str	r3, [r7, #16]
   return(result);
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e5      	bne.n	80095d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2220      	movs	r2, #32
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009612:	bf00      	nop
 8009614:	3754      	adds	r7, #84	@ 0x54
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff fd0d 	bl	8009058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009646:	b480      	push	{r7}
 8009648:	b085      	sub	sp, #20
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b21      	cmp	r3, #33	@ 0x21
 8009658:	d13e      	bne.n	80096d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009662:	d114      	bne.n	800968e <UART_Transmit_IT+0x48>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d110      	bne.n	800968e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009680:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	621a      	str	r2, [r3, #32]
 800968c:	e008      	b.n	80096a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	1c59      	adds	r1, r3, #1
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6211      	str	r1, [r2, #32]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4619      	mov	r1, r3
 80096ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10f      	bne.n	80096d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e000      	b.n	80096da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096d8:	2302      	movs	r3, #2
  }
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff fc92 	bl	8009030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b08c      	sub	sp, #48	@ 0x30
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b22      	cmp	r3, #34	@ 0x22
 8009728:	f040 80ab 	bne.w	8009882 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009734:	d117      	bne.n	8009766 <UART_Receive_IT+0x50>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d113      	bne.n	8009766 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009746:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b29b      	uxth	r3, r3
 8009750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009754:	b29a      	uxth	r2, r3
 8009756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009758:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975e:	1c9a      	adds	r2, r3, #2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	629a      	str	r2, [r3, #40]	@ 0x28
 8009764:	e026      	b.n	80097b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009778:	d007      	beq.n	800978a <UART_Receive_IT+0x74>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <UART_Receive_IT+0x82>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	e008      	b.n	80097aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	4619      	mov	r1, r3
 80097c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d15a      	bne.n	800987e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0220 	bic.w	r2, r2, #32
 80097d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695a      	ldr	r2, [r3, #20]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0201 	bic.w	r2, r2, #1
 80097f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009804:	2b01      	cmp	r3, #1
 8009806:	d135      	bne.n	8009874 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	330c      	adds	r3, #12
 8009814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	613b      	str	r3, [r7, #16]
   return(result);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f023 0310 	bic.w	r3, r3, #16
 8009824:	627b      	str	r3, [r7, #36]	@ 0x24
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800982e:	623a      	str	r2, [r7, #32]
 8009830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009832:	69f9      	ldr	r1, [r7, #28]
 8009834:	6a3a      	ldr	r2, [r7, #32]
 8009836:	e841 2300 	strex	r3, r2, [r1]
 800983a:	61bb      	str	r3, [r7, #24]
   return(result);
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e5      	bne.n	800980e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b10      	cmp	r3, #16
 800984e:	d10a      	bne.n	8009866 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fbfd 	bl	800906c <HAL_UARTEx_RxEventCallback>
 8009872:	e002      	b.n	800987a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7f8 f943 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	e002      	b.n	8009884 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	e000      	b.n	8009884 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009882:	2302      	movs	r3, #2
  }
}
 8009884:	4618      	mov	r0, r3
 8009886:	3730      	adds	r7, #48	@ 0x30
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800988c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009890:	b0c0      	sub	sp, #256	@ 0x100
 8009892:	af00      	add	r7, sp, #0
 8009894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a8:	68d9      	ldr	r1, [r3, #12]
 80098aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	ea40 0301 	orr.w	r3, r0, r1
 80098b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	431a      	orrs	r2, r3
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80098e4:	f021 010c 	bic.w	r1, r1, #12
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098f2:	430b      	orrs	r3, r1
 80098f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009906:	6999      	ldr	r1, [r3, #24]
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	ea40 0301 	orr.w	r3, r0, r1
 8009912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	4b8f      	ldr	r3, [pc, #572]	@ (8009b58 <UART_SetConfig+0x2cc>)
 800991c:	429a      	cmp	r2, r3
 800991e:	d005      	beq.n	800992c <UART_SetConfig+0xa0>
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4b8d      	ldr	r3, [pc, #564]	@ (8009b5c <UART_SetConfig+0x2d0>)
 8009928:	429a      	cmp	r2, r3
 800992a:	d104      	bne.n	8009936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800992c:	f7fd fc7a 	bl	8007224 <HAL_RCC_GetPCLK2Freq>
 8009930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009934:	e003      	b.n	800993e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009936:	f7fd fc61 	bl	80071fc <HAL_RCC_GetPCLK1Freq>
 800993a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009948:	f040 810c 	bne.w	8009b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800994c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009950:	2200      	movs	r2, #0
 8009952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800995a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800995e:	4622      	mov	r2, r4
 8009960:	462b      	mov	r3, r5
 8009962:	1891      	adds	r1, r2, r2
 8009964:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009966:	415b      	adcs	r3, r3
 8009968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800996a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800996e:	4621      	mov	r1, r4
 8009970:	eb12 0801 	adds.w	r8, r2, r1
 8009974:	4629      	mov	r1, r5
 8009976:	eb43 0901 	adc.w	r9, r3, r1
 800997a:	f04f 0200 	mov.w	r2, #0
 800997e:	f04f 0300 	mov.w	r3, #0
 8009982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800998a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800998e:	4690      	mov	r8, r2
 8009990:	4699      	mov	r9, r3
 8009992:	4623      	mov	r3, r4
 8009994:	eb18 0303 	adds.w	r3, r8, r3
 8009998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800999c:	462b      	mov	r3, r5
 800999e:	eb49 0303 	adc.w	r3, r9, r3
 80099a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80099b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099ba:	460b      	mov	r3, r1
 80099bc:	18db      	adds	r3, r3, r3
 80099be:	653b      	str	r3, [r7, #80]	@ 0x50
 80099c0:	4613      	mov	r3, r2
 80099c2:	eb42 0303 	adc.w	r3, r2, r3
 80099c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80099c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80099cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80099d0:	f7f7 f97a 	bl	8000cc8 <__aeabi_uldivmod>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4b61      	ldr	r3, [pc, #388]	@ (8009b60 <UART_SetConfig+0x2d4>)
 80099da:	fba3 2302 	umull	r2, r3, r3, r2
 80099de:	095b      	lsrs	r3, r3, #5
 80099e0:	011c      	lsls	r4, r3, #4
 80099e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80099f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80099f4:	4642      	mov	r2, r8
 80099f6:	464b      	mov	r3, r9
 80099f8:	1891      	adds	r1, r2, r2
 80099fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80099fc:	415b      	adcs	r3, r3
 80099fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a04:	4641      	mov	r1, r8
 8009a06:	eb12 0a01 	adds.w	sl, r2, r1
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	f04f 0300 	mov.w	r3, #0
 8009a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a24:	4692      	mov	sl, r2
 8009a26:	469b      	mov	fp, r3
 8009a28:	4643      	mov	r3, r8
 8009a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8009a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a32:	464b      	mov	r3, r9
 8009a34:	eb4b 0303 	adc.w	r3, fp, r3
 8009a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a50:	460b      	mov	r3, r1
 8009a52:	18db      	adds	r3, r3, r3
 8009a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a56:	4613      	mov	r3, r2
 8009a58:	eb42 0303 	adc.w	r3, r2, r3
 8009a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009a66:	f7f7 f92f 	bl	8000cc8 <__aeabi_uldivmod>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4b3b      	ldr	r3, [pc, #236]	@ (8009b60 <UART_SetConfig+0x2d4>)
 8009a72:	fba3 2301 	umull	r2, r3, r3, r1
 8009a76:	095b      	lsrs	r3, r3, #5
 8009a78:	2264      	movs	r2, #100	@ 0x64
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	1acb      	subs	r3, r1, r3
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009a86:	4b36      	ldr	r3, [pc, #216]	@ (8009b60 <UART_SetConfig+0x2d4>)
 8009a88:	fba3 2302 	umull	r2, r3, r3, r2
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009a94:	441c      	add	r4, r3
 8009a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	464b      	mov	r3, r9
 8009aac:	1891      	adds	r1, r2, r2
 8009aae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ab0:	415b      	adcs	r3, r3
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009ab8:	4641      	mov	r1, r8
 8009aba:	1851      	adds	r1, r2, r1
 8009abc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009abe:	4649      	mov	r1, r9
 8009ac0:	414b      	adcs	r3, r1
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	00cb      	lsls	r3, r1, #3
 8009ad4:	4651      	mov	r1, sl
 8009ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ada:	4651      	mov	r1, sl
 8009adc:	00ca      	lsls	r2, r1, #3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009aec:	464b      	mov	r3, r9
 8009aee:	460a      	mov	r2, r1
 8009af0:	eb42 0303 	adc.w	r3, r2, r3
 8009af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	18db      	adds	r3, r3, r3
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b12:	4613      	mov	r3, r2
 8009b14:	eb42 0303 	adc.w	r3, r2, r3
 8009b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b22:	f7f7 f8d1 	bl	8000cc8 <__aeabi_uldivmod>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b60 <UART_SetConfig+0x2d4>)
 8009b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b30:	095b      	lsrs	r3, r3, #5
 8009b32:	2164      	movs	r1, #100	@ 0x64
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	3332      	adds	r3, #50	@ 0x32
 8009b3e:	4a08      	ldr	r2, [pc, #32]	@ (8009b60 <UART_SetConfig+0x2d4>)
 8009b40:	fba2 2303 	umull	r2, r3, r2, r3
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	f003 0207 	and.w	r2, r3, #7
 8009b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4422      	add	r2, r4
 8009b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b54:	e106      	b.n	8009d64 <UART_SetConfig+0x4d8>
 8009b56:	bf00      	nop
 8009b58:	40011000 	.word	0x40011000
 8009b5c:	40011400 	.word	0x40011400
 8009b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009b76:	4642      	mov	r2, r8
 8009b78:	464b      	mov	r3, r9
 8009b7a:	1891      	adds	r1, r2, r2
 8009b7c:	6239      	str	r1, [r7, #32]
 8009b7e:	415b      	adcs	r3, r3
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b86:	4641      	mov	r1, r8
 8009b88:	1854      	adds	r4, r2, r1
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	eb43 0501 	adc.w	r5, r3, r1
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	00eb      	lsls	r3, r5, #3
 8009b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b9e:	00e2      	lsls	r2, r4, #3
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	461d      	mov	r5, r3
 8009ba4:	4643      	mov	r3, r8
 8009ba6:	18e3      	adds	r3, r4, r3
 8009ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bac:	464b      	mov	r3, r9
 8009bae:	eb45 0303 	adc.w	r3, r5, r3
 8009bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	f04f 0300 	mov.w	r3, #0
 8009bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	008b      	lsls	r3, r1, #2
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bdc:	4621      	mov	r1, r4
 8009bde:	008a      	lsls	r2, r1, #2
 8009be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009be4:	f7f7 f870 	bl	8000cc8 <__aeabi_uldivmod>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4b60      	ldr	r3, [pc, #384]	@ (8009d70 <UART_SetConfig+0x4e4>)
 8009bee:	fba3 2302 	umull	r2, r3, r3, r2
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	011c      	lsls	r4, r3, #4
 8009bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	1891      	adds	r1, r2, r2
 8009c0e:	61b9      	str	r1, [r7, #24]
 8009c10:	415b      	adcs	r3, r3
 8009c12:	61fb      	str	r3, [r7, #28]
 8009c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c18:	4641      	mov	r1, r8
 8009c1a:	1851      	adds	r1, r2, r1
 8009c1c:	6139      	str	r1, [r7, #16]
 8009c1e:	4649      	mov	r1, r9
 8009c20:	414b      	adcs	r3, r1
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	f04f 0200 	mov.w	r2, #0
 8009c28:	f04f 0300 	mov.w	r3, #0
 8009c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c30:	4659      	mov	r1, fp
 8009c32:	00cb      	lsls	r3, r1, #3
 8009c34:	4651      	mov	r1, sl
 8009c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c3a:	4651      	mov	r1, sl
 8009c3c:	00ca      	lsls	r2, r1, #3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	4603      	mov	r3, r0
 8009c44:	4642      	mov	r2, r8
 8009c46:	189b      	adds	r3, r3, r2
 8009c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	460a      	mov	r2, r1
 8009c50:	eb42 0303 	adc.w	r3, r2, r3
 8009c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009c64:	f04f 0200 	mov.w	r2, #0
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009c70:	4649      	mov	r1, r9
 8009c72:	008b      	lsls	r3, r1, #2
 8009c74:	4641      	mov	r1, r8
 8009c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	008a      	lsls	r2, r1, #2
 8009c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009c82:	f7f7 f821 	bl	8000cc8 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4b38      	ldr	r3, [pc, #224]	@ (8009d70 <UART_SetConfig+0x4e4>)
 8009c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	2264      	movs	r2, #100	@ 0x64
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
 8009c9a:	1acb      	subs	r3, r1, r3
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	3332      	adds	r3, #50	@ 0x32
 8009ca0:	4a33      	ldr	r2, [pc, #204]	@ (8009d70 <UART_SetConfig+0x4e4>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cac:	441c      	add	r4, r3
 8009cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	1891      	adds	r1, r2, r2
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	415b      	adcs	r3, r3
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ccc:	4641      	mov	r1, r8
 8009cce:	1851      	adds	r1, r2, r1
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	414b      	adcs	r3, r1
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	00cb      	lsls	r3, r1, #3
 8009ce8:	4651      	mov	r1, sl
 8009cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cee:	4651      	mov	r1, sl
 8009cf0:	00ca      	lsls	r2, r1, #3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cfe:	464b      	mov	r3, r9
 8009d00:	460a      	mov	r2, r1
 8009d02:	eb42 0303 	adc.w	r3, r2, r3
 8009d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d12:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d14:	f04f 0200 	mov.w	r2, #0
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d20:	4649      	mov	r1, r9
 8009d22:	008b      	lsls	r3, r1, #2
 8009d24:	4641      	mov	r1, r8
 8009d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d2a:	4641      	mov	r1, r8
 8009d2c:	008a      	lsls	r2, r1, #2
 8009d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d32:	f7f6 ffc9 	bl	8000cc8 <__aeabi_uldivmod>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <UART_SetConfig+0x4e4>)
 8009d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d40:	095b      	lsrs	r3, r3, #5
 8009d42:	2164      	movs	r1, #100	@ 0x64
 8009d44:	fb01 f303 	mul.w	r3, r1, r3
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	3332      	adds	r3, #50	@ 0x32
 8009d4e:	4a08      	ldr	r2, [pc, #32]	@ (8009d70 <UART_SetConfig+0x4e4>)
 8009d50:	fba2 2303 	umull	r2, r3, r2, r3
 8009d54:	095b      	lsrs	r3, r3, #5
 8009d56:	f003 020f 	and.w	r2, r3, #15
 8009d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4422      	add	r2, r4
 8009d62:	609a      	str	r2, [r3, #8]
}
 8009d64:	bf00      	nop
 8009d66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d70:	51eb851f 	.word	0x51eb851f

08009d74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d74:	b084      	sub	sp, #16
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	f107 001c 	add.w	r0, r7, #28
 8009d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d122      	bne.n	8009dd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d105      	bne.n	8009dc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fbe8 	bl	800b59c <USB_CoreReset>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73fb      	strb	r3, [r7, #15]
 8009dd0:	e01a      	b.n	8009e08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fbdc 	bl	800b59c <USB_CoreReset>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	639a      	str	r2, [r3, #56]	@ 0x38
 8009dfa:	e005      	b.n	8009e08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d10b      	bne.n	8009e26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f043 0206 	orr.w	r2, r3, #6
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f043 0220 	orr.w	r2, r3, #32
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e32:	b004      	add	sp, #16
 8009e34:	4770      	bx	lr
	...

08009e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d165      	bne.n	8009f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	4a41      	ldr	r2, [pc, #260]	@ (8009f54 <USB_SetTurnaroundTime+0x11c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d906      	bls.n	8009e62 <USB_SetTurnaroundTime+0x2a>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4a40      	ldr	r2, [pc, #256]	@ (8009f58 <USB_SetTurnaroundTime+0x120>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d202      	bcs.n	8009e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e5c:	230f      	movs	r3, #15
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e062      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	4a3c      	ldr	r2, [pc, #240]	@ (8009f58 <USB_SetTurnaroundTime+0x120>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d306      	bcc.n	8009e78 <USB_SetTurnaroundTime+0x40>
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8009f5c <USB_SetTurnaroundTime+0x124>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d202      	bcs.n	8009e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e72:	230e      	movs	r3, #14
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e057      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4a38      	ldr	r2, [pc, #224]	@ (8009f5c <USB_SetTurnaroundTime+0x124>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d306      	bcc.n	8009e8e <USB_SetTurnaroundTime+0x56>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4a37      	ldr	r2, [pc, #220]	@ (8009f60 <USB_SetTurnaroundTime+0x128>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d202      	bcs.n	8009e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e88:	230d      	movs	r3, #13
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e04c      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4a33      	ldr	r2, [pc, #204]	@ (8009f60 <USB_SetTurnaroundTime+0x128>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d306      	bcc.n	8009ea4 <USB_SetTurnaroundTime+0x6c>
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a32      	ldr	r2, [pc, #200]	@ (8009f64 <USB_SetTurnaroundTime+0x12c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d802      	bhi.n	8009ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e041      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8009f64 <USB_SetTurnaroundTime+0x12c>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d906      	bls.n	8009eba <USB_SetTurnaroundTime+0x82>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4a2e      	ldr	r2, [pc, #184]	@ (8009f68 <USB_SetTurnaroundTime+0x130>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d802      	bhi.n	8009eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009eb4:	230b      	movs	r3, #11
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e036      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8009f68 <USB_SetTurnaroundTime+0x130>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d906      	bls.n	8009ed0 <USB_SetTurnaroundTime+0x98>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a29      	ldr	r2, [pc, #164]	@ (8009f6c <USB_SetTurnaroundTime+0x134>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d802      	bhi.n	8009ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009eca:	230a      	movs	r3, #10
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e02b      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4a26      	ldr	r2, [pc, #152]	@ (8009f6c <USB_SetTurnaroundTime+0x134>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d906      	bls.n	8009ee6 <USB_SetTurnaroundTime+0xae>
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a25      	ldr	r2, [pc, #148]	@ (8009f70 <USB_SetTurnaroundTime+0x138>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d202      	bcs.n	8009ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ee0:	2309      	movs	r3, #9
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e020      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a21      	ldr	r2, [pc, #132]	@ (8009f70 <USB_SetTurnaroundTime+0x138>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d306      	bcc.n	8009efc <USB_SetTurnaroundTime+0xc4>
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a20      	ldr	r2, [pc, #128]	@ (8009f74 <USB_SetTurnaroundTime+0x13c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d802      	bhi.n	8009efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e015      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4a1d      	ldr	r2, [pc, #116]	@ (8009f74 <USB_SetTurnaroundTime+0x13c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d906      	bls.n	8009f12 <USB_SetTurnaroundTime+0xda>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a1c      	ldr	r2, [pc, #112]	@ (8009f78 <USB_SetTurnaroundTime+0x140>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d202      	bcs.n	8009f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f0c:	2307      	movs	r3, #7
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	e00a      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f12:	2306      	movs	r3, #6
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	e007      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f1e:	2309      	movs	r3, #9
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e001      	b.n	8009f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f24:	2309      	movs	r3, #9
 8009f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	029b      	lsls	r3, r3, #10
 8009f3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009f40:	431a      	orrs	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	00d8acbf 	.word	0x00d8acbf
 8009f58:	00e4e1c0 	.word	0x00e4e1c0
 8009f5c:	00f42400 	.word	0x00f42400
 8009f60:	01067380 	.word	0x01067380
 8009f64:	011a499f 	.word	0x011a499f
 8009f68:	01312cff 	.word	0x01312cff
 8009f6c:	014ca43f 	.word	0x014ca43f
 8009f70:	016e3600 	.word	0x016e3600
 8009f74:	01a6ab1f 	.word	0x01a6ab1f
 8009f78:	01e84800 	.word	0x01e84800

08009f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f043 0201 	orr.w	r2, r3, #1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f023 0201 	bic.w	r2, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d115      	bne.n	800a00e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009fee:	2001      	movs	r0, #1
 8009ff0:	f7fa f892 	bl	8004118 <HAL_Delay>
      ms++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fa3f 	bl	800b47e <USB_GetMode>
 800a000:	4603      	mov	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d01e      	beq.n	800a044 <USB_SetCurrentMode+0x84>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b31      	cmp	r3, #49	@ 0x31
 800a00a:	d9f0      	bls.n	8009fee <USB_SetCurrentMode+0x2e>
 800a00c:	e01a      	b.n	800a044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d115      	bne.n	800a040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a020:	2001      	movs	r0, #1
 800a022:	f7fa f879 	bl	8004118 <HAL_Delay>
      ms++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 fa26 	bl	800b47e <USB_GetMode>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <USB_SetCurrentMode+0x84>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b31      	cmp	r3, #49	@ 0x31
 800a03c:	d9f0      	bls.n	800a020 <USB_SetCurrentMode+0x60>
 800a03e:	e001      	b.n	800a044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e005      	b.n	800a050 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b32      	cmp	r3, #50	@ 0x32
 800a048:	d101      	bne.n	800a04e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a058:	b084      	sub	sp, #16
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b086      	sub	sp, #24
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a072:	2300      	movs	r3, #0
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	e009      	b.n	800a08c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3340      	adds	r3, #64	@ 0x40
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	2200      	movs	r2, #0
 800a084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	3301      	adds	r3, #1
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2b0e      	cmp	r3, #14
 800a090:	d9f2      	bls.n	800a078 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d11c      	bne.n	800a0d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0a6:	f043 0302 	orr.w	r3, r3, #2
 800a0aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	e005      	b.n	800a0de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	680b      	ldr	r3, [r1, #0]
 800a0fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10c      	bne.n	800a11e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d104      	bne.n	800a114 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a10a:	2100      	movs	r1, #0
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f965 	bl	800a3dc <USB_SetDevSpeed>
 800a112:	e008      	b.n	800a126 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a114:	2101      	movs	r1, #1
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f960 	bl	800a3dc <USB_SetDevSpeed>
 800a11c:	e003      	b.n	800a126 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a11e:	2103      	movs	r1, #3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f95b 	bl	800a3dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a126:	2110      	movs	r1, #16
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f8f3 	bl	800a314 <USB_FlushTxFifo>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f91f 	bl	800a37c <USB_FlushRxFifo>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14e:	461a      	mov	r2, r3
 800a150:	2300      	movs	r3, #0
 800a152:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a15a:	461a      	mov	r2, r3
 800a15c:	2300      	movs	r3, #0
 800a15e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a166:	461a      	mov	r2, r3
 800a168:	2300      	movs	r3, #0
 800a16a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e043      	b.n	800a1fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a188:	d118      	bne.n	800a1bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19c:	461a      	mov	r2, r3
 800a19e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	e013      	b.n	800a1ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	e008      	b.n	800a1ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1da:	461a      	mov	r2, r3
 800a1dc:	2300      	movs	r3, #0
 800a1de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	613b      	str	r3, [r7, #16]
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d3b7      	bcc.n	800a172 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a202:	2300      	movs	r3, #0
 800a204:	613b      	str	r3, [r7, #16]
 800a206:	e043      	b.n	800a290 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a21a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a21e:	d118      	bne.n	800a252 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a232:	461a      	mov	r2, r3
 800a234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	e013      	b.n	800a264 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a248:	461a      	mov	r2, r3
 800a24a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	e008      	b.n	800a264 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25e:	461a      	mov	r2, r3
 800a260:	2300      	movs	r3, #0
 800a262:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a270:	461a      	mov	r2, r3
 800a272:	2300      	movs	r3, #0
 800a274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a282:	461a      	mov	r2, r3
 800a284:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3301      	adds	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	429a      	cmp	r2, r3
 800a296:	d3b7      	bcc.n	800a208 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a2b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f043 0210 	orr.w	r2, r3, #16
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699a      	ldr	r2, [r3, #24]
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a310 <USB_DevInit+0x2b8>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f043 0208 	orr.w	r2, r3, #8
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d107      	bne.n	800a300 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2f8:	f043 0304 	orr.w	r3, r3, #4
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a30c:	b004      	add	sp, #16
 800a30e:	4770      	bx	lr
 800a310:	803c3800 	.word	0x803c3800

0800a314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a13      	ldr	r2, [pc, #76]	@ (800a378 <USB_FlushTxFifo+0x64>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d901      	bls.n	800a334 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e01b      	b.n	800a36c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	daf2      	bge.n	800a322 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	019b      	lsls	r3, r3, #6
 800a344:	f043 0220 	orr.w	r2, r3, #32
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3301      	adds	r3, #1
 800a350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4a08      	ldr	r2, [pc, #32]	@ (800a378 <USB_FlushTxFifo+0x64>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d901      	bls.n	800a35e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e006      	b.n	800a36c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b20      	cmp	r3, #32
 800a368:	d0f0      	beq.n	800a34c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	00030d40 	.word	0x00030d40

0800a37c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a384:	2300      	movs	r3, #0
 800a386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4a11      	ldr	r2, [pc, #68]	@ (800a3d8 <USB_FlushRxFifo+0x5c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d901      	bls.n	800a39a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e018      	b.n	800a3cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	daf2      	bge.n	800a388 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2210      	movs	r2, #16
 800a3aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4a08      	ldr	r2, [pc, #32]	@ (800a3d8 <USB_FlushRxFifo+0x5c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d901      	bls.n	800a3be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e006      	b.n	800a3cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b10      	cmp	r3, #16
 800a3c8:	d0f0      	beq.n	800a3ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	00030d40 	.word	0x00030d40

0800a3dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	68f9      	ldr	r1, [r7, #12]
 800a3f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a40e:	b480      	push	{r7}
 800a410:	b087      	sub	sp, #28
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0306 	and.w	r3, r3, #6
 800a426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]
 800a432:	e00a      	b.n	800a44a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d002      	beq.n	800a440 <USB_GetDevSpeed+0x32>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b06      	cmp	r3, #6
 800a43e:	d102      	bne.n	800a446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a440:	2302      	movs	r3, #2
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	e001      	b.n	800a44a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a446:	230f      	movs	r3, #15
 800a448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d13a      	bne.n	800a4ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a47a:	69da      	ldr	r2, [r3, #28]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	2101      	movs	r1, #1
 800a486:	fa01 f303 	lsl.w	r3, r1, r3
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	68f9      	ldr	r1, [r7, #12]
 800a48e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a492:	4313      	orrs	r3, r2
 800a494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d155      	bne.n	800a558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	791b      	ldrb	r3, [r3, #4]
 800a4c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	e036      	b.n	800a558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f0:	69da      	ldr	r2, [r3, #28]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	f003 030f 	and.w	r3, r3, #15
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a508:	4313      	orrs	r3, r2
 800a50a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d11a      	bne.n	800a558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	791b      	ldrb	r3, [r3, #4]
 800a53c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a53e:	430b      	orrs	r3, r1
 800a540:	4313      	orrs	r3, r2
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a54e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
	...

0800a568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d161      	bne.n	800a648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a59a:	d11f      	bne.n	800a5dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	0151      	lsls	r1, r2, #5
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	440a      	add	r2, r1
 800a5d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	68f9      	ldr	r1, [r7, #12]
 800a5f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a606:	69da      	ldr	r2, [r3, #28]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f303 	lsl.w	r3, r1, r3
 800a616:	b29b      	uxth	r3, r3
 800a618:	43db      	mvns	r3, r3
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a620:	4013      	ands	r3, r2
 800a622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	0159      	lsls	r1, r3, #5
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	440b      	add	r3, r1
 800a63a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63e:	4619      	mov	r1, r3
 800a640:	4b35      	ldr	r3, [pc, #212]	@ (800a718 <USB_DeactivateEndpoint+0x1b0>)
 800a642:	4013      	ands	r3, r2
 800a644:	600b      	str	r3, [r1, #0]
 800a646:	e060      	b.n	800a70a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a65a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a65e:	d11f      	bne.n	800a6a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a67a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a67e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a69a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a69e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ca:	69da      	ldr	r2, [r3, #28]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6da:	041b      	lsls	r3, r3, #16
 800a6dc:	43db      	mvns	r3, r3
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	0159      	lsls	r1, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a702:	4619      	mov	r1, r3
 800a704:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <USB_DeactivateEndpoint+0x1b4>)
 800a706:	4013      	ands	r3, r2
 800a708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	ec337800 	.word	0xec337800
 800a71c:	eff37800 	.word	0xeff37800

0800a720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	@ 0x28
 800a724:	af02      	add	r7, sp, #8
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	785b      	ldrb	r3, [r3, #1]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	f040 815c 	bne.w	800a9fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d132      	bne.n	800a7b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a764:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a768:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a78c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7a8:	0cdb      	lsrs	r3, r3, #19
 800a7aa:	04db      	lsls	r3, r3, #19
 800a7ac:	6113      	str	r3, [r2, #16]
 800a7ae:	e074      	b.n	800a89a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ca:	0cdb      	lsrs	r3, r3, #19
 800a7cc:	04db      	lsls	r3, r3, #19
 800a7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a7ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a7f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a800:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6999      	ldr	r1, [r3, #24]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	440b      	add	r3, r1
 800a80c:	1e59      	subs	r1, r3, #1
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	fbb1 f3f3 	udiv	r3, r1, r3
 800a816:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a818:	4b9d      	ldr	r3, [pc, #628]	@ (800aa90 <USB_EPStartXfer+0x370>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	69b9      	ldr	r1, [r7, #24]
 800a81e:	0148      	lsls	r0, r1, #5
 800a820:	69f9      	ldr	r1, [r7, #28]
 800a822:	4401      	add	r1, r0
 800a824:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a828:	4313      	orrs	r3, r2
 800a82a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a842:	69b9      	ldr	r1, [r7, #24]
 800a844:	0148      	lsls	r0, r1, #5
 800a846:	69f9      	ldr	r1, [r7, #28]
 800a848:	4401      	add	r1, r0
 800a84a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	791b      	ldrb	r3, [r3, #4]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d11f      	bne.n	800a89a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a874:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d14b      	bne.n	800a938 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	791b      	ldrb	r3, [r3, #4]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d128      	bne.n	800a916 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d110      	bne.n	800a8f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	69fa      	ldr	r2, [r7, #28]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	e00f      	b.n	800a916 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	0151      	lsls	r1, r2, #5
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	440a      	add	r2, r1
 800a90c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	0151      	lsls	r1, r2, #5
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	440a      	add	r2, r1
 800a92c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a930:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	e133      	b.n	800aba0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a952:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	791b      	ldrb	r3, [r3, #4]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d015      	beq.n	800a98c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 811b 	beq.w	800aba0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f003 030f 	and.w	r3, r3, #15
 800a97a:	2101      	movs	r1, #1
 800a97c:	fa01 f303 	lsl.w	r3, r1, r3
 800a980:	69f9      	ldr	r1, [r7, #28]
 800a982:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a986:	4313      	orrs	r3, r2
 800a988:	634b      	str	r3, [r1, #52]	@ 0x34
 800a98a:	e109      	b.n	800aba0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d110      	bne.n	800a9be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	e00f      	b.n	800a9de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6919      	ldr	r1, [r3, #16]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	781a      	ldrb	r2, [r3, #0]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	b298      	uxth	r0, r3
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fade 	bl	800afb4 <USB_WritePacket>
 800a9f8:	e0d2      	b.n	800aba0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa14:	0cdb      	lsrs	r3, r3, #19
 800aa16:	04db      	lsls	r3, r3, #19
 800aa18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d126      	bne.n	800aa94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa52:	691a      	ldr	r2, [r3, #16]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa5c:	69b9      	ldr	r1, [r7, #24]
 800aa5e:	0148      	lsls	r0, r1, #5
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	4401      	add	r1, r0
 800aa64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa8a:	6113      	str	r3, [r2, #16]
 800aa8c:	e03a      	b.n	800ab04 <USB_EPStartXfer+0x3e4>
 800aa8e:	bf00      	nop
 800aa90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	699a      	ldr	r2, [r3, #24]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	1e5a      	subs	r2, r3, #1
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	8afa      	ldrh	r2, [r7, #22]
 800aab0:	fb03 f202 	mul.w	r2, r3, r2
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	8afb      	ldrh	r3, [r7, #22]
 800aac8:	04d9      	lsls	r1, r3, #19
 800aaca:	4b38      	ldr	r3, [pc, #224]	@ (800abac <USB_EPStartXfer+0x48c>)
 800aacc:	400b      	ands	r3, r1
 800aace:	69b9      	ldr	r1, [r7, #24]
 800aad0:	0148      	lsls	r0, r1, #5
 800aad2:	69f9      	ldr	r1, [r7, #28]
 800aad4:	4401      	add	r1, r0
 800aad6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aada:	4313      	orrs	r3, r2
 800aadc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaea:	691a      	ldr	r2, [r3, #16]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaf4:	69b9      	ldr	r1, [r7, #24]
 800aaf6:	0148      	lsls	r0, r1, #5
 800aaf8:	69f9      	ldr	r1, [r7, #28]
 800aafa:	4401      	add	r1, r0
 800aafc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ab00:	4313      	orrs	r3, r2
 800ab02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d10d      	bne.n	800ab26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6919      	ldr	r1, [r3, #16]
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab22:	460a      	mov	r2, r1
 800ab24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	791b      	ldrb	r3, [r3, #4]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d128      	bne.n	800ab80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d110      	bne.n	800ab60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	0151      	lsls	r1, r2, #5
 800ab50:	69fa      	ldr	r2, [r7, #28]
 800ab52:	440a      	add	r2, r1
 800ab54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	e00f      	b.n	800ab80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ab9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3720      	adds	r7, #32
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	1ff80000 	.word	0x1ff80000

0800abb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	f040 80ce 	bne.w	800ad6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d132      	bne.n	800ac40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abf8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800abfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	0151      	lsls	r1, r2, #5
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	440a      	add	r2, r1
 800ac14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	0151      	lsls	r1, r2, #5
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	440a      	add	r2, r1
 800ac34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac38:	0cdb      	lsrs	r3, r3, #19
 800ac3a:	04db      	lsls	r3, r3, #19
 800ac3c:	6113      	str	r3, [r2, #16]
 800ac3e:	e04e      	b.n	800acde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac5a:	0cdb      	lsrs	r3, r3, #19
 800ac5c:	04db      	lsls	r3, r3, #19
 800ac5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	015a      	lsls	r2, r3, #5
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	0151      	lsls	r1, r2, #5
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	440a      	add	r2, r1
 800ac76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d903      	bls.n	800ac98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	0151      	lsls	r1, r2, #5
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	440a      	add	r2, r1
 800acae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc4:	691a      	ldr	r2, [r3, #16]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acce:	6939      	ldr	r1, [r7, #16]
 800acd0:	0148      	lsls	r0, r1, #5
 800acd2:	6979      	ldr	r1, [r7, #20]
 800acd4:	4401      	add	r1, r0
 800acd6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800acda:	4313      	orrs	r3, r2
 800acdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d11e      	bne.n	800ad22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d009      	beq.n	800ad00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf8:	461a      	mov	r2, r3
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	e097      	b.n	800ae52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	0151      	lsls	r1, r2, #5
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	440a      	add	r2, r1
 800ad38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ad40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8083 	beq.w	800ae52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 030f 	and.w	r3, r3, #15
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad62:	6979      	ldr	r1, [r7, #20]
 800ad64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	634b      	str	r3, [r1, #52]	@ 0x34
 800ad6c:	e071      	b.n	800ae52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	0151      	lsls	r1, r2, #5
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	440a      	add	r2, r1
 800ad84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad88:	0cdb      	lsrs	r3, r3, #19
 800ad8a:	04db      	lsls	r3, r3, #19
 800ad8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	0151      	lsls	r1, r2, #5
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	440a      	add	r2, r1
 800ada4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800adac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800adb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	0151      	lsls	r1, r2, #5
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	440a      	add	r2, r1
 800ade0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ade4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ade8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf6:	691a      	ldr	r2, [r3, #16]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae00:	6939      	ldr	r1, [r7, #16]
 800ae02:	0148      	lsls	r0, r1, #5
 800ae04:	6979      	ldr	r1, [r7, #20]
 800ae06:	4401      	add	r1, r0
 800ae08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d10d      	bne.n	800ae32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6919      	ldr	r1, [r3, #16]
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae2e:	460a      	mov	r2, r1
 800ae30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	371c      	adds	r7, #28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d14a      	bne.n	800af14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae96:	f040 8086 	bne.w	800afa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	7812      	ldrb	r2, [r2, #0]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aebc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	0151      	lsls	r1, r2, #5
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	440a      	add	r2, r1
 800aed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aedc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3301      	adds	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d902      	bls.n	800aef8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
          break;
 800aef6:	e056      	b.n	800afa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af10:	d0e7      	beq.n	800aee2 <USB_EPStopXfer+0x82>
 800af12:	e048      	b.n	800afa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af2c:	d13b      	bne.n	800afa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	7812      	ldrb	r2, [r2, #0]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	440a      	add	r2, r1
 800af48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	7812      	ldrb	r2, [r2, #0]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3301      	adds	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800af82:	4293      	cmp	r3, r2
 800af84:	d902      	bls.n	800af8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	75fb      	strb	r3, [r7, #23]
          break;
 800af8a:	e00c      	b.n	800afa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afa4:	d0e7      	beq.n	800af76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b089      	sub	sp, #36	@ 0x24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4611      	mov	r1, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	460b      	mov	r3, r1
 800afc4:	71fb      	strb	r3, [r7, #7]
 800afc6:	4613      	mov	r3, r2
 800afc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800afd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d123      	bne.n	800b022 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800afda:	88bb      	ldrh	r3, [r7, #4]
 800afdc:	3303      	adds	r3, #3
 800afde:	089b      	lsrs	r3, r3, #2
 800afe0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800afe2:	2300      	movs	r3, #0
 800afe4:	61bb      	str	r3, [r7, #24]
 800afe6:	e018      	b.n	800b01a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	031a      	lsls	r2, r3, #12
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aff4:	461a      	mov	r2, r3
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	3301      	adds	r3, #1
 800b000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	3301      	adds	r3, #1
 800b006:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	3301      	adds	r3, #1
 800b00c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	3301      	adds	r3, #1
 800b012:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	3301      	adds	r3, #1
 800b018:	61bb      	str	r3, [r7, #24]
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d3e2      	bcc.n	800afe8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3724      	adds	r7, #36	@ 0x24
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b030:	b480      	push	{r7}
 800b032:	b08b      	sub	sp, #44	@ 0x2c
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	089b      	lsrs	r3, r3, #2
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b04e:	88fb      	ldrh	r3, [r7, #6]
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b056:	2300      	movs	r3, #0
 800b058:	623b      	str	r3, [r7, #32]
 800b05a:	e014      	b.n	800b086 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	601a      	str	r2, [r3, #0]
    pDest++;
 800b068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06a:	3301      	adds	r3, #1
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	3301      	adds	r3, #1
 800b072:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	3301      	adds	r3, #1
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	3301      	adds	r3, #1
 800b07e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	3301      	adds	r3, #1
 800b084:	623b      	str	r3, [r7, #32]
 800b086:	6a3a      	ldr	r2, [r7, #32]
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d3e6      	bcc.n	800b05c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b08e:	8bfb      	ldrh	r3, [r7, #30]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d01e      	beq.n	800b0d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f107 0310 	add.w	r3, r7, #16
 800b0a4:	6812      	ldr	r2, [r2, #0]
 800b0a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	701a      	strb	r2, [r3, #0]
      i++;
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	623b      	str	r3, [r7, #32]
      pDest++;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b0c6:	8bfb      	ldrh	r3, [r7, #30]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b0cc:	8bfb      	ldrh	r3, [r7, #30]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1ea      	bne.n	800b0a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	372c      	adds	r7, #44	@ 0x2c
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	785b      	ldrb	r3, [r3, #1]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d12c      	bne.n	800b156 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	db12      	blt.n	800b134 <USB_EPSetStall+0x54>
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00f      	beq.n	800b134 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b132:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b14e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	e02b      	b.n	800b1ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	db12      	blt.n	800b18e <USB_EPSetStall+0xae>
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00f      	beq.n	800b18e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	440a      	add	r2, r1
 800b184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b188:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b18c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	4413      	add	r3, r2
 800b196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	0151      	lsls	r1, r2, #5
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	440a      	add	r2, r1
 800b1a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d128      	bne.n	800b22a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	791b      	ldrb	r3, [r3, #4]
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d003      	beq.n	800b208 <USB_EPClearStall+0x4c>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	791b      	ldrb	r3, [r3, #4]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d138      	bne.n	800b27a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	e027      	b.n	800b27a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b244:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b248:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	791b      	ldrb	r3, [r3, #4]
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d003      	beq.n	800b25a <USB_EPClearStall+0x9e>
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	791b      	ldrb	r3, [r3, #4]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d10f      	bne.n	800b27a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b278:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b2aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b2bc:	68f9      	ldr	r1, [r7, #12]
 800b2be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b302:	f023 0302 	bic.w	r3, r3, #2
 800b306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b330:	f023 0303 	bic.w	r3, r3, #3
 800b334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b344:	f043 0302 	orr.w	r3, r3, #2
 800b348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b370:	68fb      	ldr	r3, [r7, #12]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	4013      	ands	r3, r2
 800b3a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	0c1b      	lsrs	r3, r3, #16
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	b29b      	uxth	r3, r3
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3f6:	78fb      	ldrb	r3, [r7, #3]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	4013      	ands	r3, r2
 800b412:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b414:	68bb      	ldr	r3, [r7, #8]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b422:	b480      	push	{r7}
 800b424:	b087      	sub	sp, #28
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b444:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	fa22 f303 	lsr.w	r3, r2, r3
 800b452:	01db      	lsls	r3, r3, #7
 800b454:	b2db      	uxtb	r3, r3
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4313      	orrs	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	4013      	ands	r3, r2
 800b46e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b470:	68bb      	ldr	r3, [r7, #8]
}
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0301 	and.w	r3, r3, #1
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b085      	sub	sp, #20
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b4b8:	f023 0307 	bic.w	r3, r3, #7
 800b4bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	333c      	adds	r3, #60	@ 0x3c
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	4a26      	ldr	r2, [pc, #152]	@ (800b598 <USB_EP0_OutStart+0xb8>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d90a      	bls.n	800b51a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b514:	d101      	bne.n	800b51a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	e037      	b.n	800b58a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b520:	461a      	mov	r2, r3
 800b522:	2300      	movs	r3, #0
 800b524:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b548:	f043 0318 	orr.w	r3, r3, #24
 800b54c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b55c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b560:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b562:	7afb      	ldrb	r3, [r7, #11]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d10f      	bne.n	800b588 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56e:	461a      	mov	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b582:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	4f54300a 	.word	0x4f54300a

0800b59c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4a13      	ldr	r2, [pc, #76]	@ (800b600 <USB_CoreReset+0x64>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d901      	bls.n	800b5ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e01b      	b.n	800b5f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	daf2      	bge.n	800b5a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f043 0201 	orr.w	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a09      	ldr	r2, [pc, #36]	@ (800b600 <USB_CoreReset+0x64>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d901      	bls.n	800b5e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e006      	b.n	800b5f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d0f0      	beq.n	800b5d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	00030d40 	.word	0x00030d40

0800b604 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b608:	4904      	ldr	r1, [pc, #16]	@ (800b61c <MX_FATFS_Init+0x18>)
 800b60a:	4805      	ldr	r0, [pc, #20]	@ (800b620 <MX_FATFS_Init+0x1c>)
 800b60c:	f002 f8a0 	bl	800d750 <FATFS_LinkDriver>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	4b03      	ldr	r3, [pc, #12]	@ (800b624 <MX_FATFS_Init+0x20>)
 800b616:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b618:	bf00      	nop
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000980 	.word	0x20000980
 800b620:	20000010 	.word	0x20000010
 800b624:	2000097c 	.word	0x2000097c

0800b628 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b632:	4b06      	ldr	r3, [pc, #24]	@ (800b64c <USER_initialize+0x24>)
 800b634:	2201      	movs	r2, #1
 800b636:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b638:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <USER_initialize+0x24>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	2000000d 	.word	0x2000000d

0800b650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b65a:	4b06      	ldr	r3, [pc, #24]	@ (800b674 <USER_status+0x24>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b660:	4b04      	ldr	r3, [pc, #16]	@ (800b674 <USER_status+0x24>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	2000000d 	.word	0x2000000d

0800b678 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b688:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b6a6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	603a      	str	r2, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	73fb      	strb	r3, [r7, #15]
    return res;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b6e8:	f002 fd8e 	bl	800e208 <USBD_static_malloc>
 800b6ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d109      	bne.n	800b708 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	32b0      	adds	r2, #176	@ 0xb0
 800b6fe:	2100      	movs	r1, #0
 800b700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b704:	2302      	movs	r3, #2
 800b706:	e0d4      	b.n	800b8b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b708:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b70c:	2100      	movs	r1, #0
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f004 fc19 	bl	800ff46 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	32b0      	adds	r2, #176	@ 0xb0
 800b71e:	68f9      	ldr	r1, [r7, #12]
 800b720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	32b0      	adds	r2, #176	@ 0xb0
 800b72e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7c1b      	ldrb	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d138      	bne.n	800b7b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b740:	4b5e      	ldr	r3, [pc, #376]	@ (800b8bc <USBD_CDC_Init+0x1e4>)
 800b742:	7819      	ldrb	r1, [r3, #0]
 800b744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b748:	2202      	movs	r2, #2
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f002 fbeb 	bl	800df26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b750:	4b5a      	ldr	r3, [pc, #360]	@ (800b8bc <USBD_CDC_Init+0x1e4>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	f003 020f 	and.w	r2, r3, #15
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	440b      	add	r3, r1
 800b764:	3324      	adds	r3, #36	@ 0x24
 800b766:	2201      	movs	r2, #1
 800b768:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b76a:	4b55      	ldr	r3, [pc, #340]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b76c:	7819      	ldrb	r1, [r3, #0]
 800b76e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b772:	2202      	movs	r2, #2
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f002 fbd6 	bl	800df26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b77a:	4b51      	ldr	r3, [pc, #324]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f003 020f 	and.w	r2, r3, #15
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b792:	2201      	movs	r2, #1
 800b794:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b796:	4b4b      	ldr	r3, [pc, #300]	@ (800b8c4 <USBD_CDC_Init+0x1ec>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f003 020f 	and.w	r2, r3, #15
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	440b      	add	r3, r1
 800b7aa:	3326      	adds	r3, #38	@ 0x26
 800b7ac:	2210      	movs	r2, #16
 800b7ae:	801a      	strh	r2, [r3, #0]
 800b7b0:	e035      	b.n	800b81e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7b2:	4b42      	ldr	r3, [pc, #264]	@ (800b8bc <USBD_CDC_Init+0x1e4>)
 800b7b4:	7819      	ldrb	r1, [r3, #0]
 800b7b6:	2340      	movs	r3, #64	@ 0x40
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f002 fbb3 	bl	800df26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7c0:	4b3e      	ldr	r3, [pc, #248]	@ (800b8bc <USBD_CDC_Init+0x1e4>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	f003 020f 	and.w	r2, r3, #15
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3324      	adds	r3, #36	@ 0x24
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7da:	4b39      	ldr	r3, [pc, #228]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b7dc:	7819      	ldrb	r1, [r3, #0]
 800b7de:	2340      	movs	r3, #64	@ 0x40
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f002 fb9f 	bl	800df26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7e8:	4b35      	ldr	r3, [pc, #212]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	f003 020f 	and.w	r2, r3, #15
 800b7f0:	6879      	ldr	r1, [r7, #4]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	440b      	add	r3, r1
 800b7fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b800:	2201      	movs	r2, #1
 800b802:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b804:	4b2f      	ldr	r3, [pc, #188]	@ (800b8c4 <USBD_CDC_Init+0x1ec>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	f003 020f 	and.w	r2, r3, #15
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	3326      	adds	r3, #38	@ 0x26
 800b81a:	2210      	movs	r2, #16
 800b81c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b81e:	4b29      	ldr	r3, [pc, #164]	@ (800b8c4 <USBD_CDC_Init+0x1ec>)
 800b820:	7819      	ldrb	r1, [r3, #0]
 800b822:	2308      	movs	r3, #8
 800b824:	2203      	movs	r2, #3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f002 fb7d 	bl	800df26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b82c:	4b25      	ldr	r3, [pc, #148]	@ (800b8c4 <USBD_CDC_Init+0x1ec>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	f003 020f 	and.w	r2, r3, #15
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	440b      	add	r3, r1
 800b840:	3324      	adds	r3, #36	@ 0x24
 800b842:	2201      	movs	r2, #1
 800b844:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	33b0      	adds	r3, #176	@ 0xb0
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b87c:	2302      	movs	r3, #2
 800b87e:	e018      	b.n	800b8b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7c1b      	ldrb	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b888:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b88a:	7819      	ldrb	r1, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b892:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f002 fc34 	bl	800e104 <USBD_LL_PrepareReceive>
 800b89c:	e008      	b.n	800b8b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b89e:	4b08      	ldr	r3, [pc, #32]	@ (800b8c0 <USBD_CDC_Init+0x1e8>)
 800b8a0:	7819      	ldrb	r1, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8a8:	2340      	movs	r3, #64	@ 0x40
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f002 fc2a 	bl	800e104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200000ab 	.word	0x200000ab
 800b8c0:	200000ac 	.word	0x200000ac
 800b8c4:	200000ad 	.word	0x200000ad

0800b8c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8d4:	4b3a      	ldr	r3, [pc, #232]	@ (800b9c0 <USBD_CDC_DeInit+0xf8>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f002 fb49 	bl	800df72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8e0:	4b37      	ldr	r3, [pc, #220]	@ (800b9c0 <USBD_CDC_DeInit+0xf8>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	f003 020f 	and.w	r2, r3, #15
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	440b      	add	r3, r1
 800b8f4:	3324      	adds	r3, #36	@ 0x24
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b8fa:	4b32      	ldr	r3, [pc, #200]	@ (800b9c4 <USBD_CDC_DeInit+0xfc>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f002 fb36 	bl	800df72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b906:	4b2f      	ldr	r3, [pc, #188]	@ (800b9c4 <USBD_CDC_DeInit+0xfc>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	f003 020f 	and.w	r2, r3, #15
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	440b      	add	r3, r1
 800b91a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b91e:	2200      	movs	r2, #0
 800b920:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b922:	4b29      	ldr	r3, [pc, #164]	@ (800b9c8 <USBD_CDC_DeInit+0x100>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f002 fb22 	bl	800df72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b92e:	4b26      	ldr	r3, [pc, #152]	@ (800b9c8 <USBD_CDC_DeInit+0x100>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	f003 020f 	and.w	r2, r3, #15
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	3324      	adds	r3, #36	@ 0x24
 800b944:	2200      	movs	r2, #0
 800b946:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b948:	4b1f      	ldr	r3, [pc, #124]	@ (800b9c8 <USBD_CDC_DeInit+0x100>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	f003 020f 	and.w	r2, r3, #15
 800b950:	6879      	ldr	r1, [r7, #4]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	3326      	adds	r3, #38	@ 0x26
 800b95e:	2200      	movs	r2, #0
 800b960:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	32b0      	adds	r2, #176	@ 0xb0
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d01f      	beq.n	800b9b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	33b0      	adds	r3, #176	@ 0xb0
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32b0      	adds	r2, #176	@ 0xb0
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	4618      	mov	r0, r3
 800b998:	f002 fc44 	bl	800e224 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32b0      	adds	r2, #176	@ 0xb0
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200000ab 	.word	0x200000ab
 800b9c4:	200000ac 	.word	0x200000ac
 800b9c8:	200000ad 	.word	0x200000ad

0800b9cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	32b0      	adds	r2, #176	@ 0xb0
 800b9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	e0bf      	b.n	800bb7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d050      	beq.n	800baaa <USBD_CDC_Setup+0xde>
 800ba08:	2b20      	cmp	r3, #32
 800ba0a:	f040 80af 	bne.w	800bb6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	88db      	ldrh	r3, [r3, #6]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d03a      	beq.n	800ba8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	b25b      	sxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da1b      	bge.n	800ba58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	33b0      	adds	r3, #176	@ 0xb0
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	88d2      	ldrh	r2, [r2, #6]
 800ba3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	88db      	ldrh	r3, [r3, #6]
 800ba42:	2b07      	cmp	r3, #7
 800ba44:	bf28      	it	cs
 800ba46:	2307      	movcs	r3, #7
 800ba48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	89fa      	ldrh	r2, [r7, #14]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f001 fdb1 	bl	800d5b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba56:	e090      	b.n	800bb7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	785a      	ldrb	r2, [r3, #1]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	88db      	ldrh	r3, [r3, #6]
 800ba66:	2b3f      	cmp	r3, #63	@ 0x3f
 800ba68:	d803      	bhi.n	800ba72 <USBD_CDC_Setup+0xa6>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	e000      	b.n	800ba74 <USBD_CDC_Setup+0xa8>
 800ba72:	2240      	movs	r2, #64	@ 0x40
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba7a:	6939      	ldr	r1, [r7, #16]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ba82:	461a      	mov	r2, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f001 fdc3 	bl	800d610 <USBD_CtlPrepareRx>
      break;
 800ba8a:	e076      	b.n	800bb7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	33b0      	adds	r3, #176	@ 0xb0
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	7850      	ldrb	r0, [r2, #1]
 800baa2:	2200      	movs	r2, #0
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	4798      	blx	r3
      break;
 800baa8:	e067      	b.n	800bb7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	785b      	ldrb	r3, [r3, #1]
 800baae:	2b0b      	cmp	r3, #11
 800bab0:	d851      	bhi.n	800bb56 <USBD_CDC_Setup+0x18a>
 800bab2:	a201      	add	r2, pc, #4	@ (adr r2, 800bab8 <USBD_CDC_Setup+0xec>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bae9 	.word	0x0800bae9
 800babc:	0800bb65 	.word	0x0800bb65
 800bac0:	0800bb57 	.word	0x0800bb57
 800bac4:	0800bb57 	.word	0x0800bb57
 800bac8:	0800bb57 	.word	0x0800bb57
 800bacc:	0800bb57 	.word	0x0800bb57
 800bad0:	0800bb57 	.word	0x0800bb57
 800bad4:	0800bb57 	.word	0x0800bb57
 800bad8:	0800bb57 	.word	0x0800bb57
 800badc:	0800bb57 	.word	0x0800bb57
 800bae0:	0800bb13 	.word	0x0800bb13
 800bae4:	0800bb3d 	.word	0x0800bb3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d107      	bne.n	800bb04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800baf4:	f107 030a 	add.w	r3, r7, #10
 800baf8:	2202      	movs	r2, #2
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 fd5b 	bl	800d5b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb02:	e032      	b.n	800bb6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 fce5 	bl	800d4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	75fb      	strb	r3, [r7, #23]
          break;
 800bb10:	e02b      	b.n	800bb6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d107      	bne.n	800bb2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb1e:	f107 030d 	add.w	r3, r7, #13
 800bb22:	2201      	movs	r2, #1
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 fd46 	bl	800d5b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb2c:	e01d      	b.n	800bb6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 fcd0 	bl	800d4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb36:	2303      	movs	r3, #3
 800bb38:	75fb      	strb	r3, [r7, #23]
          break;
 800bb3a:	e016      	b.n	800bb6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d00f      	beq.n	800bb68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f001 fcc3 	bl	800d4d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb54:	e008      	b.n	800bb68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 fcbc 	bl	800d4d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	75fb      	strb	r3, [r7, #23]
          break;
 800bb62:	e002      	b.n	800bb6a <USBD_CDC_Setup+0x19e>
          break;
 800bb64:	bf00      	nop
 800bb66:	e008      	b.n	800bb7a <USBD_CDC_Setup+0x1ae>
          break;
 800bb68:	bf00      	nop
      }
      break;
 800bb6a:	e006      	b.n	800bb7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f001 fcb1 	bl	800d4d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb74:	2303      	movs	r3, #3
 800bb76:	75fb      	strb	r3, [r7, #23]
      break;
 800bb78:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32b0      	adds	r2, #176	@ 0xb0
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e065      	b.n	800bc7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	32b0      	adds	r2, #176	@ 0xb0
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbbe:	78fb      	ldrb	r3, [r7, #3]
 800bbc0:	f003 020f 	and.w	r2, r3, #15
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	440b      	add	r3, r1
 800bbd0:	3318      	adds	r3, #24
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d02f      	beq.n	800bc38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbd8:	78fb      	ldrb	r3, [r7, #3]
 800bbda:	f003 020f 	and.w	r2, r3, #15
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	440b      	add	r3, r1
 800bbea:	3318      	adds	r3, #24
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	f003 010f 	and.w	r1, r3, #15
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	440b      	add	r3, r1
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4403      	add	r3, r0
 800bc00:	3348      	adds	r3, #72	@ 0x48
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc08:	fb01 f303 	mul.w	r3, r1, r3
 800bc0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d112      	bne.n	800bc38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc12:	78fb      	ldrb	r3, [r7, #3]
 800bc14:	f003 020f 	and.w	r2, r3, #15
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	3318      	adds	r3, #24
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc2a:	78f9      	ldrb	r1, [r7, #3]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	2200      	movs	r2, #0
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f002 fa46 	bl	800e0c2 <USBD_LL_Transmit>
 800bc36:	e01f      	b.n	800bc78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	33b0      	adds	r3, #176	@ 0xb0
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d010      	beq.n	800bc78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	33b0      	adds	r3, #176	@ 0xb0
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bc74:	78fa      	ldrb	r2, [r7, #3]
 800bc76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	32b0      	adds	r2, #176	@ 0xb0
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	32b0      	adds	r2, #176	@ 0xb0
 800bca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e01a      	b.n	800bcea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f002 fa44 	bl	800e146 <USBD_LL_GetRxDataSize>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	33b0      	adds	r3, #176	@ 0xb0
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bce4:	4611      	mov	r1, r2
 800bce6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	32b0      	adds	r2, #176	@ 0xb0
 800bd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e024      	b.n	800bd5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	33b0      	adds	r3, #176	@ 0xb0
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d019      	beq.n	800bd5c <USBD_CDC_EP0_RxReady+0x6a>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd2e:	2bff      	cmp	r3, #255	@ 0xff
 800bd30:	d014      	beq.n	800bd5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	33b0      	adds	r3, #176	@ 0xb0
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	22ff      	movs	r2, #255	@ 0xff
 800bd58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd70:	2182      	movs	r1, #130	@ 0x82
 800bd72:	4818      	ldr	r0, [pc, #96]	@ (800bdd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd74:	f000 fd4f 	bl	800c816 <USBD_GetEpDesc>
 800bd78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	4815      	ldr	r0, [pc, #84]	@ (800bdd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd7e:	f000 fd4a 	bl	800c816 <USBD_GetEpDesc>
 800bd82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd84:	2181      	movs	r1, #129	@ 0x81
 800bd86:	4813      	ldr	r0, [pc, #76]	@ (800bdd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd88:	f000 fd45 	bl	800c816 <USBD_GetEpDesc>
 800bd8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2210      	movs	r2, #16
 800bd98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d006      	beq.n	800bdae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bda8:	711a      	strb	r2, [r3, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d006      	beq.n	800bdc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bdbc:	711a      	strb	r2, [r3, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2243      	movs	r2, #67	@ 0x43
 800bdc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdc8:	4b02      	ldr	r3, [pc, #8]	@ (800bdd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20000068 	.word	0x20000068

0800bdd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bde0:	2182      	movs	r1, #130	@ 0x82
 800bde2:	4818      	ldr	r0, [pc, #96]	@ (800be44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bde4:	f000 fd17 	bl	800c816 <USBD_GetEpDesc>
 800bde8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdea:	2101      	movs	r1, #1
 800bdec:	4815      	ldr	r0, [pc, #84]	@ (800be44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdee:	f000 fd12 	bl	800c816 <USBD_GetEpDesc>
 800bdf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdf4:	2181      	movs	r1, #129	@ 0x81
 800bdf6:	4813      	ldr	r0, [pc, #76]	@ (800be44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdf8:	f000 fd0d 	bl	800c816 <USBD_GetEpDesc>
 800bdfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2210      	movs	r2, #16
 800be08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d006      	beq.n	800be1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	2200      	movs	r2, #0
 800be14:	711a      	strb	r2, [r3, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f042 0202 	orr.w	r2, r2, #2
 800be1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d006      	beq.n	800be32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	711a      	strb	r2, [r3, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f042 0202 	orr.w	r2, r2, #2
 800be30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2243      	movs	r2, #67	@ 0x43
 800be36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be38:	4b02      	ldr	r3, [pc, #8]	@ (800be44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000068 	.word	0x20000068

0800be48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be50:	2182      	movs	r1, #130	@ 0x82
 800be52:	4818      	ldr	r0, [pc, #96]	@ (800beb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be54:	f000 fcdf 	bl	800c816 <USBD_GetEpDesc>
 800be58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be5a:	2101      	movs	r1, #1
 800be5c:	4815      	ldr	r0, [pc, #84]	@ (800beb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be5e:	f000 fcda 	bl	800c816 <USBD_GetEpDesc>
 800be62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be64:	2181      	movs	r1, #129	@ 0x81
 800be66:	4813      	ldr	r0, [pc, #76]	@ (800beb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be68:	f000 fcd5 	bl	800c816 <USBD_GetEpDesc>
 800be6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	2210      	movs	r2, #16
 800be78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d006      	beq.n	800be8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	2200      	movs	r2, #0
 800be84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be88:	711a      	strb	r2, [r3, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d006      	beq.n	800bea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be9c:	711a      	strb	r2, [r3, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2243      	movs	r2, #67	@ 0x43
 800bea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bea8:	4b02      	ldr	r3, [pc, #8]	@ (800beb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000068 	.word	0x20000068

0800beb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	220a      	movs	r2, #10
 800bec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bec6:	4b03      	ldr	r3, [pc, #12]	@ (800bed4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	20000024 	.word	0x20000024

0800bed8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	e009      	b.n	800bf00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	33b0      	adds	r3, #176	@ 0xb0
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	32b0      	adds	r2, #176	@ 0xb0
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e008      	b.n	800bf44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	371c      	adds	r7, #28
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	32b0      	adds	r2, #176	@ 0xb0
 800bf64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e004      	b.n	800bf7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
	...

0800bf8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	32b0      	adds	r2, #176	@ 0xb0
 800bf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32b0      	adds	r2, #176	@ 0xb0
 800bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e025      	b.n	800c00a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d11f      	bne.n	800c008 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bfd0:	4b10      	ldr	r3, [pc, #64]	@ (800c014 <USBD_CDC_TransmitPacket+0x88>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	f003 020f 	and.w	r2, r3, #15
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4403      	add	r3, r0
 800bfea:	3318      	adds	r3, #24
 800bfec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bfee:	4b09      	ldr	r3, [pc, #36]	@ (800c014 <USBD_CDC_TransmitPacket+0x88>)
 800bff0:	7819      	ldrb	r1, [r3, #0]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f002 f85f 	bl	800e0c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	200000ab 	.word	0x200000ab

0800c018 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	32b0      	adds	r2, #176	@ 0xb0
 800c02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32b0      	adds	r2, #176	@ 0xb0
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c042:	2303      	movs	r3, #3
 800c044:	e018      	b.n	800c078 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7c1b      	ldrb	r3, [r3, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c04e:	4b0c      	ldr	r3, [pc, #48]	@ (800c080 <USBD_CDC_ReceivePacket+0x68>)
 800c050:	7819      	ldrb	r1, [r3, #0]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 f851 	bl	800e104 <USBD_LL_PrepareReceive>
 800c062:	e008      	b.n	800c076 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c064:	4b06      	ldr	r3, [pc, #24]	@ (800c080 <USBD_CDC_ReceivePacket+0x68>)
 800c066:	7819      	ldrb	r1, [r3, #0]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c06e:	2340      	movs	r3, #64	@ 0x40
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 f847 	bl	800e104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	200000ac 	.word	0x200000ac

0800c084 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	4613      	mov	r3, r2
 800c090:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d101      	bne.n	800c09c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c098:	2303      	movs	r3, #3
 800c09a:	e01f      	b.n	800c0dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	79fa      	ldrb	r2, [r7, #7]
 800c0ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f001 fec1 	bl	800de58 <USBD_LL_Init>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e025      	b.n	800c148 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	32ae      	adds	r2, #174	@ 0xae
 800c10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00f      	beq.n	800c138 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32ae      	adds	r2, #174	@ 0xae
 800c122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c128:	f107 020e 	add.w	r2, r7, #14
 800c12c:	4610      	mov	r0, r2
 800c12e:	4798      	blx	r3
 800c130:	4602      	mov	r2, r0
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 fec9 	bl	800def0 <USBD_LL_Start>
 800c15e:	4603      	mov	r3, r0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c170:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c172:	4618      	mov	r0, r3
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	460b      	mov	r3, r1
 800c188:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c194:	2b00      	cmp	r3, #0
 800c196:	d009      	beq.n	800c1ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	78fa      	ldrb	r2, [r7, #3]
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	4798      	blx	r3
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	4798      	blx	r3
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 f930 	bl	800d462 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c210:	461a      	mov	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c21e:	f003 031f 	and.w	r3, r3, #31
 800c222:	2b02      	cmp	r3, #2
 800c224:	d01a      	beq.n	800c25c <USBD_LL_SetupStage+0x72>
 800c226:	2b02      	cmp	r3, #2
 800c228:	d822      	bhi.n	800c270 <USBD_LL_SetupStage+0x86>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <USBD_LL_SetupStage+0x4a>
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d00a      	beq.n	800c248 <USBD_LL_SetupStage+0x5e>
 800c232:	e01d      	b.n	800c270 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fb5d 	bl	800c8fc <USBD_StdDevReq>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	e020      	b.n	800c28a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fbc5 	bl	800c9e0 <USBD_StdItfReq>
 800c256:	4603      	mov	r3, r0
 800c258:	73fb      	strb	r3, [r7, #15]
      break;
 800c25a:	e016      	b.n	800c28a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fc27 	bl	800cab8 <USBD_StdEPReq>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73fb      	strb	r3, [r7, #15]
      break;
 800c26e:	e00c      	b.n	800c28a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c276:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fe96 	bl	800dfb0 <USBD_LL_StallEP>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]
      break;
 800c288:	bf00      	nop
  }

  return ret;
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	460b      	mov	r3, r1
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c2a6:	7afb      	ldrb	r3, [r7, #11]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d16e      	bne.n	800c38a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c2b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	f040 8098 	bne.w	800c3f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d913      	bls.n	800c2f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	68da      	ldr	r2, [r3, #12]
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	bf28      	it	cs
 800c2e6:	4613      	movcs	r3, r2
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f001 f9ac 	bl	800d64a <USBD_CtlContinueRx>
 800c2f2:	e07d      	b.n	800c3f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2fa:	f003 031f 	and.w	r3, r3, #31
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d014      	beq.n	800c32c <USBD_LL_DataOutStage+0x98>
 800c302:	2b02      	cmp	r3, #2
 800c304:	d81d      	bhi.n	800c342 <USBD_LL_DataOutStage+0xae>
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <USBD_LL_DataOutStage+0x7c>
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d003      	beq.n	800c316 <USBD_LL_DataOutStage+0x82>
 800c30e:	e018      	b.n	800c342 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c310:	2300      	movs	r3, #0
 800c312:	75bb      	strb	r3, [r7, #22]
            break;
 800c314:	e018      	b.n	800c348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	4619      	mov	r1, r3
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 fa5e 	bl	800c7e2 <USBD_CoreFindIF>
 800c326:	4603      	mov	r3, r0
 800c328:	75bb      	strb	r3, [r7, #22]
            break;
 800c32a:	e00d      	b.n	800c348 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c332:	b2db      	uxtb	r3, r3
 800c334:	4619      	mov	r1, r3
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 fa60 	bl	800c7fc <USBD_CoreFindEP>
 800c33c:	4603      	mov	r3, r0
 800c33e:	75bb      	strb	r3, [r7, #22]
            break;
 800c340:	e002      	b.n	800c348 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	75bb      	strb	r3, [r7, #22]
            break;
 800c346:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c348:	7dbb      	ldrb	r3, [r7, #22]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d119      	bne.n	800c382 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b03      	cmp	r3, #3
 800c358:	d113      	bne.n	800c382 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c35a:	7dba      	ldrb	r2, [r7, #22]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	32ae      	adds	r2, #174	@ 0xae
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c36a:	7dba      	ldrb	r2, [r7, #22]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c372:	7dba      	ldrb	r2, [r7, #22]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	32ae      	adds	r2, #174	@ 0xae
 800c378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f001 f972 	bl	800d66c <USBD_CtlSendStatus>
 800c388:	e032      	b.n	800c3f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c38a:	7afb      	ldrb	r3, [r7, #11]
 800c38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c390:	b2db      	uxtb	r3, r3
 800c392:	4619      	mov	r1, r3
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 fa31 	bl	800c7fc <USBD_CoreFindEP>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c39e:	7dbb      	ldrb	r3, [r7, #22]
 800c3a0:	2bff      	cmp	r3, #255	@ 0xff
 800c3a2:	d025      	beq.n	800c3f0 <USBD_LL_DataOutStage+0x15c>
 800c3a4:	7dbb      	ldrb	r3, [r7, #22]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d122      	bne.n	800c3f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d117      	bne.n	800c3e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c3b6:	7dba      	ldrb	r2, [r7, #22]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	32ae      	adds	r2, #174	@ 0xae
 800c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00f      	beq.n	800c3e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3c6:	7dba      	ldrb	r2, [r7, #22]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3ce:	7dba      	ldrb	r2, [r7, #22]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	32ae      	adds	r2, #174	@ 0xae
 800c3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	7afa      	ldrb	r2, [r7, #11]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	4798      	blx	r3
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	e000      	b.n	800c3f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b086      	sub	sp, #24
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	460b      	mov	r3, r1
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d16f      	bne.n	800c4ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3314      	adds	r3, #20
 800c412:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d15a      	bne.n	800c4d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	689a      	ldr	r2, [r3, #8]
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	429a      	cmp	r2, r3
 800c428:	d914      	bls.n	800c454 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	1ad2      	subs	r2, r2, r3
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	461a      	mov	r2, r3
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f001 f8d4 	bl	800d5ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c446:	2300      	movs	r3, #0
 800c448:	2200      	movs	r2, #0
 800c44a:	2100      	movs	r1, #0
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f001 fe59 	bl	800e104 <USBD_LL_PrepareReceive>
 800c452:	e03f      	b.n	800c4d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	68da      	ldr	r2, [r3, #12]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d11c      	bne.n	800c49a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c468:	429a      	cmp	r2, r3
 800c46a:	d316      	bcc.n	800c49a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c476:	429a      	cmp	r2, r3
 800c478:	d20f      	bcs.n	800c49a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c47a:	2200      	movs	r2, #0
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f001 f8b5 	bl	800d5ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c48c:	2300      	movs	r3, #0
 800c48e:	2200      	movs	r2, #0
 800c490:	2100      	movs	r1, #0
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f001 fe36 	bl	800e104 <USBD_LL_PrepareReceive>
 800c498:	e01c      	b.n	800c4d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d10f      	bne.n	800c4c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d009      	beq.n	800c4c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4c6:	2180      	movs	r1, #128	@ 0x80
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f001 fd71 	bl	800dfb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f001 f8df 	bl	800d692 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d03a      	beq.n	800c554 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f7ff fe42 	bl	800c168 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c4ec:	e032      	b.n	800c554 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4ee:	7afb      	ldrb	r3, [r7, #11]
 800c4f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 f97f 	bl	800c7fc <USBD_CoreFindEP>
 800c4fe:	4603      	mov	r3, r0
 800c500:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	2bff      	cmp	r3, #255	@ 0xff
 800c506:	d025      	beq.n	800c554 <USBD_LL_DataInStage+0x15a>
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d122      	bne.n	800c554 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b03      	cmp	r3, #3
 800c518:	d11c      	bne.n	800c554 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c51a:	7dfa      	ldrb	r2, [r7, #23]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	32ae      	adds	r2, #174	@ 0xae
 800c520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d014      	beq.n	800c554 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c52a:	7dfa      	ldrb	r2, [r7, #23]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c532:	7dfa      	ldrb	r2, [r7, #23]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	32ae      	adds	r2, #174	@ 0xae
 800c538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	7afa      	ldrb	r2, [r7, #11]
 800c540:	4611      	mov	r1, r2
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	4798      	blx	r3
 800c546:	4603      	mov	r3, r0
 800c548:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c54a:	7dbb      	ldrb	r3, [r7, #22]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c550:	7dbb      	ldrb	r3, [r7, #22]
 800c552:	e000      	b.n	800c556 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c566:	2300      	movs	r3, #0
 800c568:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c596:	2b00      	cmp	r3, #0
 800c598:	d014      	beq.n	800c5c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00e      	beq.n	800c5c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	6852      	ldr	r2, [r2, #4]
 800c5b2:	b2d2      	uxtb	r2, r2
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	4798      	blx	r3
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c4:	2340      	movs	r3, #64	@ 0x40
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fcab 	bl	800df26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2240      	movs	r2, #64	@ 0x40
 800c5dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5e0:	2340      	movs	r3, #64	@ 0x40
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	2180      	movs	r1, #128	@ 0x80
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f001 fc9d 	bl	800df26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2240      	movs	r2, #64	@ 0x40
 800c5f6:	621a      	str	r2, [r3, #32]

  return ret;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c630:	b2da      	uxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2204      	movs	r2, #4
 800c63c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b04      	cmp	r3, #4
 800c660:	d106      	bne.n	800c670 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d110      	bne.n	800c6b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00b      	beq.n	800c6b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d005      	beq.n	800c6b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	32ae      	adds	r2, #174	@ 0xae
 800c6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d101      	bne.n	800c6e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	e01c      	b.n	800c71a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d115      	bne.n	800c718 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	32ae      	adds	r2, #174	@ 0xae
 800c6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	32ae      	adds	r2, #174	@ 0xae
 800c70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70e:	6a1b      	ldr	r3, [r3, #32]
 800c710:	78fa      	ldrb	r2, [r7, #3]
 800c712:	4611      	mov	r1, r2
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b082      	sub	sp, #8
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	460b      	mov	r3, r1
 800c72c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	32ae      	adds	r2, #174	@ 0xae
 800c738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c740:	2303      	movs	r3, #3
 800c742:	e01c      	b.n	800c77e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d115      	bne.n	800c77c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	32ae      	adds	r2, #174	@ 0xae
 800c75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00b      	beq.n	800c77c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	32ae      	adds	r2, #174	@ 0xae
 800c76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c774:	78fa      	ldrb	r2, [r7, #3]
 800c776:	4611      	mov	r1, r2
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00e      	beq.n	800c7d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6852      	ldr	r2, [r2, #4]
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	4798      	blx	r3
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c808:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b086      	sub	sp, #24
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	885b      	ldrh	r3, [r3, #2]
 800c832:	b29b      	uxth	r3, r3
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	7812      	ldrb	r2, [r2, #0]
 800c838:	4293      	cmp	r3, r2
 800c83a:	d91f      	bls.n	800c87c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c842:	e013      	b.n	800c86c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c844:	f107 030a 	add.w	r3, r7, #10
 800c848:	4619      	mov	r1, r3
 800c84a:	6978      	ldr	r0, [r7, #20]
 800c84c:	f000 f81b 	bl	800c886 <USBD_GetNextDesc>
 800c850:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	785b      	ldrb	r3, [r3, #1]
 800c856:	2b05      	cmp	r3, #5
 800c858:	d108      	bne.n	800c86c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	789b      	ldrb	r3, [r3, #2]
 800c862:	78fa      	ldrb	r2, [r7, #3]
 800c864:	429a      	cmp	r2, r3
 800c866:	d008      	beq.n	800c87a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c868:	2300      	movs	r3, #0
 800c86a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	885b      	ldrh	r3, [r3, #2]
 800c870:	b29a      	uxth	r2, r3
 800c872:	897b      	ldrh	r3, [r7, #10]
 800c874:	429a      	cmp	r2, r3
 800c876:	d8e5      	bhi.n	800c844 <USBD_GetEpDesc+0x2e>
 800c878:	e000      	b.n	800c87c <USBD_GetEpDesc+0x66>
          break;
 800c87a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c87c:	693b      	ldr	r3, [r7, #16]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c886:	b480      	push	{r7}
 800c888:	b085      	sub	sp, #20
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	4413      	add	r3, r2
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b087      	sub	sp, #28
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8dc:	8a3b      	ldrh	r3, [r7, #16]
 800c8de:	021b      	lsls	r3, r3, #8
 800c8e0:	b21a      	sxth	r2, r3
 800c8e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	b21b      	sxth	r3, r3
 800c8ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8ec:	89fb      	ldrh	r3, [r7, #14]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	371c      	adds	r7, #28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
	...

0800c8fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c912:	2b40      	cmp	r3, #64	@ 0x40
 800c914:	d005      	beq.n	800c922 <USBD_StdDevReq+0x26>
 800c916:	2b40      	cmp	r3, #64	@ 0x40
 800c918:	d857      	bhi.n	800c9ca <USBD_StdDevReq+0xce>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00f      	beq.n	800c93e <USBD_StdDevReq+0x42>
 800c91e:	2b20      	cmp	r3, #32
 800c920:	d153      	bne.n	800c9ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	32ae      	adds	r2, #174	@ 0xae
 800c92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	4798      	blx	r3
 800c938:	4603      	mov	r3, r0
 800c93a:	73fb      	strb	r3, [r7, #15]
      break;
 800c93c:	e04a      	b.n	800c9d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b09      	cmp	r3, #9
 800c944:	d83b      	bhi.n	800c9be <USBD_StdDevReq+0xc2>
 800c946:	a201      	add	r2, pc, #4	@ (adr r2, 800c94c <USBD_StdDevReq+0x50>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c9a1 	.word	0x0800c9a1
 800c950:	0800c9b5 	.word	0x0800c9b5
 800c954:	0800c9bf 	.word	0x0800c9bf
 800c958:	0800c9ab 	.word	0x0800c9ab
 800c95c:	0800c9bf 	.word	0x0800c9bf
 800c960:	0800c97f 	.word	0x0800c97f
 800c964:	0800c975 	.word	0x0800c975
 800c968:	0800c9bf 	.word	0x0800c9bf
 800c96c:	0800c997 	.word	0x0800c997
 800c970:	0800c989 	.word	0x0800c989
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa3c 	bl	800cdf4 <USBD_GetDescriptor>
          break;
 800c97c:	e024      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fbcb 	bl	800d11c <USBD_SetAddress>
          break;
 800c986:	e01f      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fc0a 	bl	800d1a4 <USBD_SetConfig>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
          break;
 800c994:	e018      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fcad 	bl	800d2f8 <USBD_GetConfig>
          break;
 800c99e:	e013      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fcde 	bl	800d364 <USBD_GetStatus>
          break;
 800c9a8:	e00e      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fd0d 	bl	800d3cc <USBD_SetFeature>
          break;
 800c9b2:	e009      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fd31 	bl	800d41e <USBD_ClrFeature>
          break;
 800c9bc:	e004      	b.n	800c9c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fd88 	bl	800d4d6 <USBD_CtlError>
          break;
 800c9c6:	bf00      	nop
      }
      break;
 800c9c8:	e004      	b.n	800c9d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fd82 	bl	800d4d6 <USBD_CtlError>
      break;
 800c9d2:	bf00      	nop
  }

  return ret;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop

0800c9e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9f6:	2b40      	cmp	r3, #64	@ 0x40
 800c9f8:	d005      	beq.n	800ca06 <USBD_StdItfReq+0x26>
 800c9fa:	2b40      	cmp	r3, #64	@ 0x40
 800c9fc:	d852      	bhi.n	800caa4 <USBD_StdItfReq+0xc4>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <USBD_StdItfReq+0x26>
 800ca02:	2b20      	cmp	r3, #32
 800ca04:	d14e      	bne.n	800caa4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d840      	bhi.n	800ca96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	889b      	ldrh	r3, [r3, #4]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d836      	bhi.n	800ca8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	889b      	ldrh	r3, [r3, #4]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fedb 	bl	800c7e2 <USBD_CoreFindIF>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	2bff      	cmp	r3, #255	@ 0xff
 800ca34:	d01d      	beq.n	800ca72 <USBD_StdItfReq+0x92>
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d11a      	bne.n	800ca72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca3c:	7bba      	ldrb	r2, [r7, #14]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	32ae      	adds	r2, #174	@ 0xae
 800ca42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00f      	beq.n	800ca6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca4c:	7bba      	ldrb	r2, [r7, #14]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca54:	7bba      	ldrb	r2, [r7, #14]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	32ae      	adds	r2, #174	@ 0xae
 800ca5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
 800ca66:	4603      	mov	r3, r0
 800ca68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca6a:	e004      	b.n	800ca76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca70:	e001      	b.n	800ca76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca72:	2303      	movs	r3, #3
 800ca74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	88db      	ldrh	r3, [r3, #6]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d110      	bne.n	800caa0 <USBD_StdItfReq+0xc0>
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10d      	bne.n	800caa0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fdf1 	bl	800d66c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca8a:	e009      	b.n	800caa0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fd21 	bl	800d4d6 <USBD_CtlError>
          break;
 800ca94:	e004      	b.n	800caa0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fd1c 	bl	800d4d6 <USBD_CtlError>
          break;
 800ca9e:	e000      	b.n	800caa2 <USBD_StdItfReq+0xc2>
          break;
 800caa0:	bf00      	nop
      }
      break;
 800caa2:	e004      	b.n	800caae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fd15 	bl	800d4d6 <USBD_CtlError>
      break;
 800caac:	bf00      	nop
  }

  return ret;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	889b      	ldrh	r3, [r3, #4]
 800caca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cad4:	2b40      	cmp	r3, #64	@ 0x40
 800cad6:	d007      	beq.n	800cae8 <USBD_StdEPReq+0x30>
 800cad8:	2b40      	cmp	r3, #64	@ 0x40
 800cada:	f200 817f 	bhi.w	800cddc <USBD_StdEPReq+0x324>
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d02a      	beq.n	800cb38 <USBD_StdEPReq+0x80>
 800cae2:	2b20      	cmp	r3, #32
 800cae4:	f040 817a 	bne.w	800cddc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fe85 	bl	800c7fc <USBD_CoreFindEP>
 800caf2:	4603      	mov	r3, r0
 800caf4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caf6:	7b7b      	ldrb	r3, [r7, #13]
 800caf8:	2bff      	cmp	r3, #255	@ 0xff
 800cafa:	f000 8174 	beq.w	800cde6 <USBD_StdEPReq+0x32e>
 800cafe:	7b7b      	ldrb	r3, [r7, #13]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f040 8170 	bne.w	800cde6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cb06:	7b7a      	ldrb	r2, [r7, #13]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cb0e:	7b7a      	ldrb	r2, [r7, #13]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	32ae      	adds	r2, #174	@ 0xae
 800cb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 8163 	beq.w	800cde6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb20:	7b7a      	ldrb	r2, [r7, #13]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	32ae      	adds	r2, #174	@ 0xae
 800cb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	4798      	blx	r3
 800cb32:	4603      	mov	r3, r0
 800cb34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb36:	e156      	b.n	800cde6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	785b      	ldrb	r3, [r3, #1]
 800cb3c:	2b03      	cmp	r3, #3
 800cb3e:	d008      	beq.n	800cb52 <USBD_StdEPReq+0x9a>
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	f300 8145 	bgt.w	800cdd0 <USBD_StdEPReq+0x318>
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 809b 	beq.w	800cc82 <USBD_StdEPReq+0x1ca>
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d03c      	beq.n	800cbca <USBD_StdEPReq+0x112>
 800cb50:	e13e      	b.n	800cdd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d002      	beq.n	800cb64 <USBD_StdEPReq+0xac>
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d016      	beq.n	800cb90 <USBD_StdEPReq+0xd8>
 800cb62:	e02c      	b.n	800cbbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb64:	7bbb      	ldrb	r3, [r7, #14]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00d      	beq.n	800cb86 <USBD_StdEPReq+0xce>
 800cb6a:	7bbb      	ldrb	r3, [r7, #14]
 800cb6c:	2b80      	cmp	r3, #128	@ 0x80
 800cb6e:	d00a      	beq.n	800cb86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f001 fa1b 	bl	800dfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb7a:	2180      	movs	r1, #128	@ 0x80
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 fa17 	bl	800dfb0 <USBD_LL_StallEP>
 800cb82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb84:	e020      	b.n	800cbc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fca4 	bl	800d4d6 <USBD_CtlError>
              break;
 800cb8e:	e01b      	b.n	800cbc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	885b      	ldrh	r3, [r3, #2]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10e      	bne.n	800cbb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <USBD_StdEPReq+0xfe>
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	2b80      	cmp	r3, #128	@ 0x80
 800cba2:	d008      	beq.n	800cbb6 <USBD_StdEPReq+0xfe>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	88db      	ldrh	r3, [r3, #6]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d104      	bne.n	800cbb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 f9fd 	bl	800dfb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fd58 	bl	800d66c <USBD_CtlSendStatus>

              break;
 800cbbc:	e004      	b.n	800cbc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fc88 	bl	800d4d6 <USBD_CtlError>
              break;
 800cbc6:	bf00      	nop
          }
          break;
 800cbc8:	e107      	b.n	800cdda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d002      	beq.n	800cbdc <USBD_StdEPReq+0x124>
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d016      	beq.n	800cc08 <USBD_StdEPReq+0x150>
 800cbda:	e04b      	b.n	800cc74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00d      	beq.n	800cbfe <USBD_StdEPReq+0x146>
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	2b80      	cmp	r3, #128	@ 0x80
 800cbe6:	d00a      	beq.n	800cbfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f001 f9df 	bl	800dfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbf2:	2180      	movs	r1, #128	@ 0x80
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 f9db 	bl	800dfb0 <USBD_LL_StallEP>
 800cbfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbfc:	e040      	b.n	800cc80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fc68 	bl	800d4d6 <USBD_CtlError>
              break;
 800cc06:	e03b      	b.n	800cc80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	885b      	ldrh	r3, [r3, #2]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d136      	bne.n	800cc7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f001 f9e5 	bl	800dfee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fd21 	bl	800d66c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff fde4 	bl	800c7fc <USBD_CoreFindEP>
 800cc34:	4603      	mov	r3, r0
 800cc36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc38:	7b7b      	ldrb	r3, [r7, #13]
 800cc3a:	2bff      	cmp	r3, #255	@ 0xff
 800cc3c:	d01f      	beq.n	800cc7e <USBD_StdEPReq+0x1c6>
 800cc3e:	7b7b      	ldrb	r3, [r7, #13]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d11c      	bne.n	800cc7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc44:	7b7a      	ldrb	r2, [r7, #13]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc4c:	7b7a      	ldrb	r2, [r7, #13]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	32ae      	adds	r2, #174	@ 0xae
 800cc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d010      	beq.n	800cc7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc5c:	7b7a      	ldrb	r2, [r7, #13]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32ae      	adds	r2, #174	@ 0xae
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	4798      	blx	r3
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc72:	e004      	b.n	800cc7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fc2d 	bl	800d4d6 <USBD_CtlError>
              break;
 800cc7c:	e000      	b.n	800cc80 <USBD_StdEPReq+0x1c8>
              break;
 800cc7e:	bf00      	nop
          }
          break;
 800cc80:	e0ab      	b.n	800cdda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d002      	beq.n	800cc94 <USBD_StdEPReq+0x1dc>
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d032      	beq.n	800ccf8 <USBD_StdEPReq+0x240>
 800cc92:	e097      	b.n	800cdc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d007      	beq.n	800ccaa <USBD_StdEPReq+0x1f2>
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	2b80      	cmp	r3, #128	@ 0x80
 800cc9e:	d004      	beq.n	800ccaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fc17 	bl	800d4d6 <USBD_CtlError>
                break;
 800cca8:	e091      	b.n	800cdce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da0b      	bge.n	800ccca <USBD_StdEPReq+0x212>
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	3310      	adds	r3, #16
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	e00b      	b.n	800cce2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
 800cccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	4413      	add	r3, r2
 800cce0:	3304      	adds	r3, #4
 800cce2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2202      	movs	r2, #2
 800ccee:	4619      	mov	r1, r3
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fc61 	bl	800d5b8 <USBD_CtlSendData>
              break;
 800ccf6:	e06a      	b.n	800cdce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da11      	bge.n	800cd24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	f003 020f 	and.w	r2, r3, #15
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	3324      	adds	r3, #36	@ 0x24
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d117      	bne.n	800cd4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fbda 	bl	800d4d6 <USBD_CtlError>
                  break;
 800cd22:	e054      	b.n	800cdce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d104      	bne.n	800cd4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fbc7 	bl	800d4d6 <USBD_CtlError>
                  break;
 800cd48:	e041      	b.n	800cdce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	da0b      	bge.n	800cd6a <USBD_StdEPReq+0x2b2>
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	3310      	adds	r3, #16
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	4413      	add	r3, r2
 800cd66:	3304      	adds	r3, #4
 800cd68:	e00b      	b.n	800cd82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd6a:	7bbb      	ldrb	r3, [r7, #14]
 800cd6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd70:	4613      	mov	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4413      	add	r3, r2
 800cd80:	3304      	adds	r3, #4
 800cd82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <USBD_StdEPReq+0x2d8>
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	2b80      	cmp	r3, #128	@ 0x80
 800cd8e:	d103      	bne.n	800cd98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	e00e      	b.n	800cdb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd98:	7bbb      	ldrb	r3, [r7, #14]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 f945 	bl	800e02c <USBD_LL_IsStallEP>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	e002      	b.n	800cdb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2202      	movs	r2, #2
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fbfb 	bl	800d5b8 <USBD_CtlSendData>
              break;
 800cdc2:	e004      	b.n	800cdce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fb85 	bl	800d4d6 <USBD_CtlError>
              break;
 800cdcc:	bf00      	nop
          }
          break;
 800cdce:	e004      	b.n	800cdda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fb7f 	bl	800d4d6 <USBD_CtlError>
          break;
 800cdd8:	bf00      	nop
      }
      break;
 800cdda:	e005      	b.n	800cde8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fb79 	bl	800d4d6 <USBD_CtlError>
      break;
 800cde4:	e000      	b.n	800cde8 <USBD_StdEPReq+0x330>
      break;
 800cde6:	bf00      	nop
  }

  return ret;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	885b      	ldrh	r3, [r3, #2]
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	3b01      	subs	r3, #1
 800ce14:	2b0e      	cmp	r3, #14
 800ce16:	f200 8152 	bhi.w	800d0be <USBD_GetDescriptor+0x2ca>
 800ce1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce20 <USBD_GetDescriptor+0x2c>)
 800ce1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce20:	0800ce91 	.word	0x0800ce91
 800ce24:	0800cea9 	.word	0x0800cea9
 800ce28:	0800cee9 	.word	0x0800cee9
 800ce2c:	0800d0bf 	.word	0x0800d0bf
 800ce30:	0800d0bf 	.word	0x0800d0bf
 800ce34:	0800d05f 	.word	0x0800d05f
 800ce38:	0800d08b 	.word	0x0800d08b
 800ce3c:	0800d0bf 	.word	0x0800d0bf
 800ce40:	0800d0bf 	.word	0x0800d0bf
 800ce44:	0800d0bf 	.word	0x0800d0bf
 800ce48:	0800d0bf 	.word	0x0800d0bf
 800ce4c:	0800d0bf 	.word	0x0800d0bf
 800ce50:	0800d0bf 	.word	0x0800d0bf
 800ce54:	0800d0bf 	.word	0x0800d0bf
 800ce58:	0800ce5d 	.word	0x0800ce5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	7c12      	ldrb	r2, [r2, #16]
 800ce74:	f107 0108 	add.w	r1, r7, #8
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce7e:	e126      	b.n	800d0ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fb27 	bl	800d4d6 <USBD_CtlError>
        err++;
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce8e:	e11e      	b.n	800d0ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	7c12      	ldrb	r2, [r2, #16]
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
 800cea4:	60f8      	str	r0, [r7, #12]
      break;
 800cea6:	e112      	b.n	800d0ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7c1b      	ldrb	r3, [r3, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10d      	bne.n	800cecc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb8:	f107 0208 	add.w	r2, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	2202      	movs	r2, #2
 800cec8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceca:	e100      	b.n	800d0ce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ced2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced4:	f107 0208 	add.w	r2, r7, #8
 800ced8:	4610      	mov	r0, r2
 800ceda:	4798      	blx	r3
 800cedc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	3301      	adds	r3, #1
 800cee2:	2202      	movs	r2, #2
 800cee4:	701a      	strb	r2, [r3, #0]
      break;
 800cee6:	e0f2      	b.n	800d0ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	885b      	ldrh	r3, [r3, #2]
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	2b05      	cmp	r3, #5
 800cef0:	f200 80ac 	bhi.w	800d04c <USBD_GetDescriptor+0x258>
 800cef4:	a201      	add	r2, pc, #4	@ (adr r2, 800cefc <USBD_GetDescriptor+0x108>)
 800cef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefa:	bf00      	nop
 800cefc:	0800cf15 	.word	0x0800cf15
 800cf00:	0800cf49 	.word	0x0800cf49
 800cf04:	0800cf7d 	.word	0x0800cf7d
 800cf08:	0800cfb1 	.word	0x0800cfb1
 800cf0c:	0800cfe5 	.word	0x0800cfe5
 800cf10:	0800d019 	.word	0x0800d019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7c12      	ldrb	r2, [r2, #16]
 800cf2c:	f107 0108 	add.w	r1, r7, #8
 800cf30:	4610      	mov	r0, r2
 800cf32:	4798      	blx	r3
 800cf34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf36:	e091      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 facb 	bl	800d4d6 <USBD_CtlError>
            err++;
 800cf40:	7afb      	ldrb	r3, [r7, #11]
 800cf42:	3301      	adds	r3, #1
 800cf44:	72fb      	strb	r3, [r7, #11]
          break;
 800cf46:	e089      	b.n	800d05c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00b      	beq.n	800cf6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	7c12      	ldrb	r2, [r2, #16]
 800cf60:	f107 0108 	add.w	r1, r7, #8
 800cf64:	4610      	mov	r0, r2
 800cf66:	4798      	blx	r3
 800cf68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf6a:	e077      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fab1 	bl	800d4d6 <USBD_CtlError>
            err++;
 800cf74:	7afb      	ldrb	r3, [r7, #11]
 800cf76:	3301      	adds	r3, #1
 800cf78:	72fb      	strb	r3, [r7, #11]
          break;
 800cf7a:	e06f      	b.n	800d05c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00b      	beq.n	800cfa0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	7c12      	ldrb	r2, [r2, #16]
 800cf94:	f107 0108 	add.w	r1, r7, #8
 800cf98:	4610      	mov	r0, r2
 800cf9a:	4798      	blx	r3
 800cf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf9e:	e05d      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fa97 	bl	800d4d6 <USBD_CtlError>
            err++;
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	72fb      	strb	r3, [r7, #11]
          break;
 800cfae:	e055      	b.n	800d05c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00b      	beq.n	800cfd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	7c12      	ldrb	r2, [r2, #16]
 800cfc8:	f107 0108 	add.w	r1, r7, #8
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4798      	blx	r3
 800cfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfd2:	e043      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa7d 	bl	800d4d6 <USBD_CtlError>
            err++;
 800cfdc:	7afb      	ldrb	r3, [r7, #11]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfe2:	e03b      	b.n	800d05c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00b      	beq.n	800d008 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cff6:	695b      	ldr	r3, [r3, #20]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	7c12      	ldrb	r2, [r2, #16]
 800cffc:	f107 0108 	add.w	r1, r7, #8
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
 800d004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d006:	e029      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa63 	bl	800d4d6 <USBD_CtlError>
            err++;
 800d010:	7afb      	ldrb	r3, [r7, #11]
 800d012:	3301      	adds	r3, #1
 800d014:	72fb      	strb	r3, [r7, #11]
          break;
 800d016:	e021      	b.n	800d05c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00b      	beq.n	800d03c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d02a:	699b      	ldr	r3, [r3, #24]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	7c12      	ldrb	r2, [r2, #16]
 800d030:	f107 0108 	add.w	r1, r7, #8
 800d034:	4610      	mov	r0, r2
 800d036:	4798      	blx	r3
 800d038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d03a:	e00f      	b.n	800d05c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa49 	bl	800d4d6 <USBD_CtlError>
            err++;
 800d044:	7afb      	ldrb	r3, [r7, #11]
 800d046:	3301      	adds	r3, #1
 800d048:	72fb      	strb	r3, [r7, #11]
          break;
 800d04a:	e007      	b.n	800d05c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa41 	bl	800d4d6 <USBD_CtlError>
          err++;
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	3301      	adds	r3, #1
 800d058:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d05a:	bf00      	nop
      }
      break;
 800d05c:	e037      	b.n	800d0ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7c1b      	ldrb	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d109      	bne.n	800d07a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d06e:	f107 0208 	add.w	r2, r7, #8
 800d072:	4610      	mov	r0, r2
 800d074:	4798      	blx	r3
 800d076:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d078:	e029      	b.n	800d0ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fa2a 	bl	800d4d6 <USBD_CtlError>
        err++;
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	3301      	adds	r3, #1
 800d086:	72fb      	strb	r3, [r7, #11]
      break;
 800d088:	e021      	b.n	800d0ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7c1b      	ldrb	r3, [r3, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10d      	bne.n	800d0ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09a:	f107 0208 	add.w	r2, r7, #8
 800d09e:	4610      	mov	r0, r2
 800d0a0:	4798      	blx	r3
 800d0a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	2207      	movs	r2, #7
 800d0aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0ac:	e00f      	b.n	800d0ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fa10 	bl	800d4d6 <USBD_CtlError>
        err++;
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d0bc:	e007      	b.n	800d0ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa08 	bl	800d4d6 <USBD_CtlError>
      err++;
 800d0c6:	7afb      	ldrb	r3, [r7, #11]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d0cc:	bf00      	nop
  }

  if (err != 0U)
 800d0ce:	7afb      	ldrb	r3, [r7, #11]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d11e      	bne.n	800d112 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	88db      	ldrh	r3, [r3, #6]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d016      	beq.n	800d10a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0dc:	893b      	ldrh	r3, [r7, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00e      	beq.n	800d100 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	88da      	ldrh	r2, [r3, #6]
 800d0e6:	893b      	ldrh	r3, [r7, #8]
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	bf28      	it	cs
 800d0ec:	4613      	movcs	r3, r2
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0f2:	893b      	ldrh	r3, [r7, #8]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa5d 	bl	800d5b8 <USBD_CtlSendData>
 800d0fe:	e009      	b.n	800d114 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f9e7 	bl	800d4d6 <USBD_CtlError>
 800d108:	e004      	b.n	800d114 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 faae 	bl	800d66c <USBD_CtlSendStatus>
 800d110:	e000      	b.n	800d114 <USBD_GetDescriptor+0x320>
    return;
 800d112:	bf00      	nop
  }
}
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop

0800d11c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	889b      	ldrh	r3, [r3, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d131      	bne.n	800d192 <USBD_SetAddress+0x76>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d12d      	bne.n	800d192 <USBD_SetAddress+0x76>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d13c:	d829      	bhi.n	800d192 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	885b      	ldrh	r3, [r3, #2]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b03      	cmp	r3, #3
 800d154:	d104      	bne.n	800d160 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f9bc 	bl	800d4d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d15e:	e01d      	b.n	800d19c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7bfa      	ldrb	r2, [r7, #15]
 800d164:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 ff89 	bl	800e084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa7a 	bl	800d66c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2202      	movs	r2, #2
 800d182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d186:	e009      	b.n	800d19c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d190:	e004      	b.n	800d19c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f99e 	bl	800d4d6 <USBD_CtlError>
  }
}
 800d19a:	bf00      	nop
 800d19c:	bf00      	nop
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	885b      	ldrh	r3, [r3, #2]
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	4b4e      	ldr	r3, [pc, #312]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d1ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1bc:	4b4d      	ldr	r3, [pc, #308]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d905      	bls.n	800d1d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f985 	bl	800d4d6 <USBD_CtlError>
    return USBD_FAIL;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e08c      	b.n	800d2ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d002      	beq.n	800d1e2 <USBD_SetConfig+0x3e>
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d029      	beq.n	800d234 <USBD_SetConfig+0x90>
 800d1e0:	e075      	b.n	800d2ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1e2:	4b44      	ldr	r3, [pc, #272]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d020      	beq.n	800d22c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d1ea:	4b42      	ldr	r3, [pc, #264]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7fe ffbf 	bl	800c17e <USBD_SetClassConfig>
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d204:	7bfb      	ldrb	r3, [r7, #15]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d008      	beq.n	800d21c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d20a:	6839      	ldr	r1, [r7, #0]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f962 	bl	800d4d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2202      	movs	r2, #2
 800d216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d21a:	e065      	b.n	800d2e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fa25 	bl	800d66c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2203      	movs	r2, #3
 800d226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d22a:	e05d      	b.n	800d2e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fa1d 	bl	800d66c <USBD_CtlSendStatus>
      break;
 800d232:	e059      	b.n	800d2e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d234:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d112      	bne.n	800d262 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d244:	4b2b      	ldr	r3, [pc, #172]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d24e:	4b29      	ldr	r3, [pc, #164]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7fe ffae 	bl	800c1b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa06 	bl	800d66c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d260:	e042      	b.n	800d2e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d262:	4b24      	ldr	r3, [pc, #144]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d02a      	beq.n	800d2c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	4619      	mov	r1, r3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7fe ff9c 	bl	800c1b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d27e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d288:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7fe ff75 	bl	800c17e <USBD_SetClassConfig>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00f      	beq.n	800d2be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f918 	bl	800d4d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7fe ff81 	bl	800c1b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d2bc:	e014      	b.n	800d2e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f9d4 	bl	800d66c <USBD_CtlSendStatus>
      break;
 800d2c4:	e010      	b.n	800d2e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f9d0 	bl	800d66c <USBD_CtlSendStatus>
      break;
 800d2cc:	e00c      	b.n	800d2e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f900 	bl	800d4d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2d6:	4b07      	ldr	r3, [pc, #28]	@ (800d2f4 <USBD_SetConfig+0x150>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7fe ff6a 	bl	800c1b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e6:	bf00      	nop
  }

  return ret;
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20000984 	.word	0x20000984

0800d2f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	88db      	ldrh	r3, [r3, #6]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d004      	beq.n	800d314 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f8e2 	bl	800d4d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d312:	e023      	b.n	800d35c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	dc02      	bgt.n	800d326 <USBD_GetConfig+0x2e>
 800d320:	2b00      	cmp	r3, #0
 800d322:	dc03      	bgt.n	800d32c <USBD_GetConfig+0x34>
 800d324:	e015      	b.n	800d352 <USBD_GetConfig+0x5a>
 800d326:	2b03      	cmp	r3, #3
 800d328:	d00b      	beq.n	800d342 <USBD_GetConfig+0x4a>
 800d32a:	e012      	b.n	800d352 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	3308      	adds	r3, #8
 800d336:	2201      	movs	r2, #1
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f93c 	bl	800d5b8 <USBD_CtlSendData>
        break;
 800d340:	e00c      	b.n	800d35c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3304      	adds	r3, #4
 800d346:	2201      	movs	r2, #1
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f934 	bl	800d5b8 <USBD_CtlSendData>
        break;
 800d350:	e004      	b.n	800d35c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f8be 	bl	800d4d6 <USBD_CtlError>
        break;
 800d35a:	bf00      	nop
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d374:	b2db      	uxtb	r3, r3
 800d376:	3b01      	subs	r3, #1
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d81e      	bhi.n	800d3ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	88db      	ldrh	r3, [r3, #6]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d004      	beq.n	800d38e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f8a5 	bl	800d4d6 <USBD_CtlError>
        break;
 800d38c:	e01a      	b.n	800d3c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f043 0202 	orr.w	r2, r3, #2
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	330c      	adds	r3, #12
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f900 	bl	800d5b8 <USBD_CtlSendData>
      break;
 800d3b8:	e004      	b.n	800d3c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f88a 	bl	800d4d6 <USBD_CtlError>
      break;
 800d3c2:	bf00      	nop
  }
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	885b      	ldrh	r3, [r3, #2]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d107      	bne.n	800d3ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f940 	bl	800d66c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d3ec:	e013      	b.n	800d416 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	885b      	ldrh	r3, [r3, #2]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d10b      	bne.n	800d40e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	889b      	ldrh	r3, [r3, #4]
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f930 	bl	800d66c <USBD_CtlSendStatus>
}
 800d40c:	e003      	b.n	800d416 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 f860 	bl	800d4d6 <USBD_CtlError>
}
 800d416:	bf00      	nop
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	3b01      	subs	r3, #1
 800d432:	2b02      	cmp	r3, #2
 800d434:	d80b      	bhi.n	800d44e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	885b      	ldrh	r3, [r3, #2]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d10c      	bne.n	800d458 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f910 	bl	800d66c <USBD_CtlSendStatus>
      }
      break;
 800d44c:	e004      	b.n	800d458 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f840 	bl	800d4d6 <USBD_CtlError>
      break;
 800d456:	e000      	b.n	800d45a <USBD_ClrFeature+0x3c>
      break;
 800d458:	bf00      	nop
  }
}
 800d45a:	bf00      	nop
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	781a      	ldrb	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3301      	adds	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	781a      	ldrb	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff fa16 	bl	800c8be <SWAPBYTE>
 800d492:	4603      	mov	r3, r0
 800d494:	461a      	mov	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3301      	adds	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fa09 	bl	800c8be <SWAPBYTE>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7ff f9fc 	bl	800c8be <SWAPBYTE>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	80da      	strh	r2, [r3, #6]
}
 800d4ce:	bf00      	nop
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4e0:	2180      	movs	r1, #128	@ 0x80
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fd64 	bl	800dfb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 fd60 	bl	800dfb0 <USBD_LL_StallEP>
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d504:	2300      	movs	r3, #0
 800d506:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d036      	beq.n	800d57c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d512:	6938      	ldr	r0, [r7, #16]
 800d514:	f000 f836 	bl	800d584 <USBD_GetLen>
 800d518:	4603      	mov	r3, r0
 800d51a:	3301      	adds	r3, #1
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	005b      	lsls	r3, r3, #1
 800d520:	b29a      	uxth	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d526:	7dfb      	ldrb	r3, [r7, #23]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	4413      	add	r3, r2
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	7812      	ldrb	r2, [r2, #0]
 800d530:	701a      	strb	r2, [r3, #0]
  idx++;
 800d532:	7dfb      	ldrb	r3, [r7, #23]
 800d534:	3301      	adds	r3, #1
 800d536:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	4413      	add	r3, r2
 800d53e:	2203      	movs	r2, #3
 800d540:	701a      	strb	r2, [r3, #0]
  idx++;
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	3301      	adds	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d548:	e013      	b.n	800d572 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	4413      	add	r3, r2
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	3301      	adds	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
    idx++;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	3301      	adds	r3, #1
 800d560:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d562:	7dfb      	ldrb	r3, [r7, #23]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	4413      	add	r3, r2
 800d568:	2200      	movs	r2, #0
 800d56a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	3301      	adds	r3, #1
 800d570:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1e7      	bne.n	800d54a <USBD_GetString+0x52>
 800d57a:	e000      	b.n	800d57e <USBD_GetString+0x86>
    return;
 800d57c:	bf00      	nop
  }
}
 800d57e:	3718      	adds	r7, #24
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d594:	e005      	b.n	800d5a2 <USBD_GetLen+0x1e>
  {
    len++;
 800d596:	7bfb      	ldrb	r3, [r7, #15]
 800d598:	3301      	adds	r3, #1
 800d59a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1f5      	bne.n	800d596 <USBD_GetLen+0x12>
  }

  return len;
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 fd6f 	bl	800e0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	60b9      	str	r1, [r7, #8]
 800d5f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	2100      	movs	r1, #0
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 fd5e 	bl	800e0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2203      	movs	r2, #3
 800d620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	2100      	movs	r1, #0
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 fd62 	bl	800e104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	60b9      	str	r1, [r7, #8]
 800d654:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	2100      	movs	r1, #0
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f000 fd51 	bl	800e104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2204      	movs	r2, #4
 800d678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d67c:	2300      	movs	r3, #0
 800d67e:	2200      	movs	r2, #0
 800d680:	2100      	movs	r1, #0
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fd1d 	bl	800e0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2205      	movs	r2, #5
 800d69e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 fd2b 	bl	800e104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b087      	sub	sp, #28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ce:	4b1f      	ldr	r3, [pc, #124]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6d0:	7a5b      	ldrb	r3, [r3, #9]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d131      	bne.n	800d73c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6da:	7a5b      	ldrb	r3, [r3, #9]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6e6:	4b19      	ldr	r3, [pc, #100]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6e8:	7a5b      	ldrb	r3, [r3, #9]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4a17      	ldr	r2, [pc, #92]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4413      	add	r3, r2
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6f6:	4b15      	ldr	r3, [pc, #84]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d6f8:	7a5b      	ldrb	r3, [r3, #9]
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4b13      	ldr	r3, [pc, #76]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d700:	4413      	add	r3, r2
 800d702:	79fa      	ldrb	r2, [r7, #7]
 800d704:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d706:	4b11      	ldr	r3, [pc, #68]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d708:	7a5b      	ldrb	r3, [r3, #9]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	b2d1      	uxtb	r1, r2
 800d710:	4a0e      	ldr	r2, [pc, #56]	@ (800d74c <FATFS_LinkDriverEx+0x94>)
 800d712:	7251      	strb	r1, [r2, #9]
 800d714:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d716:	7dbb      	ldrb	r3, [r7, #22]
 800d718:	3330      	adds	r3, #48	@ 0x30
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	3301      	adds	r3, #1
 800d724:	223a      	movs	r2, #58	@ 0x3a
 800d726:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3302      	adds	r3, #2
 800d72c:	222f      	movs	r2, #47	@ 0x2f
 800d72e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	3303      	adds	r3, #3
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	20000988 	.word	0x20000988

0800d750 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d75a:	2200      	movs	r2, #0
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ffaa 	bl	800d6b8 <FATFS_LinkDriverEx>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d774:	2200      	movs	r2, #0
 800d776:	4912      	ldr	r1, [pc, #72]	@ (800d7c0 <MX_USB_DEVICE_Init+0x50>)
 800d778:	4812      	ldr	r0, [pc, #72]	@ (800d7c4 <MX_USB_DEVICE_Init+0x54>)
 800d77a:	f7fe fc83 	bl	800c084 <USBD_Init>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d001      	beq.n	800d788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d784:	f7f6 f81a 	bl	80037bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d788:	490f      	ldr	r1, [pc, #60]	@ (800d7c8 <MX_USB_DEVICE_Init+0x58>)
 800d78a:	480e      	ldr	r0, [pc, #56]	@ (800d7c4 <MX_USB_DEVICE_Init+0x54>)
 800d78c:	f7fe fcaa 	bl	800c0e4 <USBD_RegisterClass>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d796:	f7f6 f811 	bl	80037bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d79a:	490c      	ldr	r1, [pc, #48]	@ (800d7cc <MX_USB_DEVICE_Init+0x5c>)
 800d79c:	4809      	ldr	r0, [pc, #36]	@ (800d7c4 <MX_USB_DEVICE_Init+0x54>)
 800d79e:	f7fe fb9b 	bl	800bed8 <USBD_CDC_RegisterInterface>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7a8:	f7f6 f808 	bl	80037bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d7ac:	4805      	ldr	r0, [pc, #20]	@ (800d7c4 <MX_USB_DEVICE_Init+0x54>)
 800d7ae:	f7fe fccf 	bl	800c150 <USBD_Start>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7b8:	f7f6 f800 	bl	80037bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7bc:	bf00      	nop
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	200000c4 	.word	0x200000c4
 800d7c4:	20000994 	.word	0x20000994
 800d7c8:	20000030 	.word	0x20000030
 800d7cc:	200000b0 	.word	0x200000b0

0800d7d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4905      	ldr	r1, [pc, #20]	@ (800d7ec <CDC_Init_FS+0x1c>)
 800d7d8:	4805      	ldr	r0, [pc, #20]	@ (800d7f0 <CDC_Init_FS+0x20>)
 800d7da:	f7fe fb97 	bl	800bf0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7de:	4905      	ldr	r1, [pc, #20]	@ (800d7f4 <CDC_Init_FS+0x24>)
 800d7e0:	4803      	ldr	r0, [pc, #12]	@ (800d7f0 <CDC_Init_FS+0x20>)
 800d7e2:	f7fe fbb5 	bl	800bf50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20001470 	.word	0x20001470
 800d7f0:	20000994 	.word	0x20000994
 800d7f4:	20000c70 	.word	0x20000c70

0800d7f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	4603      	mov	r3, r0
 800d810:	6039      	str	r1, [r7, #0]
 800d812:	71fb      	strb	r3, [r7, #7]
 800d814:	4613      	mov	r3, r2
 800d816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d818:	79fb      	ldrb	r3, [r7, #7]
 800d81a:	2b23      	cmp	r3, #35	@ 0x23
 800d81c:	d84a      	bhi.n	800d8b4 <CDC_Control_FS+0xac>
 800d81e:	a201      	add	r2, pc, #4	@ (adr r2, 800d824 <CDC_Control_FS+0x1c>)
 800d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d824:	0800d8b5 	.word	0x0800d8b5
 800d828:	0800d8b5 	.word	0x0800d8b5
 800d82c:	0800d8b5 	.word	0x0800d8b5
 800d830:	0800d8b5 	.word	0x0800d8b5
 800d834:	0800d8b5 	.word	0x0800d8b5
 800d838:	0800d8b5 	.word	0x0800d8b5
 800d83c:	0800d8b5 	.word	0x0800d8b5
 800d840:	0800d8b5 	.word	0x0800d8b5
 800d844:	0800d8b5 	.word	0x0800d8b5
 800d848:	0800d8b5 	.word	0x0800d8b5
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d8b5 	.word	0x0800d8b5
 800d854:	0800d8b5 	.word	0x0800d8b5
 800d858:	0800d8b5 	.word	0x0800d8b5
 800d85c:	0800d8b5 	.word	0x0800d8b5
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d8b5 	.word	0x0800d8b5
 800d868:	0800d8b5 	.word	0x0800d8b5
 800d86c:	0800d8b5 	.word	0x0800d8b5
 800d870:	0800d8b5 	.word	0x0800d8b5
 800d874:	0800d8b5 	.word	0x0800d8b5
 800d878:	0800d8b5 	.word	0x0800d8b5
 800d87c:	0800d8b5 	.word	0x0800d8b5
 800d880:	0800d8b5 	.word	0x0800d8b5
 800d884:	0800d8b5 	.word	0x0800d8b5
 800d888:	0800d8b5 	.word	0x0800d8b5
 800d88c:	0800d8b5 	.word	0x0800d8b5
 800d890:	0800d8b5 	.word	0x0800d8b5
 800d894:	0800d8b5 	.word	0x0800d8b5
 800d898:	0800d8b5 	.word	0x0800d8b5
 800d89c:	0800d8b5 	.word	0x0800d8b5
 800d8a0:	0800d8b5 	.word	0x0800d8b5
 800d8a4:	0800d8b5 	.word	0x0800d8b5
 800d8a8:	0800d8b5 	.word	0x0800d8b5
 800d8ac:	0800d8b5 	.word	0x0800d8b5
 800d8b0:	0800d8b5 	.word	0x0800d8b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d8b4:	bf00      	nop
  }

  return (USBD_OK);
 800d8b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8ce:	6879      	ldr	r1, [r7, #4]
 800d8d0:	4805      	ldr	r0, [pc, #20]	@ (800d8e8 <CDC_Receive_FS+0x24>)
 800d8d2:	f7fe fb3d 	bl	800bf50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8d6:	4804      	ldr	r0, [pc, #16]	@ (800d8e8 <CDC_Receive_FS+0x24>)
 800d8d8:	f7fe fb9e 	bl	800c018 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000994 	.word	0x20000994

0800d8ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d934 <CDC_Transmit_FS+0x48>)
 800d8fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d902:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d90e:	2301      	movs	r3, #1
 800d910:	e00b      	b.n	800d92a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d912:	887b      	ldrh	r3, [r7, #2]
 800d914:	461a      	mov	r2, r3
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	4806      	ldr	r0, [pc, #24]	@ (800d934 <CDC_Transmit_FS+0x48>)
 800d91a:	f7fe faf7 	bl	800bf0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d91e:	4805      	ldr	r0, [pc, #20]	@ (800d934 <CDC_Transmit_FS+0x48>)
 800d920:	f7fe fb34 	bl	800bf8c <USBD_CDC_TransmitPacket>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	20000994 	.word	0x20000994

0800d938 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	4613      	mov	r3, r2
 800d944:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	371c      	adds	r7, #28
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
	...

0800d95c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	4603      	mov	r3, r0
 800d964:	6039      	str	r1, [r7, #0]
 800d966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2212      	movs	r2, #18
 800d96c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d96e:	4b03      	ldr	r3, [pc, #12]	@ (800d97c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d970:	4618      	mov	r0, r3
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	200000e4 	.word	0x200000e4

0800d980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	4603      	mov	r3, r0
 800d988:	6039      	str	r1, [r7, #0]
 800d98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2204      	movs	r2, #4
 800d990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d992:	4b03      	ldr	r3, [pc, #12]	@ (800d9a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	20000104 	.word	0x20000104

0800d9a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	6039      	str	r1, [r7, #0]
 800d9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d105      	bne.n	800d9c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	4907      	ldr	r1, [pc, #28]	@ (800d9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d9ba:	4808      	ldr	r0, [pc, #32]	@ (800d9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d9bc:	f7ff fd9c 	bl	800d4f8 <USBD_GetString>
 800d9c0:	e004      	b.n	800d9cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	4904      	ldr	r1, [pc, #16]	@ (800d9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d9c6:	4805      	ldr	r0, [pc, #20]	@ (800d9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d9c8:	f7ff fd96 	bl	800d4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9cc:	4b02      	ldr	r3, [pc, #8]	@ (800d9d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20001c70 	.word	0x20001c70
 800d9dc:	08014ea4 	.word	0x08014ea4

0800d9e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	6039      	str	r1, [r7, #0]
 800d9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	4904      	ldr	r1, [pc, #16]	@ (800da00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d9f0:	4804      	ldr	r0, [pc, #16]	@ (800da04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d9f2:	f7ff fd81 	bl	800d4f8 <USBD_GetString>
  return USBD_StrDesc;
 800d9f6:	4b02      	ldr	r3, [pc, #8]	@ (800da00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	20001c70 	.word	0x20001c70
 800da04:	08014ebc 	.word	0x08014ebc

0800da08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	6039      	str	r1, [r7, #0]
 800da12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	221a      	movs	r2, #26
 800da18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800da1a:	f000 f855 	bl	800dac8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800da1e:	4b02      	ldr	r3, [pc, #8]	@ (800da28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	20000108 	.word	0x20000108

0800da2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da38:	79fb      	ldrb	r3, [r7, #7]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4907      	ldr	r1, [pc, #28]	@ (800da60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da42:	4808      	ldr	r0, [pc, #32]	@ (800da64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da44:	f7ff fd58 	bl	800d4f8 <USBD_GetString>
 800da48:	e004      	b.n	800da54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4904      	ldr	r1, [pc, #16]	@ (800da60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da4e:	4805      	ldr	r0, [pc, #20]	@ (800da64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da50:	f7ff fd52 	bl	800d4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da54:	4b02      	ldr	r3, [pc, #8]	@ (800da60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800da56:	4618      	mov	r0, r3
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20001c70 	.word	0x20001c70
 800da64:	08014ed0 	.word	0x08014ed0

0800da68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	6039      	str	r1, [r7, #0]
 800da72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d105      	bne.n	800da86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4907      	ldr	r1, [pc, #28]	@ (800da9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da7e:	4808      	ldr	r0, [pc, #32]	@ (800daa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da80:	f7ff fd3a 	bl	800d4f8 <USBD_GetString>
 800da84:	e004      	b.n	800da90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	4904      	ldr	r1, [pc, #16]	@ (800da9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da8a:	4805      	ldr	r0, [pc, #20]	@ (800daa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da8c:	f7ff fd34 	bl	800d4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da90:	4b02      	ldr	r3, [pc, #8]	@ (800da9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20001c70 	.word	0x20001c70
 800daa0:	08014edc 	.word	0x08014edc

0800daa4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	6039      	str	r1, [r7, #0]
 800daae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	220c      	movs	r2, #12
 800dab4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dab6:	4b03      	ldr	r3, [pc, #12]	@ (800dac4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	200000f8 	.word	0x200000f8

0800dac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dace:	4b0f      	ldr	r3, [pc, #60]	@ (800db0c <Get_SerialNum+0x44>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dad4:	4b0e      	ldr	r3, [pc, #56]	@ (800db10 <Get_SerialNum+0x48>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dada:	4b0e      	ldr	r3, [pc, #56]	@ (800db14 <Get_SerialNum+0x4c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4413      	add	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d009      	beq.n	800db02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800daee:	2208      	movs	r2, #8
 800daf0:	4909      	ldr	r1, [pc, #36]	@ (800db18 <Get_SerialNum+0x50>)
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 f814 	bl	800db20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800daf8:	2204      	movs	r2, #4
 800dafa:	4908      	ldr	r1, [pc, #32]	@ (800db1c <Get_SerialNum+0x54>)
 800dafc:	68b8      	ldr	r0, [r7, #8]
 800dafe:	f000 f80f 	bl	800db20 <IntToUnicode>
  }
}
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	1fff7a10 	.word	0x1fff7a10
 800db10:	1fff7a14 	.word	0x1fff7a14
 800db14:	1fff7a18 	.word	0x1fff7a18
 800db18:	2000010a 	.word	0x2000010a
 800db1c:	2000011a 	.word	0x2000011a

0800db20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db20:	b480      	push	{r7}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db32:	2300      	movs	r3, #0
 800db34:	75fb      	strb	r3, [r7, #23]
 800db36:	e027      	b.n	800db88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	0f1b      	lsrs	r3, r3, #28
 800db3c:	2b09      	cmp	r3, #9
 800db3e:	d80b      	bhi.n	800db58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	0f1b      	lsrs	r3, r3, #28
 800db44:	b2da      	uxtb	r2, r3
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	4619      	mov	r1, r3
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	440b      	add	r3, r1
 800db50:	3230      	adds	r2, #48	@ 0x30
 800db52:	b2d2      	uxtb	r2, r2
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	e00a      	b.n	800db6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	0f1b      	lsrs	r3, r3, #28
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	005b      	lsls	r3, r3, #1
 800db62:	4619      	mov	r1, r3
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	440b      	add	r3, r1
 800db68:	3237      	adds	r2, #55	@ 0x37
 800db6a:	b2d2      	uxtb	r2, r2
 800db6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	011b      	lsls	r3, r3, #4
 800db72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	3301      	adds	r3, #1
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	4413      	add	r3, r2
 800db7e:	2200      	movs	r2, #0
 800db80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db82:	7dfb      	ldrb	r3, [r7, #23]
 800db84:	3301      	adds	r3, #1
 800db86:	75fb      	strb	r3, [r7, #23]
 800db88:	7dfa      	ldrb	r2, [r7, #23]
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d3d3      	bcc.n	800db38 <IntToUnicode+0x18>
  }
}
 800db90:	bf00      	nop
 800db92:	bf00      	nop
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
	...

0800dba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b0a0      	sub	sp, #128	@ 0x80
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dba8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	605a      	str	r2, [r3, #4]
 800dbb2:	609a      	str	r2, [r3, #8]
 800dbb4:	60da      	str	r2, [r3, #12]
 800dbb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dbb8:	f107 0310 	add.w	r3, r7, #16
 800dbbc:	225c      	movs	r2, #92	@ 0x5c
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f002 f9c0 	bl	800ff46 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dbce:	d149      	bne.n	800dc64 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dbd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dbda:	f107 0310 	add.w	r3, r7, #16
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f9 fb34 	bl	800724c <HAL_RCCEx_PeriphCLKConfig>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800dbea:	f7f5 fde7 	bl	80037bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
 800dbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dbf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf6:	4a1d      	ldr	r2, [pc, #116]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dbf8:	f043 0301 	orr.w	r3, r3, #1
 800dbfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbfe:	4b1b      	ldr	r3, [pc, #108]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dc0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc10:	2302      	movs	r3, #2
 800dc12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc14:	2300      	movs	r3, #0
 800dc16:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc1c:	230a      	movs	r3, #10
 800dc1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800dc24:	4619      	mov	r1, r3
 800dc26:	4812      	ldr	r0, [pc, #72]	@ (800dc70 <HAL_PCD_MspInit+0xd0>)
 800dc28:	f7f7 fc3a 	bl	80054a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc30:	4a0e      	ldr	r2, [pc, #56]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc36:	6353      	str	r3, [r2, #52]	@ 0x34
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60bb      	str	r3, [r7, #8]
 800dc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc40:	4a0a      	ldr	r2, [pc, #40]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dc46:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc48:	4b08      	ldr	r3, [pc, #32]	@ (800dc6c <HAL_PCD_MspInit+0xcc>)
 800dc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc50:	60bb      	str	r3, [r7, #8]
 800dc52:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc54:	2200      	movs	r2, #0
 800dc56:	2100      	movs	r1, #0
 800dc58:	2043      	movs	r0, #67	@ 0x43
 800dc5a:	f7f6 ffe8 	bl	8004c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc5e:	2043      	movs	r0, #67	@ 0x43
 800dc60:	f7f7 f801 	bl	8004c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc64:	bf00      	nop
 800dc66:	3780      	adds	r7, #128	@ 0x80
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	40023800 	.word	0x40023800
 800dc70:	40020000 	.word	0x40020000

0800dc74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f7fe faad 	bl	800c1ea <USBD_LL_SetupStage>
}
 800dc90:	bf00      	nop
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	440b      	add	r3, r1
 800dcb8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7fe fae7 	bl	800c294 <USBD_LL_DataOutStage>
}
 800dcc6:	bf00      	nop
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800dce0:	78fa      	ldrb	r2, [r7, #3]
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	4613      	mov	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	440b      	add	r3, r1
 800dcee:	334c      	adds	r3, #76	@ 0x4c
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f7fe fb80 	bl	800c3fa <USBD_LL_DataInStage>
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fcb4 	bl	800c67e <USBD_LL_SOF>
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b084      	sub	sp, #16
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd26:	2301      	movs	r3, #1
 800dd28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d102      	bne.n	800dd38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
 800dd36:	e008      	b.n	800dd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d102      	bne.n	800dd46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dd40:	2301      	movs	r3, #1
 800dd42:	73fb      	strb	r3, [r7, #15]
 800dd44:	e001      	b.n	800dd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dd46:	f7f5 fd39 	bl	80037bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dd50:	7bfa      	ldrb	r2, [r7, #15]
 800dd52:	4611      	mov	r1, r2
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fe fc54 	bl	800c602 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fbfc 	bl	800c55e <USBD_LL_Reset>
}
 800dd66:	bf00      	nop
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
	...

0800dd70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe fc4f 	bl	800c622 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	6812      	ldr	r2, [r2, #0]
 800dd92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd96:	f043 0301 	orr.w	r3, r3, #1
 800dd9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d005      	beq.n	800ddb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dda4:	4b04      	ldr	r3, [pc, #16]	@ (800ddb8 <HAL_PCD_SuspendCallback+0x48>)
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	4a03      	ldr	r2, [pc, #12]	@ (800ddb8 <HAL_PCD_SuspendCallback+0x48>)
 800ddaa:	f043 0306 	orr.w	r3, r3, #6
 800ddae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	e000ed00 	.word	0xe000ed00

0800ddbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fe fc3f 	bl	800c64e <USBD_LL_Resume>
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ddea:	78fa      	ldrb	r2, [r7, #3]
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe fc97 	bl	800c722 <USBD_LL_IsoOUTIncomplete>
}
 800ddf4:	bf00      	nop
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	460b      	mov	r3, r1
 800de06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800de0e:	78fa      	ldrb	r2, [r7, #3]
 800de10:	4611      	mov	r1, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe fc53 	bl	800c6be <USBD_LL_IsoINIncomplete>
}
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe fca9 	bl	800c786 <USBD_LL_DevConnected>
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe fca6 	bl	800c79c <USBD_LL_DevDisconnected>
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d13c      	bne.n	800dee2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de68:	4a20      	ldr	r2, [pc, #128]	@ (800deec <USBD_LL_Init+0x94>)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a1e      	ldr	r2, [pc, #120]	@ (800deec <USBD_LL_Init+0x94>)
 800de74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de78:	4b1c      	ldr	r3, [pc, #112]	@ (800deec <USBD_LL_Init+0x94>)
 800de7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800de7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800de80:	4b1a      	ldr	r3, [pc, #104]	@ (800deec <USBD_LL_Init+0x94>)
 800de82:	2206      	movs	r2, #6
 800de84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800de86:	4b19      	ldr	r3, [pc, #100]	@ (800deec <USBD_LL_Init+0x94>)
 800de88:	2202      	movs	r2, #2
 800de8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de8c:	4b17      	ldr	r3, [pc, #92]	@ (800deec <USBD_LL_Init+0x94>)
 800de8e:	2200      	movs	r2, #0
 800de90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de92:	4b16      	ldr	r3, [pc, #88]	@ (800deec <USBD_LL_Init+0x94>)
 800de94:	2202      	movs	r2, #2
 800de96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de98:	4b14      	ldr	r3, [pc, #80]	@ (800deec <USBD_LL_Init+0x94>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de9e:	4b13      	ldr	r3, [pc, #76]	@ (800deec <USBD_LL_Init+0x94>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dea4:	4b11      	ldr	r3, [pc, #68]	@ (800deec <USBD_LL_Init+0x94>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800deaa:	4b10      	ldr	r3, [pc, #64]	@ (800deec <USBD_LL_Init+0x94>)
 800deac:	2200      	movs	r2, #0
 800deae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800deb0:	4b0e      	ldr	r3, [pc, #56]	@ (800deec <USBD_LL_Init+0x94>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800deb6:	480d      	ldr	r0, [pc, #52]	@ (800deec <USBD_LL_Init+0x94>)
 800deb8:	f7f7 fde4 	bl	8005a84 <HAL_PCD_Init>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dec2:	f7f5 fc7b 	bl	80037bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dec6:	2180      	movs	r1, #128	@ 0x80
 800dec8:	4808      	ldr	r0, [pc, #32]	@ (800deec <USBD_LL_Init+0x94>)
 800deca:	f7f9 f870 	bl	8006fae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dece:	2240      	movs	r2, #64	@ 0x40
 800ded0:	2100      	movs	r1, #0
 800ded2:	4806      	ldr	r0, [pc, #24]	@ (800deec <USBD_LL_Init+0x94>)
 800ded4:	f7f9 f824 	bl	8006f20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ded8:	2280      	movs	r2, #128	@ 0x80
 800deda:	2101      	movs	r1, #1
 800dedc:	4803      	ldr	r0, [pc, #12]	@ (800deec <USBD_LL_Init+0x94>)
 800dede:	f7f9 f81f 	bl	8006f20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20001e70 	.word	0x20001e70

0800def0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df06:	4618      	mov	r0, r3
 800df08:	f7f7 fee0 	bl	8005ccc <HAL_PCD_Start>
 800df0c:	4603      	mov	r3, r0
 800df0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f990 	bl	800e238 <USBD_Get_USB_Status>
 800df18:	4603      	mov	r3, r0
 800df1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b084      	sub	sp, #16
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	4608      	mov	r0, r1
 800df30:	4611      	mov	r1, r2
 800df32:	461a      	mov	r2, r3
 800df34:	4603      	mov	r3, r0
 800df36:	70fb      	strb	r3, [r7, #3]
 800df38:	460b      	mov	r3, r1
 800df3a:	70bb      	strb	r3, [r7, #2]
 800df3c:	4613      	mov	r3, r2
 800df3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df4e:	78bb      	ldrb	r3, [r7, #2]
 800df50:	883a      	ldrh	r2, [r7, #0]
 800df52:	78f9      	ldrb	r1, [r7, #3]
 800df54:	f7f8 fbde 	bl	8006714 <HAL_PCD_EP_Open>
 800df58:	4603      	mov	r3, r0
 800df5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 f96a 	bl	800e238 <USBD_Get_USB_Status>
 800df64:	4603      	mov	r3, r0
 800df66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df68:	7bbb      	ldrb	r3, [r7, #14]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b084      	sub	sp, #16
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	460b      	mov	r3, r1
 800df7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df8c:	78fa      	ldrb	r2, [r7, #3]
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7f8 fc27 	bl	80067e4 <HAL_PCD_EP_Close>
 800df96:	4603      	mov	r3, r0
 800df98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 f94b 	bl	800e238 <USBD_Get_USB_Status>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfca:	78fa      	ldrb	r2, [r7, #3]
 800dfcc:	4611      	mov	r1, r2
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f8 fcff 	bl	80069d2 <HAL_PCD_EP_SetStall>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfd8:	7bfb      	ldrb	r3, [r7, #15]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 f92c 	bl	800e238 <USBD_Get_USB_Status>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b084      	sub	sp, #16
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	460b      	mov	r3, r1
 800dff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e008:	78fa      	ldrb	r2, [r7, #3]
 800e00a:	4611      	mov	r1, r2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7f8 fd44 	bl	8006a9a <HAL_PCD_EP_ClrStall>
 800e012:	4603      	mov	r3, r0
 800e014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f90d 	bl	800e238 <USBD_Get_USB_Status>
 800e01e:	4603      	mov	r3, r0
 800e020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e022:	7bbb      	ldrb	r3, [r7, #14]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	460b      	mov	r3, r1
 800e036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e044:	2b00      	cmp	r3, #0
 800e046:	da0b      	bge.n	800e060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	4613      	mov	r3, r2
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	440b      	add	r3, r1
 800e05a:	333e      	adds	r3, #62	@ 0x3e
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	e00b      	b.n	800e078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e066:	68f9      	ldr	r1, [r7, #12]
 800e068:	4613      	mov	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800e076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e094:	2300      	movs	r3, #0
 800e096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e09e:	78fa      	ldrb	r2, [r7, #3]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f8 fb11 	bl	80066ca <HAL_PCD_SetAddress>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 f8c2 	bl	800e238 <USBD_Get_USB_Status>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b086      	sub	sp, #24
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0e0:	7af9      	ldrb	r1, [r7, #11]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	f7f8 fc2a 	bl	800693e <HAL_PCD_EP_Transmit>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 f8a1 	bl	800e238 <USBD_Get_USB_Status>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	607a      	str	r2, [r7, #4]
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	460b      	mov	r3, r1
 800e112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e122:	7af9      	ldrb	r1, [r7, #11]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	f7f8 fba6 	bl	8006878 <HAL_PCD_EP_Receive>
 800e12c:	4603      	mov	r3, r0
 800e12e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e130:	7dfb      	ldrb	r3, [r7, #23]
 800e132:	4618      	mov	r0, r3
 800e134:	f000 f880 	bl	800e238 <USBD_Get_USB_Status>
 800e138:	4603      	mov	r3, r0
 800e13a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e13c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3718      	adds	r7, #24
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b082      	sub	sp, #8
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
 800e14e:	460b      	mov	r3, r1
 800e150:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e158:	78fa      	ldrb	r2, [r7, #3]
 800e15a:	4611      	mov	r1, r2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f8 fbd6 	bl	800690e <HAL_PCD_EP_GetRxCount>
 800e162:	4603      	mov	r3, r0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e178:	78fb      	ldrb	r3, [r7, #3]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <HAL_PCDEx_LPM_Callback+0x18>
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d01f      	beq.n	800e1c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e182:	e03b      	b.n	800e1fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d007      	beq.n	800e19c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e18c:	f7f4 fa18 	bl	80025c0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e190:	4b1c      	ldr	r3, [pc, #112]	@ (800e204 <HAL_PCDEx_LPM_Callback+0x98>)
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	4a1b      	ldr	r2, [pc, #108]	@ (800e204 <HAL_PCDEx_LPM_Callback+0x98>)
 800e196:	f023 0306 	bic.w	r3, r3, #6
 800e19a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	6812      	ldr	r2, [r2, #0]
 800e1aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1ae:	f023 0301 	bic.w	r3, r3, #1
 800e1b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fa47 	bl	800c64e <USBD_LL_Resume>
    break;
 800e1c0:	e01c      	b.n	800e1fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1d4:	f043 0301 	orr.w	r3, r3, #1
 800e1d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe fa1e 	bl	800c622 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d005      	beq.n	800e1fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1ee:	4b05      	ldr	r3, [pc, #20]	@ (800e204 <HAL_PCDEx_LPM_Callback+0x98>)
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	4a04      	ldr	r2, [pc, #16]	@ (800e204 <HAL_PCDEx_LPM_Callback+0x98>)
 800e1f4:	f043 0306 	orr.w	r3, r3, #6
 800e1f8:	6113      	str	r3, [r2, #16]
    break;
 800e1fa:	bf00      	nop
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	e000ed00 	.word	0xe000ed00

0800e208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e210:	4b03      	ldr	r3, [pc, #12]	@ (800e220 <USBD_static_malloc+0x18>)
}
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	2000237c 	.word	0x2000237c

0800e224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]

}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e246:	79fb      	ldrb	r3, [r7, #7]
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d817      	bhi.n	800e27c <USBD_Get_USB_Status+0x44>
 800e24c:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <USBD_Get_USB_Status+0x1c>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e265 	.word	0x0800e265
 800e258:	0800e26b 	.word	0x0800e26b
 800e25c:	0800e271 	.word	0x0800e271
 800e260:	0800e277 	.word	0x0800e277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	73fb      	strb	r3, [r7, #15]
    break;
 800e268:	e00b      	b.n	800e282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e26a:	2303      	movs	r3, #3
 800e26c:	73fb      	strb	r3, [r7, #15]
    break;
 800e26e:	e008      	b.n	800e282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e270:	2301      	movs	r3, #1
 800e272:	73fb      	strb	r3, [r7, #15]
    break;
 800e274:	e005      	b.n	800e282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e276:	2303      	movs	r3, #3
 800e278:	73fb      	strb	r3, [r7, #15]
    break;
 800e27a:	e002      	b.n	800e282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e27c:	2303      	movs	r3, #3
 800e27e:	73fb      	strb	r3, [r7, #15]
    break;
 800e280:	bf00      	nop
  }
  return usb_status;
 800e282:	7bfb      	ldrb	r3, [r7, #15]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3714      	adds	r7, #20
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <malloc>:
 800e290:	4b02      	ldr	r3, [pc, #8]	@ (800e29c <malloc+0xc>)
 800e292:	4601      	mov	r1, r0
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	f000 b825 	b.w	800e2e4 <_malloc_r>
 800e29a:	bf00      	nop
 800e29c:	2000029c 	.word	0x2000029c

0800e2a0 <sbrk_aligned>:
 800e2a0:	b570      	push	{r4, r5, r6, lr}
 800e2a2:	4e0f      	ldr	r6, [pc, #60]	@ (800e2e0 <sbrk_aligned+0x40>)
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	6831      	ldr	r1, [r6, #0]
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	b911      	cbnz	r1, 800e2b2 <sbrk_aligned+0x12>
 800e2ac:	f001 fe9e 	bl	800ffec <_sbrk_r>
 800e2b0:	6030      	str	r0, [r6, #0]
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f001 fe99 	bl	800ffec <_sbrk_r>
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	d103      	bne.n	800e2c6 <sbrk_aligned+0x26>
 800e2be:	f04f 34ff 	mov.w	r4, #4294967295
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}
 800e2c6:	1cc4      	adds	r4, r0, #3
 800e2c8:	f024 0403 	bic.w	r4, r4, #3
 800e2cc:	42a0      	cmp	r0, r4
 800e2ce:	d0f8      	beq.n	800e2c2 <sbrk_aligned+0x22>
 800e2d0:	1a21      	subs	r1, r4, r0
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f001 fe8a 	bl	800ffec <_sbrk_r>
 800e2d8:	3001      	adds	r0, #1
 800e2da:	d1f2      	bne.n	800e2c2 <sbrk_aligned+0x22>
 800e2dc:	e7ef      	b.n	800e2be <sbrk_aligned+0x1e>
 800e2de:	bf00      	nop
 800e2e0:	2000259c 	.word	0x2000259c

0800e2e4 <_malloc_r>:
 800e2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e8:	1ccd      	adds	r5, r1, #3
 800e2ea:	f025 0503 	bic.w	r5, r5, #3
 800e2ee:	3508      	adds	r5, #8
 800e2f0:	2d0c      	cmp	r5, #12
 800e2f2:	bf38      	it	cc
 800e2f4:	250c      	movcc	r5, #12
 800e2f6:	2d00      	cmp	r5, #0
 800e2f8:	4606      	mov	r6, r0
 800e2fa:	db01      	blt.n	800e300 <_malloc_r+0x1c>
 800e2fc:	42a9      	cmp	r1, r5
 800e2fe:	d904      	bls.n	800e30a <_malloc_r+0x26>
 800e300:	230c      	movs	r3, #12
 800e302:	6033      	str	r3, [r6, #0]
 800e304:	2000      	movs	r0, #0
 800e306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e30a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e3e0 <_malloc_r+0xfc>
 800e30e:	f000 f869 	bl	800e3e4 <__malloc_lock>
 800e312:	f8d8 3000 	ldr.w	r3, [r8]
 800e316:	461c      	mov	r4, r3
 800e318:	bb44      	cbnz	r4, 800e36c <_malloc_r+0x88>
 800e31a:	4629      	mov	r1, r5
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7ff ffbf 	bl	800e2a0 <sbrk_aligned>
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	4604      	mov	r4, r0
 800e326:	d158      	bne.n	800e3da <_malloc_r+0xf6>
 800e328:	f8d8 4000 	ldr.w	r4, [r8]
 800e32c:	4627      	mov	r7, r4
 800e32e:	2f00      	cmp	r7, #0
 800e330:	d143      	bne.n	800e3ba <_malloc_r+0xd6>
 800e332:	2c00      	cmp	r4, #0
 800e334:	d04b      	beq.n	800e3ce <_malloc_r+0xea>
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	4639      	mov	r1, r7
 800e33a:	4630      	mov	r0, r6
 800e33c:	eb04 0903 	add.w	r9, r4, r3
 800e340:	f001 fe54 	bl	800ffec <_sbrk_r>
 800e344:	4581      	cmp	r9, r0
 800e346:	d142      	bne.n	800e3ce <_malloc_r+0xea>
 800e348:	6821      	ldr	r1, [r4, #0]
 800e34a:	1a6d      	subs	r5, r5, r1
 800e34c:	4629      	mov	r1, r5
 800e34e:	4630      	mov	r0, r6
 800e350:	f7ff ffa6 	bl	800e2a0 <sbrk_aligned>
 800e354:	3001      	adds	r0, #1
 800e356:	d03a      	beq.n	800e3ce <_malloc_r+0xea>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	442b      	add	r3, r5
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	f8d8 3000 	ldr.w	r3, [r8]
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	bb62      	cbnz	r2, 800e3c0 <_malloc_r+0xdc>
 800e366:	f8c8 7000 	str.w	r7, [r8]
 800e36a:	e00f      	b.n	800e38c <_malloc_r+0xa8>
 800e36c:	6822      	ldr	r2, [r4, #0]
 800e36e:	1b52      	subs	r2, r2, r5
 800e370:	d420      	bmi.n	800e3b4 <_malloc_r+0xd0>
 800e372:	2a0b      	cmp	r2, #11
 800e374:	d917      	bls.n	800e3a6 <_malloc_r+0xc2>
 800e376:	1961      	adds	r1, r4, r5
 800e378:	42a3      	cmp	r3, r4
 800e37a:	6025      	str	r5, [r4, #0]
 800e37c:	bf18      	it	ne
 800e37e:	6059      	strne	r1, [r3, #4]
 800e380:	6863      	ldr	r3, [r4, #4]
 800e382:	bf08      	it	eq
 800e384:	f8c8 1000 	streq.w	r1, [r8]
 800e388:	5162      	str	r2, [r4, r5]
 800e38a:	604b      	str	r3, [r1, #4]
 800e38c:	4630      	mov	r0, r6
 800e38e:	f000 f82f 	bl	800e3f0 <__malloc_unlock>
 800e392:	f104 000b 	add.w	r0, r4, #11
 800e396:	1d23      	adds	r3, r4, #4
 800e398:	f020 0007 	bic.w	r0, r0, #7
 800e39c:	1ac2      	subs	r2, r0, r3
 800e39e:	bf1c      	itt	ne
 800e3a0:	1a1b      	subne	r3, r3, r0
 800e3a2:	50a3      	strne	r3, [r4, r2]
 800e3a4:	e7af      	b.n	800e306 <_malloc_r+0x22>
 800e3a6:	6862      	ldr	r2, [r4, #4]
 800e3a8:	42a3      	cmp	r3, r4
 800e3aa:	bf0c      	ite	eq
 800e3ac:	f8c8 2000 	streq.w	r2, [r8]
 800e3b0:	605a      	strne	r2, [r3, #4]
 800e3b2:	e7eb      	b.n	800e38c <_malloc_r+0xa8>
 800e3b4:	4623      	mov	r3, r4
 800e3b6:	6864      	ldr	r4, [r4, #4]
 800e3b8:	e7ae      	b.n	800e318 <_malloc_r+0x34>
 800e3ba:	463c      	mov	r4, r7
 800e3bc:	687f      	ldr	r7, [r7, #4]
 800e3be:	e7b6      	b.n	800e32e <_malloc_r+0x4a>
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	d1fb      	bne.n	800e3c0 <_malloc_r+0xdc>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	6053      	str	r3, [r2, #4]
 800e3cc:	e7de      	b.n	800e38c <_malloc_r+0xa8>
 800e3ce:	230c      	movs	r3, #12
 800e3d0:	6033      	str	r3, [r6, #0]
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f000 f80c 	bl	800e3f0 <__malloc_unlock>
 800e3d8:	e794      	b.n	800e304 <_malloc_r+0x20>
 800e3da:	6005      	str	r5, [r0, #0]
 800e3dc:	e7d6      	b.n	800e38c <_malloc_r+0xa8>
 800e3de:	bf00      	nop
 800e3e0:	200025a0 	.word	0x200025a0

0800e3e4 <__malloc_lock>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	@ (800e3ec <__malloc_lock+0x8>)
 800e3e6:	f001 be4e 	b.w	8010086 <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	200026e4 	.word	0x200026e4

0800e3f0 <__malloc_unlock>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	@ (800e3f8 <__malloc_unlock+0x8>)
 800e3f2:	f001 be49 	b.w	8010088 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	200026e4 	.word	0x200026e4

0800e3fc <sulp>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	4604      	mov	r4, r0
 800e400:	460d      	mov	r5, r1
 800e402:	ec45 4b10 	vmov	d0, r4, r5
 800e406:	4616      	mov	r6, r2
 800e408:	f003 fbb4 	bl	8011b74 <__ulp>
 800e40c:	ec51 0b10 	vmov	r0, r1, d0
 800e410:	b17e      	cbz	r6, 800e432 <sulp+0x36>
 800e412:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e416:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dd09      	ble.n	800e432 <sulp+0x36>
 800e41e:	051b      	lsls	r3, r3, #20
 800e420:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e424:	2400      	movs	r4, #0
 800e426:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e42a:	4622      	mov	r2, r4
 800e42c:	462b      	mov	r3, r5
 800e42e:	f7f2 f903 	bl	8000638 <__aeabi_dmul>
 800e432:	ec41 0b10 	vmov	d0, r0, r1
 800e436:	bd70      	pop	{r4, r5, r6, pc}

0800e438 <_strtod_l>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	b09f      	sub	sp, #124	@ 0x7c
 800e43e:	460c      	mov	r4, r1
 800e440:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e442:	2200      	movs	r2, #0
 800e444:	921a      	str	r2, [sp, #104]	@ 0x68
 800e446:	9005      	str	r0, [sp, #20]
 800e448:	f04f 0a00 	mov.w	sl, #0
 800e44c:	f04f 0b00 	mov.w	fp, #0
 800e450:	460a      	mov	r2, r1
 800e452:	9219      	str	r2, [sp, #100]	@ 0x64
 800e454:	7811      	ldrb	r1, [r2, #0]
 800e456:	292b      	cmp	r1, #43	@ 0x2b
 800e458:	d04a      	beq.n	800e4f0 <_strtod_l+0xb8>
 800e45a:	d838      	bhi.n	800e4ce <_strtod_l+0x96>
 800e45c:	290d      	cmp	r1, #13
 800e45e:	d832      	bhi.n	800e4c6 <_strtod_l+0x8e>
 800e460:	2908      	cmp	r1, #8
 800e462:	d832      	bhi.n	800e4ca <_strtod_l+0x92>
 800e464:	2900      	cmp	r1, #0
 800e466:	d03b      	beq.n	800e4e0 <_strtod_l+0xa8>
 800e468:	2200      	movs	r2, #0
 800e46a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e46c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e46e:	782a      	ldrb	r2, [r5, #0]
 800e470:	2a30      	cmp	r2, #48	@ 0x30
 800e472:	f040 80b3 	bne.w	800e5dc <_strtod_l+0x1a4>
 800e476:	786a      	ldrb	r2, [r5, #1]
 800e478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e47c:	2a58      	cmp	r2, #88	@ 0x58
 800e47e:	d16e      	bne.n	800e55e <_strtod_l+0x126>
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	ab1a      	add	r3, sp, #104	@ 0x68
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	4a8e      	ldr	r2, [pc, #568]	@ (800e6c4 <_strtod_l+0x28c>)
 800e48c:	9805      	ldr	r0, [sp, #20]
 800e48e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e490:	a919      	add	r1, sp, #100	@ 0x64
 800e492:	f002 fd17 	bl	8010ec4 <__gethex>
 800e496:	f010 060f 	ands.w	r6, r0, #15
 800e49a:	4604      	mov	r4, r0
 800e49c:	d005      	beq.n	800e4aa <_strtod_l+0x72>
 800e49e:	2e06      	cmp	r6, #6
 800e4a0:	d128      	bne.n	800e4f4 <_strtod_l+0xbc>
 800e4a2:	3501      	adds	r5, #1
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f040 858e 	bne.w	800efce <_strtod_l+0xb96>
 800e4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b4:	b1cb      	cbz	r3, 800e4ea <_strtod_l+0xb2>
 800e4b6:	4652      	mov	r2, sl
 800e4b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e4bc:	ec43 2b10 	vmov	d0, r2, r3
 800e4c0:	b01f      	add	sp, #124	@ 0x7c
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	2920      	cmp	r1, #32
 800e4c8:	d1ce      	bne.n	800e468 <_strtod_l+0x30>
 800e4ca:	3201      	adds	r2, #1
 800e4cc:	e7c1      	b.n	800e452 <_strtod_l+0x1a>
 800e4ce:	292d      	cmp	r1, #45	@ 0x2d
 800e4d0:	d1ca      	bne.n	800e468 <_strtod_l+0x30>
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e4d6:	1c51      	adds	r1, r2, #1
 800e4d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e4da:	7852      	ldrb	r2, [r2, #1]
 800e4dc:	2a00      	cmp	r2, #0
 800e4de:	d1c5      	bne.n	800e46c <_strtod_l+0x34>
 800e4e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f040 8570 	bne.w	800efca <_strtod_l+0xb92>
 800e4ea:	4652      	mov	r2, sl
 800e4ec:	465b      	mov	r3, fp
 800e4ee:	e7e5      	b.n	800e4bc <_strtod_l+0x84>
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	e7ef      	b.n	800e4d4 <_strtod_l+0x9c>
 800e4f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e4f6:	b13a      	cbz	r2, 800e508 <_strtod_l+0xd0>
 800e4f8:	2135      	movs	r1, #53	@ 0x35
 800e4fa:	a81c      	add	r0, sp, #112	@ 0x70
 800e4fc:	f003 fc34 	bl	8011d68 <__copybits>
 800e500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e502:	9805      	ldr	r0, [sp, #20]
 800e504:	f003 f802 	bl	801150c <_Bfree>
 800e508:	3e01      	subs	r6, #1
 800e50a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e50c:	2e04      	cmp	r6, #4
 800e50e:	d806      	bhi.n	800e51e <_strtod_l+0xe6>
 800e510:	e8df f006 	tbb	[pc, r6]
 800e514:	201d0314 	.word	0x201d0314
 800e518:	14          	.byte	0x14
 800e519:	00          	.byte	0x00
 800e51a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e51e:	05e1      	lsls	r1, r4, #23
 800e520:	bf48      	it	mi
 800e522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e52a:	0d1b      	lsrs	r3, r3, #20
 800e52c:	051b      	lsls	r3, r3, #20
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1bb      	bne.n	800e4aa <_strtod_l+0x72>
 800e532:	f001 fd7d 	bl	8010030 <__errno>
 800e536:	2322      	movs	r3, #34	@ 0x22
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	e7b6      	b.n	800e4aa <_strtod_l+0x72>
 800e53c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e54c:	e7e7      	b.n	800e51e <_strtod_l+0xe6>
 800e54e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e6cc <_strtod_l+0x294>
 800e552:	e7e4      	b.n	800e51e <_strtod_l+0xe6>
 800e554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e558:	f04f 3aff 	mov.w	sl, #4294967295
 800e55c:	e7df      	b.n	800e51e <_strtod_l+0xe6>
 800e55e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	9219      	str	r2, [sp, #100]	@ 0x64
 800e564:	785b      	ldrb	r3, [r3, #1]
 800e566:	2b30      	cmp	r3, #48	@ 0x30
 800e568:	d0f9      	beq.n	800e55e <_strtod_l+0x126>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d09d      	beq.n	800e4aa <_strtod_l+0x72>
 800e56e:	2301      	movs	r3, #1
 800e570:	9309      	str	r3, [sp, #36]	@ 0x24
 800e572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e574:	930c      	str	r3, [sp, #48]	@ 0x30
 800e576:	2300      	movs	r3, #0
 800e578:	9308      	str	r3, [sp, #32]
 800e57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e57c:	461f      	mov	r7, r3
 800e57e:	220a      	movs	r2, #10
 800e580:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e582:	7805      	ldrb	r5, [r0, #0]
 800e584:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e588:	b2d9      	uxtb	r1, r3
 800e58a:	2909      	cmp	r1, #9
 800e58c:	d928      	bls.n	800e5e0 <_strtod_l+0x1a8>
 800e58e:	494e      	ldr	r1, [pc, #312]	@ (800e6c8 <_strtod_l+0x290>)
 800e590:	2201      	movs	r2, #1
 800e592:	f001 fce0 	bl	800ff56 <strncmp>
 800e596:	2800      	cmp	r0, #0
 800e598:	d032      	beq.n	800e600 <_strtod_l+0x1c8>
 800e59a:	2000      	movs	r0, #0
 800e59c:	462a      	mov	r2, r5
 800e59e:	4681      	mov	r9, r0
 800e5a0:	463d      	mov	r5, r7
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2a65      	cmp	r2, #101	@ 0x65
 800e5a6:	d001      	beq.n	800e5ac <_strtod_l+0x174>
 800e5a8:	2a45      	cmp	r2, #69	@ 0x45
 800e5aa:	d114      	bne.n	800e5d6 <_strtod_l+0x19e>
 800e5ac:	b91d      	cbnz	r5, 800e5b6 <_strtod_l+0x17e>
 800e5ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5b0:	4302      	orrs	r2, r0
 800e5b2:	d095      	beq.n	800e4e0 <_strtod_l+0xa8>
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e5b8:	1c62      	adds	r2, r4, #1
 800e5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5bc:	7862      	ldrb	r2, [r4, #1]
 800e5be:	2a2b      	cmp	r2, #43	@ 0x2b
 800e5c0:	d077      	beq.n	800e6b2 <_strtod_l+0x27a>
 800e5c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e5c4:	d07b      	beq.n	800e6be <_strtod_l+0x286>
 800e5c6:	f04f 0c00 	mov.w	ip, #0
 800e5ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e5ce:	2909      	cmp	r1, #9
 800e5d0:	f240 8082 	bls.w	800e6d8 <_strtod_l+0x2a0>
 800e5d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e5d6:	f04f 0800 	mov.w	r8, #0
 800e5da:	e0a2      	b.n	800e722 <_strtod_l+0x2ea>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e7c7      	b.n	800e570 <_strtod_l+0x138>
 800e5e0:	2f08      	cmp	r7, #8
 800e5e2:	bfd5      	itete	le
 800e5e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e5e6:	9908      	ldrgt	r1, [sp, #32]
 800e5e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e5f0:	f100 0001 	add.w	r0, r0, #1
 800e5f4:	bfd4      	ite	le
 800e5f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e5f8:	9308      	strgt	r3, [sp, #32]
 800e5fa:	3701      	adds	r7, #1
 800e5fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e5fe:	e7bf      	b.n	800e580 <_strtod_l+0x148>
 800e600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	9219      	str	r2, [sp, #100]	@ 0x64
 800e606:	785a      	ldrb	r2, [r3, #1]
 800e608:	b37f      	cbz	r7, 800e66a <_strtod_l+0x232>
 800e60a:	4681      	mov	r9, r0
 800e60c:	463d      	mov	r5, r7
 800e60e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e612:	2b09      	cmp	r3, #9
 800e614:	d912      	bls.n	800e63c <_strtod_l+0x204>
 800e616:	2301      	movs	r3, #1
 800e618:	e7c4      	b.n	800e5a4 <_strtod_l+0x16c>
 800e61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e620:	785a      	ldrb	r2, [r3, #1]
 800e622:	3001      	adds	r0, #1
 800e624:	2a30      	cmp	r2, #48	@ 0x30
 800e626:	d0f8      	beq.n	800e61a <_strtod_l+0x1e2>
 800e628:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	f200 84d3 	bhi.w	800efd8 <_strtod_l+0xba0>
 800e632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e634:	930c      	str	r3, [sp, #48]	@ 0x30
 800e636:	4681      	mov	r9, r0
 800e638:	2000      	movs	r0, #0
 800e63a:	4605      	mov	r5, r0
 800e63c:	3a30      	subs	r2, #48	@ 0x30
 800e63e:	f100 0301 	add.w	r3, r0, #1
 800e642:	d02a      	beq.n	800e69a <_strtod_l+0x262>
 800e644:	4499      	add	r9, r3
 800e646:	eb00 0c05 	add.w	ip, r0, r5
 800e64a:	462b      	mov	r3, r5
 800e64c:	210a      	movs	r1, #10
 800e64e:	4563      	cmp	r3, ip
 800e650:	d10d      	bne.n	800e66e <_strtod_l+0x236>
 800e652:	1c69      	adds	r1, r5, #1
 800e654:	4401      	add	r1, r0
 800e656:	4428      	add	r0, r5
 800e658:	2808      	cmp	r0, #8
 800e65a:	dc16      	bgt.n	800e68a <_strtod_l+0x252>
 800e65c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e65e:	230a      	movs	r3, #10
 800e660:	fb03 2300 	mla	r3, r3, r0, r2
 800e664:	930a      	str	r3, [sp, #40]	@ 0x28
 800e666:	2300      	movs	r3, #0
 800e668:	e018      	b.n	800e69c <_strtod_l+0x264>
 800e66a:	4638      	mov	r0, r7
 800e66c:	e7da      	b.n	800e624 <_strtod_l+0x1ec>
 800e66e:	2b08      	cmp	r3, #8
 800e670:	f103 0301 	add.w	r3, r3, #1
 800e674:	dc03      	bgt.n	800e67e <_strtod_l+0x246>
 800e676:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e678:	434e      	muls	r6, r1
 800e67a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e67c:	e7e7      	b.n	800e64e <_strtod_l+0x216>
 800e67e:	2b10      	cmp	r3, #16
 800e680:	bfde      	ittt	le
 800e682:	9e08      	ldrle	r6, [sp, #32]
 800e684:	434e      	mulle	r6, r1
 800e686:	9608      	strle	r6, [sp, #32]
 800e688:	e7e1      	b.n	800e64e <_strtod_l+0x216>
 800e68a:	280f      	cmp	r0, #15
 800e68c:	dceb      	bgt.n	800e666 <_strtod_l+0x22e>
 800e68e:	9808      	ldr	r0, [sp, #32]
 800e690:	230a      	movs	r3, #10
 800e692:	fb03 2300 	mla	r3, r3, r0, r2
 800e696:	9308      	str	r3, [sp, #32]
 800e698:	e7e5      	b.n	800e666 <_strtod_l+0x22e>
 800e69a:	4629      	mov	r1, r5
 800e69c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e69e:	1c50      	adds	r0, r2, #1
 800e6a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800e6a2:	7852      	ldrb	r2, [r2, #1]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	460d      	mov	r5, r1
 800e6a8:	e7b1      	b.n	800e60e <_strtod_l+0x1d6>
 800e6aa:	f04f 0900 	mov.w	r9, #0
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e77d      	b.n	800e5ae <_strtod_l+0x176>
 800e6b2:	f04f 0c00 	mov.w	ip, #0
 800e6b6:	1ca2      	adds	r2, r4, #2
 800e6b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6ba:	78a2      	ldrb	r2, [r4, #2]
 800e6bc:	e785      	b.n	800e5ca <_strtod_l+0x192>
 800e6be:	f04f 0c01 	mov.w	ip, #1
 800e6c2:	e7f8      	b.n	800e6b6 <_strtod_l+0x27e>
 800e6c4:	08014f24 	.word	0x08014f24
 800e6c8:	08014f0c 	.word	0x08014f0c
 800e6cc:	7ff00000 	.word	0x7ff00000
 800e6d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6d2:	1c51      	adds	r1, r2, #1
 800e6d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e6d6:	7852      	ldrb	r2, [r2, #1]
 800e6d8:	2a30      	cmp	r2, #48	@ 0x30
 800e6da:	d0f9      	beq.n	800e6d0 <_strtod_l+0x298>
 800e6dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e6e0:	2908      	cmp	r1, #8
 800e6e2:	f63f af78 	bhi.w	800e5d6 <_strtod_l+0x19e>
 800e6e6:	3a30      	subs	r2, #48	@ 0x30
 800e6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e6ee:	f04f 080a 	mov.w	r8, #10
 800e6f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e6f4:	1c56      	adds	r6, r2, #1
 800e6f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e6f8:	7852      	ldrb	r2, [r2, #1]
 800e6fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e6fe:	f1be 0f09 	cmp.w	lr, #9
 800e702:	d939      	bls.n	800e778 <_strtod_l+0x340>
 800e704:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e706:	1a76      	subs	r6, r6, r1
 800e708:	2e08      	cmp	r6, #8
 800e70a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e70e:	dc03      	bgt.n	800e718 <_strtod_l+0x2e0>
 800e710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e712:	4588      	cmp	r8, r1
 800e714:	bfa8      	it	ge
 800e716:	4688      	movge	r8, r1
 800e718:	f1bc 0f00 	cmp.w	ip, #0
 800e71c:	d001      	beq.n	800e722 <_strtod_l+0x2ea>
 800e71e:	f1c8 0800 	rsb	r8, r8, #0
 800e722:	2d00      	cmp	r5, #0
 800e724:	d14e      	bne.n	800e7c4 <_strtod_l+0x38c>
 800e726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e728:	4308      	orrs	r0, r1
 800e72a:	f47f aebe 	bne.w	800e4aa <_strtod_l+0x72>
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f47f aed6 	bne.w	800e4e0 <_strtod_l+0xa8>
 800e734:	2a69      	cmp	r2, #105	@ 0x69
 800e736:	d028      	beq.n	800e78a <_strtod_l+0x352>
 800e738:	dc25      	bgt.n	800e786 <_strtod_l+0x34e>
 800e73a:	2a49      	cmp	r2, #73	@ 0x49
 800e73c:	d025      	beq.n	800e78a <_strtod_l+0x352>
 800e73e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e740:	f47f aece 	bne.w	800e4e0 <_strtod_l+0xa8>
 800e744:	499b      	ldr	r1, [pc, #620]	@ (800e9b4 <_strtod_l+0x57c>)
 800e746:	a819      	add	r0, sp, #100	@ 0x64
 800e748:	f002 fdde 	bl	8011308 <__match>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	f43f aec7 	beq.w	800e4e0 <_strtod_l+0xa8>
 800e752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b28      	cmp	r3, #40	@ 0x28
 800e758:	d12e      	bne.n	800e7b8 <_strtod_l+0x380>
 800e75a:	4997      	ldr	r1, [pc, #604]	@ (800e9b8 <_strtod_l+0x580>)
 800e75c:	aa1c      	add	r2, sp, #112	@ 0x70
 800e75e:	a819      	add	r0, sp, #100	@ 0x64
 800e760:	f002 fde6 	bl	8011330 <__hexnan>
 800e764:	2805      	cmp	r0, #5
 800e766:	d127      	bne.n	800e7b8 <_strtod_l+0x380>
 800e768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e76a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e76e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e772:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e776:	e698      	b.n	800e4aa <_strtod_l+0x72>
 800e778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e77a:	fb08 2101 	mla	r1, r8, r1, r2
 800e77e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e782:	920e      	str	r2, [sp, #56]	@ 0x38
 800e784:	e7b5      	b.n	800e6f2 <_strtod_l+0x2ba>
 800e786:	2a6e      	cmp	r2, #110	@ 0x6e
 800e788:	e7da      	b.n	800e740 <_strtod_l+0x308>
 800e78a:	498c      	ldr	r1, [pc, #560]	@ (800e9bc <_strtod_l+0x584>)
 800e78c:	a819      	add	r0, sp, #100	@ 0x64
 800e78e:	f002 fdbb 	bl	8011308 <__match>
 800e792:	2800      	cmp	r0, #0
 800e794:	f43f aea4 	beq.w	800e4e0 <_strtod_l+0xa8>
 800e798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e79a:	4989      	ldr	r1, [pc, #548]	@ (800e9c0 <_strtod_l+0x588>)
 800e79c:	3b01      	subs	r3, #1
 800e79e:	a819      	add	r0, sp, #100	@ 0x64
 800e7a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7a2:	f002 fdb1 	bl	8011308 <__match>
 800e7a6:	b910      	cbnz	r0, 800e7ae <_strtod_l+0x376>
 800e7a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800e7ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e9d0 <_strtod_l+0x598>
 800e7b2:	f04f 0a00 	mov.w	sl, #0
 800e7b6:	e678      	b.n	800e4aa <_strtod_l+0x72>
 800e7b8:	4882      	ldr	r0, [pc, #520]	@ (800e9c4 <_strtod_l+0x58c>)
 800e7ba:	f001 fc75 	bl	80100a8 <nan>
 800e7be:	ec5b ab10 	vmov	sl, fp, d0
 800e7c2:	e672      	b.n	800e4aa <_strtod_l+0x72>
 800e7c4:	eba8 0309 	sub.w	r3, r8, r9
 800e7c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7cc:	2f00      	cmp	r7, #0
 800e7ce:	bf08      	it	eq
 800e7d0:	462f      	moveq	r7, r5
 800e7d2:	2d10      	cmp	r5, #16
 800e7d4:	462c      	mov	r4, r5
 800e7d6:	bfa8      	it	ge
 800e7d8:	2410      	movge	r4, #16
 800e7da:	f7f1 feb3 	bl	8000544 <__aeabi_ui2d>
 800e7de:	2d09      	cmp	r5, #9
 800e7e0:	4682      	mov	sl, r0
 800e7e2:	468b      	mov	fp, r1
 800e7e4:	dc13      	bgt.n	800e80e <_strtod_l+0x3d6>
 800e7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f43f ae5e 	beq.w	800e4aa <_strtod_l+0x72>
 800e7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f0:	dd78      	ble.n	800e8e4 <_strtod_l+0x4ac>
 800e7f2:	2b16      	cmp	r3, #22
 800e7f4:	dc5f      	bgt.n	800e8b6 <_strtod_l+0x47e>
 800e7f6:	4974      	ldr	r1, [pc, #464]	@ (800e9c8 <_strtod_l+0x590>)
 800e7f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e800:	4652      	mov	r2, sl
 800e802:	465b      	mov	r3, fp
 800e804:	f7f1 ff18 	bl	8000638 <__aeabi_dmul>
 800e808:	4682      	mov	sl, r0
 800e80a:	468b      	mov	fp, r1
 800e80c:	e64d      	b.n	800e4aa <_strtod_l+0x72>
 800e80e:	4b6e      	ldr	r3, [pc, #440]	@ (800e9c8 <_strtod_l+0x590>)
 800e810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e814:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e818:	f7f1 ff0e 	bl	8000638 <__aeabi_dmul>
 800e81c:	4682      	mov	sl, r0
 800e81e:	9808      	ldr	r0, [sp, #32]
 800e820:	468b      	mov	fp, r1
 800e822:	f7f1 fe8f 	bl	8000544 <__aeabi_ui2d>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 fd4d 	bl	80002cc <__adddf3>
 800e832:	2d0f      	cmp	r5, #15
 800e834:	4682      	mov	sl, r0
 800e836:	468b      	mov	fp, r1
 800e838:	ddd5      	ble.n	800e7e6 <_strtod_l+0x3ae>
 800e83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e83c:	1b2c      	subs	r4, r5, r4
 800e83e:	441c      	add	r4, r3
 800e840:	2c00      	cmp	r4, #0
 800e842:	f340 8096 	ble.w	800e972 <_strtod_l+0x53a>
 800e846:	f014 030f 	ands.w	r3, r4, #15
 800e84a:	d00a      	beq.n	800e862 <_strtod_l+0x42a>
 800e84c:	495e      	ldr	r1, [pc, #376]	@ (800e9c8 <_strtod_l+0x590>)
 800e84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e852:	4652      	mov	r2, sl
 800e854:	465b      	mov	r3, fp
 800e856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e85a:	f7f1 feed 	bl	8000638 <__aeabi_dmul>
 800e85e:	4682      	mov	sl, r0
 800e860:	468b      	mov	fp, r1
 800e862:	f034 040f 	bics.w	r4, r4, #15
 800e866:	d073      	beq.n	800e950 <_strtod_l+0x518>
 800e868:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e86c:	dd48      	ble.n	800e900 <_strtod_l+0x4c8>
 800e86e:	2400      	movs	r4, #0
 800e870:	46a0      	mov	r8, r4
 800e872:	940a      	str	r4, [sp, #40]	@ 0x28
 800e874:	46a1      	mov	r9, r4
 800e876:	9a05      	ldr	r2, [sp, #20]
 800e878:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e9d0 <_strtod_l+0x598>
 800e87c:	2322      	movs	r3, #34	@ 0x22
 800e87e:	6013      	str	r3, [r2, #0]
 800e880:	f04f 0a00 	mov.w	sl, #0
 800e884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e886:	2b00      	cmp	r3, #0
 800e888:	f43f ae0f 	beq.w	800e4aa <_strtod_l+0x72>
 800e88c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e88e:	9805      	ldr	r0, [sp, #20]
 800e890:	f002 fe3c 	bl	801150c <_Bfree>
 800e894:	9805      	ldr	r0, [sp, #20]
 800e896:	4649      	mov	r1, r9
 800e898:	f002 fe38 	bl	801150c <_Bfree>
 800e89c:	9805      	ldr	r0, [sp, #20]
 800e89e:	4641      	mov	r1, r8
 800e8a0:	f002 fe34 	bl	801150c <_Bfree>
 800e8a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8a6:	9805      	ldr	r0, [sp, #20]
 800e8a8:	f002 fe30 	bl	801150c <_Bfree>
 800e8ac:	9805      	ldr	r0, [sp, #20]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	f002 fe2c 	bl	801150c <_Bfree>
 800e8b4:	e5f9      	b.n	800e4aa <_strtod_l+0x72>
 800e8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	dbbc      	blt.n	800e83a <_strtod_l+0x402>
 800e8c0:	4c41      	ldr	r4, [pc, #260]	@ (800e9c8 <_strtod_l+0x590>)
 800e8c2:	f1c5 050f 	rsb	r5, r5, #15
 800e8c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	465b      	mov	r3, fp
 800e8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8d2:	f7f1 feb1 	bl	8000638 <__aeabi_dmul>
 800e8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d8:	1b5d      	subs	r5, r3, r5
 800e8da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e8de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8e2:	e78f      	b.n	800e804 <_strtod_l+0x3cc>
 800e8e4:	3316      	adds	r3, #22
 800e8e6:	dba8      	blt.n	800e83a <_strtod_l+0x402>
 800e8e8:	4b37      	ldr	r3, [pc, #220]	@ (800e9c8 <_strtod_l+0x590>)
 800e8ea:	eba9 0808 	sub.w	r8, r9, r8
 800e8ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e8f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	4659      	mov	r1, fp
 800e8fa:	f7f1 ffc7 	bl	800088c <__aeabi_ddiv>
 800e8fe:	e783      	b.n	800e808 <_strtod_l+0x3d0>
 800e900:	4b32      	ldr	r3, [pc, #200]	@ (800e9cc <_strtod_l+0x594>)
 800e902:	9308      	str	r3, [sp, #32]
 800e904:	2300      	movs	r3, #0
 800e906:	1124      	asrs	r4, r4, #4
 800e908:	4650      	mov	r0, sl
 800e90a:	4659      	mov	r1, fp
 800e90c:	461e      	mov	r6, r3
 800e90e:	2c01      	cmp	r4, #1
 800e910:	dc21      	bgt.n	800e956 <_strtod_l+0x51e>
 800e912:	b10b      	cbz	r3, 800e918 <_strtod_l+0x4e0>
 800e914:	4682      	mov	sl, r0
 800e916:	468b      	mov	fp, r1
 800e918:	492c      	ldr	r1, [pc, #176]	@ (800e9cc <_strtod_l+0x594>)
 800e91a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e91e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e922:	4652      	mov	r2, sl
 800e924:	465b      	mov	r3, fp
 800e926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e92a:	f7f1 fe85 	bl	8000638 <__aeabi_dmul>
 800e92e:	4b28      	ldr	r3, [pc, #160]	@ (800e9d0 <_strtod_l+0x598>)
 800e930:	460a      	mov	r2, r1
 800e932:	400b      	ands	r3, r1
 800e934:	4927      	ldr	r1, [pc, #156]	@ (800e9d4 <_strtod_l+0x59c>)
 800e936:	428b      	cmp	r3, r1
 800e938:	4682      	mov	sl, r0
 800e93a:	d898      	bhi.n	800e86e <_strtod_l+0x436>
 800e93c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e940:	428b      	cmp	r3, r1
 800e942:	bf86      	itte	hi
 800e944:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e9d8 <_strtod_l+0x5a0>
 800e948:	f04f 3aff 	movhi.w	sl, #4294967295
 800e94c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e950:	2300      	movs	r3, #0
 800e952:	9308      	str	r3, [sp, #32]
 800e954:	e07a      	b.n	800ea4c <_strtod_l+0x614>
 800e956:	07e2      	lsls	r2, r4, #31
 800e958:	d505      	bpl.n	800e966 <_strtod_l+0x52e>
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f7f1 fe6a 	bl	8000638 <__aeabi_dmul>
 800e964:	2301      	movs	r3, #1
 800e966:	9a08      	ldr	r2, [sp, #32]
 800e968:	3208      	adds	r2, #8
 800e96a:	3601      	adds	r6, #1
 800e96c:	1064      	asrs	r4, r4, #1
 800e96e:	9208      	str	r2, [sp, #32]
 800e970:	e7cd      	b.n	800e90e <_strtod_l+0x4d6>
 800e972:	d0ed      	beq.n	800e950 <_strtod_l+0x518>
 800e974:	4264      	negs	r4, r4
 800e976:	f014 020f 	ands.w	r2, r4, #15
 800e97a:	d00a      	beq.n	800e992 <_strtod_l+0x55a>
 800e97c:	4b12      	ldr	r3, [pc, #72]	@ (800e9c8 <_strtod_l+0x590>)
 800e97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e982:	4650      	mov	r0, sl
 800e984:	4659      	mov	r1, fp
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 ff7f 	bl	800088c <__aeabi_ddiv>
 800e98e:	4682      	mov	sl, r0
 800e990:	468b      	mov	fp, r1
 800e992:	1124      	asrs	r4, r4, #4
 800e994:	d0dc      	beq.n	800e950 <_strtod_l+0x518>
 800e996:	2c1f      	cmp	r4, #31
 800e998:	dd20      	ble.n	800e9dc <_strtod_l+0x5a4>
 800e99a:	2400      	movs	r4, #0
 800e99c:	46a0      	mov	r8, r4
 800e99e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e9a0:	46a1      	mov	r9, r4
 800e9a2:	9a05      	ldr	r2, [sp, #20]
 800e9a4:	2322      	movs	r3, #34	@ 0x22
 800e9a6:	f04f 0a00 	mov.w	sl, #0
 800e9aa:	f04f 0b00 	mov.w	fp, #0
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	e768      	b.n	800e884 <_strtod_l+0x44c>
 800e9b2:	bf00      	nop
 800e9b4:	08014f6d 	.word	0x08014f6d
 800e9b8:	08014f10 	.word	0x08014f10
 800e9bc:	08014f65 	.word	0x08014f65
 800e9c0:	08014fa4 	.word	0x08014fa4
 800e9c4:	08015335 	.word	0x08015335
 800e9c8:	08015120 	.word	0x08015120
 800e9cc:	080150f8 	.word	0x080150f8
 800e9d0:	7ff00000 	.word	0x7ff00000
 800e9d4:	7ca00000 	.word	0x7ca00000
 800e9d8:	7fefffff 	.word	0x7fefffff
 800e9dc:	f014 0310 	ands.w	r3, r4, #16
 800e9e0:	bf18      	it	ne
 800e9e2:	236a      	movne	r3, #106	@ 0x6a
 800e9e4:	4ea9      	ldr	r6, [pc, #676]	@ (800ec8c <_strtod_l+0x854>)
 800e9e6:	9308      	str	r3, [sp, #32]
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	07e2      	lsls	r2, r4, #31
 800e9f0:	d504      	bpl.n	800e9fc <_strtod_l+0x5c4>
 800e9f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9f6:	f7f1 fe1f 	bl	8000638 <__aeabi_dmul>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	1064      	asrs	r4, r4, #1
 800e9fe:	f106 0608 	add.w	r6, r6, #8
 800ea02:	d1f4      	bne.n	800e9ee <_strtod_l+0x5b6>
 800ea04:	b10b      	cbz	r3, 800ea0a <_strtod_l+0x5d2>
 800ea06:	4682      	mov	sl, r0
 800ea08:	468b      	mov	fp, r1
 800ea0a:	9b08      	ldr	r3, [sp, #32]
 800ea0c:	b1b3      	cbz	r3, 800ea3c <_strtod_l+0x604>
 800ea0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	4659      	mov	r1, fp
 800ea1a:	dd0f      	ble.n	800ea3c <_strtod_l+0x604>
 800ea1c:	2b1f      	cmp	r3, #31
 800ea1e:	dd55      	ble.n	800eacc <_strtod_l+0x694>
 800ea20:	2b34      	cmp	r3, #52	@ 0x34
 800ea22:	bfde      	ittt	le
 800ea24:	f04f 33ff 	movle.w	r3, #4294967295
 800ea28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ea2c:	4093      	lslle	r3, r2
 800ea2e:	f04f 0a00 	mov.w	sl, #0
 800ea32:	bfcc      	ite	gt
 800ea34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ea38:	ea03 0b01 	andle.w	fp, r3, r1
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4650      	mov	r0, sl
 800ea42:	4659      	mov	r1, fp
 800ea44:	f7f2 f860 	bl	8000b08 <__aeabi_dcmpeq>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d1a6      	bne.n	800e99a <_strtod_l+0x562>
 800ea4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	462b      	mov	r3, r5
 800ea56:	463a      	mov	r2, r7
 800ea58:	f002 fdc0 	bl	80115dc <__s2b>
 800ea5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f43f af05 	beq.w	800e86e <_strtod_l+0x436>
 800ea64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea66:	2a00      	cmp	r2, #0
 800ea68:	eba9 0308 	sub.w	r3, r9, r8
 800ea6c:	bfa8      	it	ge
 800ea6e:	2300      	movge	r3, #0
 800ea70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ea72:	2400      	movs	r4, #0
 800ea74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea78:	9316      	str	r3, [sp, #88]	@ 0x58
 800ea7a:	46a0      	mov	r8, r4
 800ea7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea7e:	9805      	ldr	r0, [sp, #20]
 800ea80:	6859      	ldr	r1, [r3, #4]
 800ea82:	f002 fd03 	bl	801148c <_Balloc>
 800ea86:	4681      	mov	r9, r0
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	f43f aef4 	beq.w	800e876 <_strtod_l+0x43e>
 800ea8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	3202      	adds	r2, #2
 800ea94:	f103 010c 	add.w	r1, r3, #12
 800ea98:	0092      	lsls	r2, r2, #2
 800ea9a:	300c      	adds	r0, #12
 800ea9c:	f001 faf5 	bl	801008a <memcpy>
 800eaa0:	ec4b ab10 	vmov	d0, sl, fp
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	aa1c      	add	r2, sp, #112	@ 0x70
 800eaa8:	a91b      	add	r1, sp, #108	@ 0x6c
 800eaaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eaae:	f003 f8d1 	bl	8011c54 <__d2b>
 800eab2:	901a      	str	r0, [sp, #104]	@ 0x68
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f43f aede 	beq.w	800e876 <_strtod_l+0x43e>
 800eaba:	9805      	ldr	r0, [sp, #20]
 800eabc:	2101      	movs	r1, #1
 800eabe:	f002 fe23 	bl	8011708 <__i2b>
 800eac2:	4680      	mov	r8, r0
 800eac4:	b948      	cbnz	r0, 800eada <_strtod_l+0x6a2>
 800eac6:	f04f 0800 	mov.w	r8, #0
 800eaca:	e6d4      	b.n	800e876 <_strtod_l+0x43e>
 800eacc:	f04f 32ff 	mov.w	r2, #4294967295
 800ead0:	fa02 f303 	lsl.w	r3, r2, r3
 800ead4:	ea03 0a0a 	and.w	sl, r3, sl
 800ead8:	e7b0      	b.n	800ea3c <_strtod_l+0x604>
 800eada:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eadc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eade:	2d00      	cmp	r5, #0
 800eae0:	bfab      	itete	ge
 800eae2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eae4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eae6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eae8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eaea:	bfac      	ite	ge
 800eaec:	18ef      	addge	r7, r5, r3
 800eaee:	1b5e      	sublt	r6, r3, r5
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	1aed      	subs	r5, r5, r3
 800eaf4:	4415      	add	r5, r2
 800eaf6:	4b66      	ldr	r3, [pc, #408]	@ (800ec90 <_strtod_l+0x858>)
 800eaf8:	3d01      	subs	r5, #1
 800eafa:	429d      	cmp	r5, r3
 800eafc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eb00:	da50      	bge.n	800eba4 <_strtod_l+0x76c>
 800eb02:	1b5b      	subs	r3, r3, r5
 800eb04:	2b1f      	cmp	r3, #31
 800eb06:	eba2 0203 	sub.w	r2, r2, r3
 800eb0a:	f04f 0101 	mov.w	r1, #1
 800eb0e:	dc3d      	bgt.n	800eb8c <_strtod_l+0x754>
 800eb10:	fa01 f303 	lsl.w	r3, r1, r3
 800eb14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb16:	2300      	movs	r3, #0
 800eb18:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb1a:	18bd      	adds	r5, r7, r2
 800eb1c:	9b08      	ldr	r3, [sp, #32]
 800eb1e:	42af      	cmp	r7, r5
 800eb20:	4416      	add	r6, r2
 800eb22:	441e      	add	r6, r3
 800eb24:	463b      	mov	r3, r7
 800eb26:	bfa8      	it	ge
 800eb28:	462b      	movge	r3, r5
 800eb2a:	42b3      	cmp	r3, r6
 800eb2c:	bfa8      	it	ge
 800eb2e:	4633      	movge	r3, r6
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfc2      	ittt	gt
 800eb34:	1aed      	subgt	r5, r5, r3
 800eb36:	1af6      	subgt	r6, r6, r3
 800eb38:	1aff      	subgt	r7, r7, r3
 800eb3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	dd16      	ble.n	800eb6e <_strtod_l+0x736>
 800eb40:	4641      	mov	r1, r8
 800eb42:	9805      	ldr	r0, [sp, #20]
 800eb44:	461a      	mov	r2, r3
 800eb46:	f002 fe9f 	bl	8011888 <__pow5mult>
 800eb4a:	4680      	mov	r8, r0
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d0ba      	beq.n	800eac6 <_strtod_l+0x68e>
 800eb50:	4601      	mov	r1, r0
 800eb52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb54:	9805      	ldr	r0, [sp, #20]
 800eb56:	f002 fded 	bl	8011734 <__multiply>
 800eb5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f43f ae8a 	beq.w	800e876 <_strtod_l+0x43e>
 800eb62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb64:	9805      	ldr	r0, [sp, #20]
 800eb66:	f002 fcd1 	bl	801150c <_Bfree>
 800eb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb6e:	2d00      	cmp	r5, #0
 800eb70:	dc1d      	bgt.n	800ebae <_strtod_l+0x776>
 800eb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	dd23      	ble.n	800ebc0 <_strtod_l+0x788>
 800eb78:	4649      	mov	r1, r9
 800eb7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eb7c:	9805      	ldr	r0, [sp, #20]
 800eb7e:	f002 fe83 	bl	8011888 <__pow5mult>
 800eb82:	4681      	mov	r9, r0
 800eb84:	b9e0      	cbnz	r0, 800ebc0 <_strtod_l+0x788>
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	e674      	b.n	800e876 <_strtod_l+0x43e>
 800eb8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eb90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eb94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eb98:	35e2      	adds	r5, #226	@ 0xe2
 800eb9a:	fa01 f305 	lsl.w	r3, r1, r5
 800eb9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800eba0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eba2:	e7ba      	b.n	800eb1a <_strtod_l+0x6e2>
 800eba4:	2300      	movs	r3, #0
 800eba6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eba8:	2301      	movs	r3, #1
 800ebaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ebac:	e7b5      	b.n	800eb1a <_strtod_l+0x6e2>
 800ebae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebb0:	9805      	ldr	r0, [sp, #20]
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	f002 fec2 	bl	801193c <__lshift>
 800ebb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d1d9      	bne.n	800eb72 <_strtod_l+0x73a>
 800ebbe:	e65a      	b.n	800e876 <_strtod_l+0x43e>
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	dd07      	ble.n	800ebd4 <_strtod_l+0x79c>
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	9805      	ldr	r0, [sp, #20]
 800ebc8:	4632      	mov	r2, r6
 800ebca:	f002 feb7 	bl	801193c <__lshift>
 800ebce:	4681      	mov	r9, r0
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d0d8      	beq.n	800eb86 <_strtod_l+0x74e>
 800ebd4:	2f00      	cmp	r7, #0
 800ebd6:	dd08      	ble.n	800ebea <_strtod_l+0x7b2>
 800ebd8:	4641      	mov	r1, r8
 800ebda:	9805      	ldr	r0, [sp, #20]
 800ebdc:	463a      	mov	r2, r7
 800ebde:	f002 fead 	bl	801193c <__lshift>
 800ebe2:	4680      	mov	r8, r0
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f43f ae46 	beq.w	800e876 <_strtod_l+0x43e>
 800ebea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	464a      	mov	r2, r9
 800ebf0:	f002 ff2c 	bl	8011a4c <__mdiff>
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f ae3d 	beq.w	800e876 <_strtod_l+0x43e>
 800ebfc:	68c3      	ldr	r3, [r0, #12]
 800ebfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec00:	2300      	movs	r3, #0
 800ec02:	60c3      	str	r3, [r0, #12]
 800ec04:	4641      	mov	r1, r8
 800ec06:	f002 ff05 	bl	8011a14 <__mcmp>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	da46      	bge.n	800ec9c <_strtod_l+0x864>
 800ec0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec10:	ea53 030a 	orrs.w	r3, r3, sl
 800ec14:	d16c      	bne.n	800ecf0 <_strtod_l+0x8b8>
 800ec16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d168      	bne.n	800ecf0 <_strtod_l+0x8b8>
 800ec1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec22:	0d1b      	lsrs	r3, r3, #20
 800ec24:	051b      	lsls	r3, r3, #20
 800ec26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec2a:	d961      	bls.n	800ecf0 <_strtod_l+0x8b8>
 800ec2c:	6963      	ldr	r3, [r4, #20]
 800ec2e:	b913      	cbnz	r3, 800ec36 <_strtod_l+0x7fe>
 800ec30:	6923      	ldr	r3, [r4, #16]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	dd5c      	ble.n	800ecf0 <_strtod_l+0x8b8>
 800ec36:	4621      	mov	r1, r4
 800ec38:	2201      	movs	r2, #1
 800ec3a:	9805      	ldr	r0, [sp, #20]
 800ec3c:	f002 fe7e 	bl	801193c <__lshift>
 800ec40:	4641      	mov	r1, r8
 800ec42:	4604      	mov	r4, r0
 800ec44:	f002 fee6 	bl	8011a14 <__mcmp>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	dd51      	ble.n	800ecf0 <_strtod_l+0x8b8>
 800ec4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec50:	9a08      	ldr	r2, [sp, #32]
 800ec52:	0d1b      	lsrs	r3, r3, #20
 800ec54:	051b      	lsls	r3, r3, #20
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	d06b      	beq.n	800ed32 <_strtod_l+0x8fa>
 800ec5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ec5e:	d868      	bhi.n	800ed32 <_strtod_l+0x8fa>
 800ec60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ec64:	f67f ae9d 	bls.w	800e9a2 <_strtod_l+0x56a>
 800ec68:	4b0a      	ldr	r3, [pc, #40]	@ (800ec94 <_strtod_l+0x85c>)
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	4659      	mov	r1, fp
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f7f1 fce2 	bl	8000638 <__aeabi_dmul>
 800ec74:	4b08      	ldr	r3, [pc, #32]	@ (800ec98 <_strtod_l+0x860>)
 800ec76:	400b      	ands	r3, r1
 800ec78:	4682      	mov	sl, r0
 800ec7a:	468b      	mov	fp, r1
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f47f ae05 	bne.w	800e88c <_strtod_l+0x454>
 800ec82:	9a05      	ldr	r2, [sp, #20]
 800ec84:	2322      	movs	r3, #34	@ 0x22
 800ec86:	6013      	str	r3, [r2, #0]
 800ec88:	e600      	b.n	800e88c <_strtod_l+0x454>
 800ec8a:	bf00      	nop
 800ec8c:	08014f38 	.word	0x08014f38
 800ec90:	fffffc02 	.word	0xfffffc02
 800ec94:	39500000 	.word	0x39500000
 800ec98:	7ff00000 	.word	0x7ff00000
 800ec9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eca0:	d165      	bne.n	800ed6e <_strtod_l+0x936>
 800eca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eca8:	b35a      	cbz	r2, 800ed02 <_strtod_l+0x8ca>
 800ecaa:	4a9f      	ldr	r2, [pc, #636]	@ (800ef28 <_strtod_l+0xaf0>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d12b      	bne.n	800ed08 <_strtod_l+0x8d0>
 800ecb0:	9b08      	ldr	r3, [sp, #32]
 800ecb2:	4651      	mov	r1, sl
 800ecb4:	b303      	cbz	r3, 800ecf8 <_strtod_l+0x8c0>
 800ecb6:	4b9d      	ldr	r3, [pc, #628]	@ (800ef2c <_strtod_l+0xaf4>)
 800ecb8:	465a      	mov	r2, fp
 800ecba:	4013      	ands	r3, r2
 800ecbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ecc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc4:	d81b      	bhi.n	800ecfe <_strtod_l+0x8c6>
 800ecc6:	0d1b      	lsrs	r3, r3, #20
 800ecc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd0:	4299      	cmp	r1, r3
 800ecd2:	d119      	bne.n	800ed08 <_strtod_l+0x8d0>
 800ecd4:	4b96      	ldr	r3, [pc, #600]	@ (800ef30 <_strtod_l+0xaf8>)
 800ecd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d102      	bne.n	800ece2 <_strtod_l+0x8aa>
 800ecdc:	3101      	adds	r1, #1
 800ecde:	f43f adca 	beq.w	800e876 <_strtod_l+0x43e>
 800ece2:	4b92      	ldr	r3, [pc, #584]	@ (800ef2c <_strtod_l+0xaf4>)
 800ece4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ece6:	401a      	ands	r2, r3
 800ece8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ecec:	f04f 0a00 	mov.w	sl, #0
 800ecf0:	9b08      	ldr	r3, [sp, #32]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1b8      	bne.n	800ec68 <_strtod_l+0x830>
 800ecf6:	e5c9      	b.n	800e88c <_strtod_l+0x454>
 800ecf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfc:	e7e8      	b.n	800ecd0 <_strtod_l+0x898>
 800ecfe:	4613      	mov	r3, r2
 800ed00:	e7e6      	b.n	800ecd0 <_strtod_l+0x898>
 800ed02:	ea53 030a 	orrs.w	r3, r3, sl
 800ed06:	d0a1      	beq.n	800ec4c <_strtod_l+0x814>
 800ed08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed0a:	b1db      	cbz	r3, 800ed44 <_strtod_l+0x90c>
 800ed0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed0e:	4213      	tst	r3, r2
 800ed10:	d0ee      	beq.n	800ecf0 <_strtod_l+0x8b8>
 800ed12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed14:	9a08      	ldr	r2, [sp, #32]
 800ed16:	4650      	mov	r0, sl
 800ed18:	4659      	mov	r1, fp
 800ed1a:	b1bb      	cbz	r3, 800ed4c <_strtod_l+0x914>
 800ed1c:	f7ff fb6e 	bl	800e3fc <sulp>
 800ed20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed24:	ec53 2b10 	vmov	r2, r3, d0
 800ed28:	f7f1 fad0 	bl	80002cc <__adddf3>
 800ed2c:	4682      	mov	sl, r0
 800ed2e:	468b      	mov	fp, r1
 800ed30:	e7de      	b.n	800ecf0 <_strtod_l+0x8b8>
 800ed32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ed36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ed42:	e7d5      	b.n	800ecf0 <_strtod_l+0x8b8>
 800ed44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed46:	ea13 0f0a 	tst.w	r3, sl
 800ed4a:	e7e1      	b.n	800ed10 <_strtod_l+0x8d8>
 800ed4c:	f7ff fb56 	bl	800e3fc <sulp>
 800ed50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed54:	ec53 2b10 	vmov	r2, r3, d0
 800ed58:	f7f1 fab6 	bl	80002c8 <__aeabi_dsub>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	4682      	mov	sl, r0
 800ed62:	468b      	mov	fp, r1
 800ed64:	f7f1 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d0c1      	beq.n	800ecf0 <_strtod_l+0x8b8>
 800ed6c:	e619      	b.n	800e9a2 <_strtod_l+0x56a>
 800ed6e:	4641      	mov	r1, r8
 800ed70:	4620      	mov	r0, r4
 800ed72:	f002 ffc7 	bl	8011d04 <__ratio>
 800ed76:	ec57 6b10 	vmov	r6, r7, d0
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fed4 	bl	8000b30 <__aeabi_dcmple>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d06f      	beq.n	800ee6c <_strtod_l+0xa34>
 800ed8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d17a      	bne.n	800ee88 <_strtod_l+0xa50>
 800ed92:	f1ba 0f00 	cmp.w	sl, #0
 800ed96:	d158      	bne.n	800ee4a <_strtod_l+0xa12>
 800ed98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d15a      	bne.n	800ee58 <_strtod_l+0xa20>
 800eda2:	4b64      	ldr	r3, [pc, #400]	@ (800ef34 <_strtod_l+0xafc>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	4630      	mov	r0, r6
 800eda8:	4639      	mov	r1, r7
 800edaa:	f7f1 feb7 	bl	8000b1c <__aeabi_dcmplt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d159      	bne.n	800ee66 <_strtod_l+0xa2e>
 800edb2:	4630      	mov	r0, r6
 800edb4:	4639      	mov	r1, r7
 800edb6:	4b60      	ldr	r3, [pc, #384]	@ (800ef38 <_strtod_l+0xb00>)
 800edb8:	2200      	movs	r2, #0
 800edba:	f7f1 fc3d 	bl	8000638 <__aeabi_dmul>
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800edc6:	9606      	str	r6, [sp, #24]
 800edc8:	9307      	str	r3, [sp, #28]
 800edca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edce:	4d57      	ldr	r5, [pc, #348]	@ (800ef2c <_strtod_l+0xaf4>)
 800edd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800edd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edd6:	401d      	ands	r5, r3
 800edd8:	4b58      	ldr	r3, [pc, #352]	@ (800ef3c <_strtod_l+0xb04>)
 800edda:	429d      	cmp	r5, r3
 800eddc:	f040 80b2 	bne.w	800ef44 <_strtod_l+0xb0c>
 800ede0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ede2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ede6:	ec4b ab10 	vmov	d0, sl, fp
 800edea:	f002 fec3 	bl	8011b74 <__ulp>
 800edee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800edf2:	ec51 0b10 	vmov	r0, r1, d0
 800edf6:	f7f1 fc1f 	bl	8000638 <__aeabi_dmul>
 800edfa:	4652      	mov	r2, sl
 800edfc:	465b      	mov	r3, fp
 800edfe:	f7f1 fa65 	bl	80002cc <__adddf3>
 800ee02:	460b      	mov	r3, r1
 800ee04:	4949      	ldr	r1, [pc, #292]	@ (800ef2c <_strtod_l+0xaf4>)
 800ee06:	4a4e      	ldr	r2, [pc, #312]	@ (800ef40 <_strtod_l+0xb08>)
 800ee08:	4019      	ands	r1, r3
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	4682      	mov	sl, r0
 800ee0e:	d942      	bls.n	800ee96 <_strtod_l+0xa5e>
 800ee10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee12:	4b47      	ldr	r3, [pc, #284]	@ (800ef30 <_strtod_l+0xaf8>)
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d103      	bne.n	800ee20 <_strtod_l+0x9e8>
 800ee18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	f43f ad2b 	beq.w	800e876 <_strtod_l+0x43e>
 800ee20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ef30 <_strtod_l+0xaf8>
 800ee24:	f04f 3aff 	mov.w	sl, #4294967295
 800ee28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	f002 fb6e 	bl	801150c <_Bfree>
 800ee30:	9805      	ldr	r0, [sp, #20]
 800ee32:	4649      	mov	r1, r9
 800ee34:	f002 fb6a 	bl	801150c <_Bfree>
 800ee38:	9805      	ldr	r0, [sp, #20]
 800ee3a:	4641      	mov	r1, r8
 800ee3c:	f002 fb66 	bl	801150c <_Bfree>
 800ee40:	9805      	ldr	r0, [sp, #20]
 800ee42:	4621      	mov	r1, r4
 800ee44:	f002 fb62 	bl	801150c <_Bfree>
 800ee48:	e618      	b.n	800ea7c <_strtod_l+0x644>
 800ee4a:	f1ba 0f01 	cmp.w	sl, #1
 800ee4e:	d103      	bne.n	800ee58 <_strtod_l+0xa20>
 800ee50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f43f ada5 	beq.w	800e9a2 <_strtod_l+0x56a>
 800ee58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ef08 <_strtod_l+0xad0>
 800ee5c:	4f35      	ldr	r7, [pc, #212]	@ (800ef34 <_strtod_l+0xafc>)
 800ee5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee62:	2600      	movs	r6, #0
 800ee64:	e7b1      	b.n	800edca <_strtod_l+0x992>
 800ee66:	4f34      	ldr	r7, [pc, #208]	@ (800ef38 <_strtod_l+0xb00>)
 800ee68:	2600      	movs	r6, #0
 800ee6a:	e7aa      	b.n	800edc2 <_strtod_l+0x98a>
 800ee6c:	4b32      	ldr	r3, [pc, #200]	@ (800ef38 <_strtod_l+0xb00>)
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	2200      	movs	r2, #0
 800ee74:	f7f1 fbe0 	bl	8000638 <__aeabi_dmul>
 800ee78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460f      	mov	r7, r1
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d09f      	beq.n	800edc2 <_strtod_l+0x98a>
 800ee82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ee86:	e7a0      	b.n	800edca <_strtod_l+0x992>
 800ee88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ef10 <_strtod_l+0xad8>
 800ee8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee90:	ec57 6b17 	vmov	r6, r7, d7
 800ee94:	e799      	b.n	800edca <_strtod_l+0x992>
 800ee96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ee9a:	9b08      	ldr	r3, [sp, #32]
 800ee9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1c1      	bne.n	800ee28 <_strtod_l+0x9f0>
 800eea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eea8:	0d1b      	lsrs	r3, r3, #20
 800eeaa:	051b      	lsls	r3, r3, #20
 800eeac:	429d      	cmp	r5, r3
 800eeae:	d1bb      	bne.n	800ee28 <_strtod_l+0x9f0>
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	f7f1 ff20 	bl	8000cf8 <__aeabi_d2lz>
 800eeb8:	f7f1 fb90 	bl	80005dc <__aeabi_l2d>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fa00 	bl	80002c8 <__aeabi_dsub>
 800eec8:	460b      	mov	r3, r1
 800eeca:	4602      	mov	r2, r0
 800eecc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eed0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eed6:	ea46 060a 	orr.w	r6, r6, sl
 800eeda:	431e      	orrs	r6, r3
 800eedc:	d06f      	beq.n	800efbe <_strtod_l+0xb86>
 800eede:	a30e      	add	r3, pc, #56	@ (adr r3, 800ef18 <_strtod_l+0xae0>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 fe1a 	bl	8000b1c <__aeabi_dcmplt>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	f47f accf 	bne.w	800e88c <_strtod_l+0x454>
 800eeee:	a30c      	add	r3, pc, #48	@ (adr r3, 800ef20 <_strtod_l+0xae8>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eef8:	f7f1 fe2e 	bl	8000b58 <__aeabi_dcmpgt>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d093      	beq.n	800ee28 <_strtod_l+0x9f0>
 800ef00:	e4c4      	b.n	800e88c <_strtod_l+0x454>
 800ef02:	bf00      	nop
 800ef04:	f3af 8000 	nop.w
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	bff00000 	.word	0xbff00000
 800ef10:	00000000 	.word	0x00000000
 800ef14:	3ff00000 	.word	0x3ff00000
 800ef18:	94a03595 	.word	0x94a03595
 800ef1c:	3fdfffff 	.word	0x3fdfffff
 800ef20:	35afe535 	.word	0x35afe535
 800ef24:	3fe00000 	.word	0x3fe00000
 800ef28:	000fffff 	.word	0x000fffff
 800ef2c:	7ff00000 	.word	0x7ff00000
 800ef30:	7fefffff 	.word	0x7fefffff
 800ef34:	3ff00000 	.word	0x3ff00000
 800ef38:	3fe00000 	.word	0x3fe00000
 800ef3c:	7fe00000 	.word	0x7fe00000
 800ef40:	7c9fffff 	.word	0x7c9fffff
 800ef44:	9b08      	ldr	r3, [sp, #32]
 800ef46:	b323      	cbz	r3, 800ef92 <_strtod_l+0xb5a>
 800ef48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ef4c:	d821      	bhi.n	800ef92 <_strtod_l+0xb5a>
 800ef4e:	a328      	add	r3, pc, #160	@ (adr r3, 800eff0 <_strtod_l+0xbb8>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	4630      	mov	r0, r6
 800ef56:	4639      	mov	r1, r7
 800ef58:	f7f1 fdea 	bl	8000b30 <__aeabi_dcmple>
 800ef5c:	b1a0      	cbz	r0, 800ef88 <_strtod_l+0xb50>
 800ef5e:	4639      	mov	r1, r7
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7f1 fe41 	bl	8000be8 <__aeabi_d2uiz>
 800ef66:	2801      	cmp	r0, #1
 800ef68:	bf38      	it	cc
 800ef6a:	2001      	movcc	r0, #1
 800ef6c:	f7f1 faea 	bl	8000544 <__aeabi_ui2d>
 800ef70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	b9fb      	cbnz	r3, 800efb8 <_strtod_l+0xb80>
 800ef78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ef7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ef80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ef84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ef88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ef8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ef8e:	1b5b      	subs	r3, r3, r5
 800ef90:	9311      	str	r3, [sp, #68]	@ 0x44
 800ef92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ef9a:	f002 fdeb 	bl	8011b74 <__ulp>
 800ef9e:	4650      	mov	r0, sl
 800efa0:	ec53 2b10 	vmov	r2, r3, d0
 800efa4:	4659      	mov	r1, fp
 800efa6:	f7f1 fb47 	bl	8000638 <__aeabi_dmul>
 800efaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800efae:	f7f1 f98d 	bl	80002cc <__adddf3>
 800efb2:	4682      	mov	sl, r0
 800efb4:	468b      	mov	fp, r1
 800efb6:	e770      	b.n	800ee9a <_strtod_l+0xa62>
 800efb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800efbc:	e7e0      	b.n	800ef80 <_strtod_l+0xb48>
 800efbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800eff8 <_strtod_l+0xbc0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 800efc8:	e798      	b.n	800eefc <_strtod_l+0xac4>
 800efca:	2300      	movs	r3, #0
 800efcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800efd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	f7ff ba6d 	b.w	800e4b2 <_strtod_l+0x7a>
 800efd8:	2a65      	cmp	r2, #101	@ 0x65
 800efda:	f43f ab66 	beq.w	800e6aa <_strtod_l+0x272>
 800efde:	2a45      	cmp	r2, #69	@ 0x45
 800efe0:	f43f ab63 	beq.w	800e6aa <_strtod_l+0x272>
 800efe4:	2301      	movs	r3, #1
 800efe6:	f7ff bb9e 	b.w	800e726 <_strtod_l+0x2ee>
 800efea:	bf00      	nop
 800efec:	f3af 8000 	nop.w
 800eff0:	ffc00000 	.word	0xffc00000
 800eff4:	41dfffff 	.word	0x41dfffff
 800eff8:	94a03595 	.word	0x94a03595
 800effc:	3fcfffff 	.word	0x3fcfffff

0800f000 <_strtod_r>:
 800f000:	4b01      	ldr	r3, [pc, #4]	@ (800f008 <_strtod_r+0x8>)
 800f002:	f7ff ba19 	b.w	800e438 <_strtod_l>
 800f006:	bf00      	nop
 800f008:	20000130 	.word	0x20000130

0800f00c <strtod>:
 800f00c:	460a      	mov	r2, r1
 800f00e:	4601      	mov	r1, r0
 800f010:	4802      	ldr	r0, [pc, #8]	@ (800f01c <strtod+0x10>)
 800f012:	4b03      	ldr	r3, [pc, #12]	@ (800f020 <strtod+0x14>)
 800f014:	6800      	ldr	r0, [r0, #0]
 800f016:	f7ff ba0f 	b.w	800e438 <_strtod_l>
 800f01a:	bf00      	nop
 800f01c:	2000029c 	.word	0x2000029c
 800f020:	20000130 	.word	0x20000130

0800f024 <__cvt>:
 800f024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	ec57 6b10 	vmov	r6, r7, d0
 800f02c:	2f00      	cmp	r7, #0
 800f02e:	460c      	mov	r4, r1
 800f030:	4619      	mov	r1, r3
 800f032:	463b      	mov	r3, r7
 800f034:	bfbb      	ittet	lt
 800f036:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f03a:	461f      	movlt	r7, r3
 800f03c:	2300      	movge	r3, #0
 800f03e:	232d      	movlt	r3, #45	@ 0x2d
 800f040:	700b      	strb	r3, [r1, #0]
 800f042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f044:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f048:	4691      	mov	r9, r2
 800f04a:	f023 0820 	bic.w	r8, r3, #32
 800f04e:	bfbc      	itt	lt
 800f050:	4632      	movlt	r2, r6
 800f052:	4616      	movlt	r6, r2
 800f054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f058:	d005      	beq.n	800f066 <__cvt+0x42>
 800f05a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f05e:	d100      	bne.n	800f062 <__cvt+0x3e>
 800f060:	3401      	adds	r4, #1
 800f062:	2102      	movs	r1, #2
 800f064:	e000      	b.n	800f068 <__cvt+0x44>
 800f066:	2103      	movs	r1, #3
 800f068:	ab03      	add	r3, sp, #12
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	ab02      	add	r3, sp, #8
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	ec47 6b10 	vmov	d0, r6, r7
 800f074:	4653      	mov	r3, sl
 800f076:	4622      	mov	r2, r4
 800f078:	f001 f8ae 	bl	80101d8 <_dtoa_r>
 800f07c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f080:	4605      	mov	r5, r0
 800f082:	d119      	bne.n	800f0b8 <__cvt+0x94>
 800f084:	f019 0f01 	tst.w	r9, #1
 800f088:	d00e      	beq.n	800f0a8 <__cvt+0x84>
 800f08a:	eb00 0904 	add.w	r9, r0, r4
 800f08e:	2200      	movs	r2, #0
 800f090:	2300      	movs	r3, #0
 800f092:	4630      	mov	r0, r6
 800f094:	4639      	mov	r1, r7
 800f096:	f7f1 fd37 	bl	8000b08 <__aeabi_dcmpeq>
 800f09a:	b108      	cbz	r0, 800f0a0 <__cvt+0x7c>
 800f09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0a0:	2230      	movs	r2, #48	@ 0x30
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	454b      	cmp	r3, r9
 800f0a6:	d31e      	bcc.n	800f0e6 <__cvt+0xc2>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ac:	1b5b      	subs	r3, r3, r5
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	6013      	str	r3, [r2, #0]
 800f0b2:	b004      	add	sp, #16
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f0bc:	eb00 0904 	add.w	r9, r0, r4
 800f0c0:	d1e5      	bne.n	800f08e <__cvt+0x6a>
 800f0c2:	7803      	ldrb	r3, [r0, #0]
 800f0c4:	2b30      	cmp	r3, #48	@ 0x30
 800f0c6:	d10a      	bne.n	800f0de <__cvt+0xba>
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	f7f1 fd1a 	bl	8000b08 <__aeabi_dcmpeq>
 800f0d4:	b918      	cbnz	r0, 800f0de <__cvt+0xba>
 800f0d6:	f1c4 0401 	rsb	r4, r4, #1
 800f0da:	f8ca 4000 	str.w	r4, [sl]
 800f0de:	f8da 3000 	ldr.w	r3, [sl]
 800f0e2:	4499      	add	r9, r3
 800f0e4:	e7d3      	b.n	800f08e <__cvt+0x6a>
 800f0e6:	1c59      	adds	r1, r3, #1
 800f0e8:	9103      	str	r1, [sp, #12]
 800f0ea:	701a      	strb	r2, [r3, #0]
 800f0ec:	e7d9      	b.n	800f0a2 <__cvt+0x7e>

0800f0ee <__exponent>:
 800f0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0f0:	2900      	cmp	r1, #0
 800f0f2:	bfba      	itte	lt
 800f0f4:	4249      	neglt	r1, r1
 800f0f6:	232d      	movlt	r3, #45	@ 0x2d
 800f0f8:	232b      	movge	r3, #43	@ 0x2b
 800f0fa:	2909      	cmp	r1, #9
 800f0fc:	7002      	strb	r2, [r0, #0]
 800f0fe:	7043      	strb	r3, [r0, #1]
 800f100:	dd29      	ble.n	800f156 <__exponent+0x68>
 800f102:	f10d 0307 	add.w	r3, sp, #7
 800f106:	461d      	mov	r5, r3
 800f108:	270a      	movs	r7, #10
 800f10a:	461a      	mov	r2, r3
 800f10c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f110:	fb07 1416 	mls	r4, r7, r6, r1
 800f114:	3430      	adds	r4, #48	@ 0x30
 800f116:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f11a:	460c      	mov	r4, r1
 800f11c:	2c63      	cmp	r4, #99	@ 0x63
 800f11e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f122:	4631      	mov	r1, r6
 800f124:	dcf1      	bgt.n	800f10a <__exponent+0x1c>
 800f126:	3130      	adds	r1, #48	@ 0x30
 800f128:	1e94      	subs	r4, r2, #2
 800f12a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f12e:	1c41      	adds	r1, r0, #1
 800f130:	4623      	mov	r3, r4
 800f132:	42ab      	cmp	r3, r5
 800f134:	d30a      	bcc.n	800f14c <__exponent+0x5e>
 800f136:	f10d 0309 	add.w	r3, sp, #9
 800f13a:	1a9b      	subs	r3, r3, r2
 800f13c:	42ac      	cmp	r4, r5
 800f13e:	bf88      	it	hi
 800f140:	2300      	movhi	r3, #0
 800f142:	3302      	adds	r3, #2
 800f144:	4403      	add	r3, r0
 800f146:	1a18      	subs	r0, r3, r0
 800f148:	b003      	add	sp, #12
 800f14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f150:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f154:	e7ed      	b.n	800f132 <__exponent+0x44>
 800f156:	2330      	movs	r3, #48	@ 0x30
 800f158:	3130      	adds	r1, #48	@ 0x30
 800f15a:	7083      	strb	r3, [r0, #2]
 800f15c:	70c1      	strb	r1, [r0, #3]
 800f15e:	1d03      	adds	r3, r0, #4
 800f160:	e7f1      	b.n	800f146 <__exponent+0x58>
	...

0800f164 <_printf_float>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	b08d      	sub	sp, #52	@ 0x34
 800f16a:	460c      	mov	r4, r1
 800f16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f170:	4616      	mov	r6, r2
 800f172:	461f      	mov	r7, r3
 800f174:	4605      	mov	r5, r0
 800f176:	f000 ff01 	bl	800ff7c <_localeconv_r>
 800f17a:	6803      	ldr	r3, [r0, #0]
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f1 f896 	bl	80002b0 <strlen>
 800f184:	2300      	movs	r3, #0
 800f186:	930a      	str	r3, [sp, #40]	@ 0x28
 800f188:	f8d8 3000 	ldr.w	r3, [r8]
 800f18c:	9005      	str	r0, [sp, #20]
 800f18e:	3307      	adds	r3, #7
 800f190:	f023 0307 	bic.w	r3, r3, #7
 800f194:	f103 0208 	add.w	r2, r3, #8
 800f198:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f19c:	f8d4 b000 	ldr.w	fp, [r4]
 800f1a0:	f8c8 2000 	str.w	r2, [r8]
 800f1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f1ac:	9307      	str	r3, [sp, #28]
 800f1ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ba:	4b9c      	ldr	r3, [pc, #624]	@ (800f42c <_printf_float+0x2c8>)
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	f7f1 fcd4 	bl	8000b6c <__aeabi_dcmpun>
 800f1c4:	bb70      	cbnz	r0, 800f224 <_printf_float+0xc0>
 800f1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ca:	4b98      	ldr	r3, [pc, #608]	@ (800f42c <_printf_float+0x2c8>)
 800f1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d0:	f7f1 fcae 	bl	8000b30 <__aeabi_dcmple>
 800f1d4:	bb30      	cbnz	r0, 800f224 <_printf_float+0xc0>
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4640      	mov	r0, r8
 800f1dc:	4649      	mov	r1, r9
 800f1de:	f7f1 fc9d 	bl	8000b1c <__aeabi_dcmplt>
 800f1e2:	b110      	cbz	r0, 800f1ea <_printf_float+0x86>
 800f1e4:	232d      	movs	r3, #45	@ 0x2d
 800f1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1ea:	4a91      	ldr	r2, [pc, #580]	@ (800f430 <_printf_float+0x2cc>)
 800f1ec:	4b91      	ldr	r3, [pc, #580]	@ (800f434 <_printf_float+0x2d0>)
 800f1ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f1f2:	bf94      	ite	ls
 800f1f4:	4690      	movls	r8, r2
 800f1f6:	4698      	movhi	r8, r3
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	6123      	str	r3, [r4, #16]
 800f1fc:	f02b 0304 	bic.w	r3, fp, #4
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	f04f 0900 	mov.w	r9, #0
 800f206:	9700      	str	r7, [sp, #0]
 800f208:	4633      	mov	r3, r6
 800f20a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f9d2 	bl	800f5b8 <_printf_common>
 800f214:	3001      	adds	r0, #1
 800f216:	f040 808d 	bne.w	800f334 <_printf_float+0x1d0>
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	b00d      	add	sp, #52	@ 0x34
 800f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f224:	4642      	mov	r2, r8
 800f226:	464b      	mov	r3, r9
 800f228:	4640      	mov	r0, r8
 800f22a:	4649      	mov	r1, r9
 800f22c:	f7f1 fc9e 	bl	8000b6c <__aeabi_dcmpun>
 800f230:	b140      	cbz	r0, 800f244 <_printf_float+0xe0>
 800f232:	464b      	mov	r3, r9
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfbc      	itt	lt
 800f238:	232d      	movlt	r3, #45	@ 0x2d
 800f23a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f23e:	4a7e      	ldr	r2, [pc, #504]	@ (800f438 <_printf_float+0x2d4>)
 800f240:	4b7e      	ldr	r3, [pc, #504]	@ (800f43c <_printf_float+0x2d8>)
 800f242:	e7d4      	b.n	800f1ee <_printf_float+0x8a>
 800f244:	6863      	ldr	r3, [r4, #4]
 800f246:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f24a:	9206      	str	r2, [sp, #24]
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	d13b      	bne.n	800f2c8 <_printf_float+0x164>
 800f250:	2306      	movs	r3, #6
 800f252:	6063      	str	r3, [r4, #4]
 800f254:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f258:	2300      	movs	r3, #0
 800f25a:	6022      	str	r2, [r4, #0]
 800f25c:	9303      	str	r3, [sp, #12]
 800f25e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f260:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f264:	ab09      	add	r3, sp, #36	@ 0x24
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	6861      	ldr	r1, [r4, #4]
 800f26a:	ec49 8b10 	vmov	d0, r8, r9
 800f26e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f272:	4628      	mov	r0, r5
 800f274:	f7ff fed6 	bl	800f024 <__cvt>
 800f278:	9b06      	ldr	r3, [sp, #24]
 800f27a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f27c:	2b47      	cmp	r3, #71	@ 0x47
 800f27e:	4680      	mov	r8, r0
 800f280:	d129      	bne.n	800f2d6 <_printf_float+0x172>
 800f282:	1cc8      	adds	r0, r1, #3
 800f284:	db02      	blt.n	800f28c <_printf_float+0x128>
 800f286:	6863      	ldr	r3, [r4, #4]
 800f288:	4299      	cmp	r1, r3
 800f28a:	dd41      	ble.n	800f310 <_printf_float+0x1ac>
 800f28c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f290:	fa5f fa8a 	uxtb.w	sl, sl
 800f294:	3901      	subs	r1, #1
 800f296:	4652      	mov	r2, sl
 800f298:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f29c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f29e:	f7ff ff26 	bl	800f0ee <__exponent>
 800f2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2a4:	1813      	adds	r3, r2, r0
 800f2a6:	2a01      	cmp	r2, #1
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	6123      	str	r3, [r4, #16]
 800f2ac:	dc02      	bgt.n	800f2b4 <_printf_float+0x150>
 800f2ae:	6822      	ldr	r2, [r4, #0]
 800f2b0:	07d2      	lsls	r2, r2, #31
 800f2b2:	d501      	bpl.n	800f2b8 <_printf_float+0x154>
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0a2      	beq.n	800f206 <_printf_float+0xa2>
 800f2c0:	232d      	movs	r3, #45	@ 0x2d
 800f2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2c6:	e79e      	b.n	800f206 <_printf_float+0xa2>
 800f2c8:	9a06      	ldr	r2, [sp, #24]
 800f2ca:	2a47      	cmp	r2, #71	@ 0x47
 800f2cc:	d1c2      	bne.n	800f254 <_printf_float+0xf0>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1c0      	bne.n	800f254 <_printf_float+0xf0>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e7bd      	b.n	800f252 <_printf_float+0xee>
 800f2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2da:	d9db      	bls.n	800f294 <_printf_float+0x130>
 800f2dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f2e0:	d118      	bne.n	800f314 <_printf_float+0x1b0>
 800f2e2:	2900      	cmp	r1, #0
 800f2e4:	6863      	ldr	r3, [r4, #4]
 800f2e6:	dd0b      	ble.n	800f300 <_printf_float+0x19c>
 800f2e8:	6121      	str	r1, [r4, #16]
 800f2ea:	b913      	cbnz	r3, 800f2f2 <_printf_float+0x18e>
 800f2ec:	6822      	ldr	r2, [r4, #0]
 800f2ee:	07d0      	lsls	r0, r2, #31
 800f2f0:	d502      	bpl.n	800f2f8 <_printf_float+0x194>
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	440b      	add	r3, r1
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	e7db      	b.n	800f2b8 <_printf_float+0x154>
 800f300:	b913      	cbnz	r3, 800f308 <_printf_float+0x1a4>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	07d2      	lsls	r2, r2, #31
 800f306:	d501      	bpl.n	800f30c <_printf_float+0x1a8>
 800f308:	3302      	adds	r3, #2
 800f30a:	e7f4      	b.n	800f2f6 <_printf_float+0x192>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e7f2      	b.n	800f2f6 <_printf_float+0x192>
 800f310:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f316:	4299      	cmp	r1, r3
 800f318:	db05      	blt.n	800f326 <_printf_float+0x1c2>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	6121      	str	r1, [r4, #16]
 800f31e:	07d8      	lsls	r0, r3, #31
 800f320:	d5ea      	bpl.n	800f2f8 <_printf_float+0x194>
 800f322:	1c4b      	adds	r3, r1, #1
 800f324:	e7e7      	b.n	800f2f6 <_printf_float+0x192>
 800f326:	2900      	cmp	r1, #0
 800f328:	bfd4      	ite	le
 800f32a:	f1c1 0202 	rsble	r2, r1, #2
 800f32e:	2201      	movgt	r2, #1
 800f330:	4413      	add	r3, r2
 800f332:	e7e0      	b.n	800f2f6 <_printf_float+0x192>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	055a      	lsls	r2, r3, #21
 800f338:	d407      	bmi.n	800f34a <_printf_float+0x1e6>
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	4642      	mov	r2, r8
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	d12b      	bne.n	800f3a0 <_printf_float+0x23c>
 800f348:	e767      	b.n	800f21a <_printf_float+0xb6>
 800f34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f34e:	f240 80dd 	bls.w	800f50c <_printf_float+0x3a8>
 800f352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f356:	2200      	movs	r2, #0
 800f358:	2300      	movs	r3, #0
 800f35a:	f7f1 fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800f35e:	2800      	cmp	r0, #0
 800f360:	d033      	beq.n	800f3ca <_printf_float+0x266>
 800f362:	4a37      	ldr	r2, [pc, #220]	@ (800f440 <_printf_float+0x2dc>)
 800f364:	2301      	movs	r3, #1
 800f366:	4631      	mov	r1, r6
 800f368:	4628      	mov	r0, r5
 800f36a:	47b8      	blx	r7
 800f36c:	3001      	adds	r0, #1
 800f36e:	f43f af54 	beq.w	800f21a <_printf_float+0xb6>
 800f372:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f376:	4543      	cmp	r3, r8
 800f378:	db02      	blt.n	800f380 <_printf_float+0x21c>
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	07d8      	lsls	r0, r3, #31
 800f37e:	d50f      	bpl.n	800f3a0 <_printf_float+0x23c>
 800f380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f af45 	beq.w	800f21a <_printf_float+0xb6>
 800f390:	f04f 0900 	mov.w	r9, #0
 800f394:	f108 38ff 	add.w	r8, r8, #4294967295
 800f398:	f104 0a1a 	add.w	sl, r4, #26
 800f39c:	45c8      	cmp	r8, r9
 800f39e:	dc09      	bgt.n	800f3b4 <_printf_float+0x250>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	079b      	lsls	r3, r3, #30
 800f3a4:	f100 8103 	bmi.w	800f5ae <_printf_float+0x44a>
 800f3a8:	68e0      	ldr	r0, [r4, #12]
 800f3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3ac:	4298      	cmp	r0, r3
 800f3ae:	bfb8      	it	lt
 800f3b0:	4618      	movlt	r0, r3
 800f3b2:	e734      	b.n	800f21e <_printf_float+0xba>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	4652      	mov	r2, sl
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	47b8      	blx	r7
 800f3be:	3001      	adds	r0, #1
 800f3c0:	f43f af2b 	beq.w	800f21a <_printf_float+0xb6>
 800f3c4:	f109 0901 	add.w	r9, r9, #1
 800f3c8:	e7e8      	b.n	800f39c <_printf_float+0x238>
 800f3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	dc39      	bgt.n	800f444 <_printf_float+0x2e0>
 800f3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f440 <_printf_float+0x2dc>)
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	47b8      	blx	r7
 800f3da:	3001      	adds	r0, #1
 800f3dc:	f43f af1d 	beq.w	800f21a <_printf_float+0xb6>
 800f3e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f3e4:	ea59 0303 	orrs.w	r3, r9, r3
 800f3e8:	d102      	bne.n	800f3f0 <_printf_float+0x28c>
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	07d9      	lsls	r1, r3, #31
 800f3ee:	d5d7      	bpl.n	800f3a0 <_printf_float+0x23c>
 800f3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	47b8      	blx	r7
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f43f af0d 	beq.w	800f21a <_printf_float+0xb6>
 800f400:	f04f 0a00 	mov.w	sl, #0
 800f404:	f104 0b1a 	add.w	fp, r4, #26
 800f408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f40a:	425b      	negs	r3, r3
 800f40c:	4553      	cmp	r3, sl
 800f40e:	dc01      	bgt.n	800f414 <_printf_float+0x2b0>
 800f410:	464b      	mov	r3, r9
 800f412:	e793      	b.n	800f33c <_printf_float+0x1d8>
 800f414:	2301      	movs	r3, #1
 800f416:	465a      	mov	r2, fp
 800f418:	4631      	mov	r1, r6
 800f41a:	4628      	mov	r0, r5
 800f41c:	47b8      	blx	r7
 800f41e:	3001      	adds	r0, #1
 800f420:	f43f aefb 	beq.w	800f21a <_printf_float+0xb6>
 800f424:	f10a 0a01 	add.w	sl, sl, #1
 800f428:	e7ee      	b.n	800f408 <_printf_float+0x2a4>
 800f42a:	bf00      	nop
 800f42c:	7fefffff 	.word	0x7fefffff
 800f430:	08014f60 	.word	0x08014f60
 800f434:	08014f64 	.word	0x08014f64
 800f438:	08014f68 	.word	0x08014f68
 800f43c:	08014f6c 	.word	0x08014f6c
 800f440:	08014f70 	.word	0x08014f70
 800f444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f44a:	4553      	cmp	r3, sl
 800f44c:	bfa8      	it	ge
 800f44e:	4653      	movge	r3, sl
 800f450:	2b00      	cmp	r3, #0
 800f452:	4699      	mov	r9, r3
 800f454:	dc36      	bgt.n	800f4c4 <_printf_float+0x360>
 800f456:	f04f 0b00 	mov.w	fp, #0
 800f45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f45e:	f104 021a 	add.w	r2, r4, #26
 800f462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f464:	9306      	str	r3, [sp, #24]
 800f466:	eba3 0309 	sub.w	r3, r3, r9
 800f46a:	455b      	cmp	r3, fp
 800f46c:	dc31      	bgt.n	800f4d2 <_printf_float+0x36e>
 800f46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f470:	459a      	cmp	sl, r3
 800f472:	dc3a      	bgt.n	800f4ea <_printf_float+0x386>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	07da      	lsls	r2, r3, #31
 800f478:	d437      	bmi.n	800f4ea <_printf_float+0x386>
 800f47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f47c:	ebaa 0903 	sub.w	r9, sl, r3
 800f480:	9b06      	ldr	r3, [sp, #24]
 800f482:	ebaa 0303 	sub.w	r3, sl, r3
 800f486:	4599      	cmp	r9, r3
 800f488:	bfa8      	it	ge
 800f48a:	4699      	movge	r9, r3
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	dc33      	bgt.n	800f4fa <_printf_float+0x396>
 800f492:	f04f 0800 	mov.w	r8, #0
 800f496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f49a:	f104 0b1a 	add.w	fp, r4, #26
 800f49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800f4a4:	eba3 0309 	sub.w	r3, r3, r9
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	f77f af79 	ble.w	800f3a0 <_printf_float+0x23c>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	465a      	mov	r2, fp
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	47b8      	blx	r7
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f aeae 	beq.w	800f21a <_printf_float+0xb6>
 800f4be:	f108 0801 	add.w	r8, r8, #1
 800f4c2:	e7ec      	b.n	800f49e <_printf_float+0x33a>
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	d1c2      	bne.n	800f456 <_printf_float+0x2f2>
 800f4d0:	e6a3      	b.n	800f21a <_printf_float+0xb6>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	9206      	str	r2, [sp, #24]
 800f4da:	47b8      	blx	r7
 800f4dc:	3001      	adds	r0, #1
 800f4de:	f43f ae9c 	beq.w	800f21a <_printf_float+0xb6>
 800f4e2:	9a06      	ldr	r2, [sp, #24]
 800f4e4:	f10b 0b01 	add.w	fp, fp, #1
 800f4e8:	e7bb      	b.n	800f462 <_printf_float+0x2fe>
 800f4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b8      	blx	r7
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	d1c0      	bne.n	800f47a <_printf_float+0x316>
 800f4f8:	e68f      	b.n	800f21a <_printf_float+0xb6>
 800f4fa:	9a06      	ldr	r2, [sp, #24]
 800f4fc:	464b      	mov	r3, r9
 800f4fe:	4442      	add	r2, r8
 800f500:	4631      	mov	r1, r6
 800f502:	4628      	mov	r0, r5
 800f504:	47b8      	blx	r7
 800f506:	3001      	adds	r0, #1
 800f508:	d1c3      	bne.n	800f492 <_printf_float+0x32e>
 800f50a:	e686      	b.n	800f21a <_printf_float+0xb6>
 800f50c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f510:	f1ba 0f01 	cmp.w	sl, #1
 800f514:	dc01      	bgt.n	800f51a <_printf_float+0x3b6>
 800f516:	07db      	lsls	r3, r3, #31
 800f518:	d536      	bpl.n	800f588 <_printf_float+0x424>
 800f51a:	2301      	movs	r3, #1
 800f51c:	4642      	mov	r2, r8
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	f43f ae78 	beq.w	800f21a <_printf_float+0xb6>
 800f52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f52e:	4631      	mov	r1, r6
 800f530:	4628      	mov	r0, r5
 800f532:	47b8      	blx	r7
 800f534:	3001      	adds	r0, #1
 800f536:	f43f ae70 	beq.w	800f21a <_printf_float+0xb6>
 800f53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f53e:	2200      	movs	r2, #0
 800f540:	2300      	movs	r3, #0
 800f542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f546:	f7f1 fadf 	bl	8000b08 <__aeabi_dcmpeq>
 800f54a:	b9c0      	cbnz	r0, 800f57e <_printf_float+0x41a>
 800f54c:	4653      	mov	r3, sl
 800f54e:	f108 0201 	add.w	r2, r8, #1
 800f552:	4631      	mov	r1, r6
 800f554:	4628      	mov	r0, r5
 800f556:	47b8      	blx	r7
 800f558:	3001      	adds	r0, #1
 800f55a:	d10c      	bne.n	800f576 <_printf_float+0x412>
 800f55c:	e65d      	b.n	800f21a <_printf_float+0xb6>
 800f55e:	2301      	movs	r3, #1
 800f560:	465a      	mov	r2, fp
 800f562:	4631      	mov	r1, r6
 800f564:	4628      	mov	r0, r5
 800f566:	47b8      	blx	r7
 800f568:	3001      	adds	r0, #1
 800f56a:	f43f ae56 	beq.w	800f21a <_printf_float+0xb6>
 800f56e:	f108 0801 	add.w	r8, r8, #1
 800f572:	45d0      	cmp	r8, sl
 800f574:	dbf3      	blt.n	800f55e <_printf_float+0x3fa>
 800f576:	464b      	mov	r3, r9
 800f578:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f57c:	e6df      	b.n	800f33e <_printf_float+0x1da>
 800f57e:	f04f 0800 	mov.w	r8, #0
 800f582:	f104 0b1a 	add.w	fp, r4, #26
 800f586:	e7f4      	b.n	800f572 <_printf_float+0x40e>
 800f588:	2301      	movs	r3, #1
 800f58a:	4642      	mov	r2, r8
 800f58c:	e7e1      	b.n	800f552 <_printf_float+0x3ee>
 800f58e:	2301      	movs	r3, #1
 800f590:	464a      	mov	r2, r9
 800f592:	4631      	mov	r1, r6
 800f594:	4628      	mov	r0, r5
 800f596:	47b8      	blx	r7
 800f598:	3001      	adds	r0, #1
 800f59a:	f43f ae3e 	beq.w	800f21a <_printf_float+0xb6>
 800f59e:	f108 0801 	add.w	r8, r8, #1
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5a6:	1a5b      	subs	r3, r3, r1
 800f5a8:	4543      	cmp	r3, r8
 800f5aa:	dcf0      	bgt.n	800f58e <_printf_float+0x42a>
 800f5ac:	e6fc      	b.n	800f3a8 <_printf_float+0x244>
 800f5ae:	f04f 0800 	mov.w	r8, #0
 800f5b2:	f104 0919 	add.w	r9, r4, #25
 800f5b6:	e7f4      	b.n	800f5a2 <_printf_float+0x43e>

0800f5b8 <_printf_common>:
 800f5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5bc:	4616      	mov	r6, r2
 800f5be:	4698      	mov	r8, r3
 800f5c0:	688a      	ldr	r2, [r1, #8]
 800f5c2:	690b      	ldr	r3, [r1, #16]
 800f5c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	bfb8      	it	lt
 800f5cc:	4613      	movlt	r3, r2
 800f5ce:	6033      	str	r3, [r6, #0]
 800f5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	b10a      	cbz	r2, 800f5de <_printf_common+0x26>
 800f5da:	3301      	adds	r3, #1
 800f5dc:	6033      	str	r3, [r6, #0]
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	0699      	lsls	r1, r3, #26
 800f5e2:	bf42      	ittt	mi
 800f5e4:	6833      	ldrmi	r3, [r6, #0]
 800f5e6:	3302      	addmi	r3, #2
 800f5e8:	6033      	strmi	r3, [r6, #0]
 800f5ea:	6825      	ldr	r5, [r4, #0]
 800f5ec:	f015 0506 	ands.w	r5, r5, #6
 800f5f0:	d106      	bne.n	800f600 <_printf_common+0x48>
 800f5f2:	f104 0a19 	add.w	sl, r4, #25
 800f5f6:	68e3      	ldr	r3, [r4, #12]
 800f5f8:	6832      	ldr	r2, [r6, #0]
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	42ab      	cmp	r3, r5
 800f5fe:	dc26      	bgt.n	800f64e <_printf_common+0x96>
 800f600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f604:	6822      	ldr	r2, [r4, #0]
 800f606:	3b00      	subs	r3, #0
 800f608:	bf18      	it	ne
 800f60a:	2301      	movne	r3, #1
 800f60c:	0692      	lsls	r2, r2, #26
 800f60e:	d42b      	bmi.n	800f668 <_printf_common+0xb0>
 800f610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f614:	4641      	mov	r1, r8
 800f616:	4638      	mov	r0, r7
 800f618:	47c8      	blx	r9
 800f61a:	3001      	adds	r0, #1
 800f61c:	d01e      	beq.n	800f65c <_printf_common+0xa4>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	f003 0306 	and.w	r3, r3, #6
 800f626:	2b04      	cmp	r3, #4
 800f628:	bf02      	ittt	eq
 800f62a:	68e5      	ldreq	r5, [r4, #12]
 800f62c:	6833      	ldreq	r3, [r6, #0]
 800f62e:	1aed      	subeq	r5, r5, r3
 800f630:	68a3      	ldr	r3, [r4, #8]
 800f632:	bf0c      	ite	eq
 800f634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f638:	2500      	movne	r5, #0
 800f63a:	4293      	cmp	r3, r2
 800f63c:	bfc4      	itt	gt
 800f63e:	1a9b      	subgt	r3, r3, r2
 800f640:	18ed      	addgt	r5, r5, r3
 800f642:	2600      	movs	r6, #0
 800f644:	341a      	adds	r4, #26
 800f646:	42b5      	cmp	r5, r6
 800f648:	d11a      	bne.n	800f680 <_printf_common+0xc8>
 800f64a:	2000      	movs	r0, #0
 800f64c:	e008      	b.n	800f660 <_printf_common+0xa8>
 800f64e:	2301      	movs	r3, #1
 800f650:	4652      	mov	r2, sl
 800f652:	4641      	mov	r1, r8
 800f654:	4638      	mov	r0, r7
 800f656:	47c8      	blx	r9
 800f658:	3001      	adds	r0, #1
 800f65a:	d103      	bne.n	800f664 <_printf_common+0xac>
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f664:	3501      	adds	r5, #1
 800f666:	e7c6      	b.n	800f5f6 <_printf_common+0x3e>
 800f668:	18e1      	adds	r1, r4, r3
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	2030      	movs	r0, #48	@ 0x30
 800f66e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f672:	4422      	add	r2, r4
 800f674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f67c:	3302      	adds	r3, #2
 800f67e:	e7c7      	b.n	800f610 <_printf_common+0x58>
 800f680:	2301      	movs	r3, #1
 800f682:	4622      	mov	r2, r4
 800f684:	4641      	mov	r1, r8
 800f686:	4638      	mov	r0, r7
 800f688:	47c8      	blx	r9
 800f68a:	3001      	adds	r0, #1
 800f68c:	d0e6      	beq.n	800f65c <_printf_common+0xa4>
 800f68e:	3601      	adds	r6, #1
 800f690:	e7d9      	b.n	800f646 <_printf_common+0x8e>
	...

0800f694 <_printf_i>:
 800f694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	7e0f      	ldrb	r7, [r1, #24]
 800f69a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f69c:	2f78      	cmp	r7, #120	@ 0x78
 800f69e:	4691      	mov	r9, r2
 800f6a0:	4680      	mov	r8, r0
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	469a      	mov	sl, r3
 800f6a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6aa:	d807      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ac:	2f62      	cmp	r7, #98	@ 0x62
 800f6ae:	d80a      	bhi.n	800f6c6 <_printf_i+0x32>
 800f6b0:	2f00      	cmp	r7, #0
 800f6b2:	f000 80d2 	beq.w	800f85a <_printf_i+0x1c6>
 800f6b6:	2f58      	cmp	r7, #88	@ 0x58
 800f6b8:	f000 80b9 	beq.w	800f82e <_printf_i+0x19a>
 800f6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6c4:	e03a      	b.n	800f73c <_printf_i+0xa8>
 800f6c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f6ca:	2b15      	cmp	r3, #21
 800f6cc:	d8f6      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ce:	a101      	add	r1, pc, #4	@ (adr r1, 800f6d4 <_printf_i+0x40>)
 800f6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f741 	.word	0x0800f741
 800f6dc:	0800f6bd 	.word	0x0800f6bd
 800f6e0:	0800f6bd 	.word	0x0800f6bd
 800f6e4:	0800f6bd 	.word	0x0800f6bd
 800f6e8:	0800f6bd 	.word	0x0800f6bd
 800f6ec:	0800f741 	.word	0x0800f741
 800f6f0:	0800f6bd 	.word	0x0800f6bd
 800f6f4:	0800f6bd 	.word	0x0800f6bd
 800f6f8:	0800f6bd 	.word	0x0800f6bd
 800f6fc:	0800f6bd 	.word	0x0800f6bd
 800f700:	0800f841 	.word	0x0800f841
 800f704:	0800f76b 	.word	0x0800f76b
 800f708:	0800f7fb 	.word	0x0800f7fb
 800f70c:	0800f6bd 	.word	0x0800f6bd
 800f710:	0800f6bd 	.word	0x0800f6bd
 800f714:	0800f863 	.word	0x0800f863
 800f718:	0800f6bd 	.word	0x0800f6bd
 800f71c:	0800f76b 	.word	0x0800f76b
 800f720:	0800f6bd 	.word	0x0800f6bd
 800f724:	0800f6bd 	.word	0x0800f6bd
 800f728:	0800f803 	.word	0x0800f803
 800f72c:	6833      	ldr	r3, [r6, #0]
 800f72e:	1d1a      	adds	r2, r3, #4
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6032      	str	r2, [r6, #0]
 800f734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f73c:	2301      	movs	r3, #1
 800f73e:	e09d      	b.n	800f87c <_printf_i+0x1e8>
 800f740:	6833      	ldr	r3, [r6, #0]
 800f742:	6820      	ldr	r0, [r4, #0]
 800f744:	1d19      	adds	r1, r3, #4
 800f746:	6031      	str	r1, [r6, #0]
 800f748:	0606      	lsls	r6, r0, #24
 800f74a:	d501      	bpl.n	800f750 <_printf_i+0xbc>
 800f74c:	681d      	ldr	r5, [r3, #0]
 800f74e:	e003      	b.n	800f758 <_printf_i+0xc4>
 800f750:	0645      	lsls	r5, r0, #25
 800f752:	d5fb      	bpl.n	800f74c <_printf_i+0xb8>
 800f754:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f758:	2d00      	cmp	r5, #0
 800f75a:	da03      	bge.n	800f764 <_printf_i+0xd0>
 800f75c:	232d      	movs	r3, #45	@ 0x2d
 800f75e:	426d      	negs	r5, r5
 800f760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f764:	4859      	ldr	r0, [pc, #356]	@ (800f8cc <_printf_i+0x238>)
 800f766:	230a      	movs	r3, #10
 800f768:	e011      	b.n	800f78e <_printf_i+0xfa>
 800f76a:	6821      	ldr	r1, [r4, #0]
 800f76c:	6833      	ldr	r3, [r6, #0]
 800f76e:	0608      	lsls	r0, r1, #24
 800f770:	f853 5b04 	ldr.w	r5, [r3], #4
 800f774:	d402      	bmi.n	800f77c <_printf_i+0xe8>
 800f776:	0649      	lsls	r1, r1, #25
 800f778:	bf48      	it	mi
 800f77a:	b2ad      	uxthmi	r5, r5
 800f77c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f77e:	4853      	ldr	r0, [pc, #332]	@ (800f8cc <_printf_i+0x238>)
 800f780:	6033      	str	r3, [r6, #0]
 800f782:	bf14      	ite	ne
 800f784:	230a      	movne	r3, #10
 800f786:	2308      	moveq	r3, #8
 800f788:	2100      	movs	r1, #0
 800f78a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f78e:	6866      	ldr	r6, [r4, #4]
 800f790:	60a6      	str	r6, [r4, #8]
 800f792:	2e00      	cmp	r6, #0
 800f794:	bfa2      	ittt	ge
 800f796:	6821      	ldrge	r1, [r4, #0]
 800f798:	f021 0104 	bicge.w	r1, r1, #4
 800f79c:	6021      	strge	r1, [r4, #0]
 800f79e:	b90d      	cbnz	r5, 800f7a4 <_printf_i+0x110>
 800f7a0:	2e00      	cmp	r6, #0
 800f7a2:	d04b      	beq.n	800f83c <_printf_i+0x1a8>
 800f7a4:	4616      	mov	r6, r2
 800f7a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7aa:	fb03 5711 	mls	r7, r3, r1, r5
 800f7ae:	5dc7      	ldrb	r7, [r0, r7]
 800f7b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7b4:	462f      	mov	r7, r5
 800f7b6:	42bb      	cmp	r3, r7
 800f7b8:	460d      	mov	r5, r1
 800f7ba:	d9f4      	bls.n	800f7a6 <_printf_i+0x112>
 800f7bc:	2b08      	cmp	r3, #8
 800f7be:	d10b      	bne.n	800f7d8 <_printf_i+0x144>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	07df      	lsls	r7, r3, #31
 800f7c4:	d508      	bpl.n	800f7d8 <_printf_i+0x144>
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	6861      	ldr	r1, [r4, #4]
 800f7ca:	4299      	cmp	r1, r3
 800f7cc:	bfde      	ittt	le
 800f7ce:	2330      	movle	r3, #48	@ 0x30
 800f7d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7d8:	1b92      	subs	r2, r2, r6
 800f7da:	6122      	str	r2, [r4, #16]
 800f7dc:	f8cd a000 	str.w	sl, [sp]
 800f7e0:	464b      	mov	r3, r9
 800f7e2:	aa03      	add	r2, sp, #12
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	f7ff fee6 	bl	800f5b8 <_printf_common>
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d14a      	bne.n	800f886 <_printf_i+0x1f2>
 800f7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f4:	b004      	add	sp, #16
 800f7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	f043 0320 	orr.w	r3, r3, #32
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	4833      	ldr	r0, [pc, #204]	@ (800f8d0 <_printf_i+0x23c>)
 800f804:	2778      	movs	r7, #120	@ 0x78
 800f806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	6831      	ldr	r1, [r6, #0]
 800f80e:	061f      	lsls	r7, r3, #24
 800f810:	f851 5b04 	ldr.w	r5, [r1], #4
 800f814:	d402      	bmi.n	800f81c <_printf_i+0x188>
 800f816:	065f      	lsls	r7, r3, #25
 800f818:	bf48      	it	mi
 800f81a:	b2ad      	uxthmi	r5, r5
 800f81c:	6031      	str	r1, [r6, #0]
 800f81e:	07d9      	lsls	r1, r3, #31
 800f820:	bf44      	itt	mi
 800f822:	f043 0320 	orrmi.w	r3, r3, #32
 800f826:	6023      	strmi	r3, [r4, #0]
 800f828:	b11d      	cbz	r5, 800f832 <_printf_i+0x19e>
 800f82a:	2310      	movs	r3, #16
 800f82c:	e7ac      	b.n	800f788 <_printf_i+0xf4>
 800f82e:	4827      	ldr	r0, [pc, #156]	@ (800f8cc <_printf_i+0x238>)
 800f830:	e7e9      	b.n	800f806 <_printf_i+0x172>
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	f023 0320 	bic.w	r3, r3, #32
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	e7f6      	b.n	800f82a <_printf_i+0x196>
 800f83c:	4616      	mov	r6, r2
 800f83e:	e7bd      	b.n	800f7bc <_printf_i+0x128>
 800f840:	6833      	ldr	r3, [r6, #0]
 800f842:	6825      	ldr	r5, [r4, #0]
 800f844:	6961      	ldr	r1, [r4, #20]
 800f846:	1d18      	adds	r0, r3, #4
 800f848:	6030      	str	r0, [r6, #0]
 800f84a:	062e      	lsls	r6, r5, #24
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	d501      	bpl.n	800f854 <_printf_i+0x1c0>
 800f850:	6019      	str	r1, [r3, #0]
 800f852:	e002      	b.n	800f85a <_printf_i+0x1c6>
 800f854:	0668      	lsls	r0, r5, #25
 800f856:	d5fb      	bpl.n	800f850 <_printf_i+0x1bc>
 800f858:	8019      	strh	r1, [r3, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	4616      	mov	r6, r2
 800f860:	e7bc      	b.n	800f7dc <_printf_i+0x148>
 800f862:	6833      	ldr	r3, [r6, #0]
 800f864:	1d1a      	adds	r2, r3, #4
 800f866:	6032      	str	r2, [r6, #0]
 800f868:	681e      	ldr	r6, [r3, #0]
 800f86a:	6862      	ldr	r2, [r4, #4]
 800f86c:	2100      	movs	r1, #0
 800f86e:	4630      	mov	r0, r6
 800f870:	f7f0 fcce 	bl	8000210 <memchr>
 800f874:	b108      	cbz	r0, 800f87a <_printf_i+0x1e6>
 800f876:	1b80      	subs	r0, r0, r6
 800f878:	6060      	str	r0, [r4, #4]
 800f87a:	6863      	ldr	r3, [r4, #4]
 800f87c:	6123      	str	r3, [r4, #16]
 800f87e:	2300      	movs	r3, #0
 800f880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f884:	e7aa      	b.n	800f7dc <_printf_i+0x148>
 800f886:	6923      	ldr	r3, [r4, #16]
 800f888:	4632      	mov	r2, r6
 800f88a:	4649      	mov	r1, r9
 800f88c:	4640      	mov	r0, r8
 800f88e:	47d0      	blx	sl
 800f890:	3001      	adds	r0, #1
 800f892:	d0ad      	beq.n	800f7f0 <_printf_i+0x15c>
 800f894:	6823      	ldr	r3, [r4, #0]
 800f896:	079b      	lsls	r3, r3, #30
 800f898:	d413      	bmi.n	800f8c2 <_printf_i+0x22e>
 800f89a:	68e0      	ldr	r0, [r4, #12]
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	4298      	cmp	r0, r3
 800f8a0:	bfb8      	it	lt
 800f8a2:	4618      	movlt	r0, r3
 800f8a4:	e7a6      	b.n	800f7f4 <_printf_i+0x160>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	47d0      	blx	sl
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d09d      	beq.n	800f7f0 <_printf_i+0x15c>
 800f8b4:	3501      	adds	r5, #1
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	9903      	ldr	r1, [sp, #12]
 800f8ba:	1a5b      	subs	r3, r3, r1
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	dcf2      	bgt.n	800f8a6 <_printf_i+0x212>
 800f8c0:	e7eb      	b.n	800f89a <_printf_i+0x206>
 800f8c2:	2500      	movs	r5, #0
 800f8c4:	f104 0619 	add.w	r6, r4, #25
 800f8c8:	e7f5      	b.n	800f8b6 <_printf_i+0x222>
 800f8ca:	bf00      	nop
 800f8cc:	08014f72 	.word	0x08014f72
 800f8d0:	08014f83 	.word	0x08014f83

0800f8d4 <_scanf_float>:
 800f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d8:	b087      	sub	sp, #28
 800f8da:	4617      	mov	r7, r2
 800f8dc:	9303      	str	r3, [sp, #12]
 800f8de:	688b      	ldr	r3, [r1, #8]
 800f8e0:	1e5a      	subs	r2, r3, #1
 800f8e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f8e6:	bf81      	itttt	hi
 800f8e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f8ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800f8f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f8f4:	608b      	strhi	r3, [r1, #8]
 800f8f6:	680b      	ldr	r3, [r1, #0]
 800f8f8:	460a      	mov	r2, r1
 800f8fa:	f04f 0500 	mov.w	r5, #0
 800f8fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f902:	f842 3b1c 	str.w	r3, [r2], #28
 800f906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f90a:	4680      	mov	r8, r0
 800f90c:	460c      	mov	r4, r1
 800f90e:	bf98      	it	ls
 800f910:	f04f 0b00 	movls.w	fp, #0
 800f914:	9201      	str	r2, [sp, #4]
 800f916:	4616      	mov	r6, r2
 800f918:	46aa      	mov	sl, r5
 800f91a:	46a9      	mov	r9, r5
 800f91c:	9502      	str	r5, [sp, #8]
 800f91e:	68a2      	ldr	r2, [r4, #8]
 800f920:	b152      	cbz	r2, 800f938 <_scanf_float+0x64>
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b4e      	cmp	r3, #78	@ 0x4e
 800f928:	d864      	bhi.n	800f9f4 <_scanf_float+0x120>
 800f92a:	2b40      	cmp	r3, #64	@ 0x40
 800f92c:	d83c      	bhi.n	800f9a8 <_scanf_float+0xd4>
 800f92e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f932:	b2c8      	uxtb	r0, r1
 800f934:	280e      	cmp	r0, #14
 800f936:	d93a      	bls.n	800f9ae <_scanf_float+0xda>
 800f938:	f1b9 0f00 	cmp.w	r9, #0
 800f93c:	d003      	beq.n	800f946 <_scanf_float+0x72>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f94a:	f1ba 0f01 	cmp.w	sl, #1
 800f94e:	f200 8117 	bhi.w	800fb80 <_scanf_float+0x2ac>
 800f952:	9b01      	ldr	r3, [sp, #4]
 800f954:	429e      	cmp	r6, r3
 800f956:	f200 8108 	bhi.w	800fb6a <_scanf_float+0x296>
 800f95a:	2001      	movs	r0, #1
 800f95c:	b007      	add	sp, #28
 800f95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f962:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f966:	2a0d      	cmp	r2, #13
 800f968:	d8e6      	bhi.n	800f938 <_scanf_float+0x64>
 800f96a:	a101      	add	r1, pc, #4	@ (adr r1, 800f970 <_scanf_float+0x9c>)
 800f96c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f970:	0800fab7 	.word	0x0800fab7
 800f974:	0800f939 	.word	0x0800f939
 800f978:	0800f939 	.word	0x0800f939
 800f97c:	0800f939 	.word	0x0800f939
 800f980:	0800fb17 	.word	0x0800fb17
 800f984:	0800faef 	.word	0x0800faef
 800f988:	0800f939 	.word	0x0800f939
 800f98c:	0800f939 	.word	0x0800f939
 800f990:	0800fac5 	.word	0x0800fac5
 800f994:	0800f939 	.word	0x0800f939
 800f998:	0800f939 	.word	0x0800f939
 800f99c:	0800f939 	.word	0x0800f939
 800f9a0:	0800f939 	.word	0x0800f939
 800f9a4:	0800fa7d 	.word	0x0800fa7d
 800f9a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f9ac:	e7db      	b.n	800f966 <_scanf_float+0x92>
 800f9ae:	290e      	cmp	r1, #14
 800f9b0:	d8c2      	bhi.n	800f938 <_scanf_float+0x64>
 800f9b2:	a001      	add	r0, pc, #4	@ (adr r0, 800f9b8 <_scanf_float+0xe4>)
 800f9b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9b8:	0800fa6d 	.word	0x0800fa6d
 800f9bc:	0800f939 	.word	0x0800f939
 800f9c0:	0800fa6d 	.word	0x0800fa6d
 800f9c4:	0800fb03 	.word	0x0800fb03
 800f9c8:	0800f939 	.word	0x0800f939
 800f9cc:	0800fa15 	.word	0x0800fa15
 800f9d0:	0800fa53 	.word	0x0800fa53
 800f9d4:	0800fa53 	.word	0x0800fa53
 800f9d8:	0800fa53 	.word	0x0800fa53
 800f9dc:	0800fa53 	.word	0x0800fa53
 800f9e0:	0800fa53 	.word	0x0800fa53
 800f9e4:	0800fa53 	.word	0x0800fa53
 800f9e8:	0800fa53 	.word	0x0800fa53
 800f9ec:	0800fa53 	.word	0x0800fa53
 800f9f0:	0800fa53 	.word	0x0800fa53
 800f9f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800f9f6:	d809      	bhi.n	800fa0c <_scanf_float+0x138>
 800f9f8:	2b60      	cmp	r3, #96	@ 0x60
 800f9fa:	d8b2      	bhi.n	800f962 <_scanf_float+0x8e>
 800f9fc:	2b54      	cmp	r3, #84	@ 0x54
 800f9fe:	d07b      	beq.n	800faf8 <_scanf_float+0x224>
 800fa00:	2b59      	cmp	r3, #89	@ 0x59
 800fa02:	d199      	bne.n	800f938 <_scanf_float+0x64>
 800fa04:	2d07      	cmp	r5, #7
 800fa06:	d197      	bne.n	800f938 <_scanf_float+0x64>
 800fa08:	2508      	movs	r5, #8
 800fa0a:	e02c      	b.n	800fa66 <_scanf_float+0x192>
 800fa0c:	2b74      	cmp	r3, #116	@ 0x74
 800fa0e:	d073      	beq.n	800faf8 <_scanf_float+0x224>
 800fa10:	2b79      	cmp	r3, #121	@ 0x79
 800fa12:	e7f6      	b.n	800fa02 <_scanf_float+0x12e>
 800fa14:	6821      	ldr	r1, [r4, #0]
 800fa16:	05c8      	lsls	r0, r1, #23
 800fa18:	d51b      	bpl.n	800fa52 <_scanf_float+0x17e>
 800fa1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fa1e:	6021      	str	r1, [r4, #0]
 800fa20:	f109 0901 	add.w	r9, r9, #1
 800fa24:	f1bb 0f00 	cmp.w	fp, #0
 800fa28:	d003      	beq.n	800fa32 <_scanf_float+0x15e>
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa30:	60a2      	str	r2, [r4, #8]
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	60a3      	str	r3, [r4, #8]
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	6123      	str	r3, [r4, #16]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	607b      	str	r3, [r7, #4]
 800fa46:	f340 8087 	ble.w	800fb58 <_scanf_float+0x284>
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	e765      	b.n	800f91e <_scanf_float+0x4a>
 800fa52:	eb1a 0105 	adds.w	r1, sl, r5
 800fa56:	f47f af6f 	bne.w	800f938 <_scanf_float+0x64>
 800fa5a:	6822      	ldr	r2, [r4, #0]
 800fa5c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fa60:	6022      	str	r2, [r4, #0]
 800fa62:	460d      	mov	r5, r1
 800fa64:	468a      	mov	sl, r1
 800fa66:	f806 3b01 	strb.w	r3, [r6], #1
 800fa6a:	e7e2      	b.n	800fa32 <_scanf_float+0x15e>
 800fa6c:	6822      	ldr	r2, [r4, #0]
 800fa6e:	0610      	lsls	r0, r2, #24
 800fa70:	f57f af62 	bpl.w	800f938 <_scanf_float+0x64>
 800fa74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa78:	6022      	str	r2, [r4, #0]
 800fa7a:	e7f4      	b.n	800fa66 <_scanf_float+0x192>
 800fa7c:	f1ba 0f00 	cmp.w	sl, #0
 800fa80:	d10e      	bne.n	800faa0 <_scanf_float+0x1cc>
 800fa82:	f1b9 0f00 	cmp.w	r9, #0
 800fa86:	d10e      	bne.n	800faa6 <_scanf_float+0x1d2>
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa92:	d108      	bne.n	800faa6 <_scanf_float+0x1d2>
 800fa94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa98:	6022      	str	r2, [r4, #0]
 800fa9a:	f04f 0a01 	mov.w	sl, #1
 800fa9e:	e7e2      	b.n	800fa66 <_scanf_float+0x192>
 800faa0:	f1ba 0f02 	cmp.w	sl, #2
 800faa4:	d055      	beq.n	800fb52 <_scanf_float+0x27e>
 800faa6:	2d01      	cmp	r5, #1
 800faa8:	d002      	beq.n	800fab0 <_scanf_float+0x1dc>
 800faaa:	2d04      	cmp	r5, #4
 800faac:	f47f af44 	bne.w	800f938 <_scanf_float+0x64>
 800fab0:	3501      	adds	r5, #1
 800fab2:	b2ed      	uxtb	r5, r5
 800fab4:	e7d7      	b.n	800fa66 <_scanf_float+0x192>
 800fab6:	f1ba 0f01 	cmp.w	sl, #1
 800faba:	f47f af3d 	bne.w	800f938 <_scanf_float+0x64>
 800fabe:	f04f 0a02 	mov.w	sl, #2
 800fac2:	e7d0      	b.n	800fa66 <_scanf_float+0x192>
 800fac4:	b97d      	cbnz	r5, 800fae6 <_scanf_float+0x212>
 800fac6:	f1b9 0f00 	cmp.w	r9, #0
 800faca:	f47f af38 	bne.w	800f93e <_scanf_float+0x6a>
 800face:	6822      	ldr	r2, [r4, #0]
 800fad0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fad4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fad8:	f040 8108 	bne.w	800fcec <_scanf_float+0x418>
 800fadc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	2501      	movs	r5, #1
 800fae4:	e7bf      	b.n	800fa66 <_scanf_float+0x192>
 800fae6:	2d03      	cmp	r5, #3
 800fae8:	d0e2      	beq.n	800fab0 <_scanf_float+0x1dc>
 800faea:	2d05      	cmp	r5, #5
 800faec:	e7de      	b.n	800faac <_scanf_float+0x1d8>
 800faee:	2d02      	cmp	r5, #2
 800faf0:	f47f af22 	bne.w	800f938 <_scanf_float+0x64>
 800faf4:	2503      	movs	r5, #3
 800faf6:	e7b6      	b.n	800fa66 <_scanf_float+0x192>
 800faf8:	2d06      	cmp	r5, #6
 800fafa:	f47f af1d 	bne.w	800f938 <_scanf_float+0x64>
 800fafe:	2507      	movs	r5, #7
 800fb00:	e7b1      	b.n	800fa66 <_scanf_float+0x192>
 800fb02:	6822      	ldr	r2, [r4, #0]
 800fb04:	0591      	lsls	r1, r2, #22
 800fb06:	f57f af17 	bpl.w	800f938 <_scanf_float+0x64>
 800fb0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb0e:	6022      	str	r2, [r4, #0]
 800fb10:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb14:	e7a7      	b.n	800fa66 <_scanf_float+0x192>
 800fb16:	6822      	ldr	r2, [r4, #0]
 800fb18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fb1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fb20:	d006      	beq.n	800fb30 <_scanf_float+0x25c>
 800fb22:	0550      	lsls	r0, r2, #21
 800fb24:	f57f af08 	bpl.w	800f938 <_scanf_float+0x64>
 800fb28:	f1b9 0f00 	cmp.w	r9, #0
 800fb2c:	f000 80de 	beq.w	800fcec <_scanf_float+0x418>
 800fb30:	0591      	lsls	r1, r2, #22
 800fb32:	bf58      	it	pl
 800fb34:	9902      	ldrpl	r1, [sp, #8]
 800fb36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb3a:	bf58      	it	pl
 800fb3c:	eba9 0101 	subpl.w	r1, r9, r1
 800fb40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fb44:	bf58      	it	pl
 800fb46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb4a:	6022      	str	r2, [r4, #0]
 800fb4c:	f04f 0900 	mov.w	r9, #0
 800fb50:	e789      	b.n	800fa66 <_scanf_float+0x192>
 800fb52:	f04f 0a03 	mov.w	sl, #3
 800fb56:	e786      	b.n	800fa66 <_scanf_float+0x192>
 800fb58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb5c:	4639      	mov	r1, r7
 800fb5e:	4640      	mov	r0, r8
 800fb60:	4798      	blx	r3
 800fb62:	2800      	cmp	r0, #0
 800fb64:	f43f aedb 	beq.w	800f91e <_scanf_float+0x4a>
 800fb68:	e6e6      	b.n	800f938 <_scanf_float+0x64>
 800fb6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb72:	463a      	mov	r2, r7
 800fb74:	4640      	mov	r0, r8
 800fb76:	4798      	blx	r3
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	6123      	str	r3, [r4, #16]
 800fb7e:	e6e8      	b.n	800f952 <_scanf_float+0x7e>
 800fb80:	1e6b      	subs	r3, r5, #1
 800fb82:	2b06      	cmp	r3, #6
 800fb84:	d824      	bhi.n	800fbd0 <_scanf_float+0x2fc>
 800fb86:	2d02      	cmp	r5, #2
 800fb88:	d836      	bhi.n	800fbf8 <_scanf_float+0x324>
 800fb8a:	9b01      	ldr	r3, [sp, #4]
 800fb8c:	429e      	cmp	r6, r3
 800fb8e:	f67f aee4 	bls.w	800f95a <_scanf_float+0x86>
 800fb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb9a:	463a      	mov	r2, r7
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4798      	blx	r3
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	3b01      	subs	r3, #1
 800fba4:	6123      	str	r3, [r4, #16]
 800fba6:	e7f0      	b.n	800fb8a <_scanf_float+0x2b6>
 800fba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fbb0:	463a      	mov	r2, r7
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4798      	blx	r3
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbc0:	fa5f fa8a 	uxtb.w	sl, sl
 800fbc4:	f1ba 0f02 	cmp.w	sl, #2
 800fbc8:	d1ee      	bne.n	800fba8 <_scanf_float+0x2d4>
 800fbca:	3d03      	subs	r5, #3
 800fbcc:	b2ed      	uxtb	r5, r5
 800fbce:	1b76      	subs	r6, r6, r5
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	05da      	lsls	r2, r3, #23
 800fbd4:	d530      	bpl.n	800fc38 <_scanf_float+0x364>
 800fbd6:	055b      	lsls	r3, r3, #21
 800fbd8:	d511      	bpl.n	800fbfe <_scanf_float+0x32a>
 800fbda:	9b01      	ldr	r3, [sp, #4]
 800fbdc:	429e      	cmp	r6, r3
 800fbde:	f67f aebc 	bls.w	800f95a <_scanf_float+0x86>
 800fbe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbea:	463a      	mov	r2, r7
 800fbec:	4640      	mov	r0, r8
 800fbee:	4798      	blx	r3
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	6123      	str	r3, [r4, #16]
 800fbf6:	e7f0      	b.n	800fbda <_scanf_float+0x306>
 800fbf8:	46aa      	mov	sl, r5
 800fbfa:	46b3      	mov	fp, r6
 800fbfc:	e7de      	b.n	800fbbc <_scanf_float+0x2e8>
 800fbfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	2965      	cmp	r1, #101	@ 0x65
 800fc06:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc0a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	d00c      	beq.n	800fc2c <_scanf_float+0x358>
 800fc12:	2945      	cmp	r1, #69	@ 0x45
 800fc14:	d00a      	beq.n	800fc2c <_scanf_float+0x358>
 800fc16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	4798      	blx	r3
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	1eb5      	subs	r5, r6, #2
 800fc2a:	6123      	str	r3, [r4, #16]
 800fc2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc30:	463a      	mov	r2, r7
 800fc32:	4640      	mov	r0, r8
 800fc34:	4798      	blx	r3
 800fc36:	462e      	mov	r6, r5
 800fc38:	6822      	ldr	r2, [r4, #0]
 800fc3a:	f012 0210 	ands.w	r2, r2, #16
 800fc3e:	d001      	beq.n	800fc44 <_scanf_float+0x370>
 800fc40:	2000      	movs	r0, #0
 800fc42:	e68b      	b.n	800f95c <_scanf_float+0x88>
 800fc44:	7032      	strb	r2, [r6, #0]
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fc4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc50:	d11c      	bne.n	800fc8c <_scanf_float+0x3b8>
 800fc52:	9b02      	ldr	r3, [sp, #8]
 800fc54:	454b      	cmp	r3, r9
 800fc56:	eba3 0209 	sub.w	r2, r3, r9
 800fc5a:	d123      	bne.n	800fca4 <_scanf_float+0x3d0>
 800fc5c:	9901      	ldr	r1, [sp, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	4640      	mov	r0, r8
 800fc62:	f7ff f9cd 	bl	800f000 <_strtod_r>
 800fc66:	9b03      	ldr	r3, [sp, #12]
 800fc68:	6821      	ldr	r1, [r4, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f011 0f02 	tst.w	r1, #2
 800fc70:	ec57 6b10 	vmov	r6, r7, d0
 800fc74:	f103 0204 	add.w	r2, r3, #4
 800fc78:	d01f      	beq.n	800fcba <_scanf_float+0x3e6>
 800fc7a:	9903      	ldr	r1, [sp, #12]
 800fc7c:	600a      	str	r2, [r1, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	e9c3 6700 	strd	r6, r7, [r3]
 800fc84:	68e3      	ldr	r3, [r4, #12]
 800fc86:	3301      	adds	r3, #1
 800fc88:	60e3      	str	r3, [r4, #12]
 800fc8a:	e7d9      	b.n	800fc40 <_scanf_float+0x36c>
 800fc8c:	9b04      	ldr	r3, [sp, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d0e4      	beq.n	800fc5c <_scanf_float+0x388>
 800fc92:	9905      	ldr	r1, [sp, #20]
 800fc94:	230a      	movs	r3, #10
 800fc96:	3101      	adds	r1, #1
 800fc98:	4640      	mov	r0, r8
 800fc9a:	f002 f923 	bl	8011ee4 <_strtol_r>
 800fc9e:	9b04      	ldr	r3, [sp, #16]
 800fca0:	9e05      	ldr	r6, [sp, #20]
 800fca2:	1ac2      	subs	r2, r0, r3
 800fca4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fca8:	429e      	cmp	r6, r3
 800fcaa:	bf28      	it	cs
 800fcac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fcb0:	4910      	ldr	r1, [pc, #64]	@ (800fcf4 <_scanf_float+0x420>)
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f000 f8e4 	bl	800fe80 <siprintf>
 800fcb8:	e7d0      	b.n	800fc5c <_scanf_float+0x388>
 800fcba:	f011 0f04 	tst.w	r1, #4
 800fcbe:	9903      	ldr	r1, [sp, #12]
 800fcc0:	600a      	str	r2, [r1, #0]
 800fcc2:	d1dc      	bne.n	800fc7e <_scanf_float+0x3aa>
 800fcc4:	681d      	ldr	r5, [r3, #0]
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	463b      	mov	r3, r7
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	f7f0 ff4d 	bl	8000b6c <__aeabi_dcmpun>
 800fcd2:	b128      	cbz	r0, 800fce0 <_scanf_float+0x40c>
 800fcd4:	4808      	ldr	r0, [pc, #32]	@ (800fcf8 <_scanf_float+0x424>)
 800fcd6:	f000 f9ef 	bl	80100b8 <nanf>
 800fcda:	ed85 0a00 	vstr	s0, [r5]
 800fcde:	e7d1      	b.n	800fc84 <_scanf_float+0x3b0>
 800fce0:	4630      	mov	r0, r6
 800fce2:	4639      	mov	r1, r7
 800fce4:	f7f0 ffa0 	bl	8000c28 <__aeabi_d2f>
 800fce8:	6028      	str	r0, [r5, #0]
 800fcea:	e7cb      	b.n	800fc84 <_scanf_float+0x3b0>
 800fcec:	f04f 0900 	mov.w	r9, #0
 800fcf0:	e629      	b.n	800f946 <_scanf_float+0x72>
 800fcf2:	bf00      	nop
 800fcf4:	08014f94 	.word	0x08014f94
 800fcf8:	08015335 	.word	0x08015335

0800fcfc <std>:
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	4604      	mov	r4, r0
 800fd02:	e9c0 3300 	strd	r3, r3, [r0]
 800fd06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd0a:	6083      	str	r3, [r0, #8]
 800fd0c:	8181      	strh	r1, [r0, #12]
 800fd0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd10:	81c2      	strh	r2, [r0, #14]
 800fd12:	6183      	str	r3, [r0, #24]
 800fd14:	4619      	mov	r1, r3
 800fd16:	2208      	movs	r2, #8
 800fd18:	305c      	adds	r0, #92	@ 0x5c
 800fd1a:	f000 f914 	bl	800ff46 <memset>
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <std+0x58>)
 800fd20:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <std+0x5c>)
 800fd24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <std+0x60>)
 800fd28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <std+0x64>)
 800fd2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x68>)
 800fd30:	6224      	str	r4, [r4, #32]
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d006      	beq.n	800fd44 <std+0x48>
 800fd36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd3a:	4294      	cmp	r4, r2
 800fd3c:	d002      	beq.n	800fd44 <std+0x48>
 800fd3e:	33d0      	adds	r3, #208	@ 0xd0
 800fd40:	429c      	cmp	r4, r3
 800fd42:	d105      	bne.n	800fd50 <std+0x54>
 800fd44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd4c:	f000 b99a 	b.w	8010084 <__retarget_lock_init_recursive>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	0800fec1 	.word	0x0800fec1
 800fd58:	0800fee3 	.word	0x0800fee3
 800fd5c:	0800ff1b 	.word	0x0800ff1b
 800fd60:	0800ff3f 	.word	0x0800ff3f
 800fd64:	200025a4 	.word	0x200025a4

0800fd68 <stdio_exit_handler>:
 800fd68:	4a02      	ldr	r2, [pc, #8]	@ (800fd74 <stdio_exit_handler+0xc>)
 800fd6a:	4903      	ldr	r1, [pc, #12]	@ (800fd78 <stdio_exit_handler+0x10>)
 800fd6c:	4803      	ldr	r0, [pc, #12]	@ (800fd7c <stdio_exit_handler+0x14>)
 800fd6e:	f000 b869 	b.w	800fe44 <_fwalk_sglue>
 800fd72:	bf00      	nop
 800fd74:	20000124 	.word	0x20000124
 800fd78:	080122b9 	.word	0x080122b9
 800fd7c:	200002a0 	.word	0x200002a0

0800fd80 <cleanup_stdio>:
 800fd80:	6841      	ldr	r1, [r0, #4]
 800fd82:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <cleanup_stdio+0x34>)
 800fd84:	4299      	cmp	r1, r3
 800fd86:	b510      	push	{r4, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	d001      	beq.n	800fd90 <cleanup_stdio+0x10>
 800fd8c:	f002 fa94 	bl	80122b8 <_fflush_r>
 800fd90:	68a1      	ldr	r1, [r4, #8]
 800fd92:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <cleanup_stdio+0x38>)
 800fd94:	4299      	cmp	r1, r3
 800fd96:	d002      	beq.n	800fd9e <cleanup_stdio+0x1e>
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f002 fa8d 	bl	80122b8 <_fflush_r>
 800fd9e:	68e1      	ldr	r1, [r4, #12]
 800fda0:	4b06      	ldr	r3, [pc, #24]	@ (800fdbc <cleanup_stdio+0x3c>)
 800fda2:	4299      	cmp	r1, r3
 800fda4:	d004      	beq.n	800fdb0 <cleanup_stdio+0x30>
 800fda6:	4620      	mov	r0, r4
 800fda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdac:	f002 ba84 	b.w	80122b8 <_fflush_r>
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	bf00      	nop
 800fdb4:	200025a4 	.word	0x200025a4
 800fdb8:	2000260c 	.word	0x2000260c
 800fdbc:	20002674 	.word	0x20002674

0800fdc0 <global_stdio_init.part.0>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fdf0 <global_stdio_init.part.0+0x30>)
 800fdc4:	4c0b      	ldr	r4, [pc, #44]	@ (800fdf4 <global_stdio_init.part.0+0x34>)
 800fdc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fdf8 <global_stdio_init.part.0+0x38>)
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2104      	movs	r1, #4
 800fdd0:	f7ff ff94 	bl	800fcfc <std>
 800fdd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdd8:	2201      	movs	r2, #1
 800fdda:	2109      	movs	r1, #9
 800fddc:	f7ff ff8e 	bl	800fcfc <std>
 800fde0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fde4:	2202      	movs	r2, #2
 800fde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdea:	2112      	movs	r1, #18
 800fdec:	f7ff bf86 	b.w	800fcfc <std>
 800fdf0:	200026dc 	.word	0x200026dc
 800fdf4:	200025a4 	.word	0x200025a4
 800fdf8:	0800fd69 	.word	0x0800fd69

0800fdfc <__sfp_lock_acquire>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	@ (800fe04 <__sfp_lock_acquire+0x8>)
 800fdfe:	f000 b942 	b.w	8010086 <__retarget_lock_acquire_recursive>
 800fe02:	bf00      	nop
 800fe04:	200026e5 	.word	0x200026e5

0800fe08 <__sfp_lock_release>:
 800fe08:	4801      	ldr	r0, [pc, #4]	@ (800fe10 <__sfp_lock_release+0x8>)
 800fe0a:	f000 b93d 	b.w	8010088 <__retarget_lock_release_recursive>
 800fe0e:	bf00      	nop
 800fe10:	200026e5 	.word	0x200026e5

0800fe14 <__sinit>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	4604      	mov	r4, r0
 800fe18:	f7ff fff0 	bl	800fdfc <__sfp_lock_acquire>
 800fe1c:	6a23      	ldr	r3, [r4, #32]
 800fe1e:	b11b      	cbz	r3, 800fe28 <__sinit+0x14>
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f7ff bff0 	b.w	800fe08 <__sfp_lock_release>
 800fe28:	4b04      	ldr	r3, [pc, #16]	@ (800fe3c <__sinit+0x28>)
 800fe2a:	6223      	str	r3, [r4, #32]
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <__sinit+0x2c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1f5      	bne.n	800fe20 <__sinit+0xc>
 800fe34:	f7ff ffc4 	bl	800fdc0 <global_stdio_init.part.0>
 800fe38:	e7f2      	b.n	800fe20 <__sinit+0xc>
 800fe3a:	bf00      	nop
 800fe3c:	0800fd81 	.word	0x0800fd81
 800fe40:	200026dc 	.word	0x200026dc

0800fe44 <_fwalk_sglue>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4607      	mov	r7, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	2600      	movs	r6, #0
 800fe50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe54:	f1b9 0901 	subs.w	r9, r9, #1
 800fe58:	d505      	bpl.n	800fe66 <_fwalk_sglue+0x22>
 800fe5a:	6824      	ldr	r4, [r4, #0]
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d1f7      	bne.n	800fe50 <_fwalk_sglue+0xc>
 800fe60:	4630      	mov	r0, r6
 800fe62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d907      	bls.n	800fe7c <_fwalk_sglue+0x38>
 800fe6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe70:	3301      	adds	r3, #1
 800fe72:	d003      	beq.n	800fe7c <_fwalk_sglue+0x38>
 800fe74:	4629      	mov	r1, r5
 800fe76:	4638      	mov	r0, r7
 800fe78:	47c0      	blx	r8
 800fe7a:	4306      	orrs	r6, r0
 800fe7c:	3568      	adds	r5, #104	@ 0x68
 800fe7e:	e7e9      	b.n	800fe54 <_fwalk_sglue+0x10>

0800fe80 <siprintf>:
 800fe80:	b40e      	push	{r1, r2, r3}
 800fe82:	b500      	push	{lr}
 800fe84:	b09c      	sub	sp, #112	@ 0x70
 800fe86:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe88:	9002      	str	r0, [sp, #8]
 800fe8a:	9006      	str	r0, [sp, #24]
 800fe8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe90:	4809      	ldr	r0, [pc, #36]	@ (800feb8 <siprintf+0x38>)
 800fe92:	9107      	str	r1, [sp, #28]
 800fe94:	9104      	str	r1, [sp, #16]
 800fe96:	4909      	ldr	r1, [pc, #36]	@ (800febc <siprintf+0x3c>)
 800fe98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe9c:	9105      	str	r1, [sp, #20]
 800fe9e:	6800      	ldr	r0, [r0, #0]
 800fea0:	9301      	str	r3, [sp, #4]
 800fea2:	a902      	add	r1, sp, #8
 800fea4:	f002 f888 	bl	8011fb8 <_svfiprintf_r>
 800fea8:	9b02      	ldr	r3, [sp, #8]
 800feaa:	2200      	movs	r2, #0
 800feac:	701a      	strb	r2, [r3, #0]
 800feae:	b01c      	add	sp, #112	@ 0x70
 800feb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800feb4:	b003      	add	sp, #12
 800feb6:	4770      	bx	lr
 800feb8:	2000029c 	.word	0x2000029c
 800febc:	ffff0208 	.word	0xffff0208

0800fec0 <__sread>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	460c      	mov	r4, r1
 800fec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec8:	f000 f87e 	bl	800ffc8 <_read_r>
 800fecc:	2800      	cmp	r0, #0
 800fece:	bfab      	itete	ge
 800fed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fed2:	89a3      	ldrhlt	r3, [r4, #12]
 800fed4:	181b      	addge	r3, r3, r0
 800fed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800feda:	bfac      	ite	ge
 800fedc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fede:	81a3      	strhlt	r3, [r4, #12]
 800fee0:	bd10      	pop	{r4, pc}

0800fee2 <__swrite>:
 800fee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	461f      	mov	r7, r3
 800fee8:	898b      	ldrh	r3, [r1, #12]
 800feea:	05db      	lsls	r3, r3, #23
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	4616      	mov	r6, r2
 800fef2:	d505      	bpl.n	800ff00 <__swrite+0x1e>
 800fef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef8:	2302      	movs	r3, #2
 800fefa:	2200      	movs	r2, #0
 800fefc:	f000 f852 	bl	800ffa4 <_lseek_r>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff16:	f000 b879 	b.w	801000c <_write_r>

0800ff1a <__sseek>:
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff22:	f000 f83f 	bl	800ffa4 <_lseek_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	bf15      	itete	ne
 800ff2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff36:	81a3      	strheq	r3, [r4, #12]
 800ff38:	bf18      	it	ne
 800ff3a:	81a3      	strhne	r3, [r4, #12]
 800ff3c:	bd10      	pop	{r4, pc}

0800ff3e <__sclose>:
 800ff3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff42:	f000 b81f 	b.w	800ff84 <_close_r>

0800ff46 <memset>:
 800ff46:	4402      	add	r2, r0
 800ff48:	4603      	mov	r3, r0
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d100      	bne.n	800ff50 <memset+0xa>
 800ff4e:	4770      	bx	lr
 800ff50:	f803 1b01 	strb.w	r1, [r3], #1
 800ff54:	e7f9      	b.n	800ff4a <memset+0x4>

0800ff56 <strncmp>:
 800ff56:	b510      	push	{r4, lr}
 800ff58:	b16a      	cbz	r2, 800ff76 <strncmp+0x20>
 800ff5a:	3901      	subs	r1, #1
 800ff5c:	1884      	adds	r4, r0, r2
 800ff5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d103      	bne.n	800ff72 <strncmp+0x1c>
 800ff6a:	42a0      	cmp	r0, r4
 800ff6c:	d001      	beq.n	800ff72 <strncmp+0x1c>
 800ff6e:	2a00      	cmp	r2, #0
 800ff70:	d1f5      	bne.n	800ff5e <strncmp+0x8>
 800ff72:	1ad0      	subs	r0, r2, r3
 800ff74:	bd10      	pop	{r4, pc}
 800ff76:	4610      	mov	r0, r2
 800ff78:	e7fc      	b.n	800ff74 <strncmp+0x1e>
	...

0800ff7c <_localeconv_r>:
 800ff7c:	4800      	ldr	r0, [pc, #0]	@ (800ff80 <_localeconv_r+0x4>)
 800ff7e:	4770      	bx	lr
 800ff80:	20000220 	.word	0x20000220

0800ff84 <_close_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d06      	ldr	r5, [pc, #24]	@ (800ffa0 <_close_r+0x1c>)
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	602b      	str	r3, [r5, #0]
 800ff90:	f7f3 ffaa 	bl	8003ee8 <_close>
 800ff94:	1c43      	adds	r3, r0, #1
 800ff96:	d102      	bne.n	800ff9e <_close_r+0x1a>
 800ff98:	682b      	ldr	r3, [r5, #0]
 800ff9a:	b103      	cbz	r3, 800ff9e <_close_r+0x1a>
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	bd38      	pop	{r3, r4, r5, pc}
 800ffa0:	200026e0 	.word	0x200026e0

0800ffa4 <_lseek_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d07      	ldr	r5, [pc, #28]	@ (800ffc4 <_lseek_r+0x20>)
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	4608      	mov	r0, r1
 800ffac:	4611      	mov	r1, r2
 800ffae:	2200      	movs	r2, #0
 800ffb0:	602a      	str	r2, [r5, #0]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	f7f3 ffbf 	bl	8003f36 <_lseek>
 800ffb8:	1c43      	adds	r3, r0, #1
 800ffba:	d102      	bne.n	800ffc2 <_lseek_r+0x1e>
 800ffbc:	682b      	ldr	r3, [r5, #0]
 800ffbe:	b103      	cbz	r3, 800ffc2 <_lseek_r+0x1e>
 800ffc0:	6023      	str	r3, [r4, #0]
 800ffc2:	bd38      	pop	{r3, r4, r5, pc}
 800ffc4:	200026e0 	.word	0x200026e0

0800ffc8 <_read_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4d07      	ldr	r5, [pc, #28]	@ (800ffe8 <_read_r+0x20>)
 800ffcc:	4604      	mov	r4, r0
 800ffce:	4608      	mov	r0, r1
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	602a      	str	r2, [r5, #0]
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	f7f3 ff4d 	bl	8003e76 <_read>
 800ffdc:	1c43      	adds	r3, r0, #1
 800ffde:	d102      	bne.n	800ffe6 <_read_r+0x1e>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b103      	cbz	r3, 800ffe6 <_read_r+0x1e>
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	200026e0 	.word	0x200026e0

0800ffec <_sbrk_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4d06      	ldr	r5, [pc, #24]	@ (8010008 <_sbrk_r+0x1c>)
 800fff0:	2300      	movs	r3, #0
 800fff2:	4604      	mov	r4, r0
 800fff4:	4608      	mov	r0, r1
 800fff6:	602b      	str	r3, [r5, #0]
 800fff8:	f7f3 ffaa 	bl	8003f50 <_sbrk>
 800fffc:	1c43      	adds	r3, r0, #1
 800fffe:	d102      	bne.n	8010006 <_sbrk_r+0x1a>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	b103      	cbz	r3, 8010006 <_sbrk_r+0x1a>
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	200026e0 	.word	0x200026e0

0801000c <_write_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4d07      	ldr	r5, [pc, #28]	@ (801002c <_write_r+0x20>)
 8010010:	4604      	mov	r4, r0
 8010012:	4608      	mov	r0, r1
 8010014:	4611      	mov	r1, r2
 8010016:	2200      	movs	r2, #0
 8010018:	602a      	str	r2, [r5, #0]
 801001a:	461a      	mov	r2, r3
 801001c:	f7f3 ff48 	bl	8003eb0 <_write>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d102      	bne.n	801002a <_write_r+0x1e>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	b103      	cbz	r3, 801002a <_write_r+0x1e>
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	bd38      	pop	{r3, r4, r5, pc}
 801002c:	200026e0 	.word	0x200026e0

08010030 <__errno>:
 8010030:	4b01      	ldr	r3, [pc, #4]	@ (8010038 <__errno+0x8>)
 8010032:	6818      	ldr	r0, [r3, #0]
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	2000029c 	.word	0x2000029c

0801003c <__libc_init_array>:
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	4d0d      	ldr	r5, [pc, #52]	@ (8010074 <__libc_init_array+0x38>)
 8010040:	4c0d      	ldr	r4, [pc, #52]	@ (8010078 <__libc_init_array+0x3c>)
 8010042:	1b64      	subs	r4, r4, r5
 8010044:	10a4      	asrs	r4, r4, #2
 8010046:	2600      	movs	r6, #0
 8010048:	42a6      	cmp	r6, r4
 801004a:	d109      	bne.n	8010060 <__libc_init_array+0x24>
 801004c:	4d0b      	ldr	r5, [pc, #44]	@ (801007c <__libc_init_array+0x40>)
 801004e:	4c0c      	ldr	r4, [pc, #48]	@ (8010080 <__libc_init_array+0x44>)
 8010050:	f004 fe7e 	bl	8014d50 <_init>
 8010054:	1b64      	subs	r4, r4, r5
 8010056:	10a4      	asrs	r4, r4, #2
 8010058:	2600      	movs	r6, #0
 801005a:	42a6      	cmp	r6, r4
 801005c:	d105      	bne.n	801006a <__libc_init_array+0x2e>
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	f855 3b04 	ldr.w	r3, [r5], #4
 8010064:	4798      	blx	r3
 8010066:	3601      	adds	r6, #1
 8010068:	e7ee      	b.n	8010048 <__libc_init_array+0xc>
 801006a:	f855 3b04 	ldr.w	r3, [r5], #4
 801006e:	4798      	blx	r3
 8010070:	3601      	adds	r6, #1
 8010072:	e7f2      	b.n	801005a <__libc_init_array+0x1e>
 8010074:	080155b8 	.word	0x080155b8
 8010078:	080155b8 	.word	0x080155b8
 801007c:	080155b8 	.word	0x080155b8
 8010080:	080155bc 	.word	0x080155bc

08010084 <__retarget_lock_init_recursive>:
 8010084:	4770      	bx	lr

08010086 <__retarget_lock_acquire_recursive>:
 8010086:	4770      	bx	lr

08010088 <__retarget_lock_release_recursive>:
 8010088:	4770      	bx	lr

0801008a <memcpy>:
 801008a:	440a      	add	r2, r1
 801008c:	4291      	cmp	r1, r2
 801008e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010092:	d100      	bne.n	8010096 <memcpy+0xc>
 8010094:	4770      	bx	lr
 8010096:	b510      	push	{r4, lr}
 8010098:	f811 4b01 	ldrb.w	r4, [r1], #1
 801009c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100a0:	4291      	cmp	r1, r2
 80100a2:	d1f9      	bne.n	8010098 <memcpy+0xe>
 80100a4:	bd10      	pop	{r4, pc}
	...

080100a8 <nan>:
 80100a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100b0 <nan+0x8>
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	00000000 	.word	0x00000000
 80100b4:	7ff80000 	.word	0x7ff80000

080100b8 <nanf>:
 80100b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80100c0 <nanf+0x8>
 80100bc:	4770      	bx	lr
 80100be:	bf00      	nop
 80100c0:	7fc00000 	.word	0x7fc00000

080100c4 <quorem>:
 80100c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	6903      	ldr	r3, [r0, #16]
 80100ca:	690c      	ldr	r4, [r1, #16]
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	4607      	mov	r7, r0
 80100d0:	db7e      	blt.n	80101d0 <quorem+0x10c>
 80100d2:	3c01      	subs	r4, #1
 80100d4:	f101 0814 	add.w	r8, r1, #20
 80100d8:	00a3      	lsls	r3, r4, #2
 80100da:	f100 0514 	add.w	r5, r0, #20
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100ee:	3301      	adds	r3, #1
 80100f0:	429a      	cmp	r2, r3
 80100f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80100fa:	d32e      	bcc.n	801015a <quorem+0x96>
 80100fc:	f04f 0a00 	mov.w	sl, #0
 8010100:	46c4      	mov	ip, r8
 8010102:	46ae      	mov	lr, r5
 8010104:	46d3      	mov	fp, sl
 8010106:	f85c 3b04 	ldr.w	r3, [ip], #4
 801010a:	b298      	uxth	r0, r3
 801010c:	fb06 a000 	mla	r0, r6, r0, sl
 8010110:	0c02      	lsrs	r2, r0, #16
 8010112:	0c1b      	lsrs	r3, r3, #16
 8010114:	fb06 2303 	mla	r3, r6, r3, r2
 8010118:	f8de 2000 	ldr.w	r2, [lr]
 801011c:	b280      	uxth	r0, r0
 801011e:	b292      	uxth	r2, r2
 8010120:	1a12      	subs	r2, r2, r0
 8010122:	445a      	add	r2, fp
 8010124:	f8de 0000 	ldr.w	r0, [lr]
 8010128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801012c:	b29b      	uxth	r3, r3
 801012e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010132:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010136:	b292      	uxth	r2, r2
 8010138:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801013c:	45e1      	cmp	r9, ip
 801013e:	f84e 2b04 	str.w	r2, [lr], #4
 8010142:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010146:	d2de      	bcs.n	8010106 <quorem+0x42>
 8010148:	9b00      	ldr	r3, [sp, #0]
 801014a:	58eb      	ldr	r3, [r5, r3]
 801014c:	b92b      	cbnz	r3, 801015a <quorem+0x96>
 801014e:	9b01      	ldr	r3, [sp, #4]
 8010150:	3b04      	subs	r3, #4
 8010152:	429d      	cmp	r5, r3
 8010154:	461a      	mov	r2, r3
 8010156:	d32f      	bcc.n	80101b8 <quorem+0xf4>
 8010158:	613c      	str	r4, [r7, #16]
 801015a:	4638      	mov	r0, r7
 801015c:	f001 fc5a 	bl	8011a14 <__mcmp>
 8010160:	2800      	cmp	r0, #0
 8010162:	db25      	blt.n	80101b0 <quorem+0xec>
 8010164:	4629      	mov	r1, r5
 8010166:	2000      	movs	r0, #0
 8010168:	f858 2b04 	ldr.w	r2, [r8], #4
 801016c:	f8d1 c000 	ldr.w	ip, [r1]
 8010170:	fa1f fe82 	uxth.w	lr, r2
 8010174:	fa1f f38c 	uxth.w	r3, ip
 8010178:	eba3 030e 	sub.w	r3, r3, lr
 801017c:	4403      	add	r3, r0
 801017e:	0c12      	lsrs	r2, r2, #16
 8010180:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010184:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010188:	b29b      	uxth	r3, r3
 801018a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801018e:	45c1      	cmp	r9, r8
 8010190:	f841 3b04 	str.w	r3, [r1], #4
 8010194:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010198:	d2e6      	bcs.n	8010168 <quorem+0xa4>
 801019a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801019e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101a2:	b922      	cbnz	r2, 80101ae <quorem+0xea>
 80101a4:	3b04      	subs	r3, #4
 80101a6:	429d      	cmp	r5, r3
 80101a8:	461a      	mov	r2, r3
 80101aa:	d30b      	bcc.n	80101c4 <quorem+0x100>
 80101ac:	613c      	str	r4, [r7, #16]
 80101ae:	3601      	adds	r6, #1
 80101b0:	4630      	mov	r0, r6
 80101b2:	b003      	add	sp, #12
 80101b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101b8:	6812      	ldr	r2, [r2, #0]
 80101ba:	3b04      	subs	r3, #4
 80101bc:	2a00      	cmp	r2, #0
 80101be:	d1cb      	bne.n	8010158 <quorem+0x94>
 80101c0:	3c01      	subs	r4, #1
 80101c2:	e7c6      	b.n	8010152 <quorem+0x8e>
 80101c4:	6812      	ldr	r2, [r2, #0]
 80101c6:	3b04      	subs	r3, #4
 80101c8:	2a00      	cmp	r2, #0
 80101ca:	d1ef      	bne.n	80101ac <quorem+0xe8>
 80101cc:	3c01      	subs	r4, #1
 80101ce:	e7ea      	b.n	80101a6 <quorem+0xe2>
 80101d0:	2000      	movs	r0, #0
 80101d2:	e7ee      	b.n	80101b2 <quorem+0xee>
 80101d4:	0000      	movs	r0, r0
	...

080101d8 <_dtoa_r>:
 80101d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101dc:	69c7      	ldr	r7, [r0, #28]
 80101de:	b099      	sub	sp, #100	@ 0x64
 80101e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101e4:	ec55 4b10 	vmov	r4, r5, d0
 80101e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80101ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80101ec:	4683      	mov	fp, r0
 80101ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80101f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80101f2:	b97f      	cbnz	r7, 8010214 <_dtoa_r+0x3c>
 80101f4:	2010      	movs	r0, #16
 80101f6:	f7fe f84b 	bl	800e290 <malloc>
 80101fa:	4602      	mov	r2, r0
 80101fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8010200:	b920      	cbnz	r0, 801020c <_dtoa_r+0x34>
 8010202:	4ba7      	ldr	r3, [pc, #668]	@ (80104a0 <_dtoa_r+0x2c8>)
 8010204:	21ef      	movs	r1, #239	@ 0xef
 8010206:	48a7      	ldr	r0, [pc, #668]	@ (80104a4 <_dtoa_r+0x2cc>)
 8010208:	f002 f898 	bl	801233c <__assert_func>
 801020c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010210:	6007      	str	r7, [r0, #0]
 8010212:	60c7      	str	r7, [r0, #12]
 8010214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010218:	6819      	ldr	r1, [r3, #0]
 801021a:	b159      	cbz	r1, 8010234 <_dtoa_r+0x5c>
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	604a      	str	r2, [r1, #4]
 8010220:	2301      	movs	r3, #1
 8010222:	4093      	lsls	r3, r2
 8010224:	608b      	str	r3, [r1, #8]
 8010226:	4658      	mov	r0, fp
 8010228:	f001 f970 	bl	801150c <_Bfree>
 801022c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010230:	2200      	movs	r2, #0
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	1e2b      	subs	r3, r5, #0
 8010236:	bfb9      	ittee	lt
 8010238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801023c:	9303      	strlt	r3, [sp, #12]
 801023e:	2300      	movge	r3, #0
 8010240:	6033      	strge	r3, [r6, #0]
 8010242:	9f03      	ldr	r7, [sp, #12]
 8010244:	4b98      	ldr	r3, [pc, #608]	@ (80104a8 <_dtoa_r+0x2d0>)
 8010246:	bfbc      	itt	lt
 8010248:	2201      	movlt	r2, #1
 801024a:	6032      	strlt	r2, [r6, #0]
 801024c:	43bb      	bics	r3, r7
 801024e:	d112      	bne.n	8010276 <_dtoa_r+0x9e>
 8010250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010252:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801025c:	4323      	orrs	r3, r4
 801025e:	f000 854d 	beq.w	8010cfc <_dtoa_r+0xb24>
 8010262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010264:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80104bc <_dtoa_r+0x2e4>
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 854f 	beq.w	8010d0c <_dtoa_r+0xb34>
 801026e:	f10a 0303 	add.w	r3, sl, #3
 8010272:	f000 bd49 	b.w	8010d08 <_dtoa_r+0xb30>
 8010276:	ed9d 7b02 	vldr	d7, [sp, #8]
 801027a:	2200      	movs	r2, #0
 801027c:	ec51 0b17 	vmov	r0, r1, d7
 8010280:	2300      	movs	r3, #0
 8010282:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010286:	f7f0 fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 801028a:	4680      	mov	r8, r0
 801028c:	b158      	cbz	r0, 80102a6 <_dtoa_r+0xce>
 801028e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010290:	2301      	movs	r3, #1
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010296:	b113      	cbz	r3, 801029e <_dtoa_r+0xc6>
 8010298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801029a:	4b84      	ldr	r3, [pc, #528]	@ (80104ac <_dtoa_r+0x2d4>)
 801029c:	6013      	str	r3, [r2, #0]
 801029e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80104c0 <_dtoa_r+0x2e8>
 80102a2:	f000 bd33 	b.w	8010d0c <_dtoa_r+0xb34>
 80102a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80102aa:	aa16      	add	r2, sp, #88	@ 0x58
 80102ac:	a917      	add	r1, sp, #92	@ 0x5c
 80102ae:	4658      	mov	r0, fp
 80102b0:	f001 fcd0 	bl	8011c54 <__d2b>
 80102b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102b8:	4681      	mov	r9, r0
 80102ba:	2e00      	cmp	r6, #0
 80102bc:	d077      	beq.n	80103ae <_dtoa_r+0x1d6>
 80102be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80102c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102d8:	4619      	mov	r1, r3
 80102da:	2200      	movs	r2, #0
 80102dc:	4b74      	ldr	r3, [pc, #464]	@ (80104b0 <_dtoa_r+0x2d8>)
 80102de:	f7ef fff3 	bl	80002c8 <__aeabi_dsub>
 80102e2:	a369      	add	r3, pc, #420	@ (adr r3, 8010488 <_dtoa_r+0x2b0>)
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	f7f0 f9a6 	bl	8000638 <__aeabi_dmul>
 80102ec:	a368      	add	r3, pc, #416	@ (adr r3, 8010490 <_dtoa_r+0x2b8>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f7ef ffeb 	bl	80002cc <__adddf3>
 80102f6:	4604      	mov	r4, r0
 80102f8:	4630      	mov	r0, r6
 80102fa:	460d      	mov	r5, r1
 80102fc:	f7f0 f932 	bl	8000564 <__aeabi_i2d>
 8010300:	a365      	add	r3, pc, #404	@ (adr r3, 8010498 <_dtoa_r+0x2c0>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	f7f0 f997 	bl	8000638 <__aeabi_dmul>
 801030a:	4602      	mov	r2, r0
 801030c:	460b      	mov	r3, r1
 801030e:	4620      	mov	r0, r4
 8010310:	4629      	mov	r1, r5
 8010312:	f7ef ffdb 	bl	80002cc <__adddf3>
 8010316:	4604      	mov	r4, r0
 8010318:	460d      	mov	r5, r1
 801031a:	f7f0 fc3d 	bl	8000b98 <__aeabi_d2iz>
 801031e:	2200      	movs	r2, #0
 8010320:	4607      	mov	r7, r0
 8010322:	2300      	movs	r3, #0
 8010324:	4620      	mov	r0, r4
 8010326:	4629      	mov	r1, r5
 8010328:	f7f0 fbf8 	bl	8000b1c <__aeabi_dcmplt>
 801032c:	b140      	cbz	r0, 8010340 <_dtoa_r+0x168>
 801032e:	4638      	mov	r0, r7
 8010330:	f7f0 f918 	bl	8000564 <__aeabi_i2d>
 8010334:	4622      	mov	r2, r4
 8010336:	462b      	mov	r3, r5
 8010338:	f7f0 fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 801033c:	b900      	cbnz	r0, 8010340 <_dtoa_r+0x168>
 801033e:	3f01      	subs	r7, #1
 8010340:	2f16      	cmp	r7, #22
 8010342:	d851      	bhi.n	80103e8 <_dtoa_r+0x210>
 8010344:	4b5b      	ldr	r3, [pc, #364]	@ (80104b4 <_dtoa_r+0x2dc>)
 8010346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010352:	f7f0 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8010356:	2800      	cmp	r0, #0
 8010358:	d048      	beq.n	80103ec <_dtoa_r+0x214>
 801035a:	3f01      	subs	r7, #1
 801035c:	2300      	movs	r3, #0
 801035e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010360:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010362:	1b9b      	subs	r3, r3, r6
 8010364:	1e5a      	subs	r2, r3, #1
 8010366:	bf44      	itt	mi
 8010368:	f1c3 0801 	rsbmi	r8, r3, #1
 801036c:	2300      	movmi	r3, #0
 801036e:	9208      	str	r2, [sp, #32]
 8010370:	bf54      	ite	pl
 8010372:	f04f 0800 	movpl.w	r8, #0
 8010376:	9308      	strmi	r3, [sp, #32]
 8010378:	2f00      	cmp	r7, #0
 801037a:	db39      	blt.n	80103f0 <_dtoa_r+0x218>
 801037c:	9b08      	ldr	r3, [sp, #32]
 801037e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010380:	443b      	add	r3, r7
 8010382:	9308      	str	r3, [sp, #32]
 8010384:	2300      	movs	r3, #0
 8010386:	930a      	str	r3, [sp, #40]	@ 0x28
 8010388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801038a:	2b09      	cmp	r3, #9
 801038c:	d864      	bhi.n	8010458 <_dtoa_r+0x280>
 801038e:	2b05      	cmp	r3, #5
 8010390:	bfc4      	itt	gt
 8010392:	3b04      	subgt	r3, #4
 8010394:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010398:	f1a3 0302 	sub.w	r3, r3, #2
 801039c:	bfcc      	ite	gt
 801039e:	2400      	movgt	r4, #0
 80103a0:	2401      	movle	r4, #1
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d863      	bhi.n	801046e <_dtoa_r+0x296>
 80103a6:	e8df f003 	tbb	[pc, r3]
 80103aa:	372a      	.short	0x372a
 80103ac:	5535      	.short	0x5535
 80103ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80103b2:	441e      	add	r6, r3
 80103b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103b8:	2b20      	cmp	r3, #32
 80103ba:	bfc1      	itttt	gt
 80103bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103c0:	409f      	lslgt	r7, r3
 80103c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103ca:	bfd6      	itet	le
 80103cc:	f1c3 0320 	rsble	r3, r3, #32
 80103d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80103d4:	fa04 f003 	lslle.w	r0, r4, r3
 80103d8:	f7f0 f8b4 	bl	8000544 <__aeabi_ui2d>
 80103dc:	2201      	movs	r2, #1
 80103de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80103e2:	3e01      	subs	r6, #1
 80103e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80103e6:	e777      	b.n	80102d8 <_dtoa_r+0x100>
 80103e8:	2301      	movs	r3, #1
 80103ea:	e7b8      	b.n	801035e <_dtoa_r+0x186>
 80103ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80103ee:	e7b7      	b.n	8010360 <_dtoa_r+0x188>
 80103f0:	427b      	negs	r3, r7
 80103f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80103f4:	2300      	movs	r3, #0
 80103f6:	eba8 0807 	sub.w	r8, r8, r7
 80103fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103fc:	e7c4      	b.n	8010388 <_dtoa_r+0x1b0>
 80103fe:	2300      	movs	r3, #0
 8010400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010404:	2b00      	cmp	r3, #0
 8010406:	dc35      	bgt.n	8010474 <_dtoa_r+0x29c>
 8010408:	2301      	movs	r3, #1
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	9307      	str	r3, [sp, #28]
 801040e:	461a      	mov	r2, r3
 8010410:	920e      	str	r2, [sp, #56]	@ 0x38
 8010412:	e00b      	b.n	801042c <_dtoa_r+0x254>
 8010414:	2301      	movs	r3, #1
 8010416:	e7f3      	b.n	8010400 <_dtoa_r+0x228>
 8010418:	2300      	movs	r3, #0
 801041a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801041c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801041e:	18fb      	adds	r3, r7, r3
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	3301      	adds	r3, #1
 8010424:	2b01      	cmp	r3, #1
 8010426:	9307      	str	r3, [sp, #28]
 8010428:	bfb8      	it	lt
 801042a:	2301      	movlt	r3, #1
 801042c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010430:	2100      	movs	r1, #0
 8010432:	2204      	movs	r2, #4
 8010434:	f102 0514 	add.w	r5, r2, #20
 8010438:	429d      	cmp	r5, r3
 801043a:	d91f      	bls.n	801047c <_dtoa_r+0x2a4>
 801043c:	6041      	str	r1, [r0, #4]
 801043e:	4658      	mov	r0, fp
 8010440:	f001 f824 	bl	801148c <_Balloc>
 8010444:	4682      	mov	sl, r0
 8010446:	2800      	cmp	r0, #0
 8010448:	d13c      	bne.n	80104c4 <_dtoa_r+0x2ec>
 801044a:	4b1b      	ldr	r3, [pc, #108]	@ (80104b8 <_dtoa_r+0x2e0>)
 801044c:	4602      	mov	r2, r0
 801044e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010452:	e6d8      	b.n	8010206 <_dtoa_r+0x2e>
 8010454:	2301      	movs	r3, #1
 8010456:	e7e0      	b.n	801041a <_dtoa_r+0x242>
 8010458:	2401      	movs	r4, #1
 801045a:	2300      	movs	r3, #0
 801045c:	9309      	str	r3, [sp, #36]	@ 0x24
 801045e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010460:	f04f 33ff 	mov.w	r3, #4294967295
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	9307      	str	r3, [sp, #28]
 8010468:	2200      	movs	r2, #0
 801046a:	2312      	movs	r3, #18
 801046c:	e7d0      	b.n	8010410 <_dtoa_r+0x238>
 801046e:	2301      	movs	r3, #1
 8010470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010472:	e7f5      	b.n	8010460 <_dtoa_r+0x288>
 8010474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	9307      	str	r3, [sp, #28]
 801047a:	e7d7      	b.n	801042c <_dtoa_r+0x254>
 801047c:	3101      	adds	r1, #1
 801047e:	0052      	lsls	r2, r2, #1
 8010480:	e7d8      	b.n	8010434 <_dtoa_r+0x25c>
 8010482:	bf00      	nop
 8010484:	f3af 8000 	nop.w
 8010488:	636f4361 	.word	0x636f4361
 801048c:	3fd287a7 	.word	0x3fd287a7
 8010490:	8b60c8b3 	.word	0x8b60c8b3
 8010494:	3fc68a28 	.word	0x3fc68a28
 8010498:	509f79fb 	.word	0x509f79fb
 801049c:	3fd34413 	.word	0x3fd34413
 80104a0:	08014fae 	.word	0x08014fae
 80104a4:	08014fc5 	.word	0x08014fc5
 80104a8:	7ff00000 	.word	0x7ff00000
 80104ac:	08014f71 	.word	0x08014f71
 80104b0:	3ff80000 	.word	0x3ff80000
 80104b4:	08015120 	.word	0x08015120
 80104b8:	0801501d 	.word	0x0801501d
 80104bc:	08014faa 	.word	0x08014faa
 80104c0:	08014f70 	.word	0x08014f70
 80104c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104c8:	6018      	str	r0, [r3, #0]
 80104ca:	9b07      	ldr	r3, [sp, #28]
 80104cc:	2b0e      	cmp	r3, #14
 80104ce:	f200 80a4 	bhi.w	801061a <_dtoa_r+0x442>
 80104d2:	2c00      	cmp	r4, #0
 80104d4:	f000 80a1 	beq.w	801061a <_dtoa_r+0x442>
 80104d8:	2f00      	cmp	r7, #0
 80104da:	dd33      	ble.n	8010544 <_dtoa_r+0x36c>
 80104dc:	4bad      	ldr	r3, [pc, #692]	@ (8010794 <_dtoa_r+0x5bc>)
 80104de:	f007 020f 	and.w	r2, r7, #15
 80104e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104e6:	ed93 7b00 	vldr	d7, [r3]
 80104ea:	05f8      	lsls	r0, r7, #23
 80104ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104f4:	d516      	bpl.n	8010524 <_dtoa_r+0x34c>
 80104f6:	4ba8      	ldr	r3, [pc, #672]	@ (8010798 <_dtoa_r+0x5c0>)
 80104f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010500:	f7f0 f9c4 	bl	800088c <__aeabi_ddiv>
 8010504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010508:	f004 040f 	and.w	r4, r4, #15
 801050c:	2603      	movs	r6, #3
 801050e:	4da2      	ldr	r5, [pc, #648]	@ (8010798 <_dtoa_r+0x5c0>)
 8010510:	b954      	cbnz	r4, 8010528 <_dtoa_r+0x350>
 8010512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801051a:	f7f0 f9b7 	bl	800088c <__aeabi_ddiv>
 801051e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010522:	e028      	b.n	8010576 <_dtoa_r+0x39e>
 8010524:	2602      	movs	r6, #2
 8010526:	e7f2      	b.n	801050e <_dtoa_r+0x336>
 8010528:	07e1      	lsls	r1, r4, #31
 801052a:	d508      	bpl.n	801053e <_dtoa_r+0x366>
 801052c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010534:	f7f0 f880 	bl	8000638 <__aeabi_dmul>
 8010538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801053c:	3601      	adds	r6, #1
 801053e:	1064      	asrs	r4, r4, #1
 8010540:	3508      	adds	r5, #8
 8010542:	e7e5      	b.n	8010510 <_dtoa_r+0x338>
 8010544:	f000 80d2 	beq.w	80106ec <_dtoa_r+0x514>
 8010548:	427c      	negs	r4, r7
 801054a:	4b92      	ldr	r3, [pc, #584]	@ (8010794 <_dtoa_r+0x5bc>)
 801054c:	4d92      	ldr	r5, [pc, #584]	@ (8010798 <_dtoa_r+0x5c0>)
 801054e:	f004 020f 	and.w	r2, r4, #15
 8010552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801055e:	f7f0 f86b 	bl	8000638 <__aeabi_dmul>
 8010562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010566:	1124      	asrs	r4, r4, #4
 8010568:	2300      	movs	r3, #0
 801056a:	2602      	movs	r6, #2
 801056c:	2c00      	cmp	r4, #0
 801056e:	f040 80b2 	bne.w	80106d6 <_dtoa_r+0x4fe>
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1d3      	bne.n	801051e <_dtoa_r+0x346>
 8010576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	f000 80b7 	beq.w	80106f0 <_dtoa_r+0x518>
 8010582:	4b86      	ldr	r3, [pc, #536]	@ (801079c <_dtoa_r+0x5c4>)
 8010584:	2200      	movs	r2, #0
 8010586:	4620      	mov	r0, r4
 8010588:	4629      	mov	r1, r5
 801058a:	f7f0 fac7 	bl	8000b1c <__aeabi_dcmplt>
 801058e:	2800      	cmp	r0, #0
 8010590:	f000 80ae 	beq.w	80106f0 <_dtoa_r+0x518>
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 80aa 	beq.w	80106f0 <_dtoa_r+0x518>
 801059c:	9b00      	ldr	r3, [sp, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	dd37      	ble.n	8010612 <_dtoa_r+0x43a>
 80105a2:	1e7b      	subs	r3, r7, #1
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	4620      	mov	r0, r4
 80105a8:	4b7d      	ldr	r3, [pc, #500]	@ (80107a0 <_dtoa_r+0x5c8>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	4629      	mov	r1, r5
 80105ae:	f7f0 f843 	bl	8000638 <__aeabi_dmul>
 80105b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105b6:	9c00      	ldr	r4, [sp, #0]
 80105b8:	3601      	adds	r6, #1
 80105ba:	4630      	mov	r0, r6
 80105bc:	f7ef ffd2 	bl	8000564 <__aeabi_i2d>
 80105c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105c4:	f7f0 f838 	bl	8000638 <__aeabi_dmul>
 80105c8:	4b76      	ldr	r3, [pc, #472]	@ (80107a4 <_dtoa_r+0x5cc>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	f7ef fe7e 	bl	80002cc <__adddf3>
 80105d0:	4605      	mov	r5, r0
 80105d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	f040 808d 	bne.w	80106f6 <_dtoa_r+0x51e>
 80105dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105e0:	4b71      	ldr	r3, [pc, #452]	@ (80107a8 <_dtoa_r+0x5d0>)
 80105e2:	2200      	movs	r2, #0
 80105e4:	f7ef fe70 	bl	80002c8 <__aeabi_dsub>
 80105e8:	4602      	mov	r2, r0
 80105ea:	460b      	mov	r3, r1
 80105ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105f0:	462a      	mov	r2, r5
 80105f2:	4633      	mov	r3, r6
 80105f4:	f7f0 fab0 	bl	8000b58 <__aeabi_dcmpgt>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	f040 828b 	bne.w	8010b14 <_dtoa_r+0x93c>
 80105fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010602:	462a      	mov	r2, r5
 8010604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010608:	f7f0 fa88 	bl	8000b1c <__aeabi_dcmplt>
 801060c:	2800      	cmp	r0, #0
 801060e:	f040 8128 	bne.w	8010862 <_dtoa_r+0x68a>
 8010612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801061a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801061c:	2b00      	cmp	r3, #0
 801061e:	f2c0 815a 	blt.w	80108d6 <_dtoa_r+0x6fe>
 8010622:	2f0e      	cmp	r7, #14
 8010624:	f300 8157 	bgt.w	80108d6 <_dtoa_r+0x6fe>
 8010628:	4b5a      	ldr	r3, [pc, #360]	@ (8010794 <_dtoa_r+0x5bc>)
 801062a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801062e:	ed93 7b00 	vldr	d7, [r3]
 8010632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010634:	2b00      	cmp	r3, #0
 8010636:	ed8d 7b00 	vstr	d7, [sp]
 801063a:	da03      	bge.n	8010644 <_dtoa_r+0x46c>
 801063c:	9b07      	ldr	r3, [sp, #28]
 801063e:	2b00      	cmp	r3, #0
 8010640:	f340 8101 	ble.w	8010846 <_dtoa_r+0x66e>
 8010644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010648:	4656      	mov	r6, sl
 801064a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801064e:	4620      	mov	r0, r4
 8010650:	4629      	mov	r1, r5
 8010652:	f7f0 f91b 	bl	800088c <__aeabi_ddiv>
 8010656:	f7f0 fa9f 	bl	8000b98 <__aeabi_d2iz>
 801065a:	4680      	mov	r8, r0
 801065c:	f7ef ff82 	bl	8000564 <__aeabi_i2d>
 8010660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010664:	f7ef ffe8 	bl	8000638 <__aeabi_dmul>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	4620      	mov	r0, r4
 801066e:	4629      	mov	r1, r5
 8010670:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010674:	f7ef fe28 	bl	80002c8 <__aeabi_dsub>
 8010678:	f806 4b01 	strb.w	r4, [r6], #1
 801067c:	9d07      	ldr	r5, [sp, #28]
 801067e:	eba6 040a 	sub.w	r4, r6, sl
 8010682:	42a5      	cmp	r5, r4
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	f040 8117 	bne.w	80108ba <_dtoa_r+0x6e2>
 801068c:	f7ef fe1e 	bl	80002cc <__adddf3>
 8010690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010694:	4604      	mov	r4, r0
 8010696:	460d      	mov	r5, r1
 8010698:	f7f0 fa5e 	bl	8000b58 <__aeabi_dcmpgt>
 801069c:	2800      	cmp	r0, #0
 801069e:	f040 80f9 	bne.w	8010894 <_dtoa_r+0x6bc>
 80106a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106a6:	4620      	mov	r0, r4
 80106a8:	4629      	mov	r1, r5
 80106aa:	f7f0 fa2d 	bl	8000b08 <__aeabi_dcmpeq>
 80106ae:	b118      	cbz	r0, 80106b8 <_dtoa_r+0x4e0>
 80106b0:	f018 0f01 	tst.w	r8, #1
 80106b4:	f040 80ee 	bne.w	8010894 <_dtoa_r+0x6bc>
 80106b8:	4649      	mov	r1, r9
 80106ba:	4658      	mov	r0, fp
 80106bc:	f000 ff26 	bl	801150c <_Bfree>
 80106c0:	2300      	movs	r3, #0
 80106c2:	7033      	strb	r3, [r6, #0]
 80106c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106c6:	3701      	adds	r7, #1
 80106c8:	601f      	str	r7, [r3, #0]
 80106ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 831d 	beq.w	8010d0c <_dtoa_r+0xb34>
 80106d2:	601e      	str	r6, [r3, #0]
 80106d4:	e31a      	b.n	8010d0c <_dtoa_r+0xb34>
 80106d6:	07e2      	lsls	r2, r4, #31
 80106d8:	d505      	bpl.n	80106e6 <_dtoa_r+0x50e>
 80106da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106de:	f7ef ffab 	bl	8000638 <__aeabi_dmul>
 80106e2:	3601      	adds	r6, #1
 80106e4:	2301      	movs	r3, #1
 80106e6:	1064      	asrs	r4, r4, #1
 80106e8:	3508      	adds	r5, #8
 80106ea:	e73f      	b.n	801056c <_dtoa_r+0x394>
 80106ec:	2602      	movs	r6, #2
 80106ee:	e742      	b.n	8010576 <_dtoa_r+0x39e>
 80106f0:	9c07      	ldr	r4, [sp, #28]
 80106f2:	9704      	str	r7, [sp, #16]
 80106f4:	e761      	b.n	80105ba <_dtoa_r+0x3e2>
 80106f6:	4b27      	ldr	r3, [pc, #156]	@ (8010794 <_dtoa_r+0x5bc>)
 80106f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010702:	4454      	add	r4, sl
 8010704:	2900      	cmp	r1, #0
 8010706:	d053      	beq.n	80107b0 <_dtoa_r+0x5d8>
 8010708:	4928      	ldr	r1, [pc, #160]	@ (80107ac <_dtoa_r+0x5d4>)
 801070a:	2000      	movs	r0, #0
 801070c:	f7f0 f8be 	bl	800088c <__aeabi_ddiv>
 8010710:	4633      	mov	r3, r6
 8010712:	462a      	mov	r2, r5
 8010714:	f7ef fdd8 	bl	80002c8 <__aeabi_dsub>
 8010718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801071c:	4656      	mov	r6, sl
 801071e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010722:	f7f0 fa39 	bl	8000b98 <__aeabi_d2iz>
 8010726:	4605      	mov	r5, r0
 8010728:	f7ef ff1c 	bl	8000564 <__aeabi_i2d>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010734:	f7ef fdc8 	bl	80002c8 <__aeabi_dsub>
 8010738:	3530      	adds	r5, #48	@ 0x30
 801073a:	4602      	mov	r2, r0
 801073c:	460b      	mov	r3, r1
 801073e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010742:	f806 5b01 	strb.w	r5, [r6], #1
 8010746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801074a:	f7f0 f9e7 	bl	8000b1c <__aeabi_dcmplt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d171      	bne.n	8010836 <_dtoa_r+0x65e>
 8010752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010756:	4911      	ldr	r1, [pc, #68]	@ (801079c <_dtoa_r+0x5c4>)
 8010758:	2000      	movs	r0, #0
 801075a:	f7ef fdb5 	bl	80002c8 <__aeabi_dsub>
 801075e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010762:	f7f0 f9db 	bl	8000b1c <__aeabi_dcmplt>
 8010766:	2800      	cmp	r0, #0
 8010768:	f040 8095 	bne.w	8010896 <_dtoa_r+0x6be>
 801076c:	42a6      	cmp	r6, r4
 801076e:	f43f af50 	beq.w	8010612 <_dtoa_r+0x43a>
 8010772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010776:	4b0a      	ldr	r3, [pc, #40]	@ (80107a0 <_dtoa_r+0x5c8>)
 8010778:	2200      	movs	r2, #0
 801077a:	f7ef ff5d 	bl	8000638 <__aeabi_dmul>
 801077e:	4b08      	ldr	r3, [pc, #32]	@ (80107a0 <_dtoa_r+0x5c8>)
 8010780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010784:	2200      	movs	r2, #0
 8010786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801078a:	f7ef ff55 	bl	8000638 <__aeabi_dmul>
 801078e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010792:	e7c4      	b.n	801071e <_dtoa_r+0x546>
 8010794:	08015120 	.word	0x08015120
 8010798:	080150f8 	.word	0x080150f8
 801079c:	3ff00000 	.word	0x3ff00000
 80107a0:	40240000 	.word	0x40240000
 80107a4:	401c0000 	.word	0x401c0000
 80107a8:	40140000 	.word	0x40140000
 80107ac:	3fe00000 	.word	0x3fe00000
 80107b0:	4631      	mov	r1, r6
 80107b2:	4628      	mov	r0, r5
 80107b4:	f7ef ff40 	bl	8000638 <__aeabi_dmul>
 80107b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80107be:	4656      	mov	r6, sl
 80107c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107c4:	f7f0 f9e8 	bl	8000b98 <__aeabi_d2iz>
 80107c8:	4605      	mov	r5, r0
 80107ca:	f7ef fecb 	bl	8000564 <__aeabi_i2d>
 80107ce:	4602      	mov	r2, r0
 80107d0:	460b      	mov	r3, r1
 80107d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d6:	f7ef fd77 	bl	80002c8 <__aeabi_dsub>
 80107da:	3530      	adds	r5, #48	@ 0x30
 80107dc:	f806 5b01 	strb.w	r5, [r6], #1
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	42a6      	cmp	r6, r4
 80107e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107ea:	f04f 0200 	mov.w	r2, #0
 80107ee:	d124      	bne.n	801083a <_dtoa_r+0x662>
 80107f0:	4bac      	ldr	r3, [pc, #688]	@ (8010aa4 <_dtoa_r+0x8cc>)
 80107f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107f6:	f7ef fd69 	bl	80002cc <__adddf3>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010802:	f7f0 f9a9 	bl	8000b58 <__aeabi_dcmpgt>
 8010806:	2800      	cmp	r0, #0
 8010808:	d145      	bne.n	8010896 <_dtoa_r+0x6be>
 801080a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801080e:	49a5      	ldr	r1, [pc, #660]	@ (8010aa4 <_dtoa_r+0x8cc>)
 8010810:	2000      	movs	r0, #0
 8010812:	f7ef fd59 	bl	80002c8 <__aeabi_dsub>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801081e:	f7f0 f97d 	bl	8000b1c <__aeabi_dcmplt>
 8010822:	2800      	cmp	r0, #0
 8010824:	f43f aef5 	beq.w	8010612 <_dtoa_r+0x43a>
 8010828:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801082a:	1e73      	subs	r3, r6, #1
 801082c:	9315      	str	r3, [sp, #84]	@ 0x54
 801082e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010832:	2b30      	cmp	r3, #48	@ 0x30
 8010834:	d0f8      	beq.n	8010828 <_dtoa_r+0x650>
 8010836:	9f04      	ldr	r7, [sp, #16]
 8010838:	e73e      	b.n	80106b8 <_dtoa_r+0x4e0>
 801083a:	4b9b      	ldr	r3, [pc, #620]	@ (8010aa8 <_dtoa_r+0x8d0>)
 801083c:	f7ef fefc 	bl	8000638 <__aeabi_dmul>
 8010840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010844:	e7bc      	b.n	80107c0 <_dtoa_r+0x5e8>
 8010846:	d10c      	bne.n	8010862 <_dtoa_r+0x68a>
 8010848:	4b98      	ldr	r3, [pc, #608]	@ (8010aac <_dtoa_r+0x8d4>)
 801084a:	2200      	movs	r2, #0
 801084c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010850:	f7ef fef2 	bl	8000638 <__aeabi_dmul>
 8010854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010858:	f7f0 f974 	bl	8000b44 <__aeabi_dcmpge>
 801085c:	2800      	cmp	r0, #0
 801085e:	f000 8157 	beq.w	8010b10 <_dtoa_r+0x938>
 8010862:	2400      	movs	r4, #0
 8010864:	4625      	mov	r5, r4
 8010866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010868:	43db      	mvns	r3, r3
 801086a:	9304      	str	r3, [sp, #16]
 801086c:	4656      	mov	r6, sl
 801086e:	2700      	movs	r7, #0
 8010870:	4621      	mov	r1, r4
 8010872:	4658      	mov	r0, fp
 8010874:	f000 fe4a 	bl	801150c <_Bfree>
 8010878:	2d00      	cmp	r5, #0
 801087a:	d0dc      	beq.n	8010836 <_dtoa_r+0x65e>
 801087c:	b12f      	cbz	r7, 801088a <_dtoa_r+0x6b2>
 801087e:	42af      	cmp	r7, r5
 8010880:	d003      	beq.n	801088a <_dtoa_r+0x6b2>
 8010882:	4639      	mov	r1, r7
 8010884:	4658      	mov	r0, fp
 8010886:	f000 fe41 	bl	801150c <_Bfree>
 801088a:	4629      	mov	r1, r5
 801088c:	4658      	mov	r0, fp
 801088e:	f000 fe3d 	bl	801150c <_Bfree>
 8010892:	e7d0      	b.n	8010836 <_dtoa_r+0x65e>
 8010894:	9704      	str	r7, [sp, #16]
 8010896:	4633      	mov	r3, r6
 8010898:	461e      	mov	r6, r3
 801089a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801089e:	2a39      	cmp	r2, #57	@ 0x39
 80108a0:	d107      	bne.n	80108b2 <_dtoa_r+0x6da>
 80108a2:	459a      	cmp	sl, r3
 80108a4:	d1f8      	bne.n	8010898 <_dtoa_r+0x6c0>
 80108a6:	9a04      	ldr	r2, [sp, #16]
 80108a8:	3201      	adds	r2, #1
 80108aa:	9204      	str	r2, [sp, #16]
 80108ac:	2230      	movs	r2, #48	@ 0x30
 80108ae:	f88a 2000 	strb.w	r2, [sl]
 80108b2:	781a      	ldrb	r2, [r3, #0]
 80108b4:	3201      	adds	r2, #1
 80108b6:	701a      	strb	r2, [r3, #0]
 80108b8:	e7bd      	b.n	8010836 <_dtoa_r+0x65e>
 80108ba:	4b7b      	ldr	r3, [pc, #492]	@ (8010aa8 <_dtoa_r+0x8d0>)
 80108bc:	2200      	movs	r2, #0
 80108be:	f7ef febb 	bl	8000638 <__aeabi_dmul>
 80108c2:	2200      	movs	r2, #0
 80108c4:	2300      	movs	r3, #0
 80108c6:	4604      	mov	r4, r0
 80108c8:	460d      	mov	r5, r1
 80108ca:	f7f0 f91d 	bl	8000b08 <__aeabi_dcmpeq>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	f43f aebb 	beq.w	801064a <_dtoa_r+0x472>
 80108d4:	e6f0      	b.n	80106b8 <_dtoa_r+0x4e0>
 80108d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108d8:	2a00      	cmp	r2, #0
 80108da:	f000 80db 	beq.w	8010a94 <_dtoa_r+0x8bc>
 80108de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e0:	2a01      	cmp	r2, #1
 80108e2:	f300 80bf 	bgt.w	8010a64 <_dtoa_r+0x88c>
 80108e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80108e8:	2a00      	cmp	r2, #0
 80108ea:	f000 80b7 	beq.w	8010a5c <_dtoa_r+0x884>
 80108ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108f4:	4646      	mov	r6, r8
 80108f6:	9a08      	ldr	r2, [sp, #32]
 80108f8:	2101      	movs	r1, #1
 80108fa:	441a      	add	r2, r3
 80108fc:	4658      	mov	r0, fp
 80108fe:	4498      	add	r8, r3
 8010900:	9208      	str	r2, [sp, #32]
 8010902:	f000 ff01 	bl	8011708 <__i2b>
 8010906:	4605      	mov	r5, r0
 8010908:	b15e      	cbz	r6, 8010922 <_dtoa_r+0x74a>
 801090a:	9b08      	ldr	r3, [sp, #32]
 801090c:	2b00      	cmp	r3, #0
 801090e:	dd08      	ble.n	8010922 <_dtoa_r+0x74a>
 8010910:	42b3      	cmp	r3, r6
 8010912:	9a08      	ldr	r2, [sp, #32]
 8010914:	bfa8      	it	ge
 8010916:	4633      	movge	r3, r6
 8010918:	eba8 0803 	sub.w	r8, r8, r3
 801091c:	1af6      	subs	r6, r6, r3
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	9308      	str	r3, [sp, #32]
 8010922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010924:	b1f3      	cbz	r3, 8010964 <_dtoa_r+0x78c>
 8010926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 80b7 	beq.w	8010a9c <_dtoa_r+0x8c4>
 801092e:	b18c      	cbz	r4, 8010954 <_dtoa_r+0x77c>
 8010930:	4629      	mov	r1, r5
 8010932:	4622      	mov	r2, r4
 8010934:	4658      	mov	r0, fp
 8010936:	f000 ffa7 	bl	8011888 <__pow5mult>
 801093a:	464a      	mov	r2, r9
 801093c:	4601      	mov	r1, r0
 801093e:	4605      	mov	r5, r0
 8010940:	4658      	mov	r0, fp
 8010942:	f000 fef7 	bl	8011734 <__multiply>
 8010946:	4649      	mov	r1, r9
 8010948:	9004      	str	r0, [sp, #16]
 801094a:	4658      	mov	r0, fp
 801094c:	f000 fdde 	bl	801150c <_Bfree>
 8010950:	9b04      	ldr	r3, [sp, #16]
 8010952:	4699      	mov	r9, r3
 8010954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010956:	1b1a      	subs	r2, r3, r4
 8010958:	d004      	beq.n	8010964 <_dtoa_r+0x78c>
 801095a:	4649      	mov	r1, r9
 801095c:	4658      	mov	r0, fp
 801095e:	f000 ff93 	bl	8011888 <__pow5mult>
 8010962:	4681      	mov	r9, r0
 8010964:	2101      	movs	r1, #1
 8010966:	4658      	mov	r0, fp
 8010968:	f000 fece 	bl	8011708 <__i2b>
 801096c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801096e:	4604      	mov	r4, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 81cf 	beq.w	8010d14 <_dtoa_r+0xb3c>
 8010976:	461a      	mov	r2, r3
 8010978:	4601      	mov	r1, r0
 801097a:	4658      	mov	r0, fp
 801097c:	f000 ff84 	bl	8011888 <__pow5mult>
 8010980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010982:	2b01      	cmp	r3, #1
 8010984:	4604      	mov	r4, r0
 8010986:	f300 8095 	bgt.w	8010ab4 <_dtoa_r+0x8dc>
 801098a:	9b02      	ldr	r3, [sp, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	f040 8087 	bne.w	8010aa0 <_dtoa_r+0x8c8>
 8010992:	9b03      	ldr	r3, [sp, #12]
 8010994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010998:	2b00      	cmp	r3, #0
 801099a:	f040 8089 	bne.w	8010ab0 <_dtoa_r+0x8d8>
 801099e:	9b03      	ldr	r3, [sp, #12]
 80109a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109a4:	0d1b      	lsrs	r3, r3, #20
 80109a6:	051b      	lsls	r3, r3, #20
 80109a8:	b12b      	cbz	r3, 80109b6 <_dtoa_r+0x7de>
 80109aa:	9b08      	ldr	r3, [sp, #32]
 80109ac:	3301      	adds	r3, #1
 80109ae:	9308      	str	r3, [sp, #32]
 80109b0:	f108 0801 	add.w	r8, r8, #1
 80109b4:	2301      	movs	r3, #1
 80109b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f000 81b0 	beq.w	8010d20 <_dtoa_r+0xb48>
 80109c0:	6923      	ldr	r3, [r4, #16]
 80109c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109c6:	6918      	ldr	r0, [r3, #16]
 80109c8:	f000 fe52 	bl	8011670 <__hi0bits>
 80109cc:	f1c0 0020 	rsb	r0, r0, #32
 80109d0:	9b08      	ldr	r3, [sp, #32]
 80109d2:	4418      	add	r0, r3
 80109d4:	f010 001f 	ands.w	r0, r0, #31
 80109d8:	d077      	beq.n	8010aca <_dtoa_r+0x8f2>
 80109da:	f1c0 0320 	rsb	r3, r0, #32
 80109de:	2b04      	cmp	r3, #4
 80109e0:	dd6b      	ble.n	8010aba <_dtoa_r+0x8e2>
 80109e2:	9b08      	ldr	r3, [sp, #32]
 80109e4:	f1c0 001c 	rsb	r0, r0, #28
 80109e8:	4403      	add	r3, r0
 80109ea:	4480      	add	r8, r0
 80109ec:	4406      	add	r6, r0
 80109ee:	9308      	str	r3, [sp, #32]
 80109f0:	f1b8 0f00 	cmp.w	r8, #0
 80109f4:	dd05      	ble.n	8010a02 <_dtoa_r+0x82a>
 80109f6:	4649      	mov	r1, r9
 80109f8:	4642      	mov	r2, r8
 80109fa:	4658      	mov	r0, fp
 80109fc:	f000 ff9e 	bl	801193c <__lshift>
 8010a00:	4681      	mov	r9, r0
 8010a02:	9b08      	ldr	r3, [sp, #32]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	dd05      	ble.n	8010a14 <_dtoa_r+0x83c>
 8010a08:	4621      	mov	r1, r4
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	4658      	mov	r0, fp
 8010a0e:	f000 ff95 	bl	801193c <__lshift>
 8010a12:	4604      	mov	r4, r0
 8010a14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d059      	beq.n	8010ace <_dtoa_r+0x8f6>
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	4648      	mov	r0, r9
 8010a1e:	f000 fff9 	bl	8011a14 <__mcmp>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	da53      	bge.n	8010ace <_dtoa_r+0x8f6>
 8010a26:	1e7b      	subs	r3, r7, #1
 8010a28:	9304      	str	r3, [sp, #16]
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	220a      	movs	r2, #10
 8010a30:	4658      	mov	r0, fp
 8010a32:	f000 fd8d 	bl	8011550 <__multadd>
 8010a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a38:	4681      	mov	r9, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f000 8172 	beq.w	8010d24 <_dtoa_r+0xb4c>
 8010a40:	2300      	movs	r3, #0
 8010a42:	4629      	mov	r1, r5
 8010a44:	220a      	movs	r2, #10
 8010a46:	4658      	mov	r0, fp
 8010a48:	f000 fd82 	bl	8011550 <__multadd>
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	4605      	mov	r5, r0
 8010a52:	dc67      	bgt.n	8010b24 <_dtoa_r+0x94c>
 8010a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	dc41      	bgt.n	8010ade <_dtoa_r+0x906>
 8010a5a:	e063      	b.n	8010b24 <_dtoa_r+0x94c>
 8010a5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a62:	e746      	b.n	80108f2 <_dtoa_r+0x71a>
 8010a64:	9b07      	ldr	r3, [sp, #28]
 8010a66:	1e5c      	subs	r4, r3, #1
 8010a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a6a:	42a3      	cmp	r3, r4
 8010a6c:	bfbf      	itttt	lt
 8010a6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a74:	1ae3      	sublt	r3, r4, r3
 8010a76:	bfb4      	ite	lt
 8010a78:	18d2      	addlt	r2, r2, r3
 8010a7a:	1b1c      	subge	r4, r3, r4
 8010a7c:	9b07      	ldr	r3, [sp, #28]
 8010a7e:	bfbc      	itt	lt
 8010a80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010a82:	2400      	movlt	r4, #0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	bfb5      	itete	lt
 8010a88:	eba8 0603 	sublt.w	r6, r8, r3
 8010a8c:	9b07      	ldrge	r3, [sp, #28]
 8010a8e:	2300      	movlt	r3, #0
 8010a90:	4646      	movge	r6, r8
 8010a92:	e730      	b.n	80108f6 <_dtoa_r+0x71e>
 8010a94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010a98:	4646      	mov	r6, r8
 8010a9a:	e735      	b.n	8010908 <_dtoa_r+0x730>
 8010a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a9e:	e75c      	b.n	801095a <_dtoa_r+0x782>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	e788      	b.n	80109b6 <_dtoa_r+0x7de>
 8010aa4:	3fe00000 	.word	0x3fe00000
 8010aa8:	40240000 	.word	0x40240000
 8010aac:	40140000 	.word	0x40140000
 8010ab0:	9b02      	ldr	r3, [sp, #8]
 8010ab2:	e780      	b.n	80109b6 <_dtoa_r+0x7de>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ab8:	e782      	b.n	80109c0 <_dtoa_r+0x7e8>
 8010aba:	d099      	beq.n	80109f0 <_dtoa_r+0x818>
 8010abc:	9a08      	ldr	r2, [sp, #32]
 8010abe:	331c      	adds	r3, #28
 8010ac0:	441a      	add	r2, r3
 8010ac2:	4498      	add	r8, r3
 8010ac4:	441e      	add	r6, r3
 8010ac6:	9208      	str	r2, [sp, #32]
 8010ac8:	e792      	b.n	80109f0 <_dtoa_r+0x818>
 8010aca:	4603      	mov	r3, r0
 8010acc:	e7f6      	b.n	8010abc <_dtoa_r+0x8e4>
 8010ace:	9b07      	ldr	r3, [sp, #28]
 8010ad0:	9704      	str	r7, [sp, #16]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	dc20      	bgt.n	8010b18 <_dtoa_r+0x940>
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ada:	2b02      	cmp	r3, #2
 8010adc:	dd1e      	ble.n	8010b1c <_dtoa_r+0x944>
 8010ade:	9b00      	ldr	r3, [sp, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f47f aec0 	bne.w	8010866 <_dtoa_r+0x68e>
 8010ae6:	4621      	mov	r1, r4
 8010ae8:	2205      	movs	r2, #5
 8010aea:	4658      	mov	r0, fp
 8010aec:	f000 fd30 	bl	8011550 <__multadd>
 8010af0:	4601      	mov	r1, r0
 8010af2:	4604      	mov	r4, r0
 8010af4:	4648      	mov	r0, r9
 8010af6:	f000 ff8d 	bl	8011a14 <__mcmp>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	f77f aeb3 	ble.w	8010866 <_dtoa_r+0x68e>
 8010b00:	4656      	mov	r6, sl
 8010b02:	2331      	movs	r3, #49	@ 0x31
 8010b04:	f806 3b01 	strb.w	r3, [r6], #1
 8010b08:	9b04      	ldr	r3, [sp, #16]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	9304      	str	r3, [sp, #16]
 8010b0e:	e6ae      	b.n	801086e <_dtoa_r+0x696>
 8010b10:	9c07      	ldr	r4, [sp, #28]
 8010b12:	9704      	str	r7, [sp, #16]
 8010b14:	4625      	mov	r5, r4
 8010b16:	e7f3      	b.n	8010b00 <_dtoa_r+0x928>
 8010b18:	9b07      	ldr	r3, [sp, #28]
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f000 8104 	beq.w	8010d2c <_dtoa_r+0xb54>
 8010b24:	2e00      	cmp	r6, #0
 8010b26:	dd05      	ble.n	8010b34 <_dtoa_r+0x95c>
 8010b28:	4629      	mov	r1, r5
 8010b2a:	4632      	mov	r2, r6
 8010b2c:	4658      	mov	r0, fp
 8010b2e:	f000 ff05 	bl	801193c <__lshift>
 8010b32:	4605      	mov	r5, r0
 8010b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d05a      	beq.n	8010bf0 <_dtoa_r+0xa18>
 8010b3a:	6869      	ldr	r1, [r5, #4]
 8010b3c:	4658      	mov	r0, fp
 8010b3e:	f000 fca5 	bl	801148c <_Balloc>
 8010b42:	4606      	mov	r6, r0
 8010b44:	b928      	cbnz	r0, 8010b52 <_dtoa_r+0x97a>
 8010b46:	4b84      	ldr	r3, [pc, #528]	@ (8010d58 <_dtoa_r+0xb80>)
 8010b48:	4602      	mov	r2, r0
 8010b4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b4e:	f7ff bb5a 	b.w	8010206 <_dtoa_r+0x2e>
 8010b52:	692a      	ldr	r2, [r5, #16]
 8010b54:	3202      	adds	r2, #2
 8010b56:	0092      	lsls	r2, r2, #2
 8010b58:	f105 010c 	add.w	r1, r5, #12
 8010b5c:	300c      	adds	r0, #12
 8010b5e:	f7ff fa94 	bl	801008a <memcpy>
 8010b62:	2201      	movs	r2, #1
 8010b64:	4631      	mov	r1, r6
 8010b66:	4658      	mov	r0, fp
 8010b68:	f000 fee8 	bl	801193c <__lshift>
 8010b6c:	f10a 0301 	add.w	r3, sl, #1
 8010b70:	9307      	str	r3, [sp, #28]
 8010b72:	9b00      	ldr	r3, [sp, #0]
 8010b74:	4453      	add	r3, sl
 8010b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b78:	9b02      	ldr	r3, [sp, #8]
 8010b7a:	f003 0301 	and.w	r3, r3, #1
 8010b7e:	462f      	mov	r7, r5
 8010b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b82:	4605      	mov	r5, r0
 8010b84:	9b07      	ldr	r3, [sp, #28]
 8010b86:	4621      	mov	r1, r4
 8010b88:	3b01      	subs	r3, #1
 8010b8a:	4648      	mov	r0, r9
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	f7ff fa99 	bl	80100c4 <quorem>
 8010b92:	4639      	mov	r1, r7
 8010b94:	9002      	str	r0, [sp, #8]
 8010b96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b9a:	4648      	mov	r0, r9
 8010b9c:	f000 ff3a 	bl	8011a14 <__mcmp>
 8010ba0:	462a      	mov	r2, r5
 8010ba2:	9008      	str	r0, [sp, #32]
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	4658      	mov	r0, fp
 8010ba8:	f000 ff50 	bl	8011a4c <__mdiff>
 8010bac:	68c2      	ldr	r2, [r0, #12]
 8010bae:	4606      	mov	r6, r0
 8010bb0:	bb02      	cbnz	r2, 8010bf4 <_dtoa_r+0xa1c>
 8010bb2:	4601      	mov	r1, r0
 8010bb4:	4648      	mov	r0, r9
 8010bb6:	f000 ff2d 	bl	8011a14 <__mcmp>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4658      	mov	r0, fp
 8010bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010bc2:	f000 fca3 	bl	801150c <_Bfree>
 8010bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bca:	9e07      	ldr	r6, [sp, #28]
 8010bcc:	ea43 0102 	orr.w	r1, r3, r2
 8010bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bd2:	4319      	orrs	r1, r3
 8010bd4:	d110      	bne.n	8010bf8 <_dtoa_r+0xa20>
 8010bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010bda:	d029      	beq.n	8010c30 <_dtoa_r+0xa58>
 8010bdc:	9b08      	ldr	r3, [sp, #32]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	dd02      	ble.n	8010be8 <_dtoa_r+0xa10>
 8010be2:	9b02      	ldr	r3, [sp, #8]
 8010be4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010be8:	9b00      	ldr	r3, [sp, #0]
 8010bea:	f883 8000 	strb.w	r8, [r3]
 8010bee:	e63f      	b.n	8010870 <_dtoa_r+0x698>
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	e7bb      	b.n	8010b6c <_dtoa_r+0x994>
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	e7e1      	b.n	8010bbc <_dtoa_r+0x9e4>
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	db04      	blt.n	8010c08 <_dtoa_r+0xa30>
 8010bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c00:	430b      	orrs	r3, r1
 8010c02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c04:	430b      	orrs	r3, r1
 8010c06:	d120      	bne.n	8010c4a <_dtoa_r+0xa72>
 8010c08:	2a00      	cmp	r2, #0
 8010c0a:	dded      	ble.n	8010be8 <_dtoa_r+0xa10>
 8010c0c:	4649      	mov	r1, r9
 8010c0e:	2201      	movs	r2, #1
 8010c10:	4658      	mov	r0, fp
 8010c12:	f000 fe93 	bl	801193c <__lshift>
 8010c16:	4621      	mov	r1, r4
 8010c18:	4681      	mov	r9, r0
 8010c1a:	f000 fefb 	bl	8011a14 <__mcmp>
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	dc03      	bgt.n	8010c2a <_dtoa_r+0xa52>
 8010c22:	d1e1      	bne.n	8010be8 <_dtoa_r+0xa10>
 8010c24:	f018 0f01 	tst.w	r8, #1
 8010c28:	d0de      	beq.n	8010be8 <_dtoa_r+0xa10>
 8010c2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c2e:	d1d8      	bne.n	8010be2 <_dtoa_r+0xa0a>
 8010c30:	9a00      	ldr	r2, [sp, #0]
 8010c32:	2339      	movs	r3, #57	@ 0x39
 8010c34:	7013      	strb	r3, [r2, #0]
 8010c36:	4633      	mov	r3, r6
 8010c38:	461e      	mov	r6, r3
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c40:	2a39      	cmp	r2, #57	@ 0x39
 8010c42:	d052      	beq.n	8010cea <_dtoa_r+0xb12>
 8010c44:	3201      	adds	r2, #1
 8010c46:	701a      	strb	r2, [r3, #0]
 8010c48:	e612      	b.n	8010870 <_dtoa_r+0x698>
 8010c4a:	2a00      	cmp	r2, #0
 8010c4c:	dd07      	ble.n	8010c5e <_dtoa_r+0xa86>
 8010c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c52:	d0ed      	beq.n	8010c30 <_dtoa_r+0xa58>
 8010c54:	9a00      	ldr	r2, [sp, #0]
 8010c56:	f108 0301 	add.w	r3, r8, #1
 8010c5a:	7013      	strb	r3, [r2, #0]
 8010c5c:	e608      	b.n	8010870 <_dtoa_r+0x698>
 8010c5e:	9b07      	ldr	r3, [sp, #28]
 8010c60:	9a07      	ldr	r2, [sp, #28]
 8010c62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d028      	beq.n	8010cbe <_dtoa_r+0xae6>
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	2300      	movs	r3, #0
 8010c70:	220a      	movs	r2, #10
 8010c72:	4658      	mov	r0, fp
 8010c74:	f000 fc6c 	bl	8011550 <__multadd>
 8010c78:	42af      	cmp	r7, r5
 8010c7a:	4681      	mov	r9, r0
 8010c7c:	f04f 0300 	mov.w	r3, #0
 8010c80:	f04f 020a 	mov.w	r2, #10
 8010c84:	4639      	mov	r1, r7
 8010c86:	4658      	mov	r0, fp
 8010c88:	d107      	bne.n	8010c9a <_dtoa_r+0xac2>
 8010c8a:	f000 fc61 	bl	8011550 <__multadd>
 8010c8e:	4607      	mov	r7, r0
 8010c90:	4605      	mov	r5, r0
 8010c92:	9b07      	ldr	r3, [sp, #28]
 8010c94:	3301      	adds	r3, #1
 8010c96:	9307      	str	r3, [sp, #28]
 8010c98:	e774      	b.n	8010b84 <_dtoa_r+0x9ac>
 8010c9a:	f000 fc59 	bl	8011550 <__multadd>
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	4607      	mov	r7, r0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	220a      	movs	r2, #10
 8010ca6:	4658      	mov	r0, fp
 8010ca8:	f000 fc52 	bl	8011550 <__multadd>
 8010cac:	4605      	mov	r5, r0
 8010cae:	e7f0      	b.n	8010c92 <_dtoa_r+0xaba>
 8010cb0:	9b00      	ldr	r3, [sp, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	bfcc      	ite	gt
 8010cb6:	461e      	movgt	r6, r3
 8010cb8:	2601      	movle	r6, #1
 8010cba:	4456      	add	r6, sl
 8010cbc:	2700      	movs	r7, #0
 8010cbe:	4649      	mov	r1, r9
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	4658      	mov	r0, fp
 8010cc4:	f000 fe3a 	bl	801193c <__lshift>
 8010cc8:	4621      	mov	r1, r4
 8010cca:	4681      	mov	r9, r0
 8010ccc:	f000 fea2 	bl	8011a14 <__mcmp>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	dcb0      	bgt.n	8010c36 <_dtoa_r+0xa5e>
 8010cd4:	d102      	bne.n	8010cdc <_dtoa_r+0xb04>
 8010cd6:	f018 0f01 	tst.w	r8, #1
 8010cda:	d1ac      	bne.n	8010c36 <_dtoa_r+0xa5e>
 8010cdc:	4633      	mov	r3, r6
 8010cde:	461e      	mov	r6, r3
 8010ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ce4:	2a30      	cmp	r2, #48	@ 0x30
 8010ce6:	d0fa      	beq.n	8010cde <_dtoa_r+0xb06>
 8010ce8:	e5c2      	b.n	8010870 <_dtoa_r+0x698>
 8010cea:	459a      	cmp	sl, r3
 8010cec:	d1a4      	bne.n	8010c38 <_dtoa_r+0xa60>
 8010cee:	9b04      	ldr	r3, [sp, #16]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	9304      	str	r3, [sp, #16]
 8010cf4:	2331      	movs	r3, #49	@ 0x31
 8010cf6:	f88a 3000 	strb.w	r3, [sl]
 8010cfa:	e5b9      	b.n	8010870 <_dtoa_r+0x698>
 8010cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d5c <_dtoa_r+0xb84>
 8010d02:	b11b      	cbz	r3, 8010d0c <_dtoa_r+0xb34>
 8010d04:	f10a 0308 	add.w	r3, sl, #8
 8010d08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d0a:	6013      	str	r3, [r2, #0]
 8010d0c:	4650      	mov	r0, sl
 8010d0e:	b019      	add	sp, #100	@ 0x64
 8010d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	f77f ae37 	ble.w	801098a <_dtoa_r+0x7b2>
 8010d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d20:	2001      	movs	r0, #1
 8010d22:	e655      	b.n	80109d0 <_dtoa_r+0x7f8>
 8010d24:	9b00      	ldr	r3, [sp, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f77f aed6 	ble.w	8010ad8 <_dtoa_r+0x900>
 8010d2c:	4656      	mov	r6, sl
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4648      	mov	r0, r9
 8010d32:	f7ff f9c7 	bl	80100c4 <quorem>
 8010d36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010d3a:	f806 8b01 	strb.w	r8, [r6], #1
 8010d3e:	9b00      	ldr	r3, [sp, #0]
 8010d40:	eba6 020a 	sub.w	r2, r6, sl
 8010d44:	4293      	cmp	r3, r2
 8010d46:	ddb3      	ble.n	8010cb0 <_dtoa_r+0xad8>
 8010d48:	4649      	mov	r1, r9
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	220a      	movs	r2, #10
 8010d4e:	4658      	mov	r0, fp
 8010d50:	f000 fbfe 	bl	8011550 <__multadd>
 8010d54:	4681      	mov	r9, r0
 8010d56:	e7ea      	b.n	8010d2e <_dtoa_r+0xb56>
 8010d58:	0801501d 	.word	0x0801501d
 8010d5c:	08014fa1 	.word	0x08014fa1

08010d60 <_free_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	4605      	mov	r5, r0
 8010d64:	2900      	cmp	r1, #0
 8010d66:	d041      	beq.n	8010dec <_free_r+0x8c>
 8010d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d6c:	1f0c      	subs	r4, r1, #4
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	bfb8      	it	lt
 8010d72:	18e4      	addlt	r4, r4, r3
 8010d74:	f7fd fb36 	bl	800e3e4 <__malloc_lock>
 8010d78:	4a1d      	ldr	r2, [pc, #116]	@ (8010df0 <_free_r+0x90>)
 8010d7a:	6813      	ldr	r3, [r2, #0]
 8010d7c:	b933      	cbnz	r3, 8010d8c <_free_r+0x2c>
 8010d7e:	6063      	str	r3, [r4, #4]
 8010d80:	6014      	str	r4, [r2, #0]
 8010d82:	4628      	mov	r0, r5
 8010d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d88:	f7fd bb32 	b.w	800e3f0 <__malloc_unlock>
 8010d8c:	42a3      	cmp	r3, r4
 8010d8e:	d908      	bls.n	8010da2 <_free_r+0x42>
 8010d90:	6820      	ldr	r0, [r4, #0]
 8010d92:	1821      	adds	r1, r4, r0
 8010d94:	428b      	cmp	r3, r1
 8010d96:	bf01      	itttt	eq
 8010d98:	6819      	ldreq	r1, [r3, #0]
 8010d9a:	685b      	ldreq	r3, [r3, #4]
 8010d9c:	1809      	addeq	r1, r1, r0
 8010d9e:	6021      	streq	r1, [r4, #0]
 8010da0:	e7ed      	b.n	8010d7e <_free_r+0x1e>
 8010da2:	461a      	mov	r2, r3
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	b10b      	cbz	r3, 8010dac <_free_r+0x4c>
 8010da8:	42a3      	cmp	r3, r4
 8010daa:	d9fa      	bls.n	8010da2 <_free_r+0x42>
 8010dac:	6811      	ldr	r1, [r2, #0]
 8010dae:	1850      	adds	r0, r2, r1
 8010db0:	42a0      	cmp	r0, r4
 8010db2:	d10b      	bne.n	8010dcc <_free_r+0x6c>
 8010db4:	6820      	ldr	r0, [r4, #0]
 8010db6:	4401      	add	r1, r0
 8010db8:	1850      	adds	r0, r2, r1
 8010dba:	4283      	cmp	r3, r0
 8010dbc:	6011      	str	r1, [r2, #0]
 8010dbe:	d1e0      	bne.n	8010d82 <_free_r+0x22>
 8010dc0:	6818      	ldr	r0, [r3, #0]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	6053      	str	r3, [r2, #4]
 8010dc6:	4408      	add	r0, r1
 8010dc8:	6010      	str	r0, [r2, #0]
 8010dca:	e7da      	b.n	8010d82 <_free_r+0x22>
 8010dcc:	d902      	bls.n	8010dd4 <_free_r+0x74>
 8010dce:	230c      	movs	r3, #12
 8010dd0:	602b      	str	r3, [r5, #0]
 8010dd2:	e7d6      	b.n	8010d82 <_free_r+0x22>
 8010dd4:	6820      	ldr	r0, [r4, #0]
 8010dd6:	1821      	adds	r1, r4, r0
 8010dd8:	428b      	cmp	r3, r1
 8010dda:	bf04      	itt	eq
 8010ddc:	6819      	ldreq	r1, [r3, #0]
 8010dde:	685b      	ldreq	r3, [r3, #4]
 8010de0:	6063      	str	r3, [r4, #4]
 8010de2:	bf04      	itt	eq
 8010de4:	1809      	addeq	r1, r1, r0
 8010de6:	6021      	streq	r1, [r4, #0]
 8010de8:	6054      	str	r4, [r2, #4]
 8010dea:	e7ca      	b.n	8010d82 <_free_r+0x22>
 8010dec:	bd38      	pop	{r3, r4, r5, pc}
 8010dee:	bf00      	nop
 8010df0:	200025a0 	.word	0x200025a0

08010df4 <rshift>:
 8010df4:	6903      	ldr	r3, [r0, #16]
 8010df6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e02:	f100 0414 	add.w	r4, r0, #20
 8010e06:	dd45      	ble.n	8010e94 <rshift+0xa0>
 8010e08:	f011 011f 	ands.w	r1, r1, #31
 8010e0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e14:	d10c      	bne.n	8010e30 <rshift+0x3c>
 8010e16:	f100 0710 	add.w	r7, r0, #16
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	42b1      	cmp	r1, r6
 8010e1e:	d334      	bcc.n	8010e8a <rshift+0x96>
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	1eea      	subs	r2, r5, #3
 8010e26:	4296      	cmp	r6, r2
 8010e28:	bf38      	it	cc
 8010e2a:	2300      	movcc	r3, #0
 8010e2c:	4423      	add	r3, r4
 8010e2e:	e015      	b.n	8010e5c <rshift+0x68>
 8010e30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e34:	f1c1 0820 	rsb	r8, r1, #32
 8010e38:	40cf      	lsrs	r7, r1
 8010e3a:	f105 0e04 	add.w	lr, r5, #4
 8010e3e:	46a1      	mov	r9, r4
 8010e40:	4576      	cmp	r6, lr
 8010e42:	46f4      	mov	ip, lr
 8010e44:	d815      	bhi.n	8010e72 <rshift+0x7e>
 8010e46:	1a9a      	subs	r2, r3, r2
 8010e48:	0092      	lsls	r2, r2, #2
 8010e4a:	3a04      	subs	r2, #4
 8010e4c:	3501      	adds	r5, #1
 8010e4e:	42ae      	cmp	r6, r5
 8010e50:	bf38      	it	cc
 8010e52:	2200      	movcc	r2, #0
 8010e54:	18a3      	adds	r3, r4, r2
 8010e56:	50a7      	str	r7, [r4, r2]
 8010e58:	b107      	cbz	r7, 8010e5c <rshift+0x68>
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	1b1a      	subs	r2, r3, r4
 8010e5e:	42a3      	cmp	r3, r4
 8010e60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e64:	bf08      	it	eq
 8010e66:	2300      	moveq	r3, #0
 8010e68:	6102      	str	r2, [r0, #16]
 8010e6a:	bf08      	it	eq
 8010e6c:	6143      	streq	r3, [r0, #20]
 8010e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e72:	f8dc c000 	ldr.w	ip, [ip]
 8010e76:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e7a:	ea4c 0707 	orr.w	r7, ip, r7
 8010e7e:	f849 7b04 	str.w	r7, [r9], #4
 8010e82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e86:	40cf      	lsrs	r7, r1
 8010e88:	e7da      	b.n	8010e40 <rshift+0x4c>
 8010e8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e92:	e7c3      	b.n	8010e1c <rshift+0x28>
 8010e94:	4623      	mov	r3, r4
 8010e96:	e7e1      	b.n	8010e5c <rshift+0x68>

08010e98 <__hexdig_fun>:
 8010e98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e9c:	2b09      	cmp	r3, #9
 8010e9e:	d802      	bhi.n	8010ea6 <__hexdig_fun+0xe>
 8010ea0:	3820      	subs	r0, #32
 8010ea2:	b2c0      	uxtb	r0, r0
 8010ea4:	4770      	bx	lr
 8010ea6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010eaa:	2b05      	cmp	r3, #5
 8010eac:	d801      	bhi.n	8010eb2 <__hexdig_fun+0x1a>
 8010eae:	3847      	subs	r0, #71	@ 0x47
 8010eb0:	e7f7      	b.n	8010ea2 <__hexdig_fun+0xa>
 8010eb2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010eb6:	2b05      	cmp	r3, #5
 8010eb8:	d801      	bhi.n	8010ebe <__hexdig_fun+0x26>
 8010eba:	3827      	subs	r0, #39	@ 0x27
 8010ebc:	e7f1      	b.n	8010ea2 <__hexdig_fun+0xa>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	4770      	bx	lr
	...

08010ec4 <__gethex>:
 8010ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec8:	b085      	sub	sp, #20
 8010eca:	468a      	mov	sl, r1
 8010ecc:	9302      	str	r3, [sp, #8]
 8010ece:	680b      	ldr	r3, [r1, #0]
 8010ed0:	9001      	str	r0, [sp, #4]
 8010ed2:	4690      	mov	r8, r2
 8010ed4:	1c9c      	adds	r4, r3, #2
 8010ed6:	46a1      	mov	r9, r4
 8010ed8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010edc:	2830      	cmp	r0, #48	@ 0x30
 8010ede:	d0fa      	beq.n	8010ed6 <__gethex+0x12>
 8010ee0:	eba9 0303 	sub.w	r3, r9, r3
 8010ee4:	f1a3 0b02 	sub.w	fp, r3, #2
 8010ee8:	f7ff ffd6 	bl	8010e98 <__hexdig_fun>
 8010eec:	4605      	mov	r5, r0
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d168      	bne.n	8010fc4 <__gethex+0x100>
 8010ef2:	49a0      	ldr	r1, [pc, #640]	@ (8011174 <__gethex+0x2b0>)
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	4648      	mov	r0, r9
 8010ef8:	f7ff f82d 	bl	800ff56 <strncmp>
 8010efc:	4607      	mov	r7, r0
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d167      	bne.n	8010fd2 <__gethex+0x10e>
 8010f02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010f06:	4626      	mov	r6, r4
 8010f08:	f7ff ffc6 	bl	8010e98 <__hexdig_fun>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d062      	beq.n	8010fd6 <__gethex+0x112>
 8010f10:	4623      	mov	r3, r4
 8010f12:	7818      	ldrb	r0, [r3, #0]
 8010f14:	2830      	cmp	r0, #48	@ 0x30
 8010f16:	4699      	mov	r9, r3
 8010f18:	f103 0301 	add.w	r3, r3, #1
 8010f1c:	d0f9      	beq.n	8010f12 <__gethex+0x4e>
 8010f1e:	f7ff ffbb 	bl	8010e98 <__hexdig_fun>
 8010f22:	fab0 f580 	clz	r5, r0
 8010f26:	096d      	lsrs	r5, r5, #5
 8010f28:	f04f 0b01 	mov.w	fp, #1
 8010f2c:	464a      	mov	r2, r9
 8010f2e:	4616      	mov	r6, r2
 8010f30:	3201      	adds	r2, #1
 8010f32:	7830      	ldrb	r0, [r6, #0]
 8010f34:	f7ff ffb0 	bl	8010e98 <__hexdig_fun>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d1f8      	bne.n	8010f2e <__gethex+0x6a>
 8010f3c:	498d      	ldr	r1, [pc, #564]	@ (8011174 <__gethex+0x2b0>)
 8010f3e:	2201      	movs	r2, #1
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7ff f808 	bl	800ff56 <strncmp>
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d13f      	bne.n	8010fca <__gethex+0x106>
 8010f4a:	b944      	cbnz	r4, 8010f5e <__gethex+0x9a>
 8010f4c:	1c74      	adds	r4, r6, #1
 8010f4e:	4622      	mov	r2, r4
 8010f50:	4616      	mov	r6, r2
 8010f52:	3201      	adds	r2, #1
 8010f54:	7830      	ldrb	r0, [r6, #0]
 8010f56:	f7ff ff9f 	bl	8010e98 <__hexdig_fun>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d1f8      	bne.n	8010f50 <__gethex+0x8c>
 8010f5e:	1ba4      	subs	r4, r4, r6
 8010f60:	00a7      	lsls	r7, r4, #2
 8010f62:	7833      	ldrb	r3, [r6, #0]
 8010f64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f68:	2b50      	cmp	r3, #80	@ 0x50
 8010f6a:	d13e      	bne.n	8010fea <__gethex+0x126>
 8010f6c:	7873      	ldrb	r3, [r6, #1]
 8010f6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f70:	d033      	beq.n	8010fda <__gethex+0x116>
 8010f72:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f74:	d034      	beq.n	8010fe0 <__gethex+0x11c>
 8010f76:	1c71      	adds	r1, r6, #1
 8010f78:	2400      	movs	r4, #0
 8010f7a:	7808      	ldrb	r0, [r1, #0]
 8010f7c:	f7ff ff8c 	bl	8010e98 <__hexdig_fun>
 8010f80:	1e43      	subs	r3, r0, #1
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b18      	cmp	r3, #24
 8010f86:	d830      	bhi.n	8010fea <__gethex+0x126>
 8010f88:	f1a0 0210 	sub.w	r2, r0, #16
 8010f8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f90:	f7ff ff82 	bl	8010e98 <__hexdig_fun>
 8010f94:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f98:	fa5f fc8c 	uxtb.w	ip, ip
 8010f9c:	f1bc 0f18 	cmp.w	ip, #24
 8010fa0:	f04f 030a 	mov.w	r3, #10
 8010fa4:	d91e      	bls.n	8010fe4 <__gethex+0x120>
 8010fa6:	b104      	cbz	r4, 8010faa <__gethex+0xe6>
 8010fa8:	4252      	negs	r2, r2
 8010faa:	4417      	add	r7, r2
 8010fac:	f8ca 1000 	str.w	r1, [sl]
 8010fb0:	b1ed      	cbz	r5, 8010fee <__gethex+0x12a>
 8010fb2:	f1bb 0f00 	cmp.w	fp, #0
 8010fb6:	bf0c      	ite	eq
 8010fb8:	2506      	moveq	r5, #6
 8010fba:	2500      	movne	r5, #0
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	b005      	add	sp, #20
 8010fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc4:	2500      	movs	r5, #0
 8010fc6:	462c      	mov	r4, r5
 8010fc8:	e7b0      	b.n	8010f2c <__gethex+0x68>
 8010fca:	2c00      	cmp	r4, #0
 8010fcc:	d1c7      	bne.n	8010f5e <__gethex+0x9a>
 8010fce:	4627      	mov	r7, r4
 8010fd0:	e7c7      	b.n	8010f62 <__gethex+0x9e>
 8010fd2:	464e      	mov	r6, r9
 8010fd4:	462f      	mov	r7, r5
 8010fd6:	2501      	movs	r5, #1
 8010fd8:	e7c3      	b.n	8010f62 <__gethex+0x9e>
 8010fda:	2400      	movs	r4, #0
 8010fdc:	1cb1      	adds	r1, r6, #2
 8010fde:	e7cc      	b.n	8010f7a <__gethex+0xb6>
 8010fe0:	2401      	movs	r4, #1
 8010fe2:	e7fb      	b.n	8010fdc <__gethex+0x118>
 8010fe4:	fb03 0002 	mla	r0, r3, r2, r0
 8010fe8:	e7ce      	b.n	8010f88 <__gethex+0xc4>
 8010fea:	4631      	mov	r1, r6
 8010fec:	e7de      	b.n	8010fac <__gethex+0xe8>
 8010fee:	eba6 0309 	sub.w	r3, r6, r9
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	4629      	mov	r1, r5
 8010ff6:	2b07      	cmp	r3, #7
 8010ff8:	dc0a      	bgt.n	8011010 <__gethex+0x14c>
 8010ffa:	9801      	ldr	r0, [sp, #4]
 8010ffc:	f000 fa46 	bl	801148c <_Balloc>
 8011000:	4604      	mov	r4, r0
 8011002:	b940      	cbnz	r0, 8011016 <__gethex+0x152>
 8011004:	4b5c      	ldr	r3, [pc, #368]	@ (8011178 <__gethex+0x2b4>)
 8011006:	4602      	mov	r2, r0
 8011008:	21e4      	movs	r1, #228	@ 0xe4
 801100a:	485c      	ldr	r0, [pc, #368]	@ (801117c <__gethex+0x2b8>)
 801100c:	f001 f996 	bl	801233c <__assert_func>
 8011010:	3101      	adds	r1, #1
 8011012:	105b      	asrs	r3, r3, #1
 8011014:	e7ef      	b.n	8010ff6 <__gethex+0x132>
 8011016:	f100 0a14 	add.w	sl, r0, #20
 801101a:	2300      	movs	r3, #0
 801101c:	4655      	mov	r5, sl
 801101e:	469b      	mov	fp, r3
 8011020:	45b1      	cmp	r9, r6
 8011022:	d337      	bcc.n	8011094 <__gethex+0x1d0>
 8011024:	f845 bb04 	str.w	fp, [r5], #4
 8011028:	eba5 050a 	sub.w	r5, r5, sl
 801102c:	10ad      	asrs	r5, r5, #2
 801102e:	6125      	str	r5, [r4, #16]
 8011030:	4658      	mov	r0, fp
 8011032:	f000 fb1d 	bl	8011670 <__hi0bits>
 8011036:	016d      	lsls	r5, r5, #5
 8011038:	f8d8 6000 	ldr.w	r6, [r8]
 801103c:	1a2d      	subs	r5, r5, r0
 801103e:	42b5      	cmp	r5, r6
 8011040:	dd54      	ble.n	80110ec <__gethex+0x228>
 8011042:	1bad      	subs	r5, r5, r6
 8011044:	4629      	mov	r1, r5
 8011046:	4620      	mov	r0, r4
 8011048:	f000 feb1 	bl	8011dae <__any_on>
 801104c:	4681      	mov	r9, r0
 801104e:	b178      	cbz	r0, 8011070 <__gethex+0x1ac>
 8011050:	1e6b      	subs	r3, r5, #1
 8011052:	1159      	asrs	r1, r3, #5
 8011054:	f003 021f 	and.w	r2, r3, #31
 8011058:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801105c:	f04f 0901 	mov.w	r9, #1
 8011060:	fa09 f202 	lsl.w	r2, r9, r2
 8011064:	420a      	tst	r2, r1
 8011066:	d003      	beq.n	8011070 <__gethex+0x1ac>
 8011068:	454b      	cmp	r3, r9
 801106a:	dc36      	bgt.n	80110da <__gethex+0x216>
 801106c:	f04f 0902 	mov.w	r9, #2
 8011070:	4629      	mov	r1, r5
 8011072:	4620      	mov	r0, r4
 8011074:	f7ff febe 	bl	8010df4 <rshift>
 8011078:	442f      	add	r7, r5
 801107a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801107e:	42bb      	cmp	r3, r7
 8011080:	da42      	bge.n	8011108 <__gethex+0x244>
 8011082:	9801      	ldr	r0, [sp, #4]
 8011084:	4621      	mov	r1, r4
 8011086:	f000 fa41 	bl	801150c <_Bfree>
 801108a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801108c:	2300      	movs	r3, #0
 801108e:	6013      	str	r3, [r2, #0]
 8011090:	25a3      	movs	r5, #163	@ 0xa3
 8011092:	e793      	b.n	8010fbc <__gethex+0xf8>
 8011094:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011098:	2a2e      	cmp	r2, #46	@ 0x2e
 801109a:	d012      	beq.n	80110c2 <__gethex+0x1fe>
 801109c:	2b20      	cmp	r3, #32
 801109e:	d104      	bne.n	80110aa <__gethex+0x1e6>
 80110a0:	f845 bb04 	str.w	fp, [r5], #4
 80110a4:	f04f 0b00 	mov.w	fp, #0
 80110a8:	465b      	mov	r3, fp
 80110aa:	7830      	ldrb	r0, [r6, #0]
 80110ac:	9303      	str	r3, [sp, #12]
 80110ae:	f7ff fef3 	bl	8010e98 <__hexdig_fun>
 80110b2:	9b03      	ldr	r3, [sp, #12]
 80110b4:	f000 000f 	and.w	r0, r0, #15
 80110b8:	4098      	lsls	r0, r3
 80110ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80110be:	3304      	adds	r3, #4
 80110c0:	e7ae      	b.n	8011020 <__gethex+0x15c>
 80110c2:	45b1      	cmp	r9, r6
 80110c4:	d8ea      	bhi.n	801109c <__gethex+0x1d8>
 80110c6:	492b      	ldr	r1, [pc, #172]	@ (8011174 <__gethex+0x2b0>)
 80110c8:	9303      	str	r3, [sp, #12]
 80110ca:	2201      	movs	r2, #1
 80110cc:	4630      	mov	r0, r6
 80110ce:	f7fe ff42 	bl	800ff56 <strncmp>
 80110d2:	9b03      	ldr	r3, [sp, #12]
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d1e1      	bne.n	801109c <__gethex+0x1d8>
 80110d8:	e7a2      	b.n	8011020 <__gethex+0x15c>
 80110da:	1ea9      	subs	r1, r5, #2
 80110dc:	4620      	mov	r0, r4
 80110de:	f000 fe66 	bl	8011dae <__any_on>
 80110e2:	2800      	cmp	r0, #0
 80110e4:	d0c2      	beq.n	801106c <__gethex+0x1a8>
 80110e6:	f04f 0903 	mov.w	r9, #3
 80110ea:	e7c1      	b.n	8011070 <__gethex+0x1ac>
 80110ec:	da09      	bge.n	8011102 <__gethex+0x23e>
 80110ee:	1b75      	subs	r5, r6, r5
 80110f0:	4621      	mov	r1, r4
 80110f2:	9801      	ldr	r0, [sp, #4]
 80110f4:	462a      	mov	r2, r5
 80110f6:	f000 fc21 	bl	801193c <__lshift>
 80110fa:	1b7f      	subs	r7, r7, r5
 80110fc:	4604      	mov	r4, r0
 80110fe:	f100 0a14 	add.w	sl, r0, #20
 8011102:	f04f 0900 	mov.w	r9, #0
 8011106:	e7b8      	b.n	801107a <__gethex+0x1b6>
 8011108:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801110c:	42bd      	cmp	r5, r7
 801110e:	dd6f      	ble.n	80111f0 <__gethex+0x32c>
 8011110:	1bed      	subs	r5, r5, r7
 8011112:	42ae      	cmp	r6, r5
 8011114:	dc34      	bgt.n	8011180 <__gethex+0x2bc>
 8011116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801111a:	2b02      	cmp	r3, #2
 801111c:	d022      	beq.n	8011164 <__gethex+0x2a0>
 801111e:	2b03      	cmp	r3, #3
 8011120:	d024      	beq.n	801116c <__gethex+0x2a8>
 8011122:	2b01      	cmp	r3, #1
 8011124:	d115      	bne.n	8011152 <__gethex+0x28e>
 8011126:	42ae      	cmp	r6, r5
 8011128:	d113      	bne.n	8011152 <__gethex+0x28e>
 801112a:	2e01      	cmp	r6, #1
 801112c:	d10b      	bne.n	8011146 <__gethex+0x282>
 801112e:	9a02      	ldr	r2, [sp, #8]
 8011130:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	2301      	movs	r3, #1
 8011138:	6123      	str	r3, [r4, #16]
 801113a:	f8ca 3000 	str.w	r3, [sl]
 801113e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011140:	2562      	movs	r5, #98	@ 0x62
 8011142:	601c      	str	r4, [r3, #0]
 8011144:	e73a      	b.n	8010fbc <__gethex+0xf8>
 8011146:	1e71      	subs	r1, r6, #1
 8011148:	4620      	mov	r0, r4
 801114a:	f000 fe30 	bl	8011dae <__any_on>
 801114e:	2800      	cmp	r0, #0
 8011150:	d1ed      	bne.n	801112e <__gethex+0x26a>
 8011152:	9801      	ldr	r0, [sp, #4]
 8011154:	4621      	mov	r1, r4
 8011156:	f000 f9d9 	bl	801150c <_Bfree>
 801115a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801115c:	2300      	movs	r3, #0
 801115e:	6013      	str	r3, [r2, #0]
 8011160:	2550      	movs	r5, #80	@ 0x50
 8011162:	e72b      	b.n	8010fbc <__gethex+0xf8>
 8011164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1f3      	bne.n	8011152 <__gethex+0x28e>
 801116a:	e7e0      	b.n	801112e <__gethex+0x26a>
 801116c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1dd      	bne.n	801112e <__gethex+0x26a>
 8011172:	e7ee      	b.n	8011152 <__gethex+0x28e>
 8011174:	08014f0c 	.word	0x08014f0c
 8011178:	0801501d 	.word	0x0801501d
 801117c:	0801502e 	.word	0x0801502e
 8011180:	1e6f      	subs	r7, r5, #1
 8011182:	f1b9 0f00 	cmp.w	r9, #0
 8011186:	d130      	bne.n	80111ea <__gethex+0x326>
 8011188:	b127      	cbz	r7, 8011194 <__gethex+0x2d0>
 801118a:	4639      	mov	r1, r7
 801118c:	4620      	mov	r0, r4
 801118e:	f000 fe0e 	bl	8011dae <__any_on>
 8011192:	4681      	mov	r9, r0
 8011194:	117a      	asrs	r2, r7, #5
 8011196:	2301      	movs	r3, #1
 8011198:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801119c:	f007 071f 	and.w	r7, r7, #31
 80111a0:	40bb      	lsls	r3, r7
 80111a2:	4213      	tst	r3, r2
 80111a4:	4629      	mov	r1, r5
 80111a6:	4620      	mov	r0, r4
 80111a8:	bf18      	it	ne
 80111aa:	f049 0902 	orrne.w	r9, r9, #2
 80111ae:	f7ff fe21 	bl	8010df4 <rshift>
 80111b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111b6:	1b76      	subs	r6, r6, r5
 80111b8:	2502      	movs	r5, #2
 80111ba:	f1b9 0f00 	cmp.w	r9, #0
 80111be:	d047      	beq.n	8011250 <__gethex+0x38c>
 80111c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111c4:	2b02      	cmp	r3, #2
 80111c6:	d015      	beq.n	80111f4 <__gethex+0x330>
 80111c8:	2b03      	cmp	r3, #3
 80111ca:	d017      	beq.n	80111fc <__gethex+0x338>
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d109      	bne.n	80111e4 <__gethex+0x320>
 80111d0:	f019 0f02 	tst.w	r9, #2
 80111d4:	d006      	beq.n	80111e4 <__gethex+0x320>
 80111d6:	f8da 3000 	ldr.w	r3, [sl]
 80111da:	ea49 0903 	orr.w	r9, r9, r3
 80111de:	f019 0f01 	tst.w	r9, #1
 80111e2:	d10e      	bne.n	8011202 <__gethex+0x33e>
 80111e4:	f045 0510 	orr.w	r5, r5, #16
 80111e8:	e032      	b.n	8011250 <__gethex+0x38c>
 80111ea:	f04f 0901 	mov.w	r9, #1
 80111ee:	e7d1      	b.n	8011194 <__gethex+0x2d0>
 80111f0:	2501      	movs	r5, #1
 80111f2:	e7e2      	b.n	80111ba <__gethex+0x2f6>
 80111f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111f6:	f1c3 0301 	rsb	r3, r3, #1
 80111fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80111fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d0f0      	beq.n	80111e4 <__gethex+0x320>
 8011202:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011206:	f104 0314 	add.w	r3, r4, #20
 801120a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801120e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011212:	f04f 0c00 	mov.w	ip, #0
 8011216:	4618      	mov	r0, r3
 8011218:	f853 2b04 	ldr.w	r2, [r3], #4
 801121c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011220:	d01b      	beq.n	801125a <__gethex+0x396>
 8011222:	3201      	adds	r2, #1
 8011224:	6002      	str	r2, [r0, #0]
 8011226:	2d02      	cmp	r5, #2
 8011228:	f104 0314 	add.w	r3, r4, #20
 801122c:	d13c      	bne.n	80112a8 <__gethex+0x3e4>
 801122e:	f8d8 2000 	ldr.w	r2, [r8]
 8011232:	3a01      	subs	r2, #1
 8011234:	42b2      	cmp	r2, r6
 8011236:	d109      	bne.n	801124c <__gethex+0x388>
 8011238:	1171      	asrs	r1, r6, #5
 801123a:	2201      	movs	r2, #1
 801123c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011240:	f006 061f 	and.w	r6, r6, #31
 8011244:	fa02 f606 	lsl.w	r6, r2, r6
 8011248:	421e      	tst	r6, r3
 801124a:	d13a      	bne.n	80112c2 <__gethex+0x3fe>
 801124c:	f045 0520 	orr.w	r5, r5, #32
 8011250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011252:	601c      	str	r4, [r3, #0]
 8011254:	9b02      	ldr	r3, [sp, #8]
 8011256:	601f      	str	r7, [r3, #0]
 8011258:	e6b0      	b.n	8010fbc <__gethex+0xf8>
 801125a:	4299      	cmp	r1, r3
 801125c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011260:	d8d9      	bhi.n	8011216 <__gethex+0x352>
 8011262:	68a3      	ldr	r3, [r4, #8]
 8011264:	459b      	cmp	fp, r3
 8011266:	db17      	blt.n	8011298 <__gethex+0x3d4>
 8011268:	6861      	ldr	r1, [r4, #4]
 801126a:	9801      	ldr	r0, [sp, #4]
 801126c:	3101      	adds	r1, #1
 801126e:	f000 f90d 	bl	801148c <_Balloc>
 8011272:	4681      	mov	r9, r0
 8011274:	b918      	cbnz	r0, 801127e <__gethex+0x3ba>
 8011276:	4b1a      	ldr	r3, [pc, #104]	@ (80112e0 <__gethex+0x41c>)
 8011278:	4602      	mov	r2, r0
 801127a:	2184      	movs	r1, #132	@ 0x84
 801127c:	e6c5      	b.n	801100a <__gethex+0x146>
 801127e:	6922      	ldr	r2, [r4, #16]
 8011280:	3202      	adds	r2, #2
 8011282:	f104 010c 	add.w	r1, r4, #12
 8011286:	0092      	lsls	r2, r2, #2
 8011288:	300c      	adds	r0, #12
 801128a:	f7fe fefe 	bl	801008a <memcpy>
 801128e:	4621      	mov	r1, r4
 8011290:	9801      	ldr	r0, [sp, #4]
 8011292:	f000 f93b 	bl	801150c <_Bfree>
 8011296:	464c      	mov	r4, r9
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	1c5a      	adds	r2, r3, #1
 801129c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112a0:	6122      	str	r2, [r4, #16]
 80112a2:	2201      	movs	r2, #1
 80112a4:	615a      	str	r2, [r3, #20]
 80112a6:	e7be      	b.n	8011226 <__gethex+0x362>
 80112a8:	6922      	ldr	r2, [r4, #16]
 80112aa:	455a      	cmp	r2, fp
 80112ac:	dd0b      	ble.n	80112c6 <__gethex+0x402>
 80112ae:	2101      	movs	r1, #1
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff fd9f 	bl	8010df4 <rshift>
 80112b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112ba:	3701      	adds	r7, #1
 80112bc:	42bb      	cmp	r3, r7
 80112be:	f6ff aee0 	blt.w	8011082 <__gethex+0x1be>
 80112c2:	2501      	movs	r5, #1
 80112c4:	e7c2      	b.n	801124c <__gethex+0x388>
 80112c6:	f016 061f 	ands.w	r6, r6, #31
 80112ca:	d0fa      	beq.n	80112c2 <__gethex+0x3fe>
 80112cc:	4453      	add	r3, sl
 80112ce:	f1c6 0620 	rsb	r6, r6, #32
 80112d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112d6:	f000 f9cb 	bl	8011670 <__hi0bits>
 80112da:	42b0      	cmp	r0, r6
 80112dc:	dbe7      	blt.n	80112ae <__gethex+0x3ea>
 80112de:	e7f0      	b.n	80112c2 <__gethex+0x3fe>
 80112e0:	0801501d 	.word	0x0801501d

080112e4 <L_shift>:
 80112e4:	f1c2 0208 	rsb	r2, r2, #8
 80112e8:	0092      	lsls	r2, r2, #2
 80112ea:	b570      	push	{r4, r5, r6, lr}
 80112ec:	f1c2 0620 	rsb	r6, r2, #32
 80112f0:	6843      	ldr	r3, [r0, #4]
 80112f2:	6804      	ldr	r4, [r0, #0]
 80112f4:	fa03 f506 	lsl.w	r5, r3, r6
 80112f8:	432c      	orrs	r4, r5
 80112fa:	40d3      	lsrs	r3, r2
 80112fc:	6004      	str	r4, [r0, #0]
 80112fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8011302:	4288      	cmp	r0, r1
 8011304:	d3f4      	bcc.n	80112f0 <L_shift+0xc>
 8011306:	bd70      	pop	{r4, r5, r6, pc}

08011308 <__match>:
 8011308:	b530      	push	{r4, r5, lr}
 801130a:	6803      	ldr	r3, [r0, #0]
 801130c:	3301      	adds	r3, #1
 801130e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011312:	b914      	cbnz	r4, 801131a <__match+0x12>
 8011314:	6003      	str	r3, [r0, #0]
 8011316:	2001      	movs	r0, #1
 8011318:	bd30      	pop	{r4, r5, pc}
 801131a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801131e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011322:	2d19      	cmp	r5, #25
 8011324:	bf98      	it	ls
 8011326:	3220      	addls	r2, #32
 8011328:	42a2      	cmp	r2, r4
 801132a:	d0f0      	beq.n	801130e <__match+0x6>
 801132c:	2000      	movs	r0, #0
 801132e:	e7f3      	b.n	8011318 <__match+0x10>

08011330 <__hexnan>:
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	680b      	ldr	r3, [r1, #0]
 8011336:	6801      	ldr	r1, [r0, #0]
 8011338:	115e      	asrs	r6, r3, #5
 801133a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801133e:	f013 031f 	ands.w	r3, r3, #31
 8011342:	b087      	sub	sp, #28
 8011344:	bf18      	it	ne
 8011346:	3604      	addne	r6, #4
 8011348:	2500      	movs	r5, #0
 801134a:	1f37      	subs	r7, r6, #4
 801134c:	4682      	mov	sl, r0
 801134e:	4690      	mov	r8, r2
 8011350:	9301      	str	r3, [sp, #4]
 8011352:	f846 5c04 	str.w	r5, [r6, #-4]
 8011356:	46b9      	mov	r9, r7
 8011358:	463c      	mov	r4, r7
 801135a:	9502      	str	r5, [sp, #8]
 801135c:	46ab      	mov	fp, r5
 801135e:	784a      	ldrb	r2, [r1, #1]
 8011360:	1c4b      	adds	r3, r1, #1
 8011362:	9303      	str	r3, [sp, #12]
 8011364:	b342      	cbz	r2, 80113b8 <__hexnan+0x88>
 8011366:	4610      	mov	r0, r2
 8011368:	9105      	str	r1, [sp, #20]
 801136a:	9204      	str	r2, [sp, #16]
 801136c:	f7ff fd94 	bl	8010e98 <__hexdig_fun>
 8011370:	2800      	cmp	r0, #0
 8011372:	d151      	bne.n	8011418 <__hexnan+0xe8>
 8011374:	9a04      	ldr	r2, [sp, #16]
 8011376:	9905      	ldr	r1, [sp, #20]
 8011378:	2a20      	cmp	r2, #32
 801137a:	d818      	bhi.n	80113ae <__hexnan+0x7e>
 801137c:	9b02      	ldr	r3, [sp, #8]
 801137e:	459b      	cmp	fp, r3
 8011380:	dd13      	ble.n	80113aa <__hexnan+0x7a>
 8011382:	454c      	cmp	r4, r9
 8011384:	d206      	bcs.n	8011394 <__hexnan+0x64>
 8011386:	2d07      	cmp	r5, #7
 8011388:	dc04      	bgt.n	8011394 <__hexnan+0x64>
 801138a:	462a      	mov	r2, r5
 801138c:	4649      	mov	r1, r9
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff ffa8 	bl	80112e4 <L_shift>
 8011394:	4544      	cmp	r4, r8
 8011396:	d952      	bls.n	801143e <__hexnan+0x10e>
 8011398:	2300      	movs	r3, #0
 801139a:	f1a4 0904 	sub.w	r9, r4, #4
 801139e:	f844 3c04 	str.w	r3, [r4, #-4]
 80113a2:	f8cd b008 	str.w	fp, [sp, #8]
 80113a6:	464c      	mov	r4, r9
 80113a8:	461d      	mov	r5, r3
 80113aa:	9903      	ldr	r1, [sp, #12]
 80113ac:	e7d7      	b.n	801135e <__hexnan+0x2e>
 80113ae:	2a29      	cmp	r2, #41	@ 0x29
 80113b0:	d157      	bne.n	8011462 <__hexnan+0x132>
 80113b2:	3102      	adds	r1, #2
 80113b4:	f8ca 1000 	str.w	r1, [sl]
 80113b8:	f1bb 0f00 	cmp.w	fp, #0
 80113bc:	d051      	beq.n	8011462 <__hexnan+0x132>
 80113be:	454c      	cmp	r4, r9
 80113c0:	d206      	bcs.n	80113d0 <__hexnan+0xa0>
 80113c2:	2d07      	cmp	r5, #7
 80113c4:	dc04      	bgt.n	80113d0 <__hexnan+0xa0>
 80113c6:	462a      	mov	r2, r5
 80113c8:	4649      	mov	r1, r9
 80113ca:	4620      	mov	r0, r4
 80113cc:	f7ff ff8a 	bl	80112e4 <L_shift>
 80113d0:	4544      	cmp	r4, r8
 80113d2:	d936      	bls.n	8011442 <__hexnan+0x112>
 80113d4:	f1a8 0204 	sub.w	r2, r8, #4
 80113d8:	4623      	mov	r3, r4
 80113da:	f853 1b04 	ldr.w	r1, [r3], #4
 80113de:	f842 1f04 	str.w	r1, [r2, #4]!
 80113e2:	429f      	cmp	r7, r3
 80113e4:	d2f9      	bcs.n	80113da <__hexnan+0xaa>
 80113e6:	1b3b      	subs	r3, r7, r4
 80113e8:	f023 0303 	bic.w	r3, r3, #3
 80113ec:	3304      	adds	r3, #4
 80113ee:	3401      	adds	r4, #1
 80113f0:	3e03      	subs	r6, #3
 80113f2:	42b4      	cmp	r4, r6
 80113f4:	bf88      	it	hi
 80113f6:	2304      	movhi	r3, #4
 80113f8:	4443      	add	r3, r8
 80113fa:	2200      	movs	r2, #0
 80113fc:	f843 2b04 	str.w	r2, [r3], #4
 8011400:	429f      	cmp	r7, r3
 8011402:	d2fb      	bcs.n	80113fc <__hexnan+0xcc>
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	b91b      	cbnz	r3, 8011410 <__hexnan+0xe0>
 8011408:	4547      	cmp	r7, r8
 801140a:	d128      	bne.n	801145e <__hexnan+0x12e>
 801140c:	2301      	movs	r3, #1
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	2005      	movs	r0, #5
 8011412:	b007      	add	sp, #28
 8011414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011418:	3501      	adds	r5, #1
 801141a:	2d08      	cmp	r5, #8
 801141c:	f10b 0b01 	add.w	fp, fp, #1
 8011420:	dd06      	ble.n	8011430 <__hexnan+0x100>
 8011422:	4544      	cmp	r4, r8
 8011424:	d9c1      	bls.n	80113aa <__hexnan+0x7a>
 8011426:	2300      	movs	r3, #0
 8011428:	f844 3c04 	str.w	r3, [r4, #-4]
 801142c:	2501      	movs	r5, #1
 801142e:	3c04      	subs	r4, #4
 8011430:	6822      	ldr	r2, [r4, #0]
 8011432:	f000 000f 	and.w	r0, r0, #15
 8011436:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801143a:	6020      	str	r0, [r4, #0]
 801143c:	e7b5      	b.n	80113aa <__hexnan+0x7a>
 801143e:	2508      	movs	r5, #8
 8011440:	e7b3      	b.n	80113aa <__hexnan+0x7a>
 8011442:	9b01      	ldr	r3, [sp, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d0dd      	beq.n	8011404 <__hexnan+0xd4>
 8011448:	f1c3 0320 	rsb	r3, r3, #32
 801144c:	f04f 32ff 	mov.w	r2, #4294967295
 8011450:	40da      	lsrs	r2, r3
 8011452:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011456:	4013      	ands	r3, r2
 8011458:	f846 3c04 	str.w	r3, [r6, #-4]
 801145c:	e7d2      	b.n	8011404 <__hexnan+0xd4>
 801145e:	3f04      	subs	r7, #4
 8011460:	e7d0      	b.n	8011404 <__hexnan+0xd4>
 8011462:	2004      	movs	r0, #4
 8011464:	e7d5      	b.n	8011412 <__hexnan+0xe2>

08011466 <__ascii_mbtowc>:
 8011466:	b082      	sub	sp, #8
 8011468:	b901      	cbnz	r1, 801146c <__ascii_mbtowc+0x6>
 801146a:	a901      	add	r1, sp, #4
 801146c:	b142      	cbz	r2, 8011480 <__ascii_mbtowc+0x1a>
 801146e:	b14b      	cbz	r3, 8011484 <__ascii_mbtowc+0x1e>
 8011470:	7813      	ldrb	r3, [r2, #0]
 8011472:	600b      	str	r3, [r1, #0]
 8011474:	7812      	ldrb	r2, [r2, #0]
 8011476:	1e10      	subs	r0, r2, #0
 8011478:	bf18      	it	ne
 801147a:	2001      	movne	r0, #1
 801147c:	b002      	add	sp, #8
 801147e:	4770      	bx	lr
 8011480:	4610      	mov	r0, r2
 8011482:	e7fb      	b.n	801147c <__ascii_mbtowc+0x16>
 8011484:	f06f 0001 	mvn.w	r0, #1
 8011488:	e7f8      	b.n	801147c <__ascii_mbtowc+0x16>
	...

0801148c <_Balloc>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	69c6      	ldr	r6, [r0, #28]
 8011490:	4604      	mov	r4, r0
 8011492:	460d      	mov	r5, r1
 8011494:	b976      	cbnz	r6, 80114b4 <_Balloc+0x28>
 8011496:	2010      	movs	r0, #16
 8011498:	f7fc fefa 	bl	800e290 <malloc>
 801149c:	4602      	mov	r2, r0
 801149e:	61e0      	str	r0, [r4, #28]
 80114a0:	b920      	cbnz	r0, 80114ac <_Balloc+0x20>
 80114a2:	4b18      	ldr	r3, [pc, #96]	@ (8011504 <_Balloc+0x78>)
 80114a4:	4818      	ldr	r0, [pc, #96]	@ (8011508 <_Balloc+0x7c>)
 80114a6:	216b      	movs	r1, #107	@ 0x6b
 80114a8:	f000 ff48 	bl	801233c <__assert_func>
 80114ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114b0:	6006      	str	r6, [r0, #0]
 80114b2:	60c6      	str	r6, [r0, #12]
 80114b4:	69e6      	ldr	r6, [r4, #28]
 80114b6:	68f3      	ldr	r3, [r6, #12]
 80114b8:	b183      	cbz	r3, 80114dc <_Balloc+0x50>
 80114ba:	69e3      	ldr	r3, [r4, #28]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114c2:	b9b8      	cbnz	r0, 80114f4 <_Balloc+0x68>
 80114c4:	2101      	movs	r1, #1
 80114c6:	fa01 f605 	lsl.w	r6, r1, r5
 80114ca:	1d72      	adds	r2, r6, #5
 80114cc:	0092      	lsls	r2, r2, #2
 80114ce:	4620      	mov	r0, r4
 80114d0:	f000 ff52 	bl	8012378 <_calloc_r>
 80114d4:	b160      	cbz	r0, 80114f0 <_Balloc+0x64>
 80114d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114da:	e00e      	b.n	80114fa <_Balloc+0x6e>
 80114dc:	2221      	movs	r2, #33	@ 0x21
 80114de:	2104      	movs	r1, #4
 80114e0:	4620      	mov	r0, r4
 80114e2:	f000 ff49 	bl	8012378 <_calloc_r>
 80114e6:	69e3      	ldr	r3, [r4, #28]
 80114e8:	60f0      	str	r0, [r6, #12]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d1e4      	bne.n	80114ba <_Balloc+0x2e>
 80114f0:	2000      	movs	r0, #0
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	6802      	ldr	r2, [r0, #0]
 80114f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114fa:	2300      	movs	r3, #0
 80114fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011500:	e7f7      	b.n	80114f2 <_Balloc+0x66>
 8011502:	bf00      	nop
 8011504:	08014fae 	.word	0x08014fae
 8011508:	0801508e 	.word	0x0801508e

0801150c <_Bfree>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	69c6      	ldr	r6, [r0, #28]
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	b976      	cbnz	r6, 8011534 <_Bfree+0x28>
 8011516:	2010      	movs	r0, #16
 8011518:	f7fc feba 	bl	800e290 <malloc>
 801151c:	4602      	mov	r2, r0
 801151e:	61e8      	str	r0, [r5, #28]
 8011520:	b920      	cbnz	r0, 801152c <_Bfree+0x20>
 8011522:	4b09      	ldr	r3, [pc, #36]	@ (8011548 <_Bfree+0x3c>)
 8011524:	4809      	ldr	r0, [pc, #36]	@ (801154c <_Bfree+0x40>)
 8011526:	218f      	movs	r1, #143	@ 0x8f
 8011528:	f000 ff08 	bl	801233c <__assert_func>
 801152c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011530:	6006      	str	r6, [r0, #0]
 8011532:	60c6      	str	r6, [r0, #12]
 8011534:	b13c      	cbz	r4, 8011546 <_Bfree+0x3a>
 8011536:	69eb      	ldr	r3, [r5, #28]
 8011538:	6862      	ldr	r2, [r4, #4]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011540:	6021      	str	r1, [r4, #0]
 8011542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011546:	bd70      	pop	{r4, r5, r6, pc}
 8011548:	08014fae 	.word	0x08014fae
 801154c:	0801508e 	.word	0x0801508e

08011550 <__multadd>:
 8011550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011554:	690d      	ldr	r5, [r1, #16]
 8011556:	4607      	mov	r7, r0
 8011558:	460c      	mov	r4, r1
 801155a:	461e      	mov	r6, r3
 801155c:	f101 0c14 	add.w	ip, r1, #20
 8011560:	2000      	movs	r0, #0
 8011562:	f8dc 3000 	ldr.w	r3, [ip]
 8011566:	b299      	uxth	r1, r3
 8011568:	fb02 6101 	mla	r1, r2, r1, r6
 801156c:	0c1e      	lsrs	r6, r3, #16
 801156e:	0c0b      	lsrs	r3, r1, #16
 8011570:	fb02 3306 	mla	r3, r2, r6, r3
 8011574:	b289      	uxth	r1, r1
 8011576:	3001      	adds	r0, #1
 8011578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801157c:	4285      	cmp	r5, r0
 801157e:	f84c 1b04 	str.w	r1, [ip], #4
 8011582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011586:	dcec      	bgt.n	8011562 <__multadd+0x12>
 8011588:	b30e      	cbz	r6, 80115ce <__multadd+0x7e>
 801158a:	68a3      	ldr	r3, [r4, #8]
 801158c:	42ab      	cmp	r3, r5
 801158e:	dc19      	bgt.n	80115c4 <__multadd+0x74>
 8011590:	6861      	ldr	r1, [r4, #4]
 8011592:	4638      	mov	r0, r7
 8011594:	3101      	adds	r1, #1
 8011596:	f7ff ff79 	bl	801148c <_Balloc>
 801159a:	4680      	mov	r8, r0
 801159c:	b928      	cbnz	r0, 80115aa <__multadd+0x5a>
 801159e:	4602      	mov	r2, r0
 80115a0:	4b0c      	ldr	r3, [pc, #48]	@ (80115d4 <__multadd+0x84>)
 80115a2:	480d      	ldr	r0, [pc, #52]	@ (80115d8 <__multadd+0x88>)
 80115a4:	21ba      	movs	r1, #186	@ 0xba
 80115a6:	f000 fec9 	bl	801233c <__assert_func>
 80115aa:	6922      	ldr	r2, [r4, #16]
 80115ac:	3202      	adds	r2, #2
 80115ae:	f104 010c 	add.w	r1, r4, #12
 80115b2:	0092      	lsls	r2, r2, #2
 80115b4:	300c      	adds	r0, #12
 80115b6:	f7fe fd68 	bl	801008a <memcpy>
 80115ba:	4621      	mov	r1, r4
 80115bc:	4638      	mov	r0, r7
 80115be:	f7ff ffa5 	bl	801150c <_Bfree>
 80115c2:	4644      	mov	r4, r8
 80115c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115c8:	3501      	adds	r5, #1
 80115ca:	615e      	str	r6, [r3, #20]
 80115cc:	6125      	str	r5, [r4, #16]
 80115ce:	4620      	mov	r0, r4
 80115d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d4:	0801501d 	.word	0x0801501d
 80115d8:	0801508e 	.word	0x0801508e

080115dc <__s2b>:
 80115dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e0:	460c      	mov	r4, r1
 80115e2:	4615      	mov	r5, r2
 80115e4:	461f      	mov	r7, r3
 80115e6:	2209      	movs	r2, #9
 80115e8:	3308      	adds	r3, #8
 80115ea:	4606      	mov	r6, r0
 80115ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80115f0:	2100      	movs	r1, #0
 80115f2:	2201      	movs	r2, #1
 80115f4:	429a      	cmp	r2, r3
 80115f6:	db09      	blt.n	801160c <__s2b+0x30>
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7ff ff47 	bl	801148c <_Balloc>
 80115fe:	b940      	cbnz	r0, 8011612 <__s2b+0x36>
 8011600:	4602      	mov	r2, r0
 8011602:	4b19      	ldr	r3, [pc, #100]	@ (8011668 <__s2b+0x8c>)
 8011604:	4819      	ldr	r0, [pc, #100]	@ (801166c <__s2b+0x90>)
 8011606:	21d3      	movs	r1, #211	@ 0xd3
 8011608:	f000 fe98 	bl	801233c <__assert_func>
 801160c:	0052      	lsls	r2, r2, #1
 801160e:	3101      	adds	r1, #1
 8011610:	e7f0      	b.n	80115f4 <__s2b+0x18>
 8011612:	9b08      	ldr	r3, [sp, #32]
 8011614:	6143      	str	r3, [r0, #20]
 8011616:	2d09      	cmp	r5, #9
 8011618:	f04f 0301 	mov.w	r3, #1
 801161c:	6103      	str	r3, [r0, #16]
 801161e:	dd16      	ble.n	801164e <__s2b+0x72>
 8011620:	f104 0909 	add.w	r9, r4, #9
 8011624:	46c8      	mov	r8, r9
 8011626:	442c      	add	r4, r5
 8011628:	f818 3b01 	ldrb.w	r3, [r8], #1
 801162c:	4601      	mov	r1, r0
 801162e:	3b30      	subs	r3, #48	@ 0x30
 8011630:	220a      	movs	r2, #10
 8011632:	4630      	mov	r0, r6
 8011634:	f7ff ff8c 	bl	8011550 <__multadd>
 8011638:	45a0      	cmp	r8, r4
 801163a:	d1f5      	bne.n	8011628 <__s2b+0x4c>
 801163c:	f1a5 0408 	sub.w	r4, r5, #8
 8011640:	444c      	add	r4, r9
 8011642:	1b2d      	subs	r5, r5, r4
 8011644:	1963      	adds	r3, r4, r5
 8011646:	42bb      	cmp	r3, r7
 8011648:	db04      	blt.n	8011654 <__s2b+0x78>
 801164a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801164e:	340a      	adds	r4, #10
 8011650:	2509      	movs	r5, #9
 8011652:	e7f6      	b.n	8011642 <__s2b+0x66>
 8011654:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011658:	4601      	mov	r1, r0
 801165a:	3b30      	subs	r3, #48	@ 0x30
 801165c:	220a      	movs	r2, #10
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff ff76 	bl	8011550 <__multadd>
 8011664:	e7ee      	b.n	8011644 <__s2b+0x68>
 8011666:	bf00      	nop
 8011668:	0801501d 	.word	0x0801501d
 801166c:	0801508e 	.word	0x0801508e

08011670 <__hi0bits>:
 8011670:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011674:	4603      	mov	r3, r0
 8011676:	bf36      	itet	cc
 8011678:	0403      	lslcc	r3, r0, #16
 801167a:	2000      	movcs	r0, #0
 801167c:	2010      	movcc	r0, #16
 801167e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011682:	bf3c      	itt	cc
 8011684:	021b      	lslcc	r3, r3, #8
 8011686:	3008      	addcc	r0, #8
 8011688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801168c:	bf3c      	itt	cc
 801168e:	011b      	lslcc	r3, r3, #4
 8011690:	3004      	addcc	r0, #4
 8011692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011696:	bf3c      	itt	cc
 8011698:	009b      	lslcc	r3, r3, #2
 801169a:	3002      	addcc	r0, #2
 801169c:	2b00      	cmp	r3, #0
 801169e:	db05      	blt.n	80116ac <__hi0bits+0x3c>
 80116a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80116a4:	f100 0001 	add.w	r0, r0, #1
 80116a8:	bf08      	it	eq
 80116aa:	2020      	moveq	r0, #32
 80116ac:	4770      	bx	lr

080116ae <__lo0bits>:
 80116ae:	6803      	ldr	r3, [r0, #0]
 80116b0:	4602      	mov	r2, r0
 80116b2:	f013 0007 	ands.w	r0, r3, #7
 80116b6:	d00b      	beq.n	80116d0 <__lo0bits+0x22>
 80116b8:	07d9      	lsls	r1, r3, #31
 80116ba:	d421      	bmi.n	8011700 <__lo0bits+0x52>
 80116bc:	0798      	lsls	r0, r3, #30
 80116be:	bf49      	itett	mi
 80116c0:	085b      	lsrmi	r3, r3, #1
 80116c2:	089b      	lsrpl	r3, r3, #2
 80116c4:	2001      	movmi	r0, #1
 80116c6:	6013      	strmi	r3, [r2, #0]
 80116c8:	bf5c      	itt	pl
 80116ca:	6013      	strpl	r3, [r2, #0]
 80116cc:	2002      	movpl	r0, #2
 80116ce:	4770      	bx	lr
 80116d0:	b299      	uxth	r1, r3
 80116d2:	b909      	cbnz	r1, 80116d8 <__lo0bits+0x2a>
 80116d4:	0c1b      	lsrs	r3, r3, #16
 80116d6:	2010      	movs	r0, #16
 80116d8:	b2d9      	uxtb	r1, r3
 80116da:	b909      	cbnz	r1, 80116e0 <__lo0bits+0x32>
 80116dc:	3008      	adds	r0, #8
 80116de:	0a1b      	lsrs	r3, r3, #8
 80116e0:	0719      	lsls	r1, r3, #28
 80116e2:	bf04      	itt	eq
 80116e4:	091b      	lsreq	r3, r3, #4
 80116e6:	3004      	addeq	r0, #4
 80116e8:	0799      	lsls	r1, r3, #30
 80116ea:	bf04      	itt	eq
 80116ec:	089b      	lsreq	r3, r3, #2
 80116ee:	3002      	addeq	r0, #2
 80116f0:	07d9      	lsls	r1, r3, #31
 80116f2:	d403      	bmi.n	80116fc <__lo0bits+0x4e>
 80116f4:	085b      	lsrs	r3, r3, #1
 80116f6:	f100 0001 	add.w	r0, r0, #1
 80116fa:	d003      	beq.n	8011704 <__lo0bits+0x56>
 80116fc:	6013      	str	r3, [r2, #0]
 80116fe:	4770      	bx	lr
 8011700:	2000      	movs	r0, #0
 8011702:	4770      	bx	lr
 8011704:	2020      	movs	r0, #32
 8011706:	4770      	bx	lr

08011708 <__i2b>:
 8011708:	b510      	push	{r4, lr}
 801170a:	460c      	mov	r4, r1
 801170c:	2101      	movs	r1, #1
 801170e:	f7ff febd 	bl	801148c <_Balloc>
 8011712:	4602      	mov	r2, r0
 8011714:	b928      	cbnz	r0, 8011722 <__i2b+0x1a>
 8011716:	4b05      	ldr	r3, [pc, #20]	@ (801172c <__i2b+0x24>)
 8011718:	4805      	ldr	r0, [pc, #20]	@ (8011730 <__i2b+0x28>)
 801171a:	f240 1145 	movw	r1, #325	@ 0x145
 801171e:	f000 fe0d 	bl	801233c <__assert_func>
 8011722:	2301      	movs	r3, #1
 8011724:	6144      	str	r4, [r0, #20]
 8011726:	6103      	str	r3, [r0, #16]
 8011728:	bd10      	pop	{r4, pc}
 801172a:	bf00      	nop
 801172c:	0801501d 	.word	0x0801501d
 8011730:	0801508e 	.word	0x0801508e

08011734 <__multiply>:
 8011734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011738:	4614      	mov	r4, r2
 801173a:	690a      	ldr	r2, [r1, #16]
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	429a      	cmp	r2, r3
 8011740:	bfa8      	it	ge
 8011742:	4623      	movge	r3, r4
 8011744:	460f      	mov	r7, r1
 8011746:	bfa4      	itt	ge
 8011748:	460c      	movge	r4, r1
 801174a:	461f      	movge	r7, r3
 801174c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011750:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011754:	68a3      	ldr	r3, [r4, #8]
 8011756:	6861      	ldr	r1, [r4, #4]
 8011758:	eb0a 0609 	add.w	r6, sl, r9
 801175c:	42b3      	cmp	r3, r6
 801175e:	b085      	sub	sp, #20
 8011760:	bfb8      	it	lt
 8011762:	3101      	addlt	r1, #1
 8011764:	f7ff fe92 	bl	801148c <_Balloc>
 8011768:	b930      	cbnz	r0, 8011778 <__multiply+0x44>
 801176a:	4602      	mov	r2, r0
 801176c:	4b44      	ldr	r3, [pc, #272]	@ (8011880 <__multiply+0x14c>)
 801176e:	4845      	ldr	r0, [pc, #276]	@ (8011884 <__multiply+0x150>)
 8011770:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011774:	f000 fde2 	bl	801233c <__assert_func>
 8011778:	f100 0514 	add.w	r5, r0, #20
 801177c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011780:	462b      	mov	r3, r5
 8011782:	2200      	movs	r2, #0
 8011784:	4543      	cmp	r3, r8
 8011786:	d321      	bcc.n	80117cc <__multiply+0x98>
 8011788:	f107 0114 	add.w	r1, r7, #20
 801178c:	f104 0214 	add.w	r2, r4, #20
 8011790:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011794:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011798:	9302      	str	r3, [sp, #8]
 801179a:	1b13      	subs	r3, r2, r4
 801179c:	3b15      	subs	r3, #21
 801179e:	f023 0303 	bic.w	r3, r3, #3
 80117a2:	3304      	adds	r3, #4
 80117a4:	f104 0715 	add.w	r7, r4, #21
 80117a8:	42ba      	cmp	r2, r7
 80117aa:	bf38      	it	cc
 80117ac:	2304      	movcc	r3, #4
 80117ae:	9301      	str	r3, [sp, #4]
 80117b0:	9b02      	ldr	r3, [sp, #8]
 80117b2:	9103      	str	r1, [sp, #12]
 80117b4:	428b      	cmp	r3, r1
 80117b6:	d80c      	bhi.n	80117d2 <__multiply+0x9e>
 80117b8:	2e00      	cmp	r6, #0
 80117ba:	dd03      	ble.n	80117c4 <__multiply+0x90>
 80117bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d05b      	beq.n	801187c <__multiply+0x148>
 80117c4:	6106      	str	r6, [r0, #16]
 80117c6:	b005      	add	sp, #20
 80117c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117cc:	f843 2b04 	str.w	r2, [r3], #4
 80117d0:	e7d8      	b.n	8011784 <__multiply+0x50>
 80117d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80117d6:	f1ba 0f00 	cmp.w	sl, #0
 80117da:	d024      	beq.n	8011826 <__multiply+0xf2>
 80117dc:	f104 0e14 	add.w	lr, r4, #20
 80117e0:	46a9      	mov	r9, r5
 80117e2:	f04f 0c00 	mov.w	ip, #0
 80117e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80117ea:	f8d9 3000 	ldr.w	r3, [r9]
 80117ee:	fa1f fb87 	uxth.w	fp, r7
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80117f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80117fc:	f8d9 7000 	ldr.w	r7, [r9]
 8011800:	4463      	add	r3, ip
 8011802:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011806:	fb0a c70b 	mla	r7, sl, fp, ip
 801180a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801180e:	b29b      	uxth	r3, r3
 8011810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011814:	4572      	cmp	r2, lr
 8011816:	f849 3b04 	str.w	r3, [r9], #4
 801181a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801181e:	d8e2      	bhi.n	80117e6 <__multiply+0xb2>
 8011820:	9b01      	ldr	r3, [sp, #4]
 8011822:	f845 c003 	str.w	ip, [r5, r3]
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801182c:	3104      	adds	r1, #4
 801182e:	f1b9 0f00 	cmp.w	r9, #0
 8011832:	d021      	beq.n	8011878 <__multiply+0x144>
 8011834:	682b      	ldr	r3, [r5, #0]
 8011836:	f104 0c14 	add.w	ip, r4, #20
 801183a:	46ae      	mov	lr, r5
 801183c:	f04f 0a00 	mov.w	sl, #0
 8011840:	f8bc b000 	ldrh.w	fp, [ip]
 8011844:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011848:	fb09 770b 	mla	r7, r9, fp, r7
 801184c:	4457      	add	r7, sl
 801184e:	b29b      	uxth	r3, r3
 8011850:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011854:	f84e 3b04 	str.w	r3, [lr], #4
 8011858:	f85c 3b04 	ldr.w	r3, [ip], #4
 801185c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011860:	f8be 3000 	ldrh.w	r3, [lr]
 8011864:	fb09 330a 	mla	r3, r9, sl, r3
 8011868:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801186c:	4562      	cmp	r2, ip
 801186e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011872:	d8e5      	bhi.n	8011840 <__multiply+0x10c>
 8011874:	9f01      	ldr	r7, [sp, #4]
 8011876:	51eb      	str	r3, [r5, r7]
 8011878:	3504      	adds	r5, #4
 801187a:	e799      	b.n	80117b0 <__multiply+0x7c>
 801187c:	3e01      	subs	r6, #1
 801187e:	e79b      	b.n	80117b8 <__multiply+0x84>
 8011880:	0801501d 	.word	0x0801501d
 8011884:	0801508e 	.word	0x0801508e

08011888 <__pow5mult>:
 8011888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801188c:	4615      	mov	r5, r2
 801188e:	f012 0203 	ands.w	r2, r2, #3
 8011892:	4607      	mov	r7, r0
 8011894:	460e      	mov	r6, r1
 8011896:	d007      	beq.n	80118a8 <__pow5mult+0x20>
 8011898:	4c25      	ldr	r4, [pc, #148]	@ (8011930 <__pow5mult+0xa8>)
 801189a:	3a01      	subs	r2, #1
 801189c:	2300      	movs	r3, #0
 801189e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118a2:	f7ff fe55 	bl	8011550 <__multadd>
 80118a6:	4606      	mov	r6, r0
 80118a8:	10ad      	asrs	r5, r5, #2
 80118aa:	d03d      	beq.n	8011928 <__pow5mult+0xa0>
 80118ac:	69fc      	ldr	r4, [r7, #28]
 80118ae:	b97c      	cbnz	r4, 80118d0 <__pow5mult+0x48>
 80118b0:	2010      	movs	r0, #16
 80118b2:	f7fc fced 	bl	800e290 <malloc>
 80118b6:	4602      	mov	r2, r0
 80118b8:	61f8      	str	r0, [r7, #28]
 80118ba:	b928      	cbnz	r0, 80118c8 <__pow5mult+0x40>
 80118bc:	4b1d      	ldr	r3, [pc, #116]	@ (8011934 <__pow5mult+0xac>)
 80118be:	481e      	ldr	r0, [pc, #120]	@ (8011938 <__pow5mult+0xb0>)
 80118c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118c4:	f000 fd3a 	bl	801233c <__assert_func>
 80118c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118cc:	6004      	str	r4, [r0, #0]
 80118ce:	60c4      	str	r4, [r0, #12]
 80118d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118d8:	b94c      	cbnz	r4, 80118ee <__pow5mult+0x66>
 80118da:	f240 2171 	movw	r1, #625	@ 0x271
 80118de:	4638      	mov	r0, r7
 80118e0:	f7ff ff12 	bl	8011708 <__i2b>
 80118e4:	2300      	movs	r3, #0
 80118e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80118ea:	4604      	mov	r4, r0
 80118ec:	6003      	str	r3, [r0, #0]
 80118ee:	f04f 0900 	mov.w	r9, #0
 80118f2:	07eb      	lsls	r3, r5, #31
 80118f4:	d50a      	bpl.n	801190c <__pow5mult+0x84>
 80118f6:	4631      	mov	r1, r6
 80118f8:	4622      	mov	r2, r4
 80118fa:	4638      	mov	r0, r7
 80118fc:	f7ff ff1a 	bl	8011734 <__multiply>
 8011900:	4631      	mov	r1, r6
 8011902:	4680      	mov	r8, r0
 8011904:	4638      	mov	r0, r7
 8011906:	f7ff fe01 	bl	801150c <_Bfree>
 801190a:	4646      	mov	r6, r8
 801190c:	106d      	asrs	r5, r5, #1
 801190e:	d00b      	beq.n	8011928 <__pow5mult+0xa0>
 8011910:	6820      	ldr	r0, [r4, #0]
 8011912:	b938      	cbnz	r0, 8011924 <__pow5mult+0x9c>
 8011914:	4622      	mov	r2, r4
 8011916:	4621      	mov	r1, r4
 8011918:	4638      	mov	r0, r7
 801191a:	f7ff ff0b 	bl	8011734 <__multiply>
 801191e:	6020      	str	r0, [r4, #0]
 8011920:	f8c0 9000 	str.w	r9, [r0]
 8011924:	4604      	mov	r4, r0
 8011926:	e7e4      	b.n	80118f2 <__pow5mult+0x6a>
 8011928:	4630      	mov	r0, r6
 801192a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192e:	bf00      	nop
 8011930:	080150e8 	.word	0x080150e8
 8011934:	08014fae 	.word	0x08014fae
 8011938:	0801508e 	.word	0x0801508e

0801193c <__lshift>:
 801193c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011940:	460c      	mov	r4, r1
 8011942:	6849      	ldr	r1, [r1, #4]
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801194a:	68a3      	ldr	r3, [r4, #8]
 801194c:	4607      	mov	r7, r0
 801194e:	4691      	mov	r9, r2
 8011950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011954:	f108 0601 	add.w	r6, r8, #1
 8011958:	42b3      	cmp	r3, r6
 801195a:	db0b      	blt.n	8011974 <__lshift+0x38>
 801195c:	4638      	mov	r0, r7
 801195e:	f7ff fd95 	bl	801148c <_Balloc>
 8011962:	4605      	mov	r5, r0
 8011964:	b948      	cbnz	r0, 801197a <__lshift+0x3e>
 8011966:	4602      	mov	r2, r0
 8011968:	4b28      	ldr	r3, [pc, #160]	@ (8011a0c <__lshift+0xd0>)
 801196a:	4829      	ldr	r0, [pc, #164]	@ (8011a10 <__lshift+0xd4>)
 801196c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011970:	f000 fce4 	bl	801233c <__assert_func>
 8011974:	3101      	adds	r1, #1
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	e7ee      	b.n	8011958 <__lshift+0x1c>
 801197a:	2300      	movs	r3, #0
 801197c:	f100 0114 	add.w	r1, r0, #20
 8011980:	f100 0210 	add.w	r2, r0, #16
 8011984:	4618      	mov	r0, r3
 8011986:	4553      	cmp	r3, sl
 8011988:	db33      	blt.n	80119f2 <__lshift+0xb6>
 801198a:	6920      	ldr	r0, [r4, #16]
 801198c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011990:	f104 0314 	add.w	r3, r4, #20
 8011994:	f019 091f 	ands.w	r9, r9, #31
 8011998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801199c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119a0:	d02b      	beq.n	80119fa <__lshift+0xbe>
 80119a2:	f1c9 0e20 	rsb	lr, r9, #32
 80119a6:	468a      	mov	sl, r1
 80119a8:	2200      	movs	r2, #0
 80119aa:	6818      	ldr	r0, [r3, #0]
 80119ac:	fa00 f009 	lsl.w	r0, r0, r9
 80119b0:	4310      	orrs	r0, r2
 80119b2:	f84a 0b04 	str.w	r0, [sl], #4
 80119b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ba:	459c      	cmp	ip, r3
 80119bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80119c0:	d8f3      	bhi.n	80119aa <__lshift+0x6e>
 80119c2:	ebac 0304 	sub.w	r3, ip, r4
 80119c6:	3b15      	subs	r3, #21
 80119c8:	f023 0303 	bic.w	r3, r3, #3
 80119cc:	3304      	adds	r3, #4
 80119ce:	f104 0015 	add.w	r0, r4, #21
 80119d2:	4584      	cmp	ip, r0
 80119d4:	bf38      	it	cc
 80119d6:	2304      	movcc	r3, #4
 80119d8:	50ca      	str	r2, [r1, r3]
 80119da:	b10a      	cbz	r2, 80119e0 <__lshift+0xa4>
 80119dc:	f108 0602 	add.w	r6, r8, #2
 80119e0:	3e01      	subs	r6, #1
 80119e2:	4638      	mov	r0, r7
 80119e4:	612e      	str	r6, [r5, #16]
 80119e6:	4621      	mov	r1, r4
 80119e8:	f7ff fd90 	bl	801150c <_Bfree>
 80119ec:	4628      	mov	r0, r5
 80119ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80119f6:	3301      	adds	r3, #1
 80119f8:	e7c5      	b.n	8011986 <__lshift+0x4a>
 80119fa:	3904      	subs	r1, #4
 80119fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a04:	459c      	cmp	ip, r3
 8011a06:	d8f9      	bhi.n	80119fc <__lshift+0xc0>
 8011a08:	e7ea      	b.n	80119e0 <__lshift+0xa4>
 8011a0a:	bf00      	nop
 8011a0c:	0801501d 	.word	0x0801501d
 8011a10:	0801508e 	.word	0x0801508e

08011a14 <__mcmp>:
 8011a14:	690a      	ldr	r2, [r1, #16]
 8011a16:	4603      	mov	r3, r0
 8011a18:	6900      	ldr	r0, [r0, #16]
 8011a1a:	1a80      	subs	r0, r0, r2
 8011a1c:	b530      	push	{r4, r5, lr}
 8011a1e:	d10e      	bne.n	8011a3e <__mcmp+0x2a>
 8011a20:	3314      	adds	r3, #20
 8011a22:	3114      	adds	r1, #20
 8011a24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a34:	4295      	cmp	r5, r2
 8011a36:	d003      	beq.n	8011a40 <__mcmp+0x2c>
 8011a38:	d205      	bcs.n	8011a46 <__mcmp+0x32>
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3e:	bd30      	pop	{r4, r5, pc}
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	d3f3      	bcc.n	8011a2c <__mcmp+0x18>
 8011a44:	e7fb      	b.n	8011a3e <__mcmp+0x2a>
 8011a46:	2001      	movs	r0, #1
 8011a48:	e7f9      	b.n	8011a3e <__mcmp+0x2a>
	...

08011a4c <__mdiff>:
 8011a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a50:	4689      	mov	r9, r1
 8011a52:	4606      	mov	r6, r0
 8011a54:	4611      	mov	r1, r2
 8011a56:	4648      	mov	r0, r9
 8011a58:	4614      	mov	r4, r2
 8011a5a:	f7ff ffdb 	bl	8011a14 <__mcmp>
 8011a5e:	1e05      	subs	r5, r0, #0
 8011a60:	d112      	bne.n	8011a88 <__mdiff+0x3c>
 8011a62:	4629      	mov	r1, r5
 8011a64:	4630      	mov	r0, r6
 8011a66:	f7ff fd11 	bl	801148c <_Balloc>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	b928      	cbnz	r0, 8011a7a <__mdiff+0x2e>
 8011a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8011b6c <__mdiff+0x120>)
 8011a70:	f240 2137 	movw	r1, #567	@ 0x237
 8011a74:	483e      	ldr	r0, [pc, #248]	@ (8011b70 <__mdiff+0x124>)
 8011a76:	f000 fc61 	bl	801233c <__assert_func>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a80:	4610      	mov	r0, r2
 8011a82:	b003      	add	sp, #12
 8011a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a88:	bfbc      	itt	lt
 8011a8a:	464b      	movlt	r3, r9
 8011a8c:	46a1      	movlt	r9, r4
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a94:	bfba      	itte	lt
 8011a96:	461c      	movlt	r4, r3
 8011a98:	2501      	movlt	r5, #1
 8011a9a:	2500      	movge	r5, #0
 8011a9c:	f7ff fcf6 	bl	801148c <_Balloc>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	b918      	cbnz	r0, 8011aac <__mdiff+0x60>
 8011aa4:	4b31      	ldr	r3, [pc, #196]	@ (8011b6c <__mdiff+0x120>)
 8011aa6:	f240 2145 	movw	r1, #581	@ 0x245
 8011aaa:	e7e3      	b.n	8011a74 <__mdiff+0x28>
 8011aac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ab0:	6926      	ldr	r6, [r4, #16]
 8011ab2:	60c5      	str	r5, [r0, #12]
 8011ab4:	f109 0310 	add.w	r3, r9, #16
 8011ab8:	f109 0514 	add.w	r5, r9, #20
 8011abc:	f104 0e14 	add.w	lr, r4, #20
 8011ac0:	f100 0b14 	add.w	fp, r0, #20
 8011ac4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011ac8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011acc:	9301      	str	r3, [sp, #4]
 8011ace:	46d9      	mov	r9, fp
 8011ad0:	f04f 0c00 	mov.w	ip, #0
 8011ad4:	9b01      	ldr	r3, [sp, #4]
 8011ad6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011ada:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ade:	9301      	str	r3, [sp, #4]
 8011ae0:	fa1f f38a 	uxth.w	r3, sl
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	b283      	uxth	r3, r0
 8011ae8:	1acb      	subs	r3, r1, r3
 8011aea:	0c00      	lsrs	r0, r0, #16
 8011aec:	4463      	add	r3, ip
 8011aee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011af2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011afc:	4576      	cmp	r6, lr
 8011afe:	f849 3b04 	str.w	r3, [r9], #4
 8011b02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b06:	d8e5      	bhi.n	8011ad4 <__mdiff+0x88>
 8011b08:	1b33      	subs	r3, r6, r4
 8011b0a:	3b15      	subs	r3, #21
 8011b0c:	f023 0303 	bic.w	r3, r3, #3
 8011b10:	3415      	adds	r4, #21
 8011b12:	3304      	adds	r3, #4
 8011b14:	42a6      	cmp	r6, r4
 8011b16:	bf38      	it	cc
 8011b18:	2304      	movcc	r3, #4
 8011b1a:	441d      	add	r5, r3
 8011b1c:	445b      	add	r3, fp
 8011b1e:	461e      	mov	r6, r3
 8011b20:	462c      	mov	r4, r5
 8011b22:	4544      	cmp	r4, r8
 8011b24:	d30e      	bcc.n	8011b44 <__mdiff+0xf8>
 8011b26:	f108 0103 	add.w	r1, r8, #3
 8011b2a:	1b49      	subs	r1, r1, r5
 8011b2c:	f021 0103 	bic.w	r1, r1, #3
 8011b30:	3d03      	subs	r5, #3
 8011b32:	45a8      	cmp	r8, r5
 8011b34:	bf38      	it	cc
 8011b36:	2100      	movcc	r1, #0
 8011b38:	440b      	add	r3, r1
 8011b3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b3e:	b191      	cbz	r1, 8011b66 <__mdiff+0x11a>
 8011b40:	6117      	str	r7, [r2, #16]
 8011b42:	e79d      	b.n	8011a80 <__mdiff+0x34>
 8011b44:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b48:	46e6      	mov	lr, ip
 8011b4a:	0c08      	lsrs	r0, r1, #16
 8011b4c:	fa1c fc81 	uxtah	ip, ip, r1
 8011b50:	4471      	add	r1, lr
 8011b52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b56:	b289      	uxth	r1, r1
 8011b58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b5c:	f846 1b04 	str.w	r1, [r6], #4
 8011b60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b64:	e7dd      	b.n	8011b22 <__mdiff+0xd6>
 8011b66:	3f01      	subs	r7, #1
 8011b68:	e7e7      	b.n	8011b3a <__mdiff+0xee>
 8011b6a:	bf00      	nop
 8011b6c:	0801501d 	.word	0x0801501d
 8011b70:	0801508e 	.word	0x0801508e

08011b74 <__ulp>:
 8011b74:	b082      	sub	sp, #8
 8011b76:	ed8d 0b00 	vstr	d0, [sp]
 8011b7a:	9a01      	ldr	r2, [sp, #4]
 8011b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011bbc <__ulp+0x48>)
 8011b7e:	4013      	ands	r3, r2
 8011b80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	dc08      	bgt.n	8011b9a <__ulp+0x26>
 8011b88:	425b      	negs	r3, r3
 8011b8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011b8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b92:	da04      	bge.n	8011b9e <__ulp+0x2a>
 8011b94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011b98:	4113      	asrs	r3, r2
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	e008      	b.n	8011bb0 <__ulp+0x3c>
 8011b9e:	f1a2 0314 	sub.w	r3, r2, #20
 8011ba2:	2b1e      	cmp	r3, #30
 8011ba4:	bfda      	itte	le
 8011ba6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011baa:	40da      	lsrle	r2, r3
 8011bac:	2201      	movgt	r2, #1
 8011bae:	2300      	movs	r3, #0
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	4610      	mov	r0, r2
 8011bb4:	ec41 0b10 	vmov	d0, r0, r1
 8011bb8:	b002      	add	sp, #8
 8011bba:	4770      	bx	lr
 8011bbc:	7ff00000 	.word	0x7ff00000

08011bc0 <__b2d>:
 8011bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc4:	6906      	ldr	r6, [r0, #16]
 8011bc6:	f100 0814 	add.w	r8, r0, #20
 8011bca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bce:	1f37      	subs	r7, r6, #4
 8011bd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	f7ff fd4b 	bl	8011670 <__hi0bits>
 8011bda:	f1c0 0320 	rsb	r3, r0, #32
 8011bde:	280a      	cmp	r0, #10
 8011be0:	600b      	str	r3, [r1, #0]
 8011be2:	491b      	ldr	r1, [pc, #108]	@ (8011c50 <__b2d+0x90>)
 8011be4:	dc15      	bgt.n	8011c12 <__b2d+0x52>
 8011be6:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bea:	fa22 f30c 	lsr.w	r3, r2, ip
 8011bee:	45b8      	cmp	r8, r7
 8011bf0:	ea43 0501 	orr.w	r5, r3, r1
 8011bf4:	bf34      	ite	cc
 8011bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bfa:	2300      	movcs	r3, #0
 8011bfc:	3015      	adds	r0, #21
 8011bfe:	fa02 f000 	lsl.w	r0, r2, r0
 8011c02:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c06:	4303      	orrs	r3, r0
 8011c08:	461c      	mov	r4, r3
 8011c0a:	ec45 4b10 	vmov	d0, r4, r5
 8011c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c12:	45b8      	cmp	r8, r7
 8011c14:	bf3a      	itte	cc
 8011c16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c1a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c1e:	2300      	movcs	r3, #0
 8011c20:	380b      	subs	r0, #11
 8011c22:	d012      	beq.n	8011c4a <__b2d+0x8a>
 8011c24:	f1c0 0120 	rsb	r1, r0, #32
 8011c28:	fa23 f401 	lsr.w	r4, r3, r1
 8011c2c:	4082      	lsls	r2, r0
 8011c2e:	4322      	orrs	r2, r4
 8011c30:	4547      	cmp	r7, r8
 8011c32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c36:	bf8c      	ite	hi
 8011c38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c3c:	2200      	movls	r2, #0
 8011c3e:	4083      	lsls	r3, r0
 8011c40:	40ca      	lsrs	r2, r1
 8011c42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c46:	4313      	orrs	r3, r2
 8011c48:	e7de      	b.n	8011c08 <__b2d+0x48>
 8011c4a:	ea42 0501 	orr.w	r5, r2, r1
 8011c4e:	e7db      	b.n	8011c08 <__b2d+0x48>
 8011c50:	3ff00000 	.word	0x3ff00000

08011c54 <__d2b>:
 8011c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c58:	460f      	mov	r7, r1
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	ec59 8b10 	vmov	r8, r9, d0
 8011c60:	4616      	mov	r6, r2
 8011c62:	f7ff fc13 	bl	801148c <_Balloc>
 8011c66:	4604      	mov	r4, r0
 8011c68:	b930      	cbnz	r0, 8011c78 <__d2b+0x24>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	4b23      	ldr	r3, [pc, #140]	@ (8011cfc <__d2b+0xa8>)
 8011c6e:	4824      	ldr	r0, [pc, #144]	@ (8011d00 <__d2b+0xac>)
 8011c70:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c74:	f000 fb62 	bl	801233c <__assert_func>
 8011c78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c80:	b10d      	cbz	r5, 8011c86 <__d2b+0x32>
 8011c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	f1b8 0300 	subs.w	r3, r8, #0
 8011c8c:	d023      	beq.n	8011cd6 <__d2b+0x82>
 8011c8e:	4668      	mov	r0, sp
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	f7ff fd0c 	bl	80116ae <__lo0bits>
 8011c96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c9a:	b1d0      	cbz	r0, 8011cd2 <__d2b+0x7e>
 8011c9c:	f1c0 0320 	rsb	r3, r0, #32
 8011ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ca4:	430b      	orrs	r3, r1
 8011ca6:	40c2      	lsrs	r2, r0
 8011ca8:	6163      	str	r3, [r4, #20]
 8011caa:	9201      	str	r2, [sp, #4]
 8011cac:	9b01      	ldr	r3, [sp, #4]
 8011cae:	61a3      	str	r3, [r4, #24]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	bf0c      	ite	eq
 8011cb4:	2201      	moveq	r2, #1
 8011cb6:	2202      	movne	r2, #2
 8011cb8:	6122      	str	r2, [r4, #16]
 8011cba:	b1a5      	cbz	r5, 8011ce6 <__d2b+0x92>
 8011cbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cc0:	4405      	add	r5, r0
 8011cc2:	603d      	str	r5, [r7, #0]
 8011cc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cc8:	6030      	str	r0, [r6, #0]
 8011cca:	4620      	mov	r0, r4
 8011ccc:	b003      	add	sp, #12
 8011cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	6161      	str	r1, [r4, #20]
 8011cd4:	e7ea      	b.n	8011cac <__d2b+0x58>
 8011cd6:	a801      	add	r0, sp, #4
 8011cd8:	f7ff fce9 	bl	80116ae <__lo0bits>
 8011cdc:	9b01      	ldr	r3, [sp, #4]
 8011cde:	6163      	str	r3, [r4, #20]
 8011ce0:	3020      	adds	r0, #32
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	e7e8      	b.n	8011cb8 <__d2b+0x64>
 8011ce6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011cee:	6038      	str	r0, [r7, #0]
 8011cf0:	6918      	ldr	r0, [r3, #16]
 8011cf2:	f7ff fcbd 	bl	8011670 <__hi0bits>
 8011cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cfa:	e7e5      	b.n	8011cc8 <__d2b+0x74>
 8011cfc:	0801501d 	.word	0x0801501d
 8011d00:	0801508e 	.word	0x0801508e

08011d04 <__ratio>:
 8011d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d08:	b085      	sub	sp, #20
 8011d0a:	e9cd 1000 	strd	r1, r0, [sp]
 8011d0e:	a902      	add	r1, sp, #8
 8011d10:	f7ff ff56 	bl	8011bc0 <__b2d>
 8011d14:	9800      	ldr	r0, [sp, #0]
 8011d16:	a903      	add	r1, sp, #12
 8011d18:	ec55 4b10 	vmov	r4, r5, d0
 8011d1c:	f7ff ff50 	bl	8011bc0 <__b2d>
 8011d20:	9b01      	ldr	r3, [sp, #4]
 8011d22:	6919      	ldr	r1, [r3, #16]
 8011d24:	9b00      	ldr	r3, [sp, #0]
 8011d26:	691b      	ldr	r3, [r3, #16]
 8011d28:	1ac9      	subs	r1, r1, r3
 8011d2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d2e:	1a9b      	subs	r3, r3, r2
 8011d30:	ec5b ab10 	vmov	sl, fp, d0
 8011d34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bfce      	itee	gt
 8011d3c:	462a      	movgt	r2, r5
 8011d3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d42:	465a      	movle	r2, fp
 8011d44:	462f      	mov	r7, r5
 8011d46:	46d9      	mov	r9, fp
 8011d48:	bfcc      	ite	gt
 8011d4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011d52:	464b      	mov	r3, r9
 8011d54:	4652      	mov	r2, sl
 8011d56:	4620      	mov	r0, r4
 8011d58:	4639      	mov	r1, r7
 8011d5a:	f7ee fd97 	bl	800088c <__aeabi_ddiv>
 8011d5e:	ec41 0b10 	vmov	d0, r0, r1
 8011d62:	b005      	add	sp, #20
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d68 <__copybits>:
 8011d68:	3901      	subs	r1, #1
 8011d6a:	b570      	push	{r4, r5, r6, lr}
 8011d6c:	1149      	asrs	r1, r1, #5
 8011d6e:	6914      	ldr	r4, [r2, #16]
 8011d70:	3101      	adds	r1, #1
 8011d72:	f102 0314 	add.w	r3, r2, #20
 8011d76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d7e:	1f05      	subs	r5, r0, #4
 8011d80:	42a3      	cmp	r3, r4
 8011d82:	d30c      	bcc.n	8011d9e <__copybits+0x36>
 8011d84:	1aa3      	subs	r3, r4, r2
 8011d86:	3b11      	subs	r3, #17
 8011d88:	f023 0303 	bic.w	r3, r3, #3
 8011d8c:	3211      	adds	r2, #17
 8011d8e:	42a2      	cmp	r2, r4
 8011d90:	bf88      	it	hi
 8011d92:	2300      	movhi	r3, #0
 8011d94:	4418      	add	r0, r3
 8011d96:	2300      	movs	r3, #0
 8011d98:	4288      	cmp	r0, r1
 8011d9a:	d305      	bcc.n	8011da8 <__copybits+0x40>
 8011d9c:	bd70      	pop	{r4, r5, r6, pc}
 8011d9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011da2:	f845 6f04 	str.w	r6, [r5, #4]!
 8011da6:	e7eb      	b.n	8011d80 <__copybits+0x18>
 8011da8:	f840 3b04 	str.w	r3, [r0], #4
 8011dac:	e7f4      	b.n	8011d98 <__copybits+0x30>

08011dae <__any_on>:
 8011dae:	f100 0214 	add.w	r2, r0, #20
 8011db2:	6900      	ldr	r0, [r0, #16]
 8011db4:	114b      	asrs	r3, r1, #5
 8011db6:	4298      	cmp	r0, r3
 8011db8:	b510      	push	{r4, lr}
 8011dba:	db11      	blt.n	8011de0 <__any_on+0x32>
 8011dbc:	dd0a      	ble.n	8011dd4 <__any_on+0x26>
 8011dbe:	f011 011f 	ands.w	r1, r1, #31
 8011dc2:	d007      	beq.n	8011dd4 <__any_on+0x26>
 8011dc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dc8:	fa24 f001 	lsr.w	r0, r4, r1
 8011dcc:	fa00 f101 	lsl.w	r1, r0, r1
 8011dd0:	428c      	cmp	r4, r1
 8011dd2:	d10b      	bne.n	8011dec <__any_on+0x3e>
 8011dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	d803      	bhi.n	8011de4 <__any_on+0x36>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	bd10      	pop	{r4, pc}
 8011de0:	4603      	mov	r3, r0
 8011de2:	e7f7      	b.n	8011dd4 <__any_on+0x26>
 8011de4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011de8:	2900      	cmp	r1, #0
 8011dea:	d0f5      	beq.n	8011dd8 <__any_on+0x2a>
 8011dec:	2001      	movs	r0, #1
 8011dee:	e7f6      	b.n	8011dde <__any_on+0x30>

08011df0 <_strtol_l.constprop.0>:
 8011df0:	2b24      	cmp	r3, #36	@ 0x24
 8011df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df6:	4686      	mov	lr, r0
 8011df8:	4690      	mov	r8, r2
 8011dfa:	d801      	bhi.n	8011e00 <_strtol_l.constprop.0+0x10>
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d106      	bne.n	8011e0e <_strtol_l.constprop.0+0x1e>
 8011e00:	f7fe f916 	bl	8010030 <__errno>
 8011e04:	2316      	movs	r3, #22
 8011e06:	6003      	str	r3, [r0, #0]
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e0e:	4834      	ldr	r0, [pc, #208]	@ (8011ee0 <_strtol_l.constprop.0+0xf0>)
 8011e10:	460d      	mov	r5, r1
 8011e12:	462a      	mov	r2, r5
 8011e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e18:	5d06      	ldrb	r6, [r0, r4]
 8011e1a:	f016 0608 	ands.w	r6, r6, #8
 8011e1e:	d1f8      	bne.n	8011e12 <_strtol_l.constprop.0+0x22>
 8011e20:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e22:	d12d      	bne.n	8011e80 <_strtol_l.constprop.0+0x90>
 8011e24:	782c      	ldrb	r4, [r5, #0]
 8011e26:	2601      	movs	r6, #1
 8011e28:	1c95      	adds	r5, r2, #2
 8011e2a:	f033 0210 	bics.w	r2, r3, #16
 8011e2e:	d109      	bne.n	8011e44 <_strtol_l.constprop.0+0x54>
 8011e30:	2c30      	cmp	r4, #48	@ 0x30
 8011e32:	d12a      	bne.n	8011e8a <_strtol_l.constprop.0+0x9a>
 8011e34:	782a      	ldrb	r2, [r5, #0]
 8011e36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e3a:	2a58      	cmp	r2, #88	@ 0x58
 8011e3c:	d125      	bne.n	8011e8a <_strtol_l.constprop.0+0x9a>
 8011e3e:	786c      	ldrb	r4, [r5, #1]
 8011e40:	2310      	movs	r3, #16
 8011e42:	3502      	adds	r5, #2
 8011e44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	fbbc f9f3 	udiv	r9, ip, r3
 8011e52:	4610      	mov	r0, r2
 8011e54:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e5c:	2f09      	cmp	r7, #9
 8011e5e:	d81b      	bhi.n	8011e98 <_strtol_l.constprop.0+0xa8>
 8011e60:	463c      	mov	r4, r7
 8011e62:	42a3      	cmp	r3, r4
 8011e64:	dd27      	ble.n	8011eb6 <_strtol_l.constprop.0+0xc6>
 8011e66:	1c57      	adds	r7, r2, #1
 8011e68:	d007      	beq.n	8011e7a <_strtol_l.constprop.0+0x8a>
 8011e6a:	4581      	cmp	r9, r0
 8011e6c:	d320      	bcc.n	8011eb0 <_strtol_l.constprop.0+0xc0>
 8011e6e:	d101      	bne.n	8011e74 <_strtol_l.constprop.0+0x84>
 8011e70:	45a2      	cmp	sl, r4
 8011e72:	db1d      	blt.n	8011eb0 <_strtol_l.constprop.0+0xc0>
 8011e74:	fb00 4003 	mla	r0, r0, r3, r4
 8011e78:	2201      	movs	r2, #1
 8011e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e7e:	e7eb      	b.n	8011e58 <_strtol_l.constprop.0+0x68>
 8011e80:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e82:	bf04      	itt	eq
 8011e84:	782c      	ldrbeq	r4, [r5, #0]
 8011e86:	1c95      	addeq	r5, r2, #2
 8011e88:	e7cf      	b.n	8011e2a <_strtol_l.constprop.0+0x3a>
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1da      	bne.n	8011e44 <_strtol_l.constprop.0+0x54>
 8011e8e:	2c30      	cmp	r4, #48	@ 0x30
 8011e90:	bf0c      	ite	eq
 8011e92:	2308      	moveq	r3, #8
 8011e94:	230a      	movne	r3, #10
 8011e96:	e7d5      	b.n	8011e44 <_strtol_l.constprop.0+0x54>
 8011e98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e9c:	2f19      	cmp	r7, #25
 8011e9e:	d801      	bhi.n	8011ea4 <_strtol_l.constprop.0+0xb4>
 8011ea0:	3c37      	subs	r4, #55	@ 0x37
 8011ea2:	e7de      	b.n	8011e62 <_strtol_l.constprop.0+0x72>
 8011ea4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011ea8:	2f19      	cmp	r7, #25
 8011eaa:	d804      	bhi.n	8011eb6 <_strtol_l.constprop.0+0xc6>
 8011eac:	3c57      	subs	r4, #87	@ 0x57
 8011eae:	e7d8      	b.n	8011e62 <_strtol_l.constprop.0+0x72>
 8011eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb4:	e7e1      	b.n	8011e7a <_strtol_l.constprop.0+0x8a>
 8011eb6:	1c53      	adds	r3, r2, #1
 8011eb8:	d108      	bne.n	8011ecc <_strtol_l.constprop.0+0xdc>
 8011eba:	2322      	movs	r3, #34	@ 0x22
 8011ebc:	f8ce 3000 	str.w	r3, [lr]
 8011ec0:	4660      	mov	r0, ip
 8011ec2:	f1b8 0f00 	cmp.w	r8, #0
 8011ec6:	d0a0      	beq.n	8011e0a <_strtol_l.constprop.0+0x1a>
 8011ec8:	1e69      	subs	r1, r5, #1
 8011eca:	e006      	b.n	8011eda <_strtol_l.constprop.0+0xea>
 8011ecc:	b106      	cbz	r6, 8011ed0 <_strtol_l.constprop.0+0xe0>
 8011ece:	4240      	negs	r0, r0
 8011ed0:	f1b8 0f00 	cmp.w	r8, #0
 8011ed4:	d099      	beq.n	8011e0a <_strtol_l.constprop.0+0x1a>
 8011ed6:	2a00      	cmp	r2, #0
 8011ed8:	d1f6      	bne.n	8011ec8 <_strtol_l.constprop.0+0xd8>
 8011eda:	f8c8 1000 	str.w	r1, [r8]
 8011ede:	e794      	b.n	8011e0a <_strtol_l.constprop.0+0x1a>
 8011ee0:	080151e9 	.word	0x080151e9

08011ee4 <_strtol_r>:
 8011ee4:	f7ff bf84 	b.w	8011df0 <_strtol_l.constprop.0>

08011ee8 <__ascii_wctomb>:
 8011ee8:	4603      	mov	r3, r0
 8011eea:	4608      	mov	r0, r1
 8011eec:	b141      	cbz	r1, 8011f00 <__ascii_wctomb+0x18>
 8011eee:	2aff      	cmp	r2, #255	@ 0xff
 8011ef0:	d904      	bls.n	8011efc <__ascii_wctomb+0x14>
 8011ef2:	228a      	movs	r2, #138	@ 0x8a
 8011ef4:	601a      	str	r2, [r3, #0]
 8011ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8011efa:	4770      	bx	lr
 8011efc:	700a      	strb	r2, [r1, #0]
 8011efe:	2001      	movs	r0, #1
 8011f00:	4770      	bx	lr

08011f02 <__ssputs_r>:
 8011f02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f06:	688e      	ldr	r6, [r1, #8]
 8011f08:	461f      	mov	r7, r3
 8011f0a:	42be      	cmp	r6, r7
 8011f0c:	680b      	ldr	r3, [r1, #0]
 8011f0e:	4682      	mov	sl, r0
 8011f10:	460c      	mov	r4, r1
 8011f12:	4690      	mov	r8, r2
 8011f14:	d82d      	bhi.n	8011f72 <__ssputs_r+0x70>
 8011f16:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f1a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011f1e:	d026      	beq.n	8011f6e <__ssputs_r+0x6c>
 8011f20:	6965      	ldr	r5, [r4, #20]
 8011f22:	6909      	ldr	r1, [r1, #16]
 8011f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f28:	eba3 0901 	sub.w	r9, r3, r1
 8011f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f30:	1c7b      	adds	r3, r7, #1
 8011f32:	444b      	add	r3, r9
 8011f34:	106d      	asrs	r5, r5, #1
 8011f36:	429d      	cmp	r5, r3
 8011f38:	bf38      	it	cc
 8011f3a:	461d      	movcc	r5, r3
 8011f3c:	0553      	lsls	r3, r2, #21
 8011f3e:	d527      	bpl.n	8011f90 <__ssputs_r+0x8e>
 8011f40:	4629      	mov	r1, r5
 8011f42:	f7fc f9cf 	bl	800e2e4 <_malloc_r>
 8011f46:	4606      	mov	r6, r0
 8011f48:	b360      	cbz	r0, 8011fa4 <__ssputs_r+0xa2>
 8011f4a:	6921      	ldr	r1, [r4, #16]
 8011f4c:	464a      	mov	r2, r9
 8011f4e:	f7fe f89c 	bl	801008a <memcpy>
 8011f52:	89a3      	ldrh	r3, [r4, #12]
 8011f54:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	6126      	str	r6, [r4, #16]
 8011f60:	6165      	str	r5, [r4, #20]
 8011f62:	444e      	add	r6, r9
 8011f64:	eba5 0509 	sub.w	r5, r5, r9
 8011f68:	6026      	str	r6, [r4, #0]
 8011f6a:	60a5      	str	r5, [r4, #8]
 8011f6c:	463e      	mov	r6, r7
 8011f6e:	42be      	cmp	r6, r7
 8011f70:	d900      	bls.n	8011f74 <__ssputs_r+0x72>
 8011f72:	463e      	mov	r6, r7
 8011f74:	6820      	ldr	r0, [r4, #0]
 8011f76:	4632      	mov	r2, r6
 8011f78:	4641      	mov	r1, r8
 8011f7a:	f000 f9c5 	bl	8012308 <memmove>
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	1b9b      	subs	r3, r3, r6
 8011f82:	60a3      	str	r3, [r4, #8]
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	4433      	add	r3, r6
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f90:	462a      	mov	r2, r5
 8011f92:	f000 fa05 	bl	80123a0 <_realloc_r>
 8011f96:	4606      	mov	r6, r0
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d1e0      	bne.n	8011f5e <__ssputs_r+0x5c>
 8011f9c:	6921      	ldr	r1, [r4, #16]
 8011f9e:	4650      	mov	r0, sl
 8011fa0:	f7fe fede 	bl	8010d60 <_free_r>
 8011fa4:	230c      	movs	r3, #12
 8011fa6:	f8ca 3000 	str.w	r3, [sl]
 8011faa:	89a3      	ldrh	r3, [r4, #12]
 8011fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fb0:	81a3      	strh	r3, [r4, #12]
 8011fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb6:	e7e9      	b.n	8011f8c <__ssputs_r+0x8a>

08011fb8 <_svfiprintf_r>:
 8011fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fbc:	4698      	mov	r8, r3
 8011fbe:	898b      	ldrh	r3, [r1, #12]
 8011fc0:	061b      	lsls	r3, r3, #24
 8011fc2:	b09d      	sub	sp, #116	@ 0x74
 8011fc4:	4607      	mov	r7, r0
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	4614      	mov	r4, r2
 8011fca:	d510      	bpl.n	8011fee <_svfiprintf_r+0x36>
 8011fcc:	690b      	ldr	r3, [r1, #16]
 8011fce:	b973      	cbnz	r3, 8011fee <_svfiprintf_r+0x36>
 8011fd0:	2140      	movs	r1, #64	@ 0x40
 8011fd2:	f7fc f987 	bl	800e2e4 <_malloc_r>
 8011fd6:	6028      	str	r0, [r5, #0]
 8011fd8:	6128      	str	r0, [r5, #16]
 8011fda:	b930      	cbnz	r0, 8011fea <_svfiprintf_r+0x32>
 8011fdc:	230c      	movs	r3, #12
 8011fde:	603b      	str	r3, [r7, #0]
 8011fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe4:	b01d      	add	sp, #116	@ 0x74
 8011fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fea:	2340      	movs	r3, #64	@ 0x40
 8011fec:	616b      	str	r3, [r5, #20]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ff2:	2320      	movs	r3, #32
 8011ff4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ffc:	2330      	movs	r3, #48	@ 0x30
 8011ffe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801219c <_svfiprintf_r+0x1e4>
 8012002:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012006:	f04f 0901 	mov.w	r9, #1
 801200a:	4623      	mov	r3, r4
 801200c:	469a      	mov	sl, r3
 801200e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012012:	b10a      	cbz	r2, 8012018 <_svfiprintf_r+0x60>
 8012014:	2a25      	cmp	r2, #37	@ 0x25
 8012016:	d1f9      	bne.n	801200c <_svfiprintf_r+0x54>
 8012018:	ebba 0b04 	subs.w	fp, sl, r4
 801201c:	d00b      	beq.n	8012036 <_svfiprintf_r+0x7e>
 801201e:	465b      	mov	r3, fp
 8012020:	4622      	mov	r2, r4
 8012022:	4629      	mov	r1, r5
 8012024:	4638      	mov	r0, r7
 8012026:	f7ff ff6c 	bl	8011f02 <__ssputs_r>
 801202a:	3001      	adds	r0, #1
 801202c:	f000 80a7 	beq.w	801217e <_svfiprintf_r+0x1c6>
 8012030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012032:	445a      	add	r2, fp
 8012034:	9209      	str	r2, [sp, #36]	@ 0x24
 8012036:	f89a 3000 	ldrb.w	r3, [sl]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f000 809f 	beq.w	801217e <_svfiprintf_r+0x1c6>
 8012040:	2300      	movs	r3, #0
 8012042:	f04f 32ff 	mov.w	r2, #4294967295
 8012046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801204a:	f10a 0a01 	add.w	sl, sl, #1
 801204e:	9304      	str	r3, [sp, #16]
 8012050:	9307      	str	r3, [sp, #28]
 8012052:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012056:	931a      	str	r3, [sp, #104]	@ 0x68
 8012058:	4654      	mov	r4, sl
 801205a:	2205      	movs	r2, #5
 801205c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012060:	484e      	ldr	r0, [pc, #312]	@ (801219c <_svfiprintf_r+0x1e4>)
 8012062:	f7ee f8d5 	bl	8000210 <memchr>
 8012066:	9a04      	ldr	r2, [sp, #16]
 8012068:	b9d8      	cbnz	r0, 80120a2 <_svfiprintf_r+0xea>
 801206a:	06d0      	lsls	r0, r2, #27
 801206c:	bf44      	itt	mi
 801206e:	2320      	movmi	r3, #32
 8012070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012074:	0711      	lsls	r1, r2, #28
 8012076:	bf44      	itt	mi
 8012078:	232b      	movmi	r3, #43	@ 0x2b
 801207a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801207e:	f89a 3000 	ldrb.w	r3, [sl]
 8012082:	2b2a      	cmp	r3, #42	@ 0x2a
 8012084:	d015      	beq.n	80120b2 <_svfiprintf_r+0xfa>
 8012086:	9a07      	ldr	r2, [sp, #28]
 8012088:	4654      	mov	r4, sl
 801208a:	2000      	movs	r0, #0
 801208c:	f04f 0c0a 	mov.w	ip, #10
 8012090:	4621      	mov	r1, r4
 8012092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012096:	3b30      	subs	r3, #48	@ 0x30
 8012098:	2b09      	cmp	r3, #9
 801209a:	d94b      	bls.n	8012134 <_svfiprintf_r+0x17c>
 801209c:	b1b0      	cbz	r0, 80120cc <_svfiprintf_r+0x114>
 801209e:	9207      	str	r2, [sp, #28]
 80120a0:	e014      	b.n	80120cc <_svfiprintf_r+0x114>
 80120a2:	eba0 0308 	sub.w	r3, r0, r8
 80120a6:	fa09 f303 	lsl.w	r3, r9, r3
 80120aa:	4313      	orrs	r3, r2
 80120ac:	9304      	str	r3, [sp, #16]
 80120ae:	46a2      	mov	sl, r4
 80120b0:	e7d2      	b.n	8012058 <_svfiprintf_r+0xa0>
 80120b2:	9b03      	ldr	r3, [sp, #12]
 80120b4:	1d19      	adds	r1, r3, #4
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	9103      	str	r1, [sp, #12]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	bfbb      	ittet	lt
 80120be:	425b      	neglt	r3, r3
 80120c0:	f042 0202 	orrlt.w	r2, r2, #2
 80120c4:	9307      	strge	r3, [sp, #28]
 80120c6:	9307      	strlt	r3, [sp, #28]
 80120c8:	bfb8      	it	lt
 80120ca:	9204      	strlt	r2, [sp, #16]
 80120cc:	7823      	ldrb	r3, [r4, #0]
 80120ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80120d0:	d10a      	bne.n	80120e8 <_svfiprintf_r+0x130>
 80120d2:	7863      	ldrb	r3, [r4, #1]
 80120d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120d6:	d132      	bne.n	801213e <_svfiprintf_r+0x186>
 80120d8:	9b03      	ldr	r3, [sp, #12]
 80120da:	1d1a      	adds	r2, r3, #4
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	9203      	str	r2, [sp, #12]
 80120e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80120e4:	3402      	adds	r4, #2
 80120e6:	9305      	str	r3, [sp, #20]
 80120e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80121ac <_svfiprintf_r+0x1f4>
 80120ec:	7821      	ldrb	r1, [r4, #0]
 80120ee:	2203      	movs	r2, #3
 80120f0:	4650      	mov	r0, sl
 80120f2:	f7ee f88d 	bl	8000210 <memchr>
 80120f6:	b138      	cbz	r0, 8012108 <_svfiprintf_r+0x150>
 80120f8:	9b04      	ldr	r3, [sp, #16]
 80120fa:	eba0 000a 	sub.w	r0, r0, sl
 80120fe:	2240      	movs	r2, #64	@ 0x40
 8012100:	4082      	lsls	r2, r0
 8012102:	4313      	orrs	r3, r2
 8012104:	3401      	adds	r4, #1
 8012106:	9304      	str	r3, [sp, #16]
 8012108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801210c:	4824      	ldr	r0, [pc, #144]	@ (80121a0 <_svfiprintf_r+0x1e8>)
 801210e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012112:	2206      	movs	r2, #6
 8012114:	f7ee f87c 	bl	8000210 <memchr>
 8012118:	2800      	cmp	r0, #0
 801211a:	d036      	beq.n	801218a <_svfiprintf_r+0x1d2>
 801211c:	4b21      	ldr	r3, [pc, #132]	@ (80121a4 <_svfiprintf_r+0x1ec>)
 801211e:	bb1b      	cbnz	r3, 8012168 <_svfiprintf_r+0x1b0>
 8012120:	9b03      	ldr	r3, [sp, #12]
 8012122:	3307      	adds	r3, #7
 8012124:	f023 0307 	bic.w	r3, r3, #7
 8012128:	3308      	adds	r3, #8
 801212a:	9303      	str	r3, [sp, #12]
 801212c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801212e:	4433      	add	r3, r6
 8012130:	9309      	str	r3, [sp, #36]	@ 0x24
 8012132:	e76a      	b.n	801200a <_svfiprintf_r+0x52>
 8012134:	fb0c 3202 	mla	r2, ip, r2, r3
 8012138:	460c      	mov	r4, r1
 801213a:	2001      	movs	r0, #1
 801213c:	e7a8      	b.n	8012090 <_svfiprintf_r+0xd8>
 801213e:	2300      	movs	r3, #0
 8012140:	3401      	adds	r4, #1
 8012142:	9305      	str	r3, [sp, #20]
 8012144:	4619      	mov	r1, r3
 8012146:	f04f 0c0a 	mov.w	ip, #10
 801214a:	4620      	mov	r0, r4
 801214c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012150:	3a30      	subs	r2, #48	@ 0x30
 8012152:	2a09      	cmp	r2, #9
 8012154:	d903      	bls.n	801215e <_svfiprintf_r+0x1a6>
 8012156:	2b00      	cmp	r3, #0
 8012158:	d0c6      	beq.n	80120e8 <_svfiprintf_r+0x130>
 801215a:	9105      	str	r1, [sp, #20]
 801215c:	e7c4      	b.n	80120e8 <_svfiprintf_r+0x130>
 801215e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012162:	4604      	mov	r4, r0
 8012164:	2301      	movs	r3, #1
 8012166:	e7f0      	b.n	801214a <_svfiprintf_r+0x192>
 8012168:	ab03      	add	r3, sp, #12
 801216a:	9300      	str	r3, [sp, #0]
 801216c:	462a      	mov	r2, r5
 801216e:	4b0e      	ldr	r3, [pc, #56]	@ (80121a8 <_svfiprintf_r+0x1f0>)
 8012170:	a904      	add	r1, sp, #16
 8012172:	4638      	mov	r0, r7
 8012174:	f7fc fff6 	bl	800f164 <_printf_float>
 8012178:	1c42      	adds	r2, r0, #1
 801217a:	4606      	mov	r6, r0
 801217c:	d1d6      	bne.n	801212c <_svfiprintf_r+0x174>
 801217e:	89ab      	ldrh	r3, [r5, #12]
 8012180:	065b      	lsls	r3, r3, #25
 8012182:	f53f af2d 	bmi.w	8011fe0 <_svfiprintf_r+0x28>
 8012186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012188:	e72c      	b.n	8011fe4 <_svfiprintf_r+0x2c>
 801218a:	ab03      	add	r3, sp, #12
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	462a      	mov	r2, r5
 8012190:	4b05      	ldr	r3, [pc, #20]	@ (80121a8 <_svfiprintf_r+0x1f0>)
 8012192:	a904      	add	r1, sp, #16
 8012194:	4638      	mov	r0, r7
 8012196:	f7fd fa7d 	bl	800f694 <_printf_i>
 801219a:	e7ed      	b.n	8012178 <_svfiprintf_r+0x1c0>
 801219c:	080152e9 	.word	0x080152e9
 80121a0:	080152f3 	.word	0x080152f3
 80121a4:	0800f165 	.word	0x0800f165
 80121a8:	08011f03 	.word	0x08011f03
 80121ac:	080152ef 	.word	0x080152ef

080121b0 <__sflush_r>:
 80121b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	0716      	lsls	r6, r2, #28
 80121ba:	4605      	mov	r5, r0
 80121bc:	460c      	mov	r4, r1
 80121be:	d454      	bmi.n	801226a <__sflush_r+0xba>
 80121c0:	684b      	ldr	r3, [r1, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	dc02      	bgt.n	80121cc <__sflush_r+0x1c>
 80121c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	dd48      	ble.n	801225e <__sflush_r+0xae>
 80121cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121ce:	2e00      	cmp	r6, #0
 80121d0:	d045      	beq.n	801225e <__sflush_r+0xae>
 80121d2:	2300      	movs	r3, #0
 80121d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80121d8:	682f      	ldr	r7, [r5, #0]
 80121da:	6a21      	ldr	r1, [r4, #32]
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	d030      	beq.n	8012242 <__sflush_r+0x92>
 80121e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80121e2:	89a3      	ldrh	r3, [r4, #12]
 80121e4:	0759      	lsls	r1, r3, #29
 80121e6:	d505      	bpl.n	80121f4 <__sflush_r+0x44>
 80121e8:	6863      	ldr	r3, [r4, #4]
 80121ea:	1ad2      	subs	r2, r2, r3
 80121ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80121ee:	b10b      	cbz	r3, 80121f4 <__sflush_r+0x44>
 80121f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80121f2:	1ad2      	subs	r2, r2, r3
 80121f4:	2300      	movs	r3, #0
 80121f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80121f8:	6a21      	ldr	r1, [r4, #32]
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b0      	blx	r6
 80121fe:	1c43      	adds	r3, r0, #1
 8012200:	89a3      	ldrh	r3, [r4, #12]
 8012202:	d106      	bne.n	8012212 <__sflush_r+0x62>
 8012204:	6829      	ldr	r1, [r5, #0]
 8012206:	291d      	cmp	r1, #29
 8012208:	d82b      	bhi.n	8012262 <__sflush_r+0xb2>
 801220a:	4a2a      	ldr	r2, [pc, #168]	@ (80122b4 <__sflush_r+0x104>)
 801220c:	410a      	asrs	r2, r1
 801220e:	07d6      	lsls	r6, r2, #31
 8012210:	d427      	bmi.n	8012262 <__sflush_r+0xb2>
 8012212:	2200      	movs	r2, #0
 8012214:	6062      	str	r2, [r4, #4]
 8012216:	04d9      	lsls	r1, r3, #19
 8012218:	6922      	ldr	r2, [r4, #16]
 801221a:	6022      	str	r2, [r4, #0]
 801221c:	d504      	bpl.n	8012228 <__sflush_r+0x78>
 801221e:	1c42      	adds	r2, r0, #1
 8012220:	d101      	bne.n	8012226 <__sflush_r+0x76>
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	b903      	cbnz	r3, 8012228 <__sflush_r+0x78>
 8012226:	6560      	str	r0, [r4, #84]	@ 0x54
 8012228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801222a:	602f      	str	r7, [r5, #0]
 801222c:	b1b9      	cbz	r1, 801225e <__sflush_r+0xae>
 801222e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012232:	4299      	cmp	r1, r3
 8012234:	d002      	beq.n	801223c <__sflush_r+0x8c>
 8012236:	4628      	mov	r0, r5
 8012238:	f7fe fd92 	bl	8010d60 <_free_r>
 801223c:	2300      	movs	r3, #0
 801223e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012240:	e00d      	b.n	801225e <__sflush_r+0xae>
 8012242:	2301      	movs	r3, #1
 8012244:	4628      	mov	r0, r5
 8012246:	47b0      	blx	r6
 8012248:	4602      	mov	r2, r0
 801224a:	1c50      	adds	r0, r2, #1
 801224c:	d1c9      	bne.n	80121e2 <__sflush_r+0x32>
 801224e:	682b      	ldr	r3, [r5, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0c6      	beq.n	80121e2 <__sflush_r+0x32>
 8012254:	2b1d      	cmp	r3, #29
 8012256:	d001      	beq.n	801225c <__sflush_r+0xac>
 8012258:	2b16      	cmp	r3, #22
 801225a:	d11e      	bne.n	801229a <__sflush_r+0xea>
 801225c:	602f      	str	r7, [r5, #0]
 801225e:	2000      	movs	r0, #0
 8012260:	e022      	b.n	80122a8 <__sflush_r+0xf8>
 8012262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012266:	b21b      	sxth	r3, r3
 8012268:	e01b      	b.n	80122a2 <__sflush_r+0xf2>
 801226a:	690f      	ldr	r7, [r1, #16]
 801226c:	2f00      	cmp	r7, #0
 801226e:	d0f6      	beq.n	801225e <__sflush_r+0xae>
 8012270:	0793      	lsls	r3, r2, #30
 8012272:	680e      	ldr	r6, [r1, #0]
 8012274:	bf08      	it	eq
 8012276:	694b      	ldreq	r3, [r1, #20]
 8012278:	600f      	str	r7, [r1, #0]
 801227a:	bf18      	it	ne
 801227c:	2300      	movne	r3, #0
 801227e:	eba6 0807 	sub.w	r8, r6, r7
 8012282:	608b      	str	r3, [r1, #8]
 8012284:	f1b8 0f00 	cmp.w	r8, #0
 8012288:	dde9      	ble.n	801225e <__sflush_r+0xae>
 801228a:	6a21      	ldr	r1, [r4, #32]
 801228c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801228e:	4643      	mov	r3, r8
 8012290:	463a      	mov	r2, r7
 8012292:	4628      	mov	r0, r5
 8012294:	47b0      	blx	r6
 8012296:	2800      	cmp	r0, #0
 8012298:	dc08      	bgt.n	80122ac <__sflush_r+0xfc>
 801229a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801229e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122a2:	81a3      	strh	r3, [r4, #12]
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ac:	4407      	add	r7, r0
 80122ae:	eba8 0800 	sub.w	r8, r8, r0
 80122b2:	e7e7      	b.n	8012284 <__sflush_r+0xd4>
 80122b4:	dfbffffe 	.word	0xdfbffffe

080122b8 <_fflush_r>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	690b      	ldr	r3, [r1, #16]
 80122bc:	4605      	mov	r5, r0
 80122be:	460c      	mov	r4, r1
 80122c0:	b913      	cbnz	r3, 80122c8 <_fflush_r+0x10>
 80122c2:	2500      	movs	r5, #0
 80122c4:	4628      	mov	r0, r5
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	b118      	cbz	r0, 80122d2 <_fflush_r+0x1a>
 80122ca:	6a03      	ldr	r3, [r0, #32]
 80122cc:	b90b      	cbnz	r3, 80122d2 <_fflush_r+0x1a>
 80122ce:	f7fd fda1 	bl	800fe14 <__sinit>
 80122d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d0f3      	beq.n	80122c2 <_fflush_r+0xa>
 80122da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80122dc:	07d0      	lsls	r0, r2, #31
 80122de:	d404      	bmi.n	80122ea <_fflush_r+0x32>
 80122e0:	0599      	lsls	r1, r3, #22
 80122e2:	d402      	bmi.n	80122ea <_fflush_r+0x32>
 80122e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122e6:	f7fd fece 	bl	8010086 <__retarget_lock_acquire_recursive>
 80122ea:	4628      	mov	r0, r5
 80122ec:	4621      	mov	r1, r4
 80122ee:	f7ff ff5f 	bl	80121b0 <__sflush_r>
 80122f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122f4:	07da      	lsls	r2, r3, #31
 80122f6:	4605      	mov	r5, r0
 80122f8:	d4e4      	bmi.n	80122c4 <_fflush_r+0xc>
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	059b      	lsls	r3, r3, #22
 80122fe:	d4e1      	bmi.n	80122c4 <_fflush_r+0xc>
 8012300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012302:	f7fd fec1 	bl	8010088 <__retarget_lock_release_recursive>
 8012306:	e7dd      	b.n	80122c4 <_fflush_r+0xc>

08012308 <memmove>:
 8012308:	4288      	cmp	r0, r1
 801230a:	b510      	push	{r4, lr}
 801230c:	eb01 0402 	add.w	r4, r1, r2
 8012310:	d902      	bls.n	8012318 <memmove+0x10>
 8012312:	4284      	cmp	r4, r0
 8012314:	4623      	mov	r3, r4
 8012316:	d807      	bhi.n	8012328 <memmove+0x20>
 8012318:	1e43      	subs	r3, r0, #1
 801231a:	42a1      	cmp	r1, r4
 801231c:	d008      	beq.n	8012330 <memmove+0x28>
 801231e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012326:	e7f8      	b.n	801231a <memmove+0x12>
 8012328:	4402      	add	r2, r0
 801232a:	4601      	mov	r1, r0
 801232c:	428a      	cmp	r2, r1
 801232e:	d100      	bne.n	8012332 <memmove+0x2a>
 8012330:	bd10      	pop	{r4, pc}
 8012332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801233a:	e7f7      	b.n	801232c <memmove+0x24>

0801233c <__assert_func>:
 801233c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801233e:	4614      	mov	r4, r2
 8012340:	461a      	mov	r2, r3
 8012342:	4b09      	ldr	r3, [pc, #36]	@ (8012368 <__assert_func+0x2c>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4605      	mov	r5, r0
 8012348:	68d8      	ldr	r0, [r3, #12]
 801234a:	b954      	cbnz	r4, 8012362 <__assert_func+0x26>
 801234c:	4b07      	ldr	r3, [pc, #28]	@ (801236c <__assert_func+0x30>)
 801234e:	461c      	mov	r4, r3
 8012350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012354:	9100      	str	r1, [sp, #0]
 8012356:	462b      	mov	r3, r5
 8012358:	4905      	ldr	r1, [pc, #20]	@ (8012370 <__assert_func+0x34>)
 801235a:	f000 f84f 	bl	80123fc <fiprintf>
 801235e:	f000 f85f 	bl	8012420 <abort>
 8012362:	4b04      	ldr	r3, [pc, #16]	@ (8012374 <__assert_func+0x38>)
 8012364:	e7f4      	b.n	8012350 <__assert_func+0x14>
 8012366:	bf00      	nop
 8012368:	2000029c 	.word	0x2000029c
 801236c:	08015335 	.word	0x08015335
 8012370:	08015307 	.word	0x08015307
 8012374:	080152fa 	.word	0x080152fa

08012378 <_calloc_r>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	fba1 5402 	umull	r5, r4, r1, r2
 801237e:	b93c      	cbnz	r4, 8012390 <_calloc_r+0x18>
 8012380:	4629      	mov	r1, r5
 8012382:	f7fb ffaf 	bl	800e2e4 <_malloc_r>
 8012386:	4606      	mov	r6, r0
 8012388:	b928      	cbnz	r0, 8012396 <_calloc_r+0x1e>
 801238a:	2600      	movs	r6, #0
 801238c:	4630      	mov	r0, r6
 801238e:	bd70      	pop	{r4, r5, r6, pc}
 8012390:	220c      	movs	r2, #12
 8012392:	6002      	str	r2, [r0, #0]
 8012394:	e7f9      	b.n	801238a <_calloc_r+0x12>
 8012396:	462a      	mov	r2, r5
 8012398:	4621      	mov	r1, r4
 801239a:	f7fd fdd4 	bl	800ff46 <memset>
 801239e:	e7f5      	b.n	801238c <_calloc_r+0x14>

080123a0 <_realloc_r>:
 80123a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a4:	4680      	mov	r8, r0
 80123a6:	4615      	mov	r5, r2
 80123a8:	460c      	mov	r4, r1
 80123aa:	b921      	cbnz	r1, 80123b6 <_realloc_r+0x16>
 80123ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123b0:	4611      	mov	r1, r2
 80123b2:	f7fb bf97 	b.w	800e2e4 <_malloc_r>
 80123b6:	b92a      	cbnz	r2, 80123c4 <_realloc_r+0x24>
 80123b8:	f7fe fcd2 	bl	8010d60 <_free_r>
 80123bc:	2400      	movs	r4, #0
 80123be:	4620      	mov	r0, r4
 80123c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c4:	f000 f833 	bl	801242e <_malloc_usable_size_r>
 80123c8:	4285      	cmp	r5, r0
 80123ca:	4606      	mov	r6, r0
 80123cc:	d802      	bhi.n	80123d4 <_realloc_r+0x34>
 80123ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80123d2:	d8f4      	bhi.n	80123be <_realloc_r+0x1e>
 80123d4:	4629      	mov	r1, r5
 80123d6:	4640      	mov	r0, r8
 80123d8:	f7fb ff84 	bl	800e2e4 <_malloc_r>
 80123dc:	4607      	mov	r7, r0
 80123de:	2800      	cmp	r0, #0
 80123e0:	d0ec      	beq.n	80123bc <_realloc_r+0x1c>
 80123e2:	42b5      	cmp	r5, r6
 80123e4:	462a      	mov	r2, r5
 80123e6:	4621      	mov	r1, r4
 80123e8:	bf28      	it	cs
 80123ea:	4632      	movcs	r2, r6
 80123ec:	f7fd fe4d 	bl	801008a <memcpy>
 80123f0:	4621      	mov	r1, r4
 80123f2:	4640      	mov	r0, r8
 80123f4:	f7fe fcb4 	bl	8010d60 <_free_r>
 80123f8:	463c      	mov	r4, r7
 80123fa:	e7e0      	b.n	80123be <_realloc_r+0x1e>

080123fc <fiprintf>:
 80123fc:	b40e      	push	{r1, r2, r3}
 80123fe:	b503      	push	{r0, r1, lr}
 8012400:	4601      	mov	r1, r0
 8012402:	ab03      	add	r3, sp, #12
 8012404:	4805      	ldr	r0, [pc, #20]	@ (801241c <fiprintf+0x20>)
 8012406:	f853 2b04 	ldr.w	r2, [r3], #4
 801240a:	6800      	ldr	r0, [r0, #0]
 801240c:	9301      	str	r3, [sp, #4]
 801240e:	f000 f83f 	bl	8012490 <_vfiprintf_r>
 8012412:	b002      	add	sp, #8
 8012414:	f85d eb04 	ldr.w	lr, [sp], #4
 8012418:	b003      	add	sp, #12
 801241a:	4770      	bx	lr
 801241c:	2000029c 	.word	0x2000029c

08012420 <abort>:
 8012420:	b508      	push	{r3, lr}
 8012422:	2006      	movs	r0, #6
 8012424:	f000 fa08 	bl	8012838 <raise>
 8012428:	2001      	movs	r0, #1
 801242a:	f7f1 fd19 	bl	8003e60 <_exit>

0801242e <_malloc_usable_size_r>:
 801242e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012432:	1f18      	subs	r0, r3, #4
 8012434:	2b00      	cmp	r3, #0
 8012436:	bfbc      	itt	lt
 8012438:	580b      	ldrlt	r3, [r1, r0]
 801243a:	18c0      	addlt	r0, r0, r3
 801243c:	4770      	bx	lr

0801243e <__sfputc_r>:
 801243e:	6893      	ldr	r3, [r2, #8]
 8012440:	3b01      	subs	r3, #1
 8012442:	2b00      	cmp	r3, #0
 8012444:	b410      	push	{r4}
 8012446:	6093      	str	r3, [r2, #8]
 8012448:	da08      	bge.n	801245c <__sfputc_r+0x1e>
 801244a:	6994      	ldr	r4, [r2, #24]
 801244c:	42a3      	cmp	r3, r4
 801244e:	db01      	blt.n	8012454 <__sfputc_r+0x16>
 8012450:	290a      	cmp	r1, #10
 8012452:	d103      	bne.n	801245c <__sfputc_r+0x1e>
 8012454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012458:	f000 b932 	b.w	80126c0 <__swbuf_r>
 801245c:	6813      	ldr	r3, [r2, #0]
 801245e:	1c58      	adds	r0, r3, #1
 8012460:	6010      	str	r0, [r2, #0]
 8012462:	7019      	strb	r1, [r3, #0]
 8012464:	4608      	mov	r0, r1
 8012466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801246a:	4770      	bx	lr

0801246c <__sfputs_r>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	4606      	mov	r6, r0
 8012470:	460f      	mov	r7, r1
 8012472:	4614      	mov	r4, r2
 8012474:	18d5      	adds	r5, r2, r3
 8012476:	42ac      	cmp	r4, r5
 8012478:	d101      	bne.n	801247e <__sfputs_r+0x12>
 801247a:	2000      	movs	r0, #0
 801247c:	e007      	b.n	801248e <__sfputs_r+0x22>
 801247e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012482:	463a      	mov	r2, r7
 8012484:	4630      	mov	r0, r6
 8012486:	f7ff ffda 	bl	801243e <__sfputc_r>
 801248a:	1c43      	adds	r3, r0, #1
 801248c:	d1f3      	bne.n	8012476 <__sfputs_r+0xa>
 801248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012490 <_vfiprintf_r>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	460d      	mov	r5, r1
 8012496:	b09d      	sub	sp, #116	@ 0x74
 8012498:	4614      	mov	r4, r2
 801249a:	4698      	mov	r8, r3
 801249c:	4606      	mov	r6, r0
 801249e:	b118      	cbz	r0, 80124a8 <_vfiprintf_r+0x18>
 80124a0:	6a03      	ldr	r3, [r0, #32]
 80124a2:	b90b      	cbnz	r3, 80124a8 <_vfiprintf_r+0x18>
 80124a4:	f7fd fcb6 	bl	800fe14 <__sinit>
 80124a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124aa:	07d9      	lsls	r1, r3, #31
 80124ac:	d405      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124ae:	89ab      	ldrh	r3, [r5, #12]
 80124b0:	059a      	lsls	r2, r3, #22
 80124b2:	d402      	bmi.n	80124ba <_vfiprintf_r+0x2a>
 80124b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124b6:	f7fd fde6 	bl	8010086 <__retarget_lock_acquire_recursive>
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	071b      	lsls	r3, r3, #28
 80124be:	d501      	bpl.n	80124c4 <_vfiprintf_r+0x34>
 80124c0:	692b      	ldr	r3, [r5, #16]
 80124c2:	b99b      	cbnz	r3, 80124ec <_vfiprintf_r+0x5c>
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f000 f938 	bl	801273c <__swsetup_r>
 80124cc:	b170      	cbz	r0, 80124ec <_vfiprintf_r+0x5c>
 80124ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124d0:	07dc      	lsls	r4, r3, #31
 80124d2:	d504      	bpl.n	80124de <_vfiprintf_r+0x4e>
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	b01d      	add	sp, #116	@ 0x74
 80124da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	0598      	lsls	r0, r3, #22
 80124e2:	d4f7      	bmi.n	80124d4 <_vfiprintf_r+0x44>
 80124e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124e6:	f7fd fdcf 	bl	8010088 <__retarget_lock_release_recursive>
 80124ea:	e7f3      	b.n	80124d4 <_vfiprintf_r+0x44>
 80124ec:	2300      	movs	r3, #0
 80124ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80124f0:	2320      	movs	r3, #32
 80124f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80124fa:	2330      	movs	r3, #48	@ 0x30
 80124fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126ac <_vfiprintf_r+0x21c>
 8012500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012504:	f04f 0901 	mov.w	r9, #1
 8012508:	4623      	mov	r3, r4
 801250a:	469a      	mov	sl, r3
 801250c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012510:	b10a      	cbz	r2, 8012516 <_vfiprintf_r+0x86>
 8012512:	2a25      	cmp	r2, #37	@ 0x25
 8012514:	d1f9      	bne.n	801250a <_vfiprintf_r+0x7a>
 8012516:	ebba 0b04 	subs.w	fp, sl, r4
 801251a:	d00b      	beq.n	8012534 <_vfiprintf_r+0xa4>
 801251c:	465b      	mov	r3, fp
 801251e:	4622      	mov	r2, r4
 8012520:	4629      	mov	r1, r5
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ffa2 	bl	801246c <__sfputs_r>
 8012528:	3001      	adds	r0, #1
 801252a:	f000 80a7 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801252e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012530:	445a      	add	r2, fp
 8012532:	9209      	str	r2, [sp, #36]	@ 0x24
 8012534:	f89a 3000 	ldrb.w	r3, [sl]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f000 809f 	beq.w	801267c <_vfiprintf_r+0x1ec>
 801253e:	2300      	movs	r3, #0
 8012540:	f04f 32ff 	mov.w	r2, #4294967295
 8012544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012548:	f10a 0a01 	add.w	sl, sl, #1
 801254c:	9304      	str	r3, [sp, #16]
 801254e:	9307      	str	r3, [sp, #28]
 8012550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012554:	931a      	str	r3, [sp, #104]	@ 0x68
 8012556:	4654      	mov	r4, sl
 8012558:	2205      	movs	r2, #5
 801255a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255e:	4853      	ldr	r0, [pc, #332]	@ (80126ac <_vfiprintf_r+0x21c>)
 8012560:	f7ed fe56 	bl	8000210 <memchr>
 8012564:	9a04      	ldr	r2, [sp, #16]
 8012566:	b9d8      	cbnz	r0, 80125a0 <_vfiprintf_r+0x110>
 8012568:	06d1      	lsls	r1, r2, #27
 801256a:	bf44      	itt	mi
 801256c:	2320      	movmi	r3, #32
 801256e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012572:	0713      	lsls	r3, r2, #28
 8012574:	bf44      	itt	mi
 8012576:	232b      	movmi	r3, #43	@ 0x2b
 8012578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801257c:	f89a 3000 	ldrb.w	r3, [sl]
 8012580:	2b2a      	cmp	r3, #42	@ 0x2a
 8012582:	d015      	beq.n	80125b0 <_vfiprintf_r+0x120>
 8012584:	9a07      	ldr	r2, [sp, #28]
 8012586:	4654      	mov	r4, sl
 8012588:	2000      	movs	r0, #0
 801258a:	f04f 0c0a 	mov.w	ip, #10
 801258e:	4621      	mov	r1, r4
 8012590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012594:	3b30      	subs	r3, #48	@ 0x30
 8012596:	2b09      	cmp	r3, #9
 8012598:	d94b      	bls.n	8012632 <_vfiprintf_r+0x1a2>
 801259a:	b1b0      	cbz	r0, 80125ca <_vfiprintf_r+0x13a>
 801259c:	9207      	str	r2, [sp, #28]
 801259e:	e014      	b.n	80125ca <_vfiprintf_r+0x13a>
 80125a0:	eba0 0308 	sub.w	r3, r0, r8
 80125a4:	fa09 f303 	lsl.w	r3, r9, r3
 80125a8:	4313      	orrs	r3, r2
 80125aa:	9304      	str	r3, [sp, #16]
 80125ac:	46a2      	mov	sl, r4
 80125ae:	e7d2      	b.n	8012556 <_vfiprintf_r+0xc6>
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	1d19      	adds	r1, r3, #4
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	9103      	str	r1, [sp, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	bfbb      	ittet	lt
 80125bc:	425b      	neglt	r3, r3
 80125be:	f042 0202 	orrlt.w	r2, r2, #2
 80125c2:	9307      	strge	r3, [sp, #28]
 80125c4:	9307      	strlt	r3, [sp, #28]
 80125c6:	bfb8      	it	lt
 80125c8:	9204      	strlt	r2, [sp, #16]
 80125ca:	7823      	ldrb	r3, [r4, #0]
 80125cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80125ce:	d10a      	bne.n	80125e6 <_vfiprintf_r+0x156>
 80125d0:	7863      	ldrb	r3, [r4, #1]
 80125d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80125d4:	d132      	bne.n	801263c <_vfiprintf_r+0x1ac>
 80125d6:	9b03      	ldr	r3, [sp, #12]
 80125d8:	1d1a      	adds	r2, r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	9203      	str	r2, [sp, #12]
 80125de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125e2:	3402      	adds	r4, #2
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126bc <_vfiprintf_r+0x22c>
 80125ea:	7821      	ldrb	r1, [r4, #0]
 80125ec:	2203      	movs	r2, #3
 80125ee:	4650      	mov	r0, sl
 80125f0:	f7ed fe0e 	bl	8000210 <memchr>
 80125f4:	b138      	cbz	r0, 8012606 <_vfiprintf_r+0x176>
 80125f6:	9b04      	ldr	r3, [sp, #16]
 80125f8:	eba0 000a 	sub.w	r0, r0, sl
 80125fc:	2240      	movs	r2, #64	@ 0x40
 80125fe:	4082      	lsls	r2, r0
 8012600:	4313      	orrs	r3, r2
 8012602:	3401      	adds	r4, #1
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801260a:	4829      	ldr	r0, [pc, #164]	@ (80126b0 <_vfiprintf_r+0x220>)
 801260c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012610:	2206      	movs	r2, #6
 8012612:	f7ed fdfd 	bl	8000210 <memchr>
 8012616:	2800      	cmp	r0, #0
 8012618:	d03f      	beq.n	801269a <_vfiprintf_r+0x20a>
 801261a:	4b26      	ldr	r3, [pc, #152]	@ (80126b4 <_vfiprintf_r+0x224>)
 801261c:	bb1b      	cbnz	r3, 8012666 <_vfiprintf_r+0x1d6>
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	3307      	adds	r3, #7
 8012622:	f023 0307 	bic.w	r3, r3, #7
 8012626:	3308      	adds	r3, #8
 8012628:	9303      	str	r3, [sp, #12]
 801262a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801262c:	443b      	add	r3, r7
 801262e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012630:	e76a      	b.n	8012508 <_vfiprintf_r+0x78>
 8012632:	fb0c 3202 	mla	r2, ip, r2, r3
 8012636:	460c      	mov	r4, r1
 8012638:	2001      	movs	r0, #1
 801263a:	e7a8      	b.n	801258e <_vfiprintf_r+0xfe>
 801263c:	2300      	movs	r3, #0
 801263e:	3401      	adds	r4, #1
 8012640:	9305      	str	r3, [sp, #20]
 8012642:	4619      	mov	r1, r3
 8012644:	f04f 0c0a 	mov.w	ip, #10
 8012648:	4620      	mov	r0, r4
 801264a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801264e:	3a30      	subs	r2, #48	@ 0x30
 8012650:	2a09      	cmp	r2, #9
 8012652:	d903      	bls.n	801265c <_vfiprintf_r+0x1cc>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0c6      	beq.n	80125e6 <_vfiprintf_r+0x156>
 8012658:	9105      	str	r1, [sp, #20]
 801265a:	e7c4      	b.n	80125e6 <_vfiprintf_r+0x156>
 801265c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012660:	4604      	mov	r4, r0
 8012662:	2301      	movs	r3, #1
 8012664:	e7f0      	b.n	8012648 <_vfiprintf_r+0x1b8>
 8012666:	ab03      	add	r3, sp, #12
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	462a      	mov	r2, r5
 801266c:	4b12      	ldr	r3, [pc, #72]	@ (80126b8 <_vfiprintf_r+0x228>)
 801266e:	a904      	add	r1, sp, #16
 8012670:	4630      	mov	r0, r6
 8012672:	f7fc fd77 	bl	800f164 <_printf_float>
 8012676:	4607      	mov	r7, r0
 8012678:	1c78      	adds	r0, r7, #1
 801267a:	d1d6      	bne.n	801262a <_vfiprintf_r+0x19a>
 801267c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801267e:	07d9      	lsls	r1, r3, #31
 8012680:	d405      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012682:	89ab      	ldrh	r3, [r5, #12]
 8012684:	059a      	lsls	r2, r3, #22
 8012686:	d402      	bmi.n	801268e <_vfiprintf_r+0x1fe>
 8012688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801268a:	f7fd fcfd 	bl	8010088 <__retarget_lock_release_recursive>
 801268e:	89ab      	ldrh	r3, [r5, #12]
 8012690:	065b      	lsls	r3, r3, #25
 8012692:	f53f af1f 	bmi.w	80124d4 <_vfiprintf_r+0x44>
 8012696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012698:	e71e      	b.n	80124d8 <_vfiprintf_r+0x48>
 801269a:	ab03      	add	r3, sp, #12
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	462a      	mov	r2, r5
 80126a0:	4b05      	ldr	r3, [pc, #20]	@ (80126b8 <_vfiprintf_r+0x228>)
 80126a2:	a904      	add	r1, sp, #16
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc fff5 	bl	800f694 <_printf_i>
 80126aa:	e7e4      	b.n	8012676 <_vfiprintf_r+0x1e6>
 80126ac:	080152e9 	.word	0x080152e9
 80126b0:	080152f3 	.word	0x080152f3
 80126b4:	0800f165 	.word	0x0800f165
 80126b8:	0801246d 	.word	0x0801246d
 80126bc:	080152ef 	.word	0x080152ef

080126c0 <__swbuf_r>:
 80126c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126c2:	460e      	mov	r6, r1
 80126c4:	4614      	mov	r4, r2
 80126c6:	4605      	mov	r5, r0
 80126c8:	b118      	cbz	r0, 80126d2 <__swbuf_r+0x12>
 80126ca:	6a03      	ldr	r3, [r0, #32]
 80126cc:	b90b      	cbnz	r3, 80126d2 <__swbuf_r+0x12>
 80126ce:	f7fd fba1 	bl	800fe14 <__sinit>
 80126d2:	69a3      	ldr	r3, [r4, #24]
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	071a      	lsls	r2, r3, #28
 80126da:	d501      	bpl.n	80126e0 <__swbuf_r+0x20>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b943      	cbnz	r3, 80126f2 <__swbuf_r+0x32>
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 f82a 	bl	801273c <__swsetup_r>
 80126e8:	b118      	cbz	r0, 80126f2 <__swbuf_r+0x32>
 80126ea:	f04f 37ff 	mov.w	r7, #4294967295
 80126ee:	4638      	mov	r0, r7
 80126f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	6922      	ldr	r2, [r4, #16]
 80126f6:	1a98      	subs	r0, r3, r2
 80126f8:	6963      	ldr	r3, [r4, #20]
 80126fa:	b2f6      	uxtb	r6, r6
 80126fc:	4283      	cmp	r3, r0
 80126fe:	4637      	mov	r7, r6
 8012700:	dc05      	bgt.n	801270e <__swbuf_r+0x4e>
 8012702:	4621      	mov	r1, r4
 8012704:	4628      	mov	r0, r5
 8012706:	f7ff fdd7 	bl	80122b8 <_fflush_r>
 801270a:	2800      	cmp	r0, #0
 801270c:	d1ed      	bne.n	80126ea <__swbuf_r+0x2a>
 801270e:	68a3      	ldr	r3, [r4, #8]
 8012710:	3b01      	subs	r3, #1
 8012712:	60a3      	str	r3, [r4, #8]
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	6022      	str	r2, [r4, #0]
 801271a:	701e      	strb	r6, [r3, #0]
 801271c:	6962      	ldr	r2, [r4, #20]
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	429a      	cmp	r2, r3
 8012722:	d004      	beq.n	801272e <__swbuf_r+0x6e>
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	07db      	lsls	r3, r3, #31
 8012728:	d5e1      	bpl.n	80126ee <__swbuf_r+0x2e>
 801272a:	2e0a      	cmp	r6, #10
 801272c:	d1df      	bne.n	80126ee <__swbuf_r+0x2e>
 801272e:	4621      	mov	r1, r4
 8012730:	4628      	mov	r0, r5
 8012732:	f7ff fdc1 	bl	80122b8 <_fflush_r>
 8012736:	2800      	cmp	r0, #0
 8012738:	d0d9      	beq.n	80126ee <__swbuf_r+0x2e>
 801273a:	e7d6      	b.n	80126ea <__swbuf_r+0x2a>

0801273c <__swsetup_r>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4b29      	ldr	r3, [pc, #164]	@ (80127e4 <__swsetup_r+0xa8>)
 8012740:	4605      	mov	r5, r0
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	460c      	mov	r4, r1
 8012746:	b118      	cbz	r0, 8012750 <__swsetup_r+0x14>
 8012748:	6a03      	ldr	r3, [r0, #32]
 801274a:	b90b      	cbnz	r3, 8012750 <__swsetup_r+0x14>
 801274c:	f7fd fb62 	bl	800fe14 <__sinit>
 8012750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012754:	0719      	lsls	r1, r3, #28
 8012756:	d422      	bmi.n	801279e <__swsetup_r+0x62>
 8012758:	06da      	lsls	r2, r3, #27
 801275a:	d407      	bmi.n	801276c <__swsetup_r+0x30>
 801275c:	2209      	movs	r2, #9
 801275e:	602a      	str	r2, [r5, #0]
 8012760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012764:	81a3      	strh	r3, [r4, #12]
 8012766:	f04f 30ff 	mov.w	r0, #4294967295
 801276a:	e033      	b.n	80127d4 <__swsetup_r+0x98>
 801276c:	0758      	lsls	r0, r3, #29
 801276e:	d512      	bpl.n	8012796 <__swsetup_r+0x5a>
 8012770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012772:	b141      	cbz	r1, 8012786 <__swsetup_r+0x4a>
 8012774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012778:	4299      	cmp	r1, r3
 801277a:	d002      	beq.n	8012782 <__swsetup_r+0x46>
 801277c:	4628      	mov	r0, r5
 801277e:	f7fe faef 	bl	8010d60 <_free_r>
 8012782:	2300      	movs	r3, #0
 8012784:	6363      	str	r3, [r4, #52]	@ 0x34
 8012786:	89a3      	ldrh	r3, [r4, #12]
 8012788:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801278c:	81a3      	strh	r3, [r4, #12]
 801278e:	2300      	movs	r3, #0
 8012790:	6063      	str	r3, [r4, #4]
 8012792:	6923      	ldr	r3, [r4, #16]
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	f043 0308 	orr.w	r3, r3, #8
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	b94b      	cbnz	r3, 80127b6 <__swsetup_r+0x7a>
 80127a2:	89a3      	ldrh	r3, [r4, #12]
 80127a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80127a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127ac:	d003      	beq.n	80127b6 <__swsetup_r+0x7a>
 80127ae:	4621      	mov	r1, r4
 80127b0:	4628      	mov	r0, r5
 80127b2:	f000 f883 	bl	80128bc <__smakebuf_r>
 80127b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ba:	f013 0201 	ands.w	r2, r3, #1
 80127be:	d00a      	beq.n	80127d6 <__swsetup_r+0x9a>
 80127c0:	2200      	movs	r2, #0
 80127c2:	60a2      	str	r2, [r4, #8]
 80127c4:	6962      	ldr	r2, [r4, #20]
 80127c6:	4252      	negs	r2, r2
 80127c8:	61a2      	str	r2, [r4, #24]
 80127ca:	6922      	ldr	r2, [r4, #16]
 80127cc:	b942      	cbnz	r2, 80127e0 <__swsetup_r+0xa4>
 80127ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80127d2:	d1c5      	bne.n	8012760 <__swsetup_r+0x24>
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	0799      	lsls	r1, r3, #30
 80127d8:	bf58      	it	pl
 80127da:	6962      	ldrpl	r2, [r4, #20]
 80127dc:	60a2      	str	r2, [r4, #8]
 80127de:	e7f4      	b.n	80127ca <__swsetup_r+0x8e>
 80127e0:	2000      	movs	r0, #0
 80127e2:	e7f7      	b.n	80127d4 <__swsetup_r+0x98>
 80127e4:	2000029c 	.word	0x2000029c

080127e8 <_raise_r>:
 80127e8:	291f      	cmp	r1, #31
 80127ea:	b538      	push	{r3, r4, r5, lr}
 80127ec:	4605      	mov	r5, r0
 80127ee:	460c      	mov	r4, r1
 80127f0:	d904      	bls.n	80127fc <_raise_r+0x14>
 80127f2:	2316      	movs	r3, #22
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	bd38      	pop	{r3, r4, r5, pc}
 80127fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127fe:	b112      	cbz	r2, 8012806 <_raise_r+0x1e>
 8012800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012804:	b94b      	cbnz	r3, 801281a <_raise_r+0x32>
 8012806:	4628      	mov	r0, r5
 8012808:	f000 f830 	bl	801286c <_getpid_r>
 801280c:	4622      	mov	r2, r4
 801280e:	4601      	mov	r1, r0
 8012810:	4628      	mov	r0, r5
 8012812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012816:	f000 b817 	b.w	8012848 <_kill_r>
 801281a:	2b01      	cmp	r3, #1
 801281c:	d00a      	beq.n	8012834 <_raise_r+0x4c>
 801281e:	1c59      	adds	r1, r3, #1
 8012820:	d103      	bne.n	801282a <_raise_r+0x42>
 8012822:	2316      	movs	r3, #22
 8012824:	6003      	str	r3, [r0, #0]
 8012826:	2001      	movs	r0, #1
 8012828:	e7e7      	b.n	80127fa <_raise_r+0x12>
 801282a:	2100      	movs	r1, #0
 801282c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012830:	4620      	mov	r0, r4
 8012832:	4798      	blx	r3
 8012834:	2000      	movs	r0, #0
 8012836:	e7e0      	b.n	80127fa <_raise_r+0x12>

08012838 <raise>:
 8012838:	4b02      	ldr	r3, [pc, #8]	@ (8012844 <raise+0xc>)
 801283a:	4601      	mov	r1, r0
 801283c:	6818      	ldr	r0, [r3, #0]
 801283e:	f7ff bfd3 	b.w	80127e8 <_raise_r>
 8012842:	bf00      	nop
 8012844:	2000029c 	.word	0x2000029c

08012848 <_kill_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	@ (8012868 <_kill_r+0x20>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	4611      	mov	r1, r2
 8012854:	602b      	str	r3, [r5, #0]
 8012856:	f7f1 faf3 	bl	8003e40 <_kill>
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	d102      	bne.n	8012864 <_kill_r+0x1c>
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	b103      	cbz	r3, 8012864 <_kill_r+0x1c>
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop
 8012868:	200026e0 	.word	0x200026e0

0801286c <_getpid_r>:
 801286c:	f7f1 bae0 	b.w	8003e30 <_getpid>

08012870 <__swhatbuf_r>:
 8012870:	b570      	push	{r4, r5, r6, lr}
 8012872:	460c      	mov	r4, r1
 8012874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012878:	2900      	cmp	r1, #0
 801287a:	b096      	sub	sp, #88	@ 0x58
 801287c:	4615      	mov	r5, r2
 801287e:	461e      	mov	r6, r3
 8012880:	da0d      	bge.n	801289e <__swhatbuf_r+0x2e>
 8012882:	89a3      	ldrh	r3, [r4, #12]
 8012884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012888:	f04f 0100 	mov.w	r1, #0
 801288c:	bf14      	ite	ne
 801288e:	2340      	movne	r3, #64	@ 0x40
 8012890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012894:	2000      	movs	r0, #0
 8012896:	6031      	str	r1, [r6, #0]
 8012898:	602b      	str	r3, [r5, #0]
 801289a:	b016      	add	sp, #88	@ 0x58
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	466a      	mov	r2, sp
 80128a0:	f000 f848 	bl	8012934 <_fstat_r>
 80128a4:	2800      	cmp	r0, #0
 80128a6:	dbec      	blt.n	8012882 <__swhatbuf_r+0x12>
 80128a8:	9901      	ldr	r1, [sp, #4]
 80128aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128b2:	4259      	negs	r1, r3
 80128b4:	4159      	adcs	r1, r3
 80128b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128ba:	e7eb      	b.n	8012894 <__swhatbuf_r+0x24>

080128bc <__smakebuf_r>:
 80128bc:	898b      	ldrh	r3, [r1, #12]
 80128be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128c0:	079d      	lsls	r5, r3, #30
 80128c2:	4606      	mov	r6, r0
 80128c4:	460c      	mov	r4, r1
 80128c6:	d507      	bpl.n	80128d8 <__smakebuf_r+0x1c>
 80128c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	6123      	str	r3, [r4, #16]
 80128d0:	2301      	movs	r3, #1
 80128d2:	6163      	str	r3, [r4, #20]
 80128d4:	b003      	add	sp, #12
 80128d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128d8:	ab01      	add	r3, sp, #4
 80128da:	466a      	mov	r2, sp
 80128dc:	f7ff ffc8 	bl	8012870 <__swhatbuf_r>
 80128e0:	9f00      	ldr	r7, [sp, #0]
 80128e2:	4605      	mov	r5, r0
 80128e4:	4639      	mov	r1, r7
 80128e6:	4630      	mov	r0, r6
 80128e8:	f7fb fcfc 	bl	800e2e4 <_malloc_r>
 80128ec:	b948      	cbnz	r0, 8012902 <__smakebuf_r+0x46>
 80128ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128f2:	059a      	lsls	r2, r3, #22
 80128f4:	d4ee      	bmi.n	80128d4 <__smakebuf_r+0x18>
 80128f6:	f023 0303 	bic.w	r3, r3, #3
 80128fa:	f043 0302 	orr.w	r3, r3, #2
 80128fe:	81a3      	strh	r3, [r4, #12]
 8012900:	e7e2      	b.n	80128c8 <__smakebuf_r+0xc>
 8012902:	89a3      	ldrh	r3, [r4, #12]
 8012904:	6020      	str	r0, [r4, #0]
 8012906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801290a:	81a3      	strh	r3, [r4, #12]
 801290c:	9b01      	ldr	r3, [sp, #4]
 801290e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012912:	b15b      	cbz	r3, 801292c <__smakebuf_r+0x70>
 8012914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012918:	4630      	mov	r0, r6
 801291a:	f000 f81d 	bl	8012958 <_isatty_r>
 801291e:	b128      	cbz	r0, 801292c <__smakebuf_r+0x70>
 8012920:	89a3      	ldrh	r3, [r4, #12]
 8012922:	f023 0303 	bic.w	r3, r3, #3
 8012926:	f043 0301 	orr.w	r3, r3, #1
 801292a:	81a3      	strh	r3, [r4, #12]
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	431d      	orrs	r5, r3
 8012930:	81a5      	strh	r5, [r4, #12]
 8012932:	e7cf      	b.n	80128d4 <__smakebuf_r+0x18>

08012934 <_fstat_r>:
 8012934:	b538      	push	{r3, r4, r5, lr}
 8012936:	4d07      	ldr	r5, [pc, #28]	@ (8012954 <_fstat_r+0x20>)
 8012938:	2300      	movs	r3, #0
 801293a:	4604      	mov	r4, r0
 801293c:	4608      	mov	r0, r1
 801293e:	4611      	mov	r1, r2
 8012940:	602b      	str	r3, [r5, #0]
 8012942:	f7f1 fadd 	bl	8003f00 <_fstat>
 8012946:	1c43      	adds	r3, r0, #1
 8012948:	d102      	bne.n	8012950 <_fstat_r+0x1c>
 801294a:	682b      	ldr	r3, [r5, #0]
 801294c:	b103      	cbz	r3, 8012950 <_fstat_r+0x1c>
 801294e:	6023      	str	r3, [r4, #0]
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	bf00      	nop
 8012954:	200026e0 	.word	0x200026e0

08012958 <_isatty_r>:
 8012958:	b538      	push	{r3, r4, r5, lr}
 801295a:	4d06      	ldr	r5, [pc, #24]	@ (8012974 <_isatty_r+0x1c>)
 801295c:	2300      	movs	r3, #0
 801295e:	4604      	mov	r4, r0
 8012960:	4608      	mov	r0, r1
 8012962:	602b      	str	r3, [r5, #0]
 8012964:	f7f1 fadc 	bl	8003f20 <_isatty>
 8012968:	1c43      	adds	r3, r0, #1
 801296a:	d102      	bne.n	8012972 <_isatty_r+0x1a>
 801296c:	682b      	ldr	r3, [r5, #0]
 801296e:	b103      	cbz	r3, 8012972 <_isatty_r+0x1a>
 8012970:	6023      	str	r3, [r4, #0]
 8012972:	bd38      	pop	{r3, r4, r5, pc}
 8012974:	200026e0 	.word	0x200026e0

08012978 <atan2>:
 8012978:	f000 bbb2 	b.w	80130e0 <__ieee754_atan2>

0801297c <pow>:
 801297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801297e:	ed2d 8b02 	vpush	{d8}
 8012982:	eeb0 8a40 	vmov.f32	s16, s0
 8012986:	eef0 8a60 	vmov.f32	s17, s1
 801298a:	ec55 4b11 	vmov	r4, r5, d1
 801298e:	f000 fc6f 	bl	8013270 <__ieee754_pow>
 8012992:	4622      	mov	r2, r4
 8012994:	462b      	mov	r3, r5
 8012996:	4620      	mov	r0, r4
 8012998:	4629      	mov	r1, r5
 801299a:	ec57 6b10 	vmov	r6, r7, d0
 801299e:	f7ee f8e5 	bl	8000b6c <__aeabi_dcmpun>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d13b      	bne.n	8012a1e <pow+0xa2>
 80129a6:	ec51 0b18 	vmov	r0, r1, d8
 80129aa:	2200      	movs	r2, #0
 80129ac:	2300      	movs	r3, #0
 80129ae:	f7ee f8ab 	bl	8000b08 <__aeabi_dcmpeq>
 80129b2:	b1b8      	cbz	r0, 80129e4 <pow+0x68>
 80129b4:	2200      	movs	r2, #0
 80129b6:	2300      	movs	r3, #0
 80129b8:	4620      	mov	r0, r4
 80129ba:	4629      	mov	r1, r5
 80129bc:	f7ee f8a4 	bl	8000b08 <__aeabi_dcmpeq>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d146      	bne.n	8012a52 <pow+0xd6>
 80129c4:	ec45 4b10 	vmov	d0, r4, r5
 80129c8:	f000 f91e 	bl	8012c08 <finite>
 80129cc:	b338      	cbz	r0, 8012a1e <pow+0xa2>
 80129ce:	2200      	movs	r2, #0
 80129d0:	2300      	movs	r3, #0
 80129d2:	4620      	mov	r0, r4
 80129d4:	4629      	mov	r1, r5
 80129d6:	f7ee f8a1 	bl	8000b1c <__aeabi_dcmplt>
 80129da:	b300      	cbz	r0, 8012a1e <pow+0xa2>
 80129dc:	f7fd fb28 	bl	8010030 <__errno>
 80129e0:	2322      	movs	r3, #34	@ 0x22
 80129e2:	e01b      	b.n	8012a1c <pow+0xa0>
 80129e4:	ec47 6b10 	vmov	d0, r6, r7
 80129e8:	f000 f90e 	bl	8012c08 <finite>
 80129ec:	b9e0      	cbnz	r0, 8012a28 <pow+0xac>
 80129ee:	eeb0 0a48 	vmov.f32	s0, s16
 80129f2:	eef0 0a68 	vmov.f32	s1, s17
 80129f6:	f000 f907 	bl	8012c08 <finite>
 80129fa:	b1a8      	cbz	r0, 8012a28 <pow+0xac>
 80129fc:	ec45 4b10 	vmov	d0, r4, r5
 8012a00:	f000 f902 	bl	8012c08 <finite>
 8012a04:	b180      	cbz	r0, 8012a28 <pow+0xac>
 8012a06:	4632      	mov	r2, r6
 8012a08:	463b      	mov	r3, r7
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	4639      	mov	r1, r7
 8012a0e:	f7ee f8ad 	bl	8000b6c <__aeabi_dcmpun>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d0e2      	beq.n	80129dc <pow+0x60>
 8012a16:	f7fd fb0b 	bl	8010030 <__errno>
 8012a1a:	2321      	movs	r3, #33	@ 0x21
 8012a1c:	6003      	str	r3, [r0, #0]
 8012a1e:	ecbd 8b02 	vpop	{d8}
 8012a22:	ec47 6b10 	vmov	d0, r6, r7
 8012a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a28:	2200      	movs	r2, #0
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	4639      	mov	r1, r7
 8012a30:	f7ee f86a 	bl	8000b08 <__aeabi_dcmpeq>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d0f2      	beq.n	8012a1e <pow+0xa2>
 8012a38:	eeb0 0a48 	vmov.f32	s0, s16
 8012a3c:	eef0 0a68 	vmov.f32	s1, s17
 8012a40:	f000 f8e2 	bl	8012c08 <finite>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d0ea      	beq.n	8012a1e <pow+0xa2>
 8012a48:	ec45 4b10 	vmov	d0, r4, r5
 8012a4c:	f000 f8dc 	bl	8012c08 <finite>
 8012a50:	e7c3      	b.n	80129da <pow+0x5e>
 8012a52:	4f01      	ldr	r7, [pc, #4]	@ (8012a58 <pow+0xdc>)
 8012a54:	2600      	movs	r6, #0
 8012a56:	e7e2      	b.n	8012a1e <pow+0xa2>
 8012a58:	3ff00000 	.word	0x3ff00000

08012a5c <sqrt>:
 8012a5c:	b538      	push	{r3, r4, r5, lr}
 8012a5e:	ed2d 8b02 	vpush	{d8}
 8012a62:	ec55 4b10 	vmov	r4, r5, d0
 8012a66:	f000 f8db 	bl	8012c20 <__ieee754_sqrt>
 8012a6a:	4622      	mov	r2, r4
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	4620      	mov	r0, r4
 8012a70:	4629      	mov	r1, r5
 8012a72:	eeb0 8a40 	vmov.f32	s16, s0
 8012a76:	eef0 8a60 	vmov.f32	s17, s1
 8012a7a:	f7ee f877 	bl	8000b6c <__aeabi_dcmpun>
 8012a7e:	b990      	cbnz	r0, 8012aa6 <sqrt+0x4a>
 8012a80:	2200      	movs	r2, #0
 8012a82:	2300      	movs	r3, #0
 8012a84:	4620      	mov	r0, r4
 8012a86:	4629      	mov	r1, r5
 8012a88:	f7ee f848 	bl	8000b1c <__aeabi_dcmplt>
 8012a8c:	b158      	cbz	r0, 8012aa6 <sqrt+0x4a>
 8012a8e:	f7fd facf 	bl	8010030 <__errno>
 8012a92:	2321      	movs	r3, #33	@ 0x21
 8012a94:	6003      	str	r3, [r0, #0]
 8012a96:	2200      	movs	r2, #0
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	f7ed fef5 	bl	800088c <__aeabi_ddiv>
 8012aa2:	ec41 0b18 	vmov	d8, r0, r1
 8012aa6:	eeb0 0a48 	vmov.f32	s0, s16
 8012aaa:	eef0 0a68 	vmov.f32	s1, s17
 8012aae:	ecbd 8b02 	vpop	{d8}
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	0000      	movs	r0, r0
	...

08012ab8 <cos>:
 8012ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012aba:	ec53 2b10 	vmov	r2, r3, d0
 8012abe:	4826      	ldr	r0, [pc, #152]	@ (8012b58 <cos+0xa0>)
 8012ac0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012ac4:	4281      	cmp	r1, r0
 8012ac6:	d806      	bhi.n	8012ad6 <cos+0x1e>
 8012ac8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012b50 <cos+0x98>
 8012acc:	b005      	add	sp, #20
 8012ace:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ad2:	f000 b981 	b.w	8012dd8 <__kernel_cos>
 8012ad6:	4821      	ldr	r0, [pc, #132]	@ (8012b5c <cos+0xa4>)
 8012ad8:	4281      	cmp	r1, r0
 8012ada:	d908      	bls.n	8012aee <cos+0x36>
 8012adc:	4610      	mov	r0, r2
 8012ade:	4619      	mov	r1, r3
 8012ae0:	f7ed fbf2 	bl	80002c8 <__aeabi_dsub>
 8012ae4:	ec41 0b10 	vmov	d0, r0, r1
 8012ae8:	b005      	add	sp, #20
 8012aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8012aee:	4668      	mov	r0, sp
 8012af0:	f001 f902 	bl	8013cf8 <__ieee754_rem_pio2>
 8012af4:	f000 0003 	and.w	r0, r0, #3
 8012af8:	2801      	cmp	r0, #1
 8012afa:	d00b      	beq.n	8012b14 <cos+0x5c>
 8012afc:	2802      	cmp	r0, #2
 8012afe:	d015      	beq.n	8012b2c <cos+0x74>
 8012b00:	b9d8      	cbnz	r0, 8012b3a <cos+0x82>
 8012b02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b06:	ed9d 0b00 	vldr	d0, [sp]
 8012b0a:	f000 f965 	bl	8012dd8 <__kernel_cos>
 8012b0e:	ec51 0b10 	vmov	r0, r1, d0
 8012b12:	e7e7      	b.n	8012ae4 <cos+0x2c>
 8012b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b18:	ed9d 0b00 	vldr	d0, [sp]
 8012b1c:	f000 fa24 	bl	8012f68 <__kernel_sin>
 8012b20:	ec53 2b10 	vmov	r2, r3, d0
 8012b24:	4610      	mov	r0, r2
 8012b26:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012b2a:	e7db      	b.n	8012ae4 <cos+0x2c>
 8012b2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b30:	ed9d 0b00 	vldr	d0, [sp]
 8012b34:	f000 f950 	bl	8012dd8 <__kernel_cos>
 8012b38:	e7f2      	b.n	8012b20 <cos+0x68>
 8012b3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b3e:	ed9d 0b00 	vldr	d0, [sp]
 8012b42:	2001      	movs	r0, #1
 8012b44:	f000 fa10 	bl	8012f68 <__kernel_sin>
 8012b48:	e7e1      	b.n	8012b0e <cos+0x56>
 8012b4a:	bf00      	nop
 8012b4c:	f3af 8000 	nop.w
	...
 8012b58:	3fe921fb 	.word	0x3fe921fb
 8012b5c:	7fefffff 	.word	0x7fefffff

08012b60 <sin>:
 8012b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b62:	ec53 2b10 	vmov	r2, r3, d0
 8012b66:	4826      	ldr	r0, [pc, #152]	@ (8012c00 <sin+0xa0>)
 8012b68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012b6c:	4281      	cmp	r1, r0
 8012b6e:	d807      	bhi.n	8012b80 <sin+0x20>
 8012b70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012bf8 <sin+0x98>
 8012b74:	2000      	movs	r0, #0
 8012b76:	b005      	add	sp, #20
 8012b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b7c:	f000 b9f4 	b.w	8012f68 <__kernel_sin>
 8012b80:	4820      	ldr	r0, [pc, #128]	@ (8012c04 <sin+0xa4>)
 8012b82:	4281      	cmp	r1, r0
 8012b84:	d908      	bls.n	8012b98 <sin+0x38>
 8012b86:	4610      	mov	r0, r2
 8012b88:	4619      	mov	r1, r3
 8012b8a:	f7ed fb9d 	bl	80002c8 <__aeabi_dsub>
 8012b8e:	ec41 0b10 	vmov	d0, r0, r1
 8012b92:	b005      	add	sp, #20
 8012b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b98:	4668      	mov	r0, sp
 8012b9a:	f001 f8ad 	bl	8013cf8 <__ieee754_rem_pio2>
 8012b9e:	f000 0003 	and.w	r0, r0, #3
 8012ba2:	2801      	cmp	r0, #1
 8012ba4:	d00c      	beq.n	8012bc0 <sin+0x60>
 8012ba6:	2802      	cmp	r0, #2
 8012ba8:	d011      	beq.n	8012bce <sin+0x6e>
 8012baa:	b9e8      	cbnz	r0, 8012be8 <sin+0x88>
 8012bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bb0:	ed9d 0b00 	vldr	d0, [sp]
 8012bb4:	2001      	movs	r0, #1
 8012bb6:	f000 f9d7 	bl	8012f68 <__kernel_sin>
 8012bba:	ec51 0b10 	vmov	r0, r1, d0
 8012bbe:	e7e6      	b.n	8012b8e <sin+0x2e>
 8012bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bc4:	ed9d 0b00 	vldr	d0, [sp]
 8012bc8:	f000 f906 	bl	8012dd8 <__kernel_cos>
 8012bcc:	e7f5      	b.n	8012bba <sin+0x5a>
 8012bce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bd2:	ed9d 0b00 	vldr	d0, [sp]
 8012bd6:	2001      	movs	r0, #1
 8012bd8:	f000 f9c6 	bl	8012f68 <__kernel_sin>
 8012bdc:	ec53 2b10 	vmov	r2, r3, d0
 8012be0:	4610      	mov	r0, r2
 8012be2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012be6:	e7d2      	b.n	8012b8e <sin+0x2e>
 8012be8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bec:	ed9d 0b00 	vldr	d0, [sp]
 8012bf0:	f000 f8f2 	bl	8012dd8 <__kernel_cos>
 8012bf4:	e7f2      	b.n	8012bdc <sin+0x7c>
 8012bf6:	bf00      	nop
	...
 8012c00:	3fe921fb 	.word	0x3fe921fb
 8012c04:	7fefffff 	.word	0x7fefffff

08012c08 <finite>:
 8012c08:	b082      	sub	sp, #8
 8012c0a:	ed8d 0b00 	vstr	d0, [sp]
 8012c0e:	9801      	ldr	r0, [sp, #4]
 8012c10:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012c14:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012c18:	0fc0      	lsrs	r0, r0, #31
 8012c1a:	b002      	add	sp, #8
 8012c1c:	4770      	bx	lr
	...

08012c20 <__ieee754_sqrt>:
 8012c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	4a68      	ldr	r2, [pc, #416]	@ (8012dc8 <__ieee754_sqrt+0x1a8>)
 8012c26:	ec55 4b10 	vmov	r4, r5, d0
 8012c2a:	43aa      	bics	r2, r5
 8012c2c:	462b      	mov	r3, r5
 8012c2e:	4621      	mov	r1, r4
 8012c30:	d110      	bne.n	8012c54 <__ieee754_sqrt+0x34>
 8012c32:	4622      	mov	r2, r4
 8012c34:	4620      	mov	r0, r4
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7ed fcfe 	bl	8000638 <__aeabi_dmul>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	460b      	mov	r3, r1
 8012c40:	4620      	mov	r0, r4
 8012c42:	4629      	mov	r1, r5
 8012c44:	f7ed fb42 	bl	80002cc <__adddf3>
 8012c48:	4604      	mov	r4, r0
 8012c4a:	460d      	mov	r5, r1
 8012c4c:	ec45 4b10 	vmov	d0, r4, r5
 8012c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c54:	2d00      	cmp	r5, #0
 8012c56:	dc0e      	bgt.n	8012c76 <__ieee754_sqrt+0x56>
 8012c58:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012c5c:	4322      	orrs	r2, r4
 8012c5e:	d0f5      	beq.n	8012c4c <__ieee754_sqrt+0x2c>
 8012c60:	b19d      	cbz	r5, 8012c8a <__ieee754_sqrt+0x6a>
 8012c62:	4622      	mov	r2, r4
 8012c64:	4620      	mov	r0, r4
 8012c66:	4629      	mov	r1, r5
 8012c68:	f7ed fb2e 	bl	80002c8 <__aeabi_dsub>
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	460b      	mov	r3, r1
 8012c70:	f7ed fe0c 	bl	800088c <__aeabi_ddiv>
 8012c74:	e7e8      	b.n	8012c48 <__ieee754_sqrt+0x28>
 8012c76:	152a      	asrs	r2, r5, #20
 8012c78:	d115      	bne.n	8012ca6 <__ieee754_sqrt+0x86>
 8012c7a:	2000      	movs	r0, #0
 8012c7c:	e009      	b.n	8012c92 <__ieee754_sqrt+0x72>
 8012c7e:	0acb      	lsrs	r3, r1, #11
 8012c80:	3a15      	subs	r2, #21
 8012c82:	0549      	lsls	r1, r1, #21
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d0fa      	beq.n	8012c7e <__ieee754_sqrt+0x5e>
 8012c88:	e7f7      	b.n	8012c7a <__ieee754_sqrt+0x5a>
 8012c8a:	462a      	mov	r2, r5
 8012c8c:	e7fa      	b.n	8012c84 <__ieee754_sqrt+0x64>
 8012c8e:	005b      	lsls	r3, r3, #1
 8012c90:	3001      	adds	r0, #1
 8012c92:	02dc      	lsls	r4, r3, #11
 8012c94:	d5fb      	bpl.n	8012c8e <__ieee754_sqrt+0x6e>
 8012c96:	1e44      	subs	r4, r0, #1
 8012c98:	1b12      	subs	r2, r2, r4
 8012c9a:	f1c0 0420 	rsb	r4, r0, #32
 8012c9e:	fa21 f404 	lsr.w	r4, r1, r4
 8012ca2:	4323      	orrs	r3, r4
 8012ca4:	4081      	lsls	r1, r0
 8012ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012caa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012cb2:	07d2      	lsls	r2, r2, #31
 8012cb4:	bf5c      	itt	pl
 8012cb6:	005b      	lslpl	r3, r3, #1
 8012cb8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012cc0:	bf58      	it	pl
 8012cc2:	0049      	lslpl	r1, r1, #1
 8012cc4:	2600      	movs	r6, #0
 8012cc6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012cca:	106d      	asrs	r5, r5, #1
 8012ccc:	0049      	lsls	r1, r1, #1
 8012cce:	2016      	movs	r0, #22
 8012cd0:	4632      	mov	r2, r6
 8012cd2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012cd6:	1917      	adds	r7, r2, r4
 8012cd8:	429f      	cmp	r7, r3
 8012cda:	bfde      	ittt	le
 8012cdc:	193a      	addle	r2, r7, r4
 8012cde:	1bdb      	suble	r3, r3, r7
 8012ce0:	1936      	addle	r6, r6, r4
 8012ce2:	0fcf      	lsrs	r7, r1, #31
 8012ce4:	3801      	subs	r0, #1
 8012ce6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012cea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012cee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012cf2:	d1f0      	bne.n	8012cd6 <__ieee754_sqrt+0xb6>
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	2720      	movs	r7, #32
 8012cf8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	eb00 0e0c 	add.w	lr, r0, ip
 8012d02:	db02      	blt.n	8012d0a <__ieee754_sqrt+0xea>
 8012d04:	d113      	bne.n	8012d2e <__ieee754_sqrt+0x10e>
 8012d06:	458e      	cmp	lr, r1
 8012d08:	d811      	bhi.n	8012d2e <__ieee754_sqrt+0x10e>
 8012d0a:	f1be 0f00 	cmp.w	lr, #0
 8012d0e:	eb0e 000c 	add.w	r0, lr, ip
 8012d12:	da42      	bge.n	8012d9a <__ieee754_sqrt+0x17a>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	db40      	blt.n	8012d9a <__ieee754_sqrt+0x17a>
 8012d18:	f102 0801 	add.w	r8, r2, #1
 8012d1c:	1a9b      	subs	r3, r3, r2
 8012d1e:	458e      	cmp	lr, r1
 8012d20:	bf88      	it	hi
 8012d22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012d26:	eba1 010e 	sub.w	r1, r1, lr
 8012d2a:	4464      	add	r4, ip
 8012d2c:	4642      	mov	r2, r8
 8012d2e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012d32:	3f01      	subs	r7, #1
 8012d34:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012d38:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012d40:	d1dc      	bne.n	8012cfc <__ieee754_sqrt+0xdc>
 8012d42:	4319      	orrs	r1, r3
 8012d44:	d01b      	beq.n	8012d7e <__ieee754_sqrt+0x15e>
 8012d46:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012dcc <__ieee754_sqrt+0x1ac>
 8012d4a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012dd0 <__ieee754_sqrt+0x1b0>
 8012d4e:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d52:	e9db 2300 	ldrd	r2, r3, [fp]
 8012d56:	f7ed fab7 	bl	80002c8 <__aeabi_dsub>
 8012d5a:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d5e:	4602      	mov	r2, r0
 8012d60:	460b      	mov	r3, r1
 8012d62:	4640      	mov	r0, r8
 8012d64:	4649      	mov	r1, r9
 8012d66:	f7ed fee3 	bl	8000b30 <__aeabi_dcmple>
 8012d6a:	b140      	cbz	r0, 8012d7e <__ieee754_sqrt+0x15e>
 8012d6c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012d70:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d74:	e9db 2300 	ldrd	r2, r3, [fp]
 8012d78:	d111      	bne.n	8012d9e <__ieee754_sqrt+0x17e>
 8012d7a:	3601      	adds	r6, #1
 8012d7c:	463c      	mov	r4, r7
 8012d7e:	1072      	asrs	r2, r6, #1
 8012d80:	0863      	lsrs	r3, r4, #1
 8012d82:	07f1      	lsls	r1, r6, #31
 8012d84:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012d88:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012d8c:	bf48      	it	mi
 8012d8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012d92:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012d96:	4618      	mov	r0, r3
 8012d98:	e756      	b.n	8012c48 <__ieee754_sqrt+0x28>
 8012d9a:	4690      	mov	r8, r2
 8012d9c:	e7be      	b.n	8012d1c <__ieee754_sqrt+0xfc>
 8012d9e:	f7ed fa95 	bl	80002cc <__adddf3>
 8012da2:	e9da 8900 	ldrd	r8, r9, [sl]
 8012da6:	4602      	mov	r2, r0
 8012da8:	460b      	mov	r3, r1
 8012daa:	4640      	mov	r0, r8
 8012dac:	4649      	mov	r1, r9
 8012dae:	f7ed feb5 	bl	8000b1c <__aeabi_dcmplt>
 8012db2:	b120      	cbz	r0, 8012dbe <__ieee754_sqrt+0x19e>
 8012db4:	1ca0      	adds	r0, r4, #2
 8012db6:	bf08      	it	eq
 8012db8:	3601      	addeq	r6, #1
 8012dba:	3402      	adds	r4, #2
 8012dbc:	e7df      	b.n	8012d7e <__ieee754_sqrt+0x15e>
 8012dbe:	1c63      	adds	r3, r4, #1
 8012dc0:	f023 0401 	bic.w	r4, r3, #1
 8012dc4:	e7db      	b.n	8012d7e <__ieee754_sqrt+0x15e>
 8012dc6:	bf00      	nop
 8012dc8:	7ff00000 	.word	0x7ff00000
 8012dcc:	200002f8 	.word	0x200002f8
 8012dd0:	200002f0 	.word	0x200002f0
 8012dd4:	00000000 	.word	0x00000000

08012dd8 <__kernel_cos>:
 8012dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	ec57 6b10 	vmov	r6, r7, d0
 8012de0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012de4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012de8:	ed8d 1b00 	vstr	d1, [sp]
 8012dec:	d206      	bcs.n	8012dfc <__kernel_cos+0x24>
 8012dee:	4630      	mov	r0, r6
 8012df0:	4639      	mov	r1, r7
 8012df2:	f7ed fed1 	bl	8000b98 <__aeabi_d2iz>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	f000 8088 	beq.w	8012f0c <__kernel_cos+0x134>
 8012dfc:	4632      	mov	r2, r6
 8012dfe:	463b      	mov	r3, r7
 8012e00:	4630      	mov	r0, r6
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fc18 	bl	8000638 <__aeabi_dmul>
 8012e08:	4b51      	ldr	r3, [pc, #324]	@ (8012f50 <__kernel_cos+0x178>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	4604      	mov	r4, r0
 8012e0e:	460d      	mov	r5, r1
 8012e10:	f7ed fc12 	bl	8000638 <__aeabi_dmul>
 8012e14:	a340      	add	r3, pc, #256	@ (adr r3, 8012f18 <__kernel_cos+0x140>)
 8012e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1a:	4682      	mov	sl, r0
 8012e1c:	468b      	mov	fp, r1
 8012e1e:	4620      	mov	r0, r4
 8012e20:	4629      	mov	r1, r5
 8012e22:	f7ed fc09 	bl	8000638 <__aeabi_dmul>
 8012e26:	a33e      	add	r3, pc, #248	@ (adr r3, 8012f20 <__kernel_cos+0x148>)
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	f7ed fa4e 	bl	80002cc <__adddf3>
 8012e30:	4622      	mov	r2, r4
 8012e32:	462b      	mov	r3, r5
 8012e34:	f7ed fc00 	bl	8000638 <__aeabi_dmul>
 8012e38:	a33b      	add	r3, pc, #236	@ (adr r3, 8012f28 <__kernel_cos+0x150>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	f7ed fa43 	bl	80002c8 <__aeabi_dsub>
 8012e42:	4622      	mov	r2, r4
 8012e44:	462b      	mov	r3, r5
 8012e46:	f7ed fbf7 	bl	8000638 <__aeabi_dmul>
 8012e4a:	a339      	add	r3, pc, #228	@ (adr r3, 8012f30 <__kernel_cos+0x158>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7ed fa3c 	bl	80002cc <__adddf3>
 8012e54:	4622      	mov	r2, r4
 8012e56:	462b      	mov	r3, r5
 8012e58:	f7ed fbee 	bl	8000638 <__aeabi_dmul>
 8012e5c:	a336      	add	r3, pc, #216	@ (adr r3, 8012f38 <__kernel_cos+0x160>)
 8012e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e62:	f7ed fa31 	bl	80002c8 <__aeabi_dsub>
 8012e66:	4622      	mov	r2, r4
 8012e68:	462b      	mov	r3, r5
 8012e6a:	f7ed fbe5 	bl	8000638 <__aeabi_dmul>
 8012e6e:	a334      	add	r3, pc, #208	@ (adr r3, 8012f40 <__kernel_cos+0x168>)
 8012e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e74:	f7ed fa2a 	bl	80002cc <__adddf3>
 8012e78:	4622      	mov	r2, r4
 8012e7a:	462b      	mov	r3, r5
 8012e7c:	f7ed fbdc 	bl	8000638 <__aeabi_dmul>
 8012e80:	4622      	mov	r2, r4
 8012e82:	462b      	mov	r3, r5
 8012e84:	f7ed fbd8 	bl	8000638 <__aeabi_dmul>
 8012e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	460d      	mov	r5, r1
 8012e90:	4630      	mov	r0, r6
 8012e92:	4639      	mov	r1, r7
 8012e94:	f7ed fbd0 	bl	8000638 <__aeabi_dmul>
 8012e98:	460b      	mov	r3, r1
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f7ed fa12 	bl	80002c8 <__aeabi_dsub>
 8012ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8012f54 <__kernel_cos+0x17c>)
 8012ea6:	4598      	cmp	r8, r3
 8012ea8:	4606      	mov	r6, r0
 8012eaa:	460f      	mov	r7, r1
 8012eac:	d810      	bhi.n	8012ed0 <__kernel_cos+0xf8>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	4650      	mov	r0, sl
 8012eb4:	4659      	mov	r1, fp
 8012eb6:	f7ed fa07 	bl	80002c8 <__aeabi_dsub>
 8012eba:	460b      	mov	r3, r1
 8012ebc:	4926      	ldr	r1, [pc, #152]	@ (8012f58 <__kernel_cos+0x180>)
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f7ed fa01 	bl	80002c8 <__aeabi_dsub>
 8012ec6:	ec41 0b10 	vmov	d0, r0, r1
 8012eca:	b003      	add	sp, #12
 8012ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed0:	4b22      	ldr	r3, [pc, #136]	@ (8012f5c <__kernel_cos+0x184>)
 8012ed2:	4921      	ldr	r1, [pc, #132]	@ (8012f58 <__kernel_cos+0x180>)
 8012ed4:	4598      	cmp	r8, r3
 8012ed6:	bf8c      	ite	hi
 8012ed8:	4d21      	ldrhi	r5, [pc, #132]	@ (8012f60 <__kernel_cos+0x188>)
 8012eda:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012ede:	2400      	movs	r4, #0
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	462b      	mov	r3, r5
 8012ee4:	2000      	movs	r0, #0
 8012ee6:	f7ed f9ef 	bl	80002c8 <__aeabi_dsub>
 8012eea:	4622      	mov	r2, r4
 8012eec:	4680      	mov	r8, r0
 8012eee:	4689      	mov	r9, r1
 8012ef0:	462b      	mov	r3, r5
 8012ef2:	4650      	mov	r0, sl
 8012ef4:	4659      	mov	r1, fp
 8012ef6:	f7ed f9e7 	bl	80002c8 <__aeabi_dsub>
 8012efa:	4632      	mov	r2, r6
 8012efc:	463b      	mov	r3, r7
 8012efe:	f7ed f9e3 	bl	80002c8 <__aeabi_dsub>
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	4640      	mov	r0, r8
 8012f08:	4649      	mov	r1, r9
 8012f0a:	e7da      	b.n	8012ec2 <__kernel_cos+0xea>
 8012f0c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012f48 <__kernel_cos+0x170>
 8012f10:	e7db      	b.n	8012eca <__kernel_cos+0xf2>
 8012f12:	bf00      	nop
 8012f14:	f3af 8000 	nop.w
 8012f18:	be8838d4 	.word	0xbe8838d4
 8012f1c:	bda8fae9 	.word	0xbda8fae9
 8012f20:	bdb4b1c4 	.word	0xbdb4b1c4
 8012f24:	3e21ee9e 	.word	0x3e21ee9e
 8012f28:	809c52ad 	.word	0x809c52ad
 8012f2c:	3e927e4f 	.word	0x3e927e4f
 8012f30:	19cb1590 	.word	0x19cb1590
 8012f34:	3efa01a0 	.word	0x3efa01a0
 8012f38:	16c15177 	.word	0x16c15177
 8012f3c:	3f56c16c 	.word	0x3f56c16c
 8012f40:	5555554c 	.word	0x5555554c
 8012f44:	3fa55555 	.word	0x3fa55555
 8012f48:	00000000 	.word	0x00000000
 8012f4c:	3ff00000 	.word	0x3ff00000
 8012f50:	3fe00000 	.word	0x3fe00000
 8012f54:	3fd33332 	.word	0x3fd33332
 8012f58:	3ff00000 	.word	0x3ff00000
 8012f5c:	3fe90000 	.word	0x3fe90000
 8012f60:	3fd20000 	.word	0x3fd20000
 8012f64:	00000000 	.word	0x00000000

08012f68 <__kernel_sin>:
 8012f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	ec55 4b10 	vmov	r4, r5, d0
 8012f70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012f74:	b085      	sub	sp, #20
 8012f76:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012f7a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012f7e:	4680      	mov	r8, r0
 8012f80:	d205      	bcs.n	8012f8e <__kernel_sin+0x26>
 8012f82:	4620      	mov	r0, r4
 8012f84:	4629      	mov	r1, r5
 8012f86:	f7ed fe07 	bl	8000b98 <__aeabi_d2iz>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	d052      	beq.n	8013034 <__kernel_sin+0xcc>
 8012f8e:	4622      	mov	r2, r4
 8012f90:	462b      	mov	r3, r5
 8012f92:	4620      	mov	r0, r4
 8012f94:	4629      	mov	r1, r5
 8012f96:	f7ed fb4f 	bl	8000638 <__aeabi_dmul>
 8012f9a:	4682      	mov	sl, r0
 8012f9c:	468b      	mov	fp, r1
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	f7ed fb47 	bl	8000638 <__aeabi_dmul>
 8012faa:	a342      	add	r3, pc, #264	@ (adr r3, 80130b4 <__kernel_sin+0x14c>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	e9cd 0100 	strd	r0, r1, [sp]
 8012fb4:	4650      	mov	r0, sl
 8012fb6:	4659      	mov	r1, fp
 8012fb8:	f7ed fb3e 	bl	8000638 <__aeabi_dmul>
 8012fbc:	a33f      	add	r3, pc, #252	@ (adr r3, 80130bc <__kernel_sin+0x154>)
 8012fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc2:	f7ed f981 	bl	80002c8 <__aeabi_dsub>
 8012fc6:	4652      	mov	r2, sl
 8012fc8:	465b      	mov	r3, fp
 8012fca:	f7ed fb35 	bl	8000638 <__aeabi_dmul>
 8012fce:	a33d      	add	r3, pc, #244	@ (adr r3, 80130c4 <__kernel_sin+0x15c>)
 8012fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd4:	f7ed f97a 	bl	80002cc <__adddf3>
 8012fd8:	4652      	mov	r2, sl
 8012fda:	465b      	mov	r3, fp
 8012fdc:	f7ed fb2c 	bl	8000638 <__aeabi_dmul>
 8012fe0:	a33a      	add	r3, pc, #232	@ (adr r3, 80130cc <__kernel_sin+0x164>)
 8012fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe6:	f7ed f96f 	bl	80002c8 <__aeabi_dsub>
 8012fea:	4652      	mov	r2, sl
 8012fec:	465b      	mov	r3, fp
 8012fee:	f7ed fb23 	bl	8000638 <__aeabi_dmul>
 8012ff2:	a338      	add	r3, pc, #224	@ (adr r3, 80130d4 <__kernel_sin+0x16c>)
 8012ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff8:	f7ed f968 	bl	80002cc <__adddf3>
 8012ffc:	4606      	mov	r6, r0
 8012ffe:	460f      	mov	r7, r1
 8013000:	f1b8 0f00 	cmp.w	r8, #0
 8013004:	d11b      	bne.n	801303e <__kernel_sin+0xd6>
 8013006:	4602      	mov	r2, r0
 8013008:	460b      	mov	r3, r1
 801300a:	4650      	mov	r0, sl
 801300c:	4659      	mov	r1, fp
 801300e:	f7ed fb13 	bl	8000638 <__aeabi_dmul>
 8013012:	a325      	add	r3, pc, #148	@ (adr r3, 80130a8 <__kernel_sin+0x140>)
 8013014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013018:	f7ed f956 	bl	80002c8 <__aeabi_dsub>
 801301c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013020:	f7ed fb0a 	bl	8000638 <__aeabi_dmul>
 8013024:	4602      	mov	r2, r0
 8013026:	460b      	mov	r3, r1
 8013028:	4620      	mov	r0, r4
 801302a:	4629      	mov	r1, r5
 801302c:	f7ed f94e 	bl	80002cc <__adddf3>
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	ec45 4b10 	vmov	d0, r4, r5
 8013038:	b005      	add	sp, #20
 801303a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013042:	4b1b      	ldr	r3, [pc, #108]	@ (80130b0 <__kernel_sin+0x148>)
 8013044:	2200      	movs	r2, #0
 8013046:	f7ed faf7 	bl	8000638 <__aeabi_dmul>
 801304a:	4632      	mov	r2, r6
 801304c:	4680      	mov	r8, r0
 801304e:	4689      	mov	r9, r1
 8013050:	463b      	mov	r3, r7
 8013052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013056:	f7ed faef 	bl	8000638 <__aeabi_dmul>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	4640      	mov	r0, r8
 8013060:	4649      	mov	r1, r9
 8013062:	f7ed f931 	bl	80002c8 <__aeabi_dsub>
 8013066:	4652      	mov	r2, sl
 8013068:	465b      	mov	r3, fp
 801306a:	f7ed fae5 	bl	8000638 <__aeabi_dmul>
 801306e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013072:	f7ed f929 	bl	80002c8 <__aeabi_dsub>
 8013076:	a30c      	add	r3, pc, #48	@ (adr r3, 80130a8 <__kernel_sin+0x140>)
 8013078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307c:	4606      	mov	r6, r0
 801307e:	460f      	mov	r7, r1
 8013080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013084:	f7ed fad8 	bl	8000638 <__aeabi_dmul>
 8013088:	4602      	mov	r2, r0
 801308a:	460b      	mov	r3, r1
 801308c:	4630      	mov	r0, r6
 801308e:	4639      	mov	r1, r7
 8013090:	f7ed f91c 	bl	80002cc <__adddf3>
 8013094:	4602      	mov	r2, r0
 8013096:	460b      	mov	r3, r1
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed f914 	bl	80002c8 <__aeabi_dsub>
 80130a0:	e7c6      	b.n	8013030 <__kernel_sin+0xc8>
 80130a2:	bf00      	nop
 80130a4:	f3af 8000 	nop.w
 80130a8:	55555549 	.word	0x55555549
 80130ac:	3fc55555 	.word	0x3fc55555
 80130b0:	3fe00000 	.word	0x3fe00000
 80130b4:	5acfd57c 	.word	0x5acfd57c
 80130b8:	3de5d93a 	.word	0x3de5d93a
 80130bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80130c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80130c4:	57b1fe7d 	.word	0x57b1fe7d
 80130c8:	3ec71de3 	.word	0x3ec71de3
 80130cc:	19c161d5 	.word	0x19c161d5
 80130d0:	3f2a01a0 	.word	0x3f2a01a0
 80130d4:	1110f8a6 	.word	0x1110f8a6
 80130d8:	3f811111 	.word	0x3f811111
 80130dc:	00000000 	.word	0x00000000

080130e0 <__ieee754_atan2>:
 80130e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e4:	ec57 6b11 	vmov	r6, r7, d1
 80130e8:	4273      	negs	r3, r6
 80130ea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013268 <__ieee754_atan2+0x188>
 80130ee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80130f2:	4333      	orrs	r3, r6
 80130f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80130f8:	4543      	cmp	r3, r8
 80130fa:	ec51 0b10 	vmov	r0, r1, d0
 80130fe:	4635      	mov	r5, r6
 8013100:	d809      	bhi.n	8013116 <__ieee754_atan2+0x36>
 8013102:	4244      	negs	r4, r0
 8013104:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013108:	4304      	orrs	r4, r0
 801310a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801310e:	4544      	cmp	r4, r8
 8013110:	468e      	mov	lr, r1
 8013112:	4681      	mov	r9, r0
 8013114:	d907      	bls.n	8013126 <__ieee754_atan2+0x46>
 8013116:	4632      	mov	r2, r6
 8013118:	463b      	mov	r3, r7
 801311a:	f7ed f8d7 	bl	80002cc <__adddf3>
 801311e:	ec41 0b10 	vmov	d0, r0, r1
 8013122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013126:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801312a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801312e:	4334      	orrs	r4, r6
 8013130:	d103      	bne.n	801313a <__ieee754_atan2+0x5a>
 8013132:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013136:	f000 bfdb 	b.w	80140f0 <atan>
 801313a:	17bc      	asrs	r4, r7, #30
 801313c:	f004 0402 	and.w	r4, r4, #2
 8013140:	ea53 0909 	orrs.w	r9, r3, r9
 8013144:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013148:	d107      	bne.n	801315a <__ieee754_atan2+0x7a>
 801314a:	2c02      	cmp	r4, #2
 801314c:	d05f      	beq.n	801320e <__ieee754_atan2+0x12e>
 801314e:	2c03      	cmp	r4, #3
 8013150:	d1e5      	bne.n	801311e <__ieee754_atan2+0x3e>
 8013152:	a141      	add	r1, pc, #260	@ (adr r1, 8013258 <__ieee754_atan2+0x178>)
 8013154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013158:	e7e1      	b.n	801311e <__ieee754_atan2+0x3e>
 801315a:	4315      	orrs	r5, r2
 801315c:	d106      	bne.n	801316c <__ieee754_atan2+0x8c>
 801315e:	f1be 0f00 	cmp.w	lr, #0
 8013162:	da5f      	bge.n	8013224 <__ieee754_atan2+0x144>
 8013164:	a13e      	add	r1, pc, #248	@ (adr r1, 8013260 <__ieee754_atan2+0x180>)
 8013166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801316a:	e7d8      	b.n	801311e <__ieee754_atan2+0x3e>
 801316c:	4542      	cmp	r2, r8
 801316e:	d10f      	bne.n	8013190 <__ieee754_atan2+0xb0>
 8013170:	4293      	cmp	r3, r2
 8013172:	f104 34ff 	add.w	r4, r4, #4294967295
 8013176:	d107      	bne.n	8013188 <__ieee754_atan2+0xa8>
 8013178:	2c02      	cmp	r4, #2
 801317a:	d84c      	bhi.n	8013216 <__ieee754_atan2+0x136>
 801317c:	4b34      	ldr	r3, [pc, #208]	@ (8013250 <__ieee754_atan2+0x170>)
 801317e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013186:	e7ca      	b.n	801311e <__ieee754_atan2+0x3e>
 8013188:	2c02      	cmp	r4, #2
 801318a:	d848      	bhi.n	801321e <__ieee754_atan2+0x13e>
 801318c:	4b31      	ldr	r3, [pc, #196]	@ (8013254 <__ieee754_atan2+0x174>)
 801318e:	e7f6      	b.n	801317e <__ieee754_atan2+0x9e>
 8013190:	4543      	cmp	r3, r8
 8013192:	d0e4      	beq.n	801315e <__ieee754_atan2+0x7e>
 8013194:	1a9b      	subs	r3, r3, r2
 8013196:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801319a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801319e:	da1e      	bge.n	80131de <__ieee754_atan2+0xfe>
 80131a0:	2f00      	cmp	r7, #0
 80131a2:	da01      	bge.n	80131a8 <__ieee754_atan2+0xc8>
 80131a4:	323c      	adds	r2, #60	@ 0x3c
 80131a6:	db1e      	blt.n	80131e6 <__ieee754_atan2+0x106>
 80131a8:	4632      	mov	r2, r6
 80131aa:	463b      	mov	r3, r7
 80131ac:	f7ed fb6e 	bl	800088c <__aeabi_ddiv>
 80131b0:	ec41 0b10 	vmov	d0, r0, r1
 80131b4:	f001 f934 	bl	8014420 <fabs>
 80131b8:	f000 ff9a 	bl	80140f0 <atan>
 80131bc:	ec51 0b10 	vmov	r0, r1, d0
 80131c0:	2c01      	cmp	r4, #1
 80131c2:	d013      	beq.n	80131ec <__ieee754_atan2+0x10c>
 80131c4:	2c02      	cmp	r4, #2
 80131c6:	d015      	beq.n	80131f4 <__ieee754_atan2+0x114>
 80131c8:	2c00      	cmp	r4, #0
 80131ca:	d0a8      	beq.n	801311e <__ieee754_atan2+0x3e>
 80131cc:	a318      	add	r3, pc, #96	@ (adr r3, 8013230 <__ieee754_atan2+0x150>)
 80131ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d2:	f7ed f879 	bl	80002c8 <__aeabi_dsub>
 80131d6:	a318      	add	r3, pc, #96	@ (adr r3, 8013238 <__ieee754_atan2+0x158>)
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	e014      	b.n	8013208 <__ieee754_atan2+0x128>
 80131de:	a118      	add	r1, pc, #96	@ (adr r1, 8013240 <__ieee754_atan2+0x160>)
 80131e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131e4:	e7ec      	b.n	80131c0 <__ieee754_atan2+0xe0>
 80131e6:	2000      	movs	r0, #0
 80131e8:	2100      	movs	r1, #0
 80131ea:	e7e9      	b.n	80131c0 <__ieee754_atan2+0xe0>
 80131ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80131f0:	4619      	mov	r1, r3
 80131f2:	e794      	b.n	801311e <__ieee754_atan2+0x3e>
 80131f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013230 <__ieee754_atan2+0x150>)
 80131f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fa:	f7ed f865 	bl	80002c8 <__aeabi_dsub>
 80131fe:	4602      	mov	r2, r0
 8013200:	460b      	mov	r3, r1
 8013202:	a10d      	add	r1, pc, #52	@ (adr r1, 8013238 <__ieee754_atan2+0x158>)
 8013204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013208:	f7ed f85e 	bl	80002c8 <__aeabi_dsub>
 801320c:	e787      	b.n	801311e <__ieee754_atan2+0x3e>
 801320e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013238 <__ieee754_atan2+0x158>)
 8013210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013214:	e783      	b.n	801311e <__ieee754_atan2+0x3e>
 8013216:	a10c      	add	r1, pc, #48	@ (adr r1, 8013248 <__ieee754_atan2+0x168>)
 8013218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801321c:	e77f      	b.n	801311e <__ieee754_atan2+0x3e>
 801321e:	2000      	movs	r0, #0
 8013220:	2100      	movs	r1, #0
 8013222:	e77c      	b.n	801311e <__ieee754_atan2+0x3e>
 8013224:	a106      	add	r1, pc, #24	@ (adr r1, 8013240 <__ieee754_atan2+0x160>)
 8013226:	e9d1 0100 	ldrd	r0, r1, [r1]
 801322a:	e778      	b.n	801311e <__ieee754_atan2+0x3e>
 801322c:	f3af 8000 	nop.w
 8013230:	33145c07 	.word	0x33145c07
 8013234:	3ca1a626 	.word	0x3ca1a626
 8013238:	54442d18 	.word	0x54442d18
 801323c:	400921fb 	.word	0x400921fb
 8013240:	54442d18 	.word	0x54442d18
 8013244:	3ff921fb 	.word	0x3ff921fb
 8013248:	54442d18 	.word	0x54442d18
 801324c:	3fe921fb 	.word	0x3fe921fb
 8013250:	08015350 	.word	0x08015350
 8013254:	08015338 	.word	0x08015338
 8013258:	54442d18 	.word	0x54442d18
 801325c:	c00921fb 	.word	0xc00921fb
 8013260:	54442d18 	.word	0x54442d18
 8013264:	bff921fb 	.word	0xbff921fb
 8013268:	7ff00000 	.word	0x7ff00000
 801326c:	00000000 	.word	0x00000000

08013270 <__ieee754_pow>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	b091      	sub	sp, #68	@ 0x44
 8013276:	ed8d 1b00 	vstr	d1, [sp]
 801327a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801327e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013282:	ea5a 0001 	orrs.w	r0, sl, r1
 8013286:	ec57 6b10 	vmov	r6, r7, d0
 801328a:	d113      	bne.n	80132b4 <__ieee754_pow+0x44>
 801328c:	19b3      	adds	r3, r6, r6
 801328e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013292:	4152      	adcs	r2, r2
 8013294:	4298      	cmp	r0, r3
 8013296:	4b98      	ldr	r3, [pc, #608]	@ (80134f8 <__ieee754_pow+0x288>)
 8013298:	4193      	sbcs	r3, r2
 801329a:	f080 84ea 	bcs.w	8013c72 <__ieee754_pow+0xa02>
 801329e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132a2:	4630      	mov	r0, r6
 80132a4:	4639      	mov	r1, r7
 80132a6:	f7ed f811 	bl	80002cc <__adddf3>
 80132aa:	ec41 0b10 	vmov	d0, r0, r1
 80132ae:	b011      	add	sp, #68	@ 0x44
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	4a91      	ldr	r2, [pc, #580]	@ (80134fc <__ieee754_pow+0x28c>)
 80132b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80132ba:	4590      	cmp	r8, r2
 80132bc:	463d      	mov	r5, r7
 80132be:	4633      	mov	r3, r6
 80132c0:	d806      	bhi.n	80132d0 <__ieee754_pow+0x60>
 80132c2:	d101      	bne.n	80132c8 <__ieee754_pow+0x58>
 80132c4:	2e00      	cmp	r6, #0
 80132c6:	d1ea      	bne.n	801329e <__ieee754_pow+0x2e>
 80132c8:	4592      	cmp	sl, r2
 80132ca:	d801      	bhi.n	80132d0 <__ieee754_pow+0x60>
 80132cc:	d10e      	bne.n	80132ec <__ieee754_pow+0x7c>
 80132ce:	b169      	cbz	r1, 80132ec <__ieee754_pow+0x7c>
 80132d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80132d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80132d8:	431d      	orrs	r5, r3
 80132da:	d1e0      	bne.n	801329e <__ieee754_pow+0x2e>
 80132dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80132e0:	18db      	adds	r3, r3, r3
 80132e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80132e6:	4152      	adcs	r2, r2
 80132e8:	429d      	cmp	r5, r3
 80132ea:	e7d4      	b.n	8013296 <__ieee754_pow+0x26>
 80132ec:	2d00      	cmp	r5, #0
 80132ee:	46c3      	mov	fp, r8
 80132f0:	da3a      	bge.n	8013368 <__ieee754_pow+0xf8>
 80132f2:	4a83      	ldr	r2, [pc, #524]	@ (8013500 <__ieee754_pow+0x290>)
 80132f4:	4592      	cmp	sl, r2
 80132f6:	d84d      	bhi.n	8013394 <__ieee754_pow+0x124>
 80132f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80132fc:	4592      	cmp	sl, r2
 80132fe:	f240 84c7 	bls.w	8013c90 <__ieee754_pow+0xa20>
 8013302:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013306:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801330a:	2a14      	cmp	r2, #20
 801330c:	dd0f      	ble.n	801332e <__ieee754_pow+0xbe>
 801330e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013312:	fa21 f402 	lsr.w	r4, r1, r2
 8013316:	fa04 f202 	lsl.w	r2, r4, r2
 801331a:	428a      	cmp	r2, r1
 801331c:	f040 84b8 	bne.w	8013c90 <__ieee754_pow+0xa20>
 8013320:	f004 0401 	and.w	r4, r4, #1
 8013324:	f1c4 0402 	rsb	r4, r4, #2
 8013328:	2900      	cmp	r1, #0
 801332a:	d158      	bne.n	80133de <__ieee754_pow+0x16e>
 801332c:	e00e      	b.n	801334c <__ieee754_pow+0xdc>
 801332e:	2900      	cmp	r1, #0
 8013330:	d154      	bne.n	80133dc <__ieee754_pow+0x16c>
 8013332:	f1c2 0214 	rsb	r2, r2, #20
 8013336:	fa4a f402 	asr.w	r4, sl, r2
 801333a:	fa04 f202 	lsl.w	r2, r4, r2
 801333e:	4552      	cmp	r2, sl
 8013340:	f040 84a3 	bne.w	8013c8a <__ieee754_pow+0xa1a>
 8013344:	f004 0401 	and.w	r4, r4, #1
 8013348:	f1c4 0402 	rsb	r4, r4, #2
 801334c:	4a6d      	ldr	r2, [pc, #436]	@ (8013504 <__ieee754_pow+0x294>)
 801334e:	4592      	cmp	sl, r2
 8013350:	d12e      	bne.n	80133b0 <__ieee754_pow+0x140>
 8013352:	f1b9 0f00 	cmp.w	r9, #0
 8013356:	f280 8494 	bge.w	8013c82 <__ieee754_pow+0xa12>
 801335a:	496a      	ldr	r1, [pc, #424]	@ (8013504 <__ieee754_pow+0x294>)
 801335c:	4632      	mov	r2, r6
 801335e:	463b      	mov	r3, r7
 8013360:	2000      	movs	r0, #0
 8013362:	f7ed fa93 	bl	800088c <__aeabi_ddiv>
 8013366:	e7a0      	b.n	80132aa <__ieee754_pow+0x3a>
 8013368:	2400      	movs	r4, #0
 801336a:	bbc1      	cbnz	r1, 80133de <__ieee754_pow+0x16e>
 801336c:	4a63      	ldr	r2, [pc, #396]	@ (80134fc <__ieee754_pow+0x28c>)
 801336e:	4592      	cmp	sl, r2
 8013370:	d1ec      	bne.n	801334c <__ieee754_pow+0xdc>
 8013372:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013376:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801337a:	431a      	orrs	r2, r3
 801337c:	f000 8479 	beq.w	8013c72 <__ieee754_pow+0xa02>
 8013380:	4b61      	ldr	r3, [pc, #388]	@ (8013508 <__ieee754_pow+0x298>)
 8013382:	4598      	cmp	r8, r3
 8013384:	d908      	bls.n	8013398 <__ieee754_pow+0x128>
 8013386:	f1b9 0f00 	cmp.w	r9, #0
 801338a:	f2c0 8476 	blt.w	8013c7a <__ieee754_pow+0xa0a>
 801338e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013392:	e78a      	b.n	80132aa <__ieee754_pow+0x3a>
 8013394:	2402      	movs	r4, #2
 8013396:	e7e8      	b.n	801336a <__ieee754_pow+0xfa>
 8013398:	f1b9 0f00 	cmp.w	r9, #0
 801339c:	f04f 0000 	mov.w	r0, #0
 80133a0:	f04f 0100 	mov.w	r1, #0
 80133a4:	da81      	bge.n	80132aa <__ieee754_pow+0x3a>
 80133a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80133aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80133ae:	e77c      	b.n	80132aa <__ieee754_pow+0x3a>
 80133b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80133b4:	d106      	bne.n	80133c4 <__ieee754_pow+0x154>
 80133b6:	4632      	mov	r2, r6
 80133b8:	463b      	mov	r3, r7
 80133ba:	4630      	mov	r0, r6
 80133bc:	4639      	mov	r1, r7
 80133be:	f7ed f93b 	bl	8000638 <__aeabi_dmul>
 80133c2:	e772      	b.n	80132aa <__ieee754_pow+0x3a>
 80133c4:	4a51      	ldr	r2, [pc, #324]	@ (801350c <__ieee754_pow+0x29c>)
 80133c6:	4591      	cmp	r9, r2
 80133c8:	d109      	bne.n	80133de <__ieee754_pow+0x16e>
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	db07      	blt.n	80133de <__ieee754_pow+0x16e>
 80133ce:	ec47 6b10 	vmov	d0, r6, r7
 80133d2:	b011      	add	sp, #68	@ 0x44
 80133d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	f7ff bc22 	b.w	8012c20 <__ieee754_sqrt>
 80133dc:	2400      	movs	r4, #0
 80133de:	ec47 6b10 	vmov	d0, r6, r7
 80133e2:	9302      	str	r3, [sp, #8]
 80133e4:	f001 f81c 	bl	8014420 <fabs>
 80133e8:	9b02      	ldr	r3, [sp, #8]
 80133ea:	ec51 0b10 	vmov	r0, r1, d0
 80133ee:	bb53      	cbnz	r3, 8013446 <__ieee754_pow+0x1d6>
 80133f0:	4b44      	ldr	r3, [pc, #272]	@ (8013504 <__ieee754_pow+0x294>)
 80133f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d002      	beq.n	8013400 <__ieee754_pow+0x190>
 80133fa:	f1b8 0f00 	cmp.w	r8, #0
 80133fe:	d122      	bne.n	8013446 <__ieee754_pow+0x1d6>
 8013400:	f1b9 0f00 	cmp.w	r9, #0
 8013404:	da05      	bge.n	8013412 <__ieee754_pow+0x1a2>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	2000      	movs	r0, #0
 801340c:	493d      	ldr	r1, [pc, #244]	@ (8013504 <__ieee754_pow+0x294>)
 801340e:	f7ed fa3d 	bl	800088c <__aeabi_ddiv>
 8013412:	2d00      	cmp	r5, #0
 8013414:	f6bf af49 	bge.w	80132aa <__ieee754_pow+0x3a>
 8013418:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801341c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013420:	ea58 0804 	orrs.w	r8, r8, r4
 8013424:	d108      	bne.n	8013438 <__ieee754_pow+0x1c8>
 8013426:	4602      	mov	r2, r0
 8013428:	460b      	mov	r3, r1
 801342a:	4610      	mov	r0, r2
 801342c:	4619      	mov	r1, r3
 801342e:	f7ec ff4b 	bl	80002c8 <__aeabi_dsub>
 8013432:	4602      	mov	r2, r0
 8013434:	460b      	mov	r3, r1
 8013436:	e794      	b.n	8013362 <__ieee754_pow+0xf2>
 8013438:	2c01      	cmp	r4, #1
 801343a:	f47f af36 	bne.w	80132aa <__ieee754_pow+0x3a>
 801343e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013442:	4619      	mov	r1, r3
 8013444:	e731      	b.n	80132aa <__ieee754_pow+0x3a>
 8013446:	0feb      	lsrs	r3, r5, #31
 8013448:	3b01      	subs	r3, #1
 801344a:	ea53 0204 	orrs.w	r2, r3, r4
 801344e:	d102      	bne.n	8013456 <__ieee754_pow+0x1e6>
 8013450:	4632      	mov	r2, r6
 8013452:	463b      	mov	r3, r7
 8013454:	e7e9      	b.n	801342a <__ieee754_pow+0x1ba>
 8013456:	3c01      	subs	r4, #1
 8013458:	431c      	orrs	r4, r3
 801345a:	d016      	beq.n	801348a <__ieee754_pow+0x21a>
 801345c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80134e8 <__ieee754_pow+0x278>
 8013460:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013464:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013468:	f240 8112 	bls.w	8013690 <__ieee754_pow+0x420>
 801346c:	4b28      	ldr	r3, [pc, #160]	@ (8013510 <__ieee754_pow+0x2a0>)
 801346e:	459a      	cmp	sl, r3
 8013470:	4b25      	ldr	r3, [pc, #148]	@ (8013508 <__ieee754_pow+0x298>)
 8013472:	d916      	bls.n	80134a2 <__ieee754_pow+0x232>
 8013474:	4598      	cmp	r8, r3
 8013476:	d80b      	bhi.n	8013490 <__ieee754_pow+0x220>
 8013478:	f1b9 0f00 	cmp.w	r9, #0
 801347c:	da0b      	bge.n	8013496 <__ieee754_pow+0x226>
 801347e:	2000      	movs	r0, #0
 8013480:	b011      	add	sp, #68	@ 0x44
 8013482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013486:	f001 b887 	b.w	8014598 <__math_oflow>
 801348a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80134f0 <__ieee754_pow+0x280>
 801348e:	e7e7      	b.n	8013460 <__ieee754_pow+0x1f0>
 8013490:	f1b9 0f00 	cmp.w	r9, #0
 8013494:	dcf3      	bgt.n	801347e <__ieee754_pow+0x20e>
 8013496:	2000      	movs	r0, #0
 8013498:	b011      	add	sp, #68	@ 0x44
 801349a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349e:	f001 b873 	b.w	8014588 <__math_uflow>
 80134a2:	4598      	cmp	r8, r3
 80134a4:	d20c      	bcs.n	80134c0 <__ieee754_pow+0x250>
 80134a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134aa:	2200      	movs	r2, #0
 80134ac:	2300      	movs	r3, #0
 80134ae:	f7ed fb35 	bl	8000b1c <__aeabi_dcmplt>
 80134b2:	3800      	subs	r0, #0
 80134b4:	bf18      	it	ne
 80134b6:	2001      	movne	r0, #1
 80134b8:	f1b9 0f00 	cmp.w	r9, #0
 80134bc:	daec      	bge.n	8013498 <__ieee754_pow+0x228>
 80134be:	e7df      	b.n	8013480 <__ieee754_pow+0x210>
 80134c0:	4b10      	ldr	r3, [pc, #64]	@ (8013504 <__ieee754_pow+0x294>)
 80134c2:	4598      	cmp	r8, r3
 80134c4:	f04f 0200 	mov.w	r2, #0
 80134c8:	d924      	bls.n	8013514 <__ieee754_pow+0x2a4>
 80134ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134ce:	2300      	movs	r3, #0
 80134d0:	f7ed fb24 	bl	8000b1c <__aeabi_dcmplt>
 80134d4:	3800      	subs	r0, #0
 80134d6:	bf18      	it	ne
 80134d8:	2001      	movne	r0, #1
 80134da:	f1b9 0f00 	cmp.w	r9, #0
 80134de:	dccf      	bgt.n	8013480 <__ieee754_pow+0x210>
 80134e0:	e7da      	b.n	8013498 <__ieee754_pow+0x228>
 80134e2:	bf00      	nop
 80134e4:	f3af 8000 	nop.w
 80134e8:	00000000 	.word	0x00000000
 80134ec:	3ff00000 	.word	0x3ff00000
 80134f0:	00000000 	.word	0x00000000
 80134f4:	bff00000 	.word	0xbff00000
 80134f8:	fff00000 	.word	0xfff00000
 80134fc:	7ff00000 	.word	0x7ff00000
 8013500:	433fffff 	.word	0x433fffff
 8013504:	3ff00000 	.word	0x3ff00000
 8013508:	3fefffff 	.word	0x3fefffff
 801350c:	3fe00000 	.word	0x3fe00000
 8013510:	43f00000 	.word	0x43f00000
 8013514:	4b5a      	ldr	r3, [pc, #360]	@ (8013680 <__ieee754_pow+0x410>)
 8013516:	f7ec fed7 	bl	80002c8 <__aeabi_dsub>
 801351a:	a351      	add	r3, pc, #324	@ (adr r3, 8013660 <__ieee754_pow+0x3f0>)
 801351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013520:	4604      	mov	r4, r0
 8013522:	460d      	mov	r5, r1
 8013524:	f7ed f888 	bl	8000638 <__aeabi_dmul>
 8013528:	a34f      	add	r3, pc, #316	@ (adr r3, 8013668 <__ieee754_pow+0x3f8>)
 801352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352e:	4606      	mov	r6, r0
 8013530:	460f      	mov	r7, r1
 8013532:	4620      	mov	r0, r4
 8013534:	4629      	mov	r1, r5
 8013536:	f7ed f87f 	bl	8000638 <__aeabi_dmul>
 801353a:	4b52      	ldr	r3, [pc, #328]	@ (8013684 <__ieee754_pow+0x414>)
 801353c:	4682      	mov	sl, r0
 801353e:	468b      	mov	fp, r1
 8013540:	2200      	movs	r2, #0
 8013542:	4620      	mov	r0, r4
 8013544:	4629      	mov	r1, r5
 8013546:	f7ed f877 	bl	8000638 <__aeabi_dmul>
 801354a:	4602      	mov	r2, r0
 801354c:	460b      	mov	r3, r1
 801354e:	a148      	add	r1, pc, #288	@ (adr r1, 8013670 <__ieee754_pow+0x400>)
 8013550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013554:	f7ec feb8 	bl	80002c8 <__aeabi_dsub>
 8013558:	4622      	mov	r2, r4
 801355a:	462b      	mov	r3, r5
 801355c:	f7ed f86c 	bl	8000638 <__aeabi_dmul>
 8013560:	4602      	mov	r2, r0
 8013562:	460b      	mov	r3, r1
 8013564:	2000      	movs	r0, #0
 8013566:	4948      	ldr	r1, [pc, #288]	@ (8013688 <__ieee754_pow+0x418>)
 8013568:	f7ec feae 	bl	80002c8 <__aeabi_dsub>
 801356c:	4622      	mov	r2, r4
 801356e:	4680      	mov	r8, r0
 8013570:	4689      	mov	r9, r1
 8013572:	462b      	mov	r3, r5
 8013574:	4620      	mov	r0, r4
 8013576:	4629      	mov	r1, r5
 8013578:	f7ed f85e 	bl	8000638 <__aeabi_dmul>
 801357c:	4602      	mov	r2, r0
 801357e:	460b      	mov	r3, r1
 8013580:	4640      	mov	r0, r8
 8013582:	4649      	mov	r1, r9
 8013584:	f7ed f858 	bl	8000638 <__aeabi_dmul>
 8013588:	a33b      	add	r3, pc, #236	@ (adr r3, 8013678 <__ieee754_pow+0x408>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	f7ed f853 	bl	8000638 <__aeabi_dmul>
 8013592:	4602      	mov	r2, r0
 8013594:	460b      	mov	r3, r1
 8013596:	4650      	mov	r0, sl
 8013598:	4659      	mov	r1, fp
 801359a:	f7ec fe95 	bl	80002c8 <__aeabi_dsub>
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	4680      	mov	r8, r0
 80135a4:	4689      	mov	r9, r1
 80135a6:	4630      	mov	r0, r6
 80135a8:	4639      	mov	r1, r7
 80135aa:	f7ec fe8f 	bl	80002cc <__adddf3>
 80135ae:	2400      	movs	r4, #0
 80135b0:	4632      	mov	r2, r6
 80135b2:	463b      	mov	r3, r7
 80135b4:	4620      	mov	r0, r4
 80135b6:	460d      	mov	r5, r1
 80135b8:	f7ec fe86 	bl	80002c8 <__aeabi_dsub>
 80135bc:	4602      	mov	r2, r0
 80135be:	460b      	mov	r3, r1
 80135c0:	4640      	mov	r0, r8
 80135c2:	4649      	mov	r1, r9
 80135c4:	f7ec fe80 	bl	80002c8 <__aeabi_dsub>
 80135c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80135d0:	2300      	movs	r3, #0
 80135d2:	9304      	str	r3, [sp, #16]
 80135d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80135d8:	4606      	mov	r6, r0
 80135da:	460f      	mov	r7, r1
 80135dc:	4652      	mov	r2, sl
 80135de:	465b      	mov	r3, fp
 80135e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135e4:	f7ec fe70 	bl	80002c8 <__aeabi_dsub>
 80135e8:	4622      	mov	r2, r4
 80135ea:	462b      	mov	r3, r5
 80135ec:	f7ed f824 	bl	8000638 <__aeabi_dmul>
 80135f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135f4:	4680      	mov	r8, r0
 80135f6:	4689      	mov	r9, r1
 80135f8:	4630      	mov	r0, r6
 80135fa:	4639      	mov	r1, r7
 80135fc:	f7ed f81c 	bl	8000638 <__aeabi_dmul>
 8013600:	4602      	mov	r2, r0
 8013602:	460b      	mov	r3, r1
 8013604:	4640      	mov	r0, r8
 8013606:	4649      	mov	r1, r9
 8013608:	f7ec fe60 	bl	80002cc <__adddf3>
 801360c:	4652      	mov	r2, sl
 801360e:	465b      	mov	r3, fp
 8013610:	4606      	mov	r6, r0
 8013612:	460f      	mov	r7, r1
 8013614:	4620      	mov	r0, r4
 8013616:	4629      	mov	r1, r5
 8013618:	f7ed f80e 	bl	8000638 <__aeabi_dmul>
 801361c:	460b      	mov	r3, r1
 801361e:	4602      	mov	r2, r0
 8013620:	4680      	mov	r8, r0
 8013622:	4689      	mov	r9, r1
 8013624:	4630      	mov	r0, r6
 8013626:	4639      	mov	r1, r7
 8013628:	f7ec fe50 	bl	80002cc <__adddf3>
 801362c:	4b17      	ldr	r3, [pc, #92]	@ (801368c <__ieee754_pow+0x41c>)
 801362e:	4299      	cmp	r1, r3
 8013630:	4604      	mov	r4, r0
 8013632:	460d      	mov	r5, r1
 8013634:	468a      	mov	sl, r1
 8013636:	468b      	mov	fp, r1
 8013638:	f340 82ef 	ble.w	8013c1a <__ieee754_pow+0x9aa>
 801363c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013640:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013644:	4303      	orrs	r3, r0
 8013646:	f000 81e8 	beq.w	8013a1a <__ieee754_pow+0x7aa>
 801364a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801364e:	2200      	movs	r2, #0
 8013650:	2300      	movs	r3, #0
 8013652:	f7ed fa63 	bl	8000b1c <__aeabi_dcmplt>
 8013656:	3800      	subs	r0, #0
 8013658:	bf18      	it	ne
 801365a:	2001      	movne	r0, #1
 801365c:	e710      	b.n	8013480 <__ieee754_pow+0x210>
 801365e:	bf00      	nop
 8013660:	60000000 	.word	0x60000000
 8013664:	3ff71547 	.word	0x3ff71547
 8013668:	f85ddf44 	.word	0xf85ddf44
 801366c:	3e54ae0b 	.word	0x3e54ae0b
 8013670:	55555555 	.word	0x55555555
 8013674:	3fd55555 	.word	0x3fd55555
 8013678:	652b82fe 	.word	0x652b82fe
 801367c:	3ff71547 	.word	0x3ff71547
 8013680:	3ff00000 	.word	0x3ff00000
 8013684:	3fd00000 	.word	0x3fd00000
 8013688:	3fe00000 	.word	0x3fe00000
 801368c:	408fffff 	.word	0x408fffff
 8013690:	4bd5      	ldr	r3, [pc, #852]	@ (80139e8 <__ieee754_pow+0x778>)
 8013692:	402b      	ands	r3, r5
 8013694:	2200      	movs	r2, #0
 8013696:	b92b      	cbnz	r3, 80136a4 <__ieee754_pow+0x434>
 8013698:	4bd4      	ldr	r3, [pc, #848]	@ (80139ec <__ieee754_pow+0x77c>)
 801369a:	f7ec ffcd 	bl	8000638 <__aeabi_dmul>
 801369e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80136a2:	468b      	mov	fp, r1
 80136a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80136a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80136ac:	4413      	add	r3, r2
 80136ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80136b0:	4bcf      	ldr	r3, [pc, #828]	@ (80139f0 <__ieee754_pow+0x780>)
 80136b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80136b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80136ba:	459b      	cmp	fp, r3
 80136bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80136c0:	dd08      	ble.n	80136d4 <__ieee754_pow+0x464>
 80136c2:	4bcc      	ldr	r3, [pc, #816]	@ (80139f4 <__ieee754_pow+0x784>)
 80136c4:	459b      	cmp	fp, r3
 80136c6:	f340 81a5 	ble.w	8013a14 <__ieee754_pow+0x7a4>
 80136ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136cc:	3301      	adds	r3, #1
 80136ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80136d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80136d4:	f04f 0a00 	mov.w	sl, #0
 80136d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80136dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136de:	4bc6      	ldr	r3, [pc, #792]	@ (80139f8 <__ieee754_pow+0x788>)
 80136e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80136e4:	ed93 7b00 	vldr	d7, [r3]
 80136e8:	4629      	mov	r1, r5
 80136ea:	ec53 2b17 	vmov	r2, r3, d7
 80136ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80136f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80136f6:	f7ec fde7 	bl	80002c8 <__aeabi_dsub>
 80136fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136fe:	4606      	mov	r6, r0
 8013700:	460f      	mov	r7, r1
 8013702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013706:	f7ec fde1 	bl	80002cc <__adddf3>
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	2000      	movs	r0, #0
 8013710:	49ba      	ldr	r1, [pc, #744]	@ (80139fc <__ieee754_pow+0x78c>)
 8013712:	f7ed f8bb 	bl	800088c <__aeabi_ddiv>
 8013716:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	4630      	mov	r0, r6
 8013720:	4639      	mov	r1, r7
 8013722:	f7ec ff89 	bl	8000638 <__aeabi_dmul>
 8013726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801372a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801372e:	106d      	asrs	r5, r5, #1
 8013730:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013734:	f04f 0b00 	mov.w	fp, #0
 8013738:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801373c:	4661      	mov	r1, ip
 801373e:	2200      	movs	r2, #0
 8013740:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013744:	4658      	mov	r0, fp
 8013746:	46e1      	mov	r9, ip
 8013748:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801374c:	4614      	mov	r4, r2
 801374e:	461d      	mov	r5, r3
 8013750:	f7ec ff72 	bl	8000638 <__aeabi_dmul>
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	4630      	mov	r0, r6
 801375a:	4639      	mov	r1, r7
 801375c:	f7ec fdb4 	bl	80002c8 <__aeabi_dsub>
 8013760:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013764:	4606      	mov	r6, r0
 8013766:	460f      	mov	r7, r1
 8013768:	4620      	mov	r0, r4
 801376a:	4629      	mov	r1, r5
 801376c:	f7ec fdac 	bl	80002c8 <__aeabi_dsub>
 8013770:	4602      	mov	r2, r0
 8013772:	460b      	mov	r3, r1
 8013774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013778:	f7ec fda6 	bl	80002c8 <__aeabi_dsub>
 801377c:	465a      	mov	r2, fp
 801377e:	464b      	mov	r3, r9
 8013780:	f7ec ff5a 	bl	8000638 <__aeabi_dmul>
 8013784:	4602      	mov	r2, r0
 8013786:	460b      	mov	r3, r1
 8013788:	4630      	mov	r0, r6
 801378a:	4639      	mov	r1, r7
 801378c:	f7ec fd9c 	bl	80002c8 <__aeabi_dsub>
 8013790:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013794:	f7ec ff50 	bl	8000638 <__aeabi_dmul>
 8013798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801379c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137a0:	4610      	mov	r0, r2
 80137a2:	4619      	mov	r1, r3
 80137a4:	f7ec ff48 	bl	8000638 <__aeabi_dmul>
 80137a8:	a37d      	add	r3, pc, #500	@ (adr r3, 80139a0 <__ieee754_pow+0x730>)
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	4604      	mov	r4, r0
 80137b0:	460d      	mov	r5, r1
 80137b2:	f7ec ff41 	bl	8000638 <__aeabi_dmul>
 80137b6:	a37c      	add	r3, pc, #496	@ (adr r3, 80139a8 <__ieee754_pow+0x738>)
 80137b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137bc:	f7ec fd86 	bl	80002cc <__adddf3>
 80137c0:	4622      	mov	r2, r4
 80137c2:	462b      	mov	r3, r5
 80137c4:	f7ec ff38 	bl	8000638 <__aeabi_dmul>
 80137c8:	a379      	add	r3, pc, #484	@ (adr r3, 80139b0 <__ieee754_pow+0x740>)
 80137ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ce:	f7ec fd7d 	bl	80002cc <__adddf3>
 80137d2:	4622      	mov	r2, r4
 80137d4:	462b      	mov	r3, r5
 80137d6:	f7ec ff2f 	bl	8000638 <__aeabi_dmul>
 80137da:	a377      	add	r3, pc, #476	@ (adr r3, 80139b8 <__ieee754_pow+0x748>)
 80137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e0:	f7ec fd74 	bl	80002cc <__adddf3>
 80137e4:	4622      	mov	r2, r4
 80137e6:	462b      	mov	r3, r5
 80137e8:	f7ec ff26 	bl	8000638 <__aeabi_dmul>
 80137ec:	a374      	add	r3, pc, #464	@ (adr r3, 80139c0 <__ieee754_pow+0x750>)
 80137ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f2:	f7ec fd6b 	bl	80002cc <__adddf3>
 80137f6:	4622      	mov	r2, r4
 80137f8:	462b      	mov	r3, r5
 80137fa:	f7ec ff1d 	bl	8000638 <__aeabi_dmul>
 80137fe:	a372      	add	r3, pc, #456	@ (adr r3, 80139c8 <__ieee754_pow+0x758>)
 8013800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013804:	f7ec fd62 	bl	80002cc <__adddf3>
 8013808:	4622      	mov	r2, r4
 801380a:	4606      	mov	r6, r0
 801380c:	460f      	mov	r7, r1
 801380e:	462b      	mov	r3, r5
 8013810:	4620      	mov	r0, r4
 8013812:	4629      	mov	r1, r5
 8013814:	f7ec ff10 	bl	8000638 <__aeabi_dmul>
 8013818:	4602      	mov	r2, r0
 801381a:	460b      	mov	r3, r1
 801381c:	4630      	mov	r0, r6
 801381e:	4639      	mov	r1, r7
 8013820:	f7ec ff0a 	bl	8000638 <__aeabi_dmul>
 8013824:	465a      	mov	r2, fp
 8013826:	4604      	mov	r4, r0
 8013828:	460d      	mov	r5, r1
 801382a:	464b      	mov	r3, r9
 801382c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013830:	f7ec fd4c 	bl	80002cc <__adddf3>
 8013834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013838:	f7ec fefe 	bl	8000638 <__aeabi_dmul>
 801383c:	4622      	mov	r2, r4
 801383e:	462b      	mov	r3, r5
 8013840:	f7ec fd44 	bl	80002cc <__adddf3>
 8013844:	465a      	mov	r2, fp
 8013846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801384a:	464b      	mov	r3, r9
 801384c:	4658      	mov	r0, fp
 801384e:	4649      	mov	r1, r9
 8013850:	f7ec fef2 	bl	8000638 <__aeabi_dmul>
 8013854:	4b6a      	ldr	r3, [pc, #424]	@ (8013a00 <__ieee754_pow+0x790>)
 8013856:	2200      	movs	r2, #0
 8013858:	4606      	mov	r6, r0
 801385a:	460f      	mov	r7, r1
 801385c:	f7ec fd36 	bl	80002cc <__adddf3>
 8013860:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013864:	f7ec fd32 	bl	80002cc <__adddf3>
 8013868:	46d8      	mov	r8, fp
 801386a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801386e:	460d      	mov	r5, r1
 8013870:	465a      	mov	r2, fp
 8013872:	460b      	mov	r3, r1
 8013874:	4640      	mov	r0, r8
 8013876:	4649      	mov	r1, r9
 8013878:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801387c:	f7ec fedc 	bl	8000638 <__aeabi_dmul>
 8013880:	465c      	mov	r4, fp
 8013882:	4680      	mov	r8, r0
 8013884:	4689      	mov	r9, r1
 8013886:	4b5e      	ldr	r3, [pc, #376]	@ (8013a00 <__ieee754_pow+0x790>)
 8013888:	2200      	movs	r2, #0
 801388a:	4620      	mov	r0, r4
 801388c:	4629      	mov	r1, r5
 801388e:	f7ec fd1b 	bl	80002c8 <__aeabi_dsub>
 8013892:	4632      	mov	r2, r6
 8013894:	463b      	mov	r3, r7
 8013896:	f7ec fd17 	bl	80002c8 <__aeabi_dsub>
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80138a2:	f7ec fd11 	bl	80002c8 <__aeabi_dsub>
 80138a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138aa:	f7ec fec5 	bl	8000638 <__aeabi_dmul>
 80138ae:	4622      	mov	r2, r4
 80138b0:	4606      	mov	r6, r0
 80138b2:	460f      	mov	r7, r1
 80138b4:	462b      	mov	r3, r5
 80138b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138ba:	f7ec febd 	bl	8000638 <__aeabi_dmul>
 80138be:	4602      	mov	r2, r0
 80138c0:	460b      	mov	r3, r1
 80138c2:	4630      	mov	r0, r6
 80138c4:	4639      	mov	r1, r7
 80138c6:	f7ec fd01 	bl	80002cc <__adddf3>
 80138ca:	4606      	mov	r6, r0
 80138cc:	460f      	mov	r7, r1
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	4640      	mov	r0, r8
 80138d4:	4649      	mov	r1, r9
 80138d6:	f7ec fcf9 	bl	80002cc <__adddf3>
 80138da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80138de:	a33c      	add	r3, pc, #240	@ (adr r3, 80139d0 <__ieee754_pow+0x760>)
 80138e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e4:	4658      	mov	r0, fp
 80138e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80138ea:	460d      	mov	r5, r1
 80138ec:	f7ec fea4 	bl	8000638 <__aeabi_dmul>
 80138f0:	465c      	mov	r4, fp
 80138f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138f6:	4642      	mov	r2, r8
 80138f8:	464b      	mov	r3, r9
 80138fa:	4620      	mov	r0, r4
 80138fc:	4629      	mov	r1, r5
 80138fe:	f7ec fce3 	bl	80002c8 <__aeabi_dsub>
 8013902:	4602      	mov	r2, r0
 8013904:	460b      	mov	r3, r1
 8013906:	4630      	mov	r0, r6
 8013908:	4639      	mov	r1, r7
 801390a:	f7ec fcdd 	bl	80002c8 <__aeabi_dsub>
 801390e:	a332      	add	r3, pc, #200	@ (adr r3, 80139d8 <__ieee754_pow+0x768>)
 8013910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013914:	f7ec fe90 	bl	8000638 <__aeabi_dmul>
 8013918:	a331      	add	r3, pc, #196	@ (adr r3, 80139e0 <__ieee754_pow+0x770>)
 801391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391e:	4606      	mov	r6, r0
 8013920:	460f      	mov	r7, r1
 8013922:	4620      	mov	r0, r4
 8013924:	4629      	mov	r1, r5
 8013926:	f7ec fe87 	bl	8000638 <__aeabi_dmul>
 801392a:	4602      	mov	r2, r0
 801392c:	460b      	mov	r3, r1
 801392e:	4630      	mov	r0, r6
 8013930:	4639      	mov	r1, r7
 8013932:	f7ec fccb 	bl	80002cc <__adddf3>
 8013936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013938:	4b32      	ldr	r3, [pc, #200]	@ (8013a04 <__ieee754_pow+0x794>)
 801393a:	4413      	add	r3, r2
 801393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013940:	f7ec fcc4 	bl	80002cc <__adddf3>
 8013944:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013948:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801394a:	f7ec fe0b 	bl	8000564 <__aeabi_i2d>
 801394e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013950:	4b2d      	ldr	r3, [pc, #180]	@ (8013a08 <__ieee754_pow+0x798>)
 8013952:	4413      	add	r3, r2
 8013954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013958:	4606      	mov	r6, r0
 801395a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801395e:	460f      	mov	r7, r1
 8013960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013964:	f7ec fcb2 	bl	80002cc <__adddf3>
 8013968:	4642      	mov	r2, r8
 801396a:	464b      	mov	r3, r9
 801396c:	f7ec fcae 	bl	80002cc <__adddf3>
 8013970:	4632      	mov	r2, r6
 8013972:	463b      	mov	r3, r7
 8013974:	f7ec fcaa 	bl	80002cc <__adddf3>
 8013978:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801397c:	4632      	mov	r2, r6
 801397e:	463b      	mov	r3, r7
 8013980:	4658      	mov	r0, fp
 8013982:	460d      	mov	r5, r1
 8013984:	f7ec fca0 	bl	80002c8 <__aeabi_dsub>
 8013988:	4642      	mov	r2, r8
 801398a:	464b      	mov	r3, r9
 801398c:	f7ec fc9c 	bl	80002c8 <__aeabi_dsub>
 8013990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013994:	f7ec fc98 	bl	80002c8 <__aeabi_dsub>
 8013998:	465c      	mov	r4, fp
 801399a:	4602      	mov	r2, r0
 801399c:	e036      	b.n	8013a0c <__ieee754_pow+0x79c>
 801399e:	bf00      	nop
 80139a0:	4a454eef 	.word	0x4a454eef
 80139a4:	3fca7e28 	.word	0x3fca7e28
 80139a8:	93c9db65 	.word	0x93c9db65
 80139ac:	3fcd864a 	.word	0x3fcd864a
 80139b0:	a91d4101 	.word	0xa91d4101
 80139b4:	3fd17460 	.word	0x3fd17460
 80139b8:	518f264d 	.word	0x518f264d
 80139bc:	3fd55555 	.word	0x3fd55555
 80139c0:	db6fabff 	.word	0xdb6fabff
 80139c4:	3fdb6db6 	.word	0x3fdb6db6
 80139c8:	33333303 	.word	0x33333303
 80139cc:	3fe33333 	.word	0x3fe33333
 80139d0:	e0000000 	.word	0xe0000000
 80139d4:	3feec709 	.word	0x3feec709
 80139d8:	dc3a03fd 	.word	0xdc3a03fd
 80139dc:	3feec709 	.word	0x3feec709
 80139e0:	145b01f5 	.word	0x145b01f5
 80139e4:	be3e2fe0 	.word	0xbe3e2fe0
 80139e8:	7ff00000 	.word	0x7ff00000
 80139ec:	43400000 	.word	0x43400000
 80139f0:	0003988e 	.word	0x0003988e
 80139f4:	000bb679 	.word	0x000bb679
 80139f8:	08015388 	.word	0x08015388
 80139fc:	3ff00000 	.word	0x3ff00000
 8013a00:	40080000 	.word	0x40080000
 8013a04:	08015368 	.word	0x08015368
 8013a08:	08015378 	.word	0x08015378
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a12:	e5d7      	b.n	80135c4 <__ieee754_pow+0x354>
 8013a14:	f04f 0a01 	mov.w	sl, #1
 8013a18:	e65e      	b.n	80136d8 <__ieee754_pow+0x468>
 8013a1a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8013cec <__ieee754_pow+0xa7c>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	4630      	mov	r0, r6
 8013a22:	4639      	mov	r1, r7
 8013a24:	f7ec fc52 	bl	80002cc <__adddf3>
 8013a28:	4642      	mov	r2, r8
 8013a2a:	e9cd 0100 	strd	r0, r1, [sp]
 8013a2e:	464b      	mov	r3, r9
 8013a30:	4620      	mov	r0, r4
 8013a32:	4629      	mov	r1, r5
 8013a34:	f7ec fc48 	bl	80002c8 <__aeabi_dsub>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a40:	f7ed f88a 	bl	8000b58 <__aeabi_dcmpgt>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f47f ae00 	bne.w	801364a <__ieee754_pow+0x3da>
 8013a4a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013a4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013a52:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013a56:	fa43 fa0a 	asr.w	sl, r3, sl
 8013a5a:	44da      	add	sl, fp
 8013a5c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013a60:	489d      	ldr	r0, [pc, #628]	@ (8013cd8 <__ieee754_pow+0xa68>)
 8013a62:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013a66:	4108      	asrs	r0, r1
 8013a68:	ea00 030a 	and.w	r3, r0, sl
 8013a6c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013a70:	f1c1 0114 	rsb	r1, r1, #20
 8013a74:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013a78:	fa4a fa01 	asr.w	sl, sl, r1
 8013a7c:	f1bb 0f00 	cmp.w	fp, #0
 8013a80:	4640      	mov	r0, r8
 8013a82:	4649      	mov	r1, r9
 8013a84:	f04f 0200 	mov.w	r2, #0
 8013a88:	bfb8      	it	lt
 8013a8a:	f1ca 0a00 	rsblt	sl, sl, #0
 8013a8e:	f7ec fc1b 	bl	80002c8 <__aeabi_dsub>
 8013a92:	4680      	mov	r8, r0
 8013a94:	4689      	mov	r9, r1
 8013a96:	4632      	mov	r2, r6
 8013a98:	463b      	mov	r3, r7
 8013a9a:	4640      	mov	r0, r8
 8013a9c:	4649      	mov	r1, r9
 8013a9e:	f7ec fc15 	bl	80002cc <__adddf3>
 8013aa2:	2400      	movs	r4, #0
 8013aa4:	a37c      	add	r3, pc, #496	@ (adr r3, 8013c98 <__ieee754_pow+0xa28>)
 8013aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aaa:	4620      	mov	r0, r4
 8013aac:	460d      	mov	r5, r1
 8013aae:	f7ec fdc3 	bl	8000638 <__aeabi_dmul>
 8013ab2:	4642      	mov	r2, r8
 8013ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ab8:	464b      	mov	r3, r9
 8013aba:	4620      	mov	r0, r4
 8013abc:	4629      	mov	r1, r5
 8013abe:	f7ec fc03 	bl	80002c8 <__aeabi_dsub>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	4630      	mov	r0, r6
 8013ac8:	4639      	mov	r1, r7
 8013aca:	f7ec fbfd 	bl	80002c8 <__aeabi_dsub>
 8013ace:	a374      	add	r3, pc, #464	@ (adr r3, 8013ca0 <__ieee754_pow+0xa30>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	f7ec fdb0 	bl	8000638 <__aeabi_dmul>
 8013ad8:	a373      	add	r3, pc, #460	@ (adr r3, 8013ca8 <__ieee754_pow+0xa38>)
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	4680      	mov	r8, r0
 8013ae0:	4689      	mov	r9, r1
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	4629      	mov	r1, r5
 8013ae6:	f7ec fda7 	bl	8000638 <__aeabi_dmul>
 8013aea:	4602      	mov	r2, r0
 8013aec:	460b      	mov	r3, r1
 8013aee:	4640      	mov	r0, r8
 8013af0:	4649      	mov	r1, r9
 8013af2:	f7ec fbeb 	bl	80002cc <__adddf3>
 8013af6:	4604      	mov	r4, r0
 8013af8:	460d      	mov	r5, r1
 8013afa:	4602      	mov	r2, r0
 8013afc:	460b      	mov	r3, r1
 8013afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b02:	f7ec fbe3 	bl	80002cc <__adddf3>
 8013b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b0a:	4680      	mov	r8, r0
 8013b0c:	4689      	mov	r9, r1
 8013b0e:	f7ec fbdb 	bl	80002c8 <__aeabi_dsub>
 8013b12:	4602      	mov	r2, r0
 8013b14:	460b      	mov	r3, r1
 8013b16:	4620      	mov	r0, r4
 8013b18:	4629      	mov	r1, r5
 8013b1a:	f7ec fbd5 	bl	80002c8 <__aeabi_dsub>
 8013b1e:	4642      	mov	r2, r8
 8013b20:	4606      	mov	r6, r0
 8013b22:	460f      	mov	r7, r1
 8013b24:	464b      	mov	r3, r9
 8013b26:	4640      	mov	r0, r8
 8013b28:	4649      	mov	r1, r9
 8013b2a:	f7ec fd85 	bl	8000638 <__aeabi_dmul>
 8013b2e:	a360      	add	r3, pc, #384	@ (adr r3, 8013cb0 <__ieee754_pow+0xa40>)
 8013b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b34:	4604      	mov	r4, r0
 8013b36:	460d      	mov	r5, r1
 8013b38:	f7ec fd7e 	bl	8000638 <__aeabi_dmul>
 8013b3c:	a35e      	add	r3, pc, #376	@ (adr r3, 8013cb8 <__ieee754_pow+0xa48>)
 8013b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b42:	f7ec fbc1 	bl	80002c8 <__aeabi_dsub>
 8013b46:	4622      	mov	r2, r4
 8013b48:	462b      	mov	r3, r5
 8013b4a:	f7ec fd75 	bl	8000638 <__aeabi_dmul>
 8013b4e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013cc0 <__ieee754_pow+0xa50>)
 8013b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b54:	f7ec fbba 	bl	80002cc <__adddf3>
 8013b58:	4622      	mov	r2, r4
 8013b5a:	462b      	mov	r3, r5
 8013b5c:	f7ec fd6c 	bl	8000638 <__aeabi_dmul>
 8013b60:	a359      	add	r3, pc, #356	@ (adr r3, 8013cc8 <__ieee754_pow+0xa58>)
 8013b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b66:	f7ec fbaf 	bl	80002c8 <__aeabi_dsub>
 8013b6a:	4622      	mov	r2, r4
 8013b6c:	462b      	mov	r3, r5
 8013b6e:	f7ec fd63 	bl	8000638 <__aeabi_dmul>
 8013b72:	a357      	add	r3, pc, #348	@ (adr r3, 8013cd0 <__ieee754_pow+0xa60>)
 8013b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b78:	f7ec fba8 	bl	80002cc <__adddf3>
 8013b7c:	4622      	mov	r2, r4
 8013b7e:	462b      	mov	r3, r5
 8013b80:	f7ec fd5a 	bl	8000638 <__aeabi_dmul>
 8013b84:	4602      	mov	r2, r0
 8013b86:	460b      	mov	r3, r1
 8013b88:	4640      	mov	r0, r8
 8013b8a:	4649      	mov	r1, r9
 8013b8c:	f7ec fb9c 	bl	80002c8 <__aeabi_dsub>
 8013b90:	4604      	mov	r4, r0
 8013b92:	460d      	mov	r5, r1
 8013b94:	4602      	mov	r2, r0
 8013b96:	460b      	mov	r3, r1
 8013b98:	4640      	mov	r0, r8
 8013b9a:	4649      	mov	r1, r9
 8013b9c:	f7ec fd4c 	bl	8000638 <__aeabi_dmul>
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8013ba6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013baa:	4620      	mov	r0, r4
 8013bac:	4629      	mov	r1, r5
 8013bae:	f7ec fb8b 	bl	80002c8 <__aeabi_dsub>
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bba:	f7ec fe67 	bl	800088c <__aeabi_ddiv>
 8013bbe:	4632      	mov	r2, r6
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	460d      	mov	r5, r1
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	4640      	mov	r0, r8
 8013bc8:	4649      	mov	r1, r9
 8013bca:	f7ec fd35 	bl	8000638 <__aeabi_dmul>
 8013bce:	4632      	mov	r2, r6
 8013bd0:	463b      	mov	r3, r7
 8013bd2:	f7ec fb7b 	bl	80002cc <__adddf3>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	460b      	mov	r3, r1
 8013bda:	4620      	mov	r0, r4
 8013bdc:	4629      	mov	r1, r5
 8013bde:	f7ec fb73 	bl	80002c8 <__aeabi_dsub>
 8013be2:	4642      	mov	r2, r8
 8013be4:	464b      	mov	r3, r9
 8013be6:	f7ec fb6f 	bl	80002c8 <__aeabi_dsub>
 8013bea:	460b      	mov	r3, r1
 8013bec:	4602      	mov	r2, r0
 8013bee:	493b      	ldr	r1, [pc, #236]	@ (8013cdc <__ieee754_pow+0xa6c>)
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	f7ec fb69 	bl	80002c8 <__aeabi_dsub>
 8013bf6:	ec41 0b10 	vmov	d0, r0, r1
 8013bfa:	ee10 3a90 	vmov	r3, s1
 8013bfe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013c06:	da30      	bge.n	8013c6a <__ieee754_pow+0x9fa>
 8013c08:	4650      	mov	r0, sl
 8013c0a:	f000 fc11 	bl	8014430 <scalbn>
 8013c0e:	ec51 0b10 	vmov	r0, r1, d0
 8013c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c16:	f7ff bbd2 	b.w	80133be <__ieee754_pow+0x14e>
 8013c1a:	4c31      	ldr	r4, [pc, #196]	@ (8013ce0 <__ieee754_pow+0xa70>)
 8013c1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013c20:	42a3      	cmp	r3, r4
 8013c22:	d91a      	bls.n	8013c5a <__ieee754_pow+0x9ea>
 8013c24:	4b2f      	ldr	r3, [pc, #188]	@ (8013ce4 <__ieee754_pow+0xa74>)
 8013c26:	440b      	add	r3, r1
 8013c28:	4303      	orrs	r3, r0
 8013c2a:	d009      	beq.n	8013c40 <__ieee754_pow+0x9d0>
 8013c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c30:	2200      	movs	r2, #0
 8013c32:	2300      	movs	r3, #0
 8013c34:	f7ec ff72 	bl	8000b1c <__aeabi_dcmplt>
 8013c38:	3800      	subs	r0, #0
 8013c3a:	bf18      	it	ne
 8013c3c:	2001      	movne	r0, #1
 8013c3e:	e42b      	b.n	8013498 <__ieee754_pow+0x228>
 8013c40:	4642      	mov	r2, r8
 8013c42:	464b      	mov	r3, r9
 8013c44:	f7ec fb40 	bl	80002c8 <__aeabi_dsub>
 8013c48:	4632      	mov	r2, r6
 8013c4a:	463b      	mov	r3, r7
 8013c4c:	f7ec ff7a 	bl	8000b44 <__aeabi_dcmpge>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d1eb      	bne.n	8013c2c <__ieee754_pow+0x9bc>
 8013c54:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8013cf4 <__ieee754_pow+0xa84>
 8013c58:	e6f7      	b.n	8013a4a <__ieee754_pow+0x7da>
 8013c5a:	469a      	mov	sl, r3
 8013c5c:	4b22      	ldr	r3, [pc, #136]	@ (8013ce8 <__ieee754_pow+0xa78>)
 8013c5e:	459a      	cmp	sl, r3
 8013c60:	f63f aef3 	bhi.w	8013a4a <__ieee754_pow+0x7da>
 8013c64:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013c68:	e715      	b.n	8013a96 <__ieee754_pow+0x826>
 8013c6a:	ec51 0b10 	vmov	r0, r1, d0
 8013c6e:	4619      	mov	r1, r3
 8013c70:	e7cf      	b.n	8013c12 <__ieee754_pow+0x9a2>
 8013c72:	491a      	ldr	r1, [pc, #104]	@ (8013cdc <__ieee754_pow+0xa6c>)
 8013c74:	2000      	movs	r0, #0
 8013c76:	f7ff bb18 	b.w	80132aa <__ieee754_pow+0x3a>
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	f7ff bb14 	b.w	80132aa <__ieee754_pow+0x3a>
 8013c82:	4630      	mov	r0, r6
 8013c84:	4639      	mov	r1, r7
 8013c86:	f7ff bb10 	b.w	80132aa <__ieee754_pow+0x3a>
 8013c8a:	460c      	mov	r4, r1
 8013c8c:	f7ff bb5e 	b.w	801334c <__ieee754_pow+0xdc>
 8013c90:	2400      	movs	r4, #0
 8013c92:	f7ff bb49 	b.w	8013328 <__ieee754_pow+0xb8>
 8013c96:	bf00      	nop
 8013c98:	00000000 	.word	0x00000000
 8013c9c:	3fe62e43 	.word	0x3fe62e43
 8013ca0:	fefa39ef 	.word	0xfefa39ef
 8013ca4:	3fe62e42 	.word	0x3fe62e42
 8013ca8:	0ca86c39 	.word	0x0ca86c39
 8013cac:	be205c61 	.word	0xbe205c61
 8013cb0:	72bea4d0 	.word	0x72bea4d0
 8013cb4:	3e663769 	.word	0x3e663769
 8013cb8:	c5d26bf1 	.word	0xc5d26bf1
 8013cbc:	3ebbbd41 	.word	0x3ebbbd41
 8013cc0:	af25de2c 	.word	0xaf25de2c
 8013cc4:	3f11566a 	.word	0x3f11566a
 8013cc8:	16bebd93 	.word	0x16bebd93
 8013ccc:	3f66c16c 	.word	0x3f66c16c
 8013cd0:	5555553e 	.word	0x5555553e
 8013cd4:	3fc55555 	.word	0x3fc55555
 8013cd8:	fff00000 	.word	0xfff00000
 8013cdc:	3ff00000 	.word	0x3ff00000
 8013ce0:	4090cbff 	.word	0x4090cbff
 8013ce4:	3f6f3400 	.word	0x3f6f3400
 8013ce8:	3fe00000 	.word	0x3fe00000
 8013cec:	652b82fe 	.word	0x652b82fe
 8013cf0:	3c971547 	.word	0x3c971547
 8013cf4:	4090cc00 	.word	0x4090cc00

08013cf8 <__ieee754_rem_pio2>:
 8013cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cfc:	ec57 6b10 	vmov	r6, r7, d0
 8013d00:	4bc5      	ldr	r3, [pc, #788]	@ (8014018 <__ieee754_rem_pio2+0x320>)
 8013d02:	b08d      	sub	sp, #52	@ 0x34
 8013d04:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013d08:	4598      	cmp	r8, r3
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	9704      	str	r7, [sp, #16]
 8013d0e:	d807      	bhi.n	8013d20 <__ieee754_rem_pio2+0x28>
 8013d10:	2200      	movs	r2, #0
 8013d12:	2300      	movs	r3, #0
 8013d14:	ed80 0b00 	vstr	d0, [r0]
 8013d18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013d1c:	2500      	movs	r5, #0
 8013d1e:	e028      	b.n	8013d72 <__ieee754_rem_pio2+0x7a>
 8013d20:	4bbe      	ldr	r3, [pc, #760]	@ (801401c <__ieee754_rem_pio2+0x324>)
 8013d22:	4598      	cmp	r8, r3
 8013d24:	d878      	bhi.n	8013e18 <__ieee754_rem_pio2+0x120>
 8013d26:	9b04      	ldr	r3, [sp, #16]
 8013d28:	4dbd      	ldr	r5, [pc, #756]	@ (8014020 <__ieee754_rem_pio2+0x328>)
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013fe0 <__ieee754_rem_pio2+0x2e8>)
 8013d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d34:	4639      	mov	r1, r7
 8013d36:	dd38      	ble.n	8013daa <__ieee754_rem_pio2+0xb2>
 8013d38:	f7ec fac6 	bl	80002c8 <__aeabi_dsub>
 8013d3c:	45a8      	cmp	r8, r5
 8013d3e:	4606      	mov	r6, r0
 8013d40:	460f      	mov	r7, r1
 8013d42:	d01a      	beq.n	8013d7a <__ieee754_rem_pio2+0x82>
 8013d44:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013fe8 <__ieee754_rem_pio2+0x2f0>)
 8013d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4a:	f7ec fabd 	bl	80002c8 <__aeabi_dsub>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4680      	mov	r8, r0
 8013d54:	4689      	mov	r9, r1
 8013d56:	4630      	mov	r0, r6
 8013d58:	4639      	mov	r1, r7
 8013d5a:	f7ec fab5 	bl	80002c8 <__aeabi_dsub>
 8013d5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013fe8 <__ieee754_rem_pio2+0x2f0>)
 8013d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d64:	f7ec fab0 	bl	80002c8 <__aeabi_dsub>
 8013d68:	e9c4 8900 	strd	r8, r9, [r4]
 8013d6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d70:	2501      	movs	r5, #1
 8013d72:	4628      	mov	r0, r5
 8013d74:	b00d      	add	sp, #52	@ 0x34
 8013d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d7a:	a39d      	add	r3, pc, #628	@ (adr r3, 8013ff0 <__ieee754_rem_pio2+0x2f8>)
 8013d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d80:	f7ec faa2 	bl	80002c8 <__aeabi_dsub>
 8013d84:	a39c      	add	r3, pc, #624	@ (adr r3, 8013ff8 <__ieee754_rem_pio2+0x300>)
 8013d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	f7ec fa9b 	bl	80002c8 <__aeabi_dsub>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
 8013d96:	4680      	mov	r8, r0
 8013d98:	4689      	mov	r9, r1
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	4639      	mov	r1, r7
 8013d9e:	f7ec fa93 	bl	80002c8 <__aeabi_dsub>
 8013da2:	a395      	add	r3, pc, #596	@ (adr r3, 8013ff8 <__ieee754_rem_pio2+0x300>)
 8013da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da8:	e7dc      	b.n	8013d64 <__ieee754_rem_pio2+0x6c>
 8013daa:	f7ec fa8f 	bl	80002cc <__adddf3>
 8013dae:	45a8      	cmp	r8, r5
 8013db0:	4606      	mov	r6, r0
 8013db2:	460f      	mov	r7, r1
 8013db4:	d018      	beq.n	8013de8 <__ieee754_rem_pio2+0xf0>
 8013db6:	a38c      	add	r3, pc, #560	@ (adr r3, 8013fe8 <__ieee754_rem_pio2+0x2f0>)
 8013db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dbc:	f7ec fa86 	bl	80002cc <__adddf3>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	4689      	mov	r9, r1
 8013dc8:	4630      	mov	r0, r6
 8013dca:	4639      	mov	r1, r7
 8013dcc:	f7ec fa7c 	bl	80002c8 <__aeabi_dsub>
 8013dd0:	a385      	add	r3, pc, #532	@ (adr r3, 8013fe8 <__ieee754_rem_pio2+0x2f0>)
 8013dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd6:	f7ec fa79 	bl	80002cc <__adddf3>
 8013dda:	f04f 35ff 	mov.w	r5, #4294967295
 8013dde:	e9c4 8900 	strd	r8, r9, [r4]
 8013de2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013de6:	e7c4      	b.n	8013d72 <__ieee754_rem_pio2+0x7a>
 8013de8:	a381      	add	r3, pc, #516	@ (adr r3, 8013ff0 <__ieee754_rem_pio2+0x2f8>)
 8013dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dee:	f7ec fa6d 	bl	80002cc <__adddf3>
 8013df2:	a381      	add	r3, pc, #516	@ (adr r3, 8013ff8 <__ieee754_rem_pio2+0x300>)
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	4606      	mov	r6, r0
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	f7ec fa66 	bl	80002cc <__adddf3>
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4680      	mov	r8, r0
 8013e06:	4689      	mov	r9, r1
 8013e08:	4630      	mov	r0, r6
 8013e0a:	4639      	mov	r1, r7
 8013e0c:	f7ec fa5c 	bl	80002c8 <__aeabi_dsub>
 8013e10:	a379      	add	r3, pc, #484	@ (adr r3, 8013ff8 <__ieee754_rem_pio2+0x300>)
 8013e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e16:	e7de      	b.n	8013dd6 <__ieee754_rem_pio2+0xde>
 8013e18:	4b82      	ldr	r3, [pc, #520]	@ (8014024 <__ieee754_rem_pio2+0x32c>)
 8013e1a:	4598      	cmp	r8, r3
 8013e1c:	f200 80d1 	bhi.w	8013fc2 <__ieee754_rem_pio2+0x2ca>
 8013e20:	f000 fafe 	bl	8014420 <fabs>
 8013e24:	ec57 6b10 	vmov	r6, r7, d0
 8013e28:	a375      	add	r3, pc, #468	@ (adr r3, 8014000 <__ieee754_rem_pio2+0x308>)
 8013e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2e:	4630      	mov	r0, r6
 8013e30:	4639      	mov	r1, r7
 8013e32:	f7ec fc01 	bl	8000638 <__aeabi_dmul>
 8013e36:	4b7c      	ldr	r3, [pc, #496]	@ (8014028 <__ieee754_rem_pio2+0x330>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	f7ec fa47 	bl	80002cc <__adddf3>
 8013e3e:	f7ec feab 	bl	8000b98 <__aeabi_d2iz>
 8013e42:	4605      	mov	r5, r0
 8013e44:	f7ec fb8e 	bl	8000564 <__aeabi_i2d>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	460b      	mov	r3, r1
 8013e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e50:	a363      	add	r3, pc, #396	@ (adr r3, 8013fe0 <__ieee754_rem_pio2+0x2e8>)
 8013e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e56:	f7ec fbef 	bl	8000638 <__aeabi_dmul>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	4630      	mov	r0, r6
 8013e60:	4639      	mov	r1, r7
 8013e62:	f7ec fa31 	bl	80002c8 <__aeabi_dsub>
 8013e66:	a360      	add	r3, pc, #384	@ (adr r3, 8013fe8 <__ieee754_rem_pio2+0x2f0>)
 8013e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	468b      	mov	fp, r1
 8013e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e74:	f7ec fbe0 	bl	8000638 <__aeabi_dmul>
 8013e78:	2d1f      	cmp	r5, #31
 8013e7a:	4606      	mov	r6, r0
 8013e7c:	460f      	mov	r7, r1
 8013e7e:	dc0c      	bgt.n	8013e9a <__ieee754_rem_pio2+0x1a2>
 8013e80:	4b6a      	ldr	r3, [pc, #424]	@ (801402c <__ieee754_rem_pio2+0x334>)
 8013e82:	1e6a      	subs	r2, r5, #1
 8013e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e88:	4543      	cmp	r3, r8
 8013e8a:	d006      	beq.n	8013e9a <__ieee754_rem_pio2+0x1a2>
 8013e8c:	4632      	mov	r2, r6
 8013e8e:	463b      	mov	r3, r7
 8013e90:	4650      	mov	r0, sl
 8013e92:	4659      	mov	r1, fp
 8013e94:	f7ec fa18 	bl	80002c8 <__aeabi_dsub>
 8013e98:	e00e      	b.n	8013eb8 <__ieee754_rem_pio2+0x1c0>
 8013e9a:	463b      	mov	r3, r7
 8013e9c:	4632      	mov	r2, r6
 8013e9e:	4650      	mov	r0, sl
 8013ea0:	4659      	mov	r1, fp
 8013ea2:	f7ec fa11 	bl	80002c8 <__aeabi_dsub>
 8013ea6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013eaa:	9305      	str	r3, [sp, #20]
 8013eac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013eb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013eb4:	2b10      	cmp	r3, #16
 8013eb6:	dc02      	bgt.n	8013ebe <__ieee754_rem_pio2+0x1c6>
 8013eb8:	e9c4 0100 	strd	r0, r1, [r4]
 8013ebc:	e039      	b.n	8013f32 <__ieee754_rem_pio2+0x23a>
 8013ebe:	a34c      	add	r3, pc, #304	@ (adr r3, 8013ff0 <__ieee754_rem_pio2+0x2f8>)
 8013ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ec8:	f7ec fbb6 	bl	8000638 <__aeabi_dmul>
 8013ecc:	4606      	mov	r6, r0
 8013ece:	460f      	mov	r7, r1
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	4650      	mov	r0, sl
 8013ed6:	4659      	mov	r1, fp
 8013ed8:	f7ec f9f6 	bl	80002c8 <__aeabi_dsub>
 8013edc:	4602      	mov	r2, r0
 8013ede:	460b      	mov	r3, r1
 8013ee0:	4680      	mov	r8, r0
 8013ee2:	4689      	mov	r9, r1
 8013ee4:	4650      	mov	r0, sl
 8013ee6:	4659      	mov	r1, fp
 8013ee8:	f7ec f9ee 	bl	80002c8 <__aeabi_dsub>
 8013eec:	4632      	mov	r2, r6
 8013eee:	463b      	mov	r3, r7
 8013ef0:	f7ec f9ea 	bl	80002c8 <__aeabi_dsub>
 8013ef4:	a340      	add	r3, pc, #256	@ (adr r3, 8013ff8 <__ieee754_rem_pio2+0x300>)
 8013ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efa:	4606      	mov	r6, r0
 8013efc:	460f      	mov	r7, r1
 8013efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f02:	f7ec fb99 	bl	8000638 <__aeabi_dmul>
 8013f06:	4632      	mov	r2, r6
 8013f08:	463b      	mov	r3, r7
 8013f0a:	f7ec f9dd 	bl	80002c8 <__aeabi_dsub>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	460b      	mov	r3, r1
 8013f12:	4606      	mov	r6, r0
 8013f14:	460f      	mov	r7, r1
 8013f16:	4640      	mov	r0, r8
 8013f18:	4649      	mov	r1, r9
 8013f1a:	f7ec f9d5 	bl	80002c8 <__aeabi_dsub>
 8013f1e:	9a05      	ldr	r2, [sp, #20]
 8013f20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	2b31      	cmp	r3, #49	@ 0x31
 8013f28:	dc20      	bgt.n	8013f6c <__ieee754_rem_pio2+0x274>
 8013f2a:	e9c4 0100 	strd	r0, r1, [r4]
 8013f2e:	46c2      	mov	sl, r8
 8013f30:	46cb      	mov	fp, r9
 8013f32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013f36:	4650      	mov	r0, sl
 8013f38:	4642      	mov	r2, r8
 8013f3a:	464b      	mov	r3, r9
 8013f3c:	4659      	mov	r1, fp
 8013f3e:	f7ec f9c3 	bl	80002c8 <__aeabi_dsub>
 8013f42:	463b      	mov	r3, r7
 8013f44:	4632      	mov	r2, r6
 8013f46:	f7ec f9bf 	bl	80002c8 <__aeabi_dsub>
 8013f4a:	9b04      	ldr	r3, [sp, #16]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013f52:	f6bf af0e 	bge.w	8013d72 <__ieee754_rem_pio2+0x7a>
 8013f56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013f5a:	6063      	str	r3, [r4, #4]
 8013f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013f60:	f8c4 8000 	str.w	r8, [r4]
 8013f64:	60a0      	str	r0, [r4, #8]
 8013f66:	60e3      	str	r3, [r4, #12]
 8013f68:	426d      	negs	r5, r5
 8013f6a:	e702      	b.n	8013d72 <__ieee754_rem_pio2+0x7a>
 8013f6c:	a326      	add	r3, pc, #152	@ (adr r3, 8014008 <__ieee754_rem_pio2+0x310>)
 8013f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f76:	f7ec fb5f 	bl	8000638 <__aeabi_dmul>
 8013f7a:	4606      	mov	r6, r0
 8013f7c:	460f      	mov	r7, r1
 8013f7e:	4602      	mov	r2, r0
 8013f80:	460b      	mov	r3, r1
 8013f82:	4640      	mov	r0, r8
 8013f84:	4649      	mov	r1, r9
 8013f86:	f7ec f99f 	bl	80002c8 <__aeabi_dsub>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	4682      	mov	sl, r0
 8013f90:	468b      	mov	fp, r1
 8013f92:	4640      	mov	r0, r8
 8013f94:	4649      	mov	r1, r9
 8013f96:	f7ec f997 	bl	80002c8 <__aeabi_dsub>
 8013f9a:	4632      	mov	r2, r6
 8013f9c:	463b      	mov	r3, r7
 8013f9e:	f7ec f993 	bl	80002c8 <__aeabi_dsub>
 8013fa2:	a31b      	add	r3, pc, #108	@ (adr r3, 8014010 <__ieee754_rem_pio2+0x318>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	4606      	mov	r6, r0
 8013faa:	460f      	mov	r7, r1
 8013fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fb0:	f7ec fb42 	bl	8000638 <__aeabi_dmul>
 8013fb4:	4632      	mov	r2, r6
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	f7ec f986 	bl	80002c8 <__aeabi_dsub>
 8013fbc:	4606      	mov	r6, r0
 8013fbe:	460f      	mov	r7, r1
 8013fc0:	e764      	b.n	8013e8c <__ieee754_rem_pio2+0x194>
 8013fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8014030 <__ieee754_rem_pio2+0x338>)
 8013fc4:	4598      	cmp	r8, r3
 8013fc6:	d935      	bls.n	8014034 <__ieee754_rem_pio2+0x33c>
 8013fc8:	4632      	mov	r2, r6
 8013fca:	463b      	mov	r3, r7
 8013fcc:	4630      	mov	r0, r6
 8013fce:	4639      	mov	r1, r7
 8013fd0:	f7ec f97a 	bl	80002c8 <__aeabi_dsub>
 8013fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013fd8:	e9c4 0100 	strd	r0, r1, [r4]
 8013fdc:	e69e      	b.n	8013d1c <__ieee754_rem_pio2+0x24>
 8013fde:	bf00      	nop
 8013fe0:	54400000 	.word	0x54400000
 8013fe4:	3ff921fb 	.word	0x3ff921fb
 8013fe8:	1a626331 	.word	0x1a626331
 8013fec:	3dd0b461 	.word	0x3dd0b461
 8013ff0:	1a600000 	.word	0x1a600000
 8013ff4:	3dd0b461 	.word	0x3dd0b461
 8013ff8:	2e037073 	.word	0x2e037073
 8013ffc:	3ba3198a 	.word	0x3ba3198a
 8014000:	6dc9c883 	.word	0x6dc9c883
 8014004:	3fe45f30 	.word	0x3fe45f30
 8014008:	2e000000 	.word	0x2e000000
 801400c:	3ba3198a 	.word	0x3ba3198a
 8014010:	252049c1 	.word	0x252049c1
 8014014:	397b839a 	.word	0x397b839a
 8014018:	3fe921fb 	.word	0x3fe921fb
 801401c:	4002d97b 	.word	0x4002d97b
 8014020:	3ff921fb 	.word	0x3ff921fb
 8014024:	413921fb 	.word	0x413921fb
 8014028:	3fe00000 	.word	0x3fe00000
 801402c:	08015398 	.word	0x08015398
 8014030:	7fefffff 	.word	0x7fefffff
 8014034:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014038:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801403c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014040:	4630      	mov	r0, r6
 8014042:	460f      	mov	r7, r1
 8014044:	f7ec fda8 	bl	8000b98 <__aeabi_d2iz>
 8014048:	f7ec fa8c 	bl	8000564 <__aeabi_i2d>
 801404c:	4602      	mov	r2, r0
 801404e:	460b      	mov	r3, r1
 8014050:	4630      	mov	r0, r6
 8014052:	4639      	mov	r1, r7
 8014054:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014058:	f7ec f936 	bl	80002c8 <__aeabi_dsub>
 801405c:	4b22      	ldr	r3, [pc, #136]	@ (80140e8 <__ieee754_rem_pio2+0x3f0>)
 801405e:	2200      	movs	r2, #0
 8014060:	f7ec faea 	bl	8000638 <__aeabi_dmul>
 8014064:	460f      	mov	r7, r1
 8014066:	4606      	mov	r6, r0
 8014068:	f7ec fd96 	bl	8000b98 <__aeabi_d2iz>
 801406c:	f7ec fa7a 	bl	8000564 <__aeabi_i2d>
 8014070:	4602      	mov	r2, r0
 8014072:	460b      	mov	r3, r1
 8014074:	4630      	mov	r0, r6
 8014076:	4639      	mov	r1, r7
 8014078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801407c:	f7ec f924 	bl	80002c8 <__aeabi_dsub>
 8014080:	4b19      	ldr	r3, [pc, #100]	@ (80140e8 <__ieee754_rem_pio2+0x3f0>)
 8014082:	2200      	movs	r2, #0
 8014084:	f7ec fad8 	bl	8000638 <__aeabi_dmul>
 8014088:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801408c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014090:	f04f 0803 	mov.w	r8, #3
 8014094:	2600      	movs	r6, #0
 8014096:	2700      	movs	r7, #0
 8014098:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801409c:	4632      	mov	r2, r6
 801409e:	463b      	mov	r3, r7
 80140a0:	46c2      	mov	sl, r8
 80140a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80140a6:	f7ec fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80140aa:	2800      	cmp	r0, #0
 80140ac:	d1f4      	bne.n	8014098 <__ieee754_rem_pio2+0x3a0>
 80140ae:	4b0f      	ldr	r3, [pc, #60]	@ (80140ec <__ieee754_rem_pio2+0x3f4>)
 80140b0:	9301      	str	r3, [sp, #4]
 80140b2:	2302      	movs	r3, #2
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	462a      	mov	r2, r5
 80140b8:	4653      	mov	r3, sl
 80140ba:	4621      	mov	r1, r4
 80140bc:	a806      	add	r0, sp, #24
 80140be:	f000 fa73 	bl	80145a8 <__kernel_rem_pio2>
 80140c2:	9b04      	ldr	r3, [sp, #16]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	4605      	mov	r5, r0
 80140c8:	f6bf ae53 	bge.w	8013d72 <__ieee754_rem_pio2+0x7a>
 80140cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80140d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80140d4:	e9c4 2300 	strd	r2, r3, [r4]
 80140d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80140dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80140e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80140e4:	e740      	b.n	8013f68 <__ieee754_rem_pio2+0x270>
 80140e6:	bf00      	nop
 80140e8:	41700000 	.word	0x41700000
 80140ec:	08015418 	.word	0x08015418

080140f0 <atan>:
 80140f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	ec55 4b10 	vmov	r4, r5, d0
 80140f8:	4bbf      	ldr	r3, [pc, #764]	@ (80143f8 <atan+0x308>)
 80140fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80140fe:	429e      	cmp	r6, r3
 8014100:	46ab      	mov	fp, r5
 8014102:	d918      	bls.n	8014136 <atan+0x46>
 8014104:	4bbd      	ldr	r3, [pc, #756]	@ (80143fc <atan+0x30c>)
 8014106:	429e      	cmp	r6, r3
 8014108:	d801      	bhi.n	801410e <atan+0x1e>
 801410a:	d109      	bne.n	8014120 <atan+0x30>
 801410c:	b144      	cbz	r4, 8014120 <atan+0x30>
 801410e:	4622      	mov	r2, r4
 8014110:	462b      	mov	r3, r5
 8014112:	4620      	mov	r0, r4
 8014114:	4629      	mov	r1, r5
 8014116:	f7ec f8d9 	bl	80002cc <__adddf3>
 801411a:	4604      	mov	r4, r0
 801411c:	460d      	mov	r5, r1
 801411e:	e006      	b.n	801412e <atan+0x3e>
 8014120:	f1bb 0f00 	cmp.w	fp, #0
 8014124:	f340 812b 	ble.w	801437e <atan+0x28e>
 8014128:	a597      	add	r5, pc, #604	@ (adr r5, 8014388 <atan+0x298>)
 801412a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801412e:	ec45 4b10 	vmov	d0, r4, r5
 8014132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014136:	4bb2      	ldr	r3, [pc, #712]	@ (8014400 <atan+0x310>)
 8014138:	429e      	cmp	r6, r3
 801413a:	d813      	bhi.n	8014164 <atan+0x74>
 801413c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014140:	429e      	cmp	r6, r3
 8014142:	d80c      	bhi.n	801415e <atan+0x6e>
 8014144:	a392      	add	r3, pc, #584	@ (adr r3, 8014390 <atan+0x2a0>)
 8014146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801414a:	4620      	mov	r0, r4
 801414c:	4629      	mov	r1, r5
 801414e:	f7ec f8bd 	bl	80002cc <__adddf3>
 8014152:	4bac      	ldr	r3, [pc, #688]	@ (8014404 <atan+0x314>)
 8014154:	2200      	movs	r2, #0
 8014156:	f7ec fcff 	bl	8000b58 <__aeabi_dcmpgt>
 801415a:	2800      	cmp	r0, #0
 801415c:	d1e7      	bne.n	801412e <atan+0x3e>
 801415e:	f04f 3aff 	mov.w	sl, #4294967295
 8014162:	e029      	b.n	80141b8 <atan+0xc8>
 8014164:	f000 f95c 	bl	8014420 <fabs>
 8014168:	4ba7      	ldr	r3, [pc, #668]	@ (8014408 <atan+0x318>)
 801416a:	429e      	cmp	r6, r3
 801416c:	ec55 4b10 	vmov	r4, r5, d0
 8014170:	f200 80bc 	bhi.w	80142ec <atan+0x1fc>
 8014174:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014178:	429e      	cmp	r6, r3
 801417a:	f200 809e 	bhi.w	80142ba <atan+0x1ca>
 801417e:	4622      	mov	r2, r4
 8014180:	462b      	mov	r3, r5
 8014182:	4620      	mov	r0, r4
 8014184:	4629      	mov	r1, r5
 8014186:	f7ec f8a1 	bl	80002cc <__adddf3>
 801418a:	4b9e      	ldr	r3, [pc, #632]	@ (8014404 <atan+0x314>)
 801418c:	2200      	movs	r2, #0
 801418e:	f7ec f89b 	bl	80002c8 <__aeabi_dsub>
 8014192:	2200      	movs	r2, #0
 8014194:	4606      	mov	r6, r0
 8014196:	460f      	mov	r7, r1
 8014198:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801419c:	4620      	mov	r0, r4
 801419e:	4629      	mov	r1, r5
 80141a0:	f7ec f894 	bl	80002cc <__adddf3>
 80141a4:	4602      	mov	r2, r0
 80141a6:	460b      	mov	r3, r1
 80141a8:	4630      	mov	r0, r6
 80141aa:	4639      	mov	r1, r7
 80141ac:	f7ec fb6e 	bl	800088c <__aeabi_ddiv>
 80141b0:	f04f 0a00 	mov.w	sl, #0
 80141b4:	4604      	mov	r4, r0
 80141b6:	460d      	mov	r5, r1
 80141b8:	4622      	mov	r2, r4
 80141ba:	462b      	mov	r3, r5
 80141bc:	4620      	mov	r0, r4
 80141be:	4629      	mov	r1, r5
 80141c0:	f7ec fa3a 	bl	8000638 <__aeabi_dmul>
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	4680      	mov	r8, r0
 80141ca:	4689      	mov	r9, r1
 80141cc:	f7ec fa34 	bl	8000638 <__aeabi_dmul>
 80141d0:	a371      	add	r3, pc, #452	@ (adr r3, 8014398 <atan+0x2a8>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	4606      	mov	r6, r0
 80141d8:	460f      	mov	r7, r1
 80141da:	f7ec fa2d 	bl	8000638 <__aeabi_dmul>
 80141de:	a370      	add	r3, pc, #448	@ (adr r3, 80143a0 <atan+0x2b0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f7ec f872 	bl	80002cc <__adddf3>
 80141e8:	4632      	mov	r2, r6
 80141ea:	463b      	mov	r3, r7
 80141ec:	f7ec fa24 	bl	8000638 <__aeabi_dmul>
 80141f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80143a8 <atan+0x2b8>)
 80141f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f6:	f7ec f869 	bl	80002cc <__adddf3>
 80141fa:	4632      	mov	r2, r6
 80141fc:	463b      	mov	r3, r7
 80141fe:	f7ec fa1b 	bl	8000638 <__aeabi_dmul>
 8014202:	a36b      	add	r3, pc, #428	@ (adr r3, 80143b0 <atan+0x2c0>)
 8014204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014208:	f7ec f860 	bl	80002cc <__adddf3>
 801420c:	4632      	mov	r2, r6
 801420e:	463b      	mov	r3, r7
 8014210:	f7ec fa12 	bl	8000638 <__aeabi_dmul>
 8014214:	a368      	add	r3, pc, #416	@ (adr r3, 80143b8 <atan+0x2c8>)
 8014216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421a:	f7ec f857 	bl	80002cc <__adddf3>
 801421e:	4632      	mov	r2, r6
 8014220:	463b      	mov	r3, r7
 8014222:	f7ec fa09 	bl	8000638 <__aeabi_dmul>
 8014226:	a366      	add	r3, pc, #408	@ (adr r3, 80143c0 <atan+0x2d0>)
 8014228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422c:	f7ec f84e 	bl	80002cc <__adddf3>
 8014230:	4642      	mov	r2, r8
 8014232:	464b      	mov	r3, r9
 8014234:	f7ec fa00 	bl	8000638 <__aeabi_dmul>
 8014238:	a363      	add	r3, pc, #396	@ (adr r3, 80143c8 <atan+0x2d8>)
 801423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423e:	4680      	mov	r8, r0
 8014240:	4689      	mov	r9, r1
 8014242:	4630      	mov	r0, r6
 8014244:	4639      	mov	r1, r7
 8014246:	f7ec f9f7 	bl	8000638 <__aeabi_dmul>
 801424a:	a361      	add	r3, pc, #388	@ (adr r3, 80143d0 <atan+0x2e0>)
 801424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014250:	f7ec f83a 	bl	80002c8 <__aeabi_dsub>
 8014254:	4632      	mov	r2, r6
 8014256:	463b      	mov	r3, r7
 8014258:	f7ec f9ee 	bl	8000638 <__aeabi_dmul>
 801425c:	a35e      	add	r3, pc, #376	@ (adr r3, 80143d8 <atan+0x2e8>)
 801425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014262:	f7ec f831 	bl	80002c8 <__aeabi_dsub>
 8014266:	4632      	mov	r2, r6
 8014268:	463b      	mov	r3, r7
 801426a:	f7ec f9e5 	bl	8000638 <__aeabi_dmul>
 801426e:	a35c      	add	r3, pc, #368	@ (adr r3, 80143e0 <atan+0x2f0>)
 8014270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014274:	f7ec f828 	bl	80002c8 <__aeabi_dsub>
 8014278:	4632      	mov	r2, r6
 801427a:	463b      	mov	r3, r7
 801427c:	f7ec f9dc 	bl	8000638 <__aeabi_dmul>
 8014280:	a359      	add	r3, pc, #356	@ (adr r3, 80143e8 <atan+0x2f8>)
 8014282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014286:	f7ec f81f 	bl	80002c8 <__aeabi_dsub>
 801428a:	4632      	mov	r2, r6
 801428c:	463b      	mov	r3, r7
 801428e:	f7ec f9d3 	bl	8000638 <__aeabi_dmul>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	4640      	mov	r0, r8
 8014298:	4649      	mov	r1, r9
 801429a:	f7ec f817 	bl	80002cc <__adddf3>
 801429e:	4622      	mov	r2, r4
 80142a0:	462b      	mov	r3, r5
 80142a2:	f7ec f9c9 	bl	8000638 <__aeabi_dmul>
 80142a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80142aa:	4602      	mov	r2, r0
 80142ac:	460b      	mov	r3, r1
 80142ae:	d148      	bne.n	8014342 <atan+0x252>
 80142b0:	4620      	mov	r0, r4
 80142b2:	4629      	mov	r1, r5
 80142b4:	f7ec f808 	bl	80002c8 <__aeabi_dsub>
 80142b8:	e72f      	b.n	801411a <atan+0x2a>
 80142ba:	4b52      	ldr	r3, [pc, #328]	@ (8014404 <atan+0x314>)
 80142bc:	2200      	movs	r2, #0
 80142be:	4620      	mov	r0, r4
 80142c0:	4629      	mov	r1, r5
 80142c2:	f7ec f801 	bl	80002c8 <__aeabi_dsub>
 80142c6:	4b4f      	ldr	r3, [pc, #316]	@ (8014404 <atan+0x314>)
 80142c8:	4606      	mov	r6, r0
 80142ca:	460f      	mov	r7, r1
 80142cc:	2200      	movs	r2, #0
 80142ce:	4620      	mov	r0, r4
 80142d0:	4629      	mov	r1, r5
 80142d2:	f7eb fffb 	bl	80002cc <__adddf3>
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	4630      	mov	r0, r6
 80142dc:	4639      	mov	r1, r7
 80142de:	f7ec fad5 	bl	800088c <__aeabi_ddiv>
 80142e2:	f04f 0a01 	mov.w	sl, #1
 80142e6:	4604      	mov	r4, r0
 80142e8:	460d      	mov	r5, r1
 80142ea:	e765      	b.n	80141b8 <atan+0xc8>
 80142ec:	4b47      	ldr	r3, [pc, #284]	@ (801440c <atan+0x31c>)
 80142ee:	429e      	cmp	r6, r3
 80142f0:	d21c      	bcs.n	801432c <atan+0x23c>
 80142f2:	4b47      	ldr	r3, [pc, #284]	@ (8014410 <atan+0x320>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	4620      	mov	r0, r4
 80142f8:	4629      	mov	r1, r5
 80142fa:	f7eb ffe5 	bl	80002c8 <__aeabi_dsub>
 80142fe:	4b44      	ldr	r3, [pc, #272]	@ (8014410 <atan+0x320>)
 8014300:	4606      	mov	r6, r0
 8014302:	460f      	mov	r7, r1
 8014304:	2200      	movs	r2, #0
 8014306:	4620      	mov	r0, r4
 8014308:	4629      	mov	r1, r5
 801430a:	f7ec f995 	bl	8000638 <__aeabi_dmul>
 801430e:	4b3d      	ldr	r3, [pc, #244]	@ (8014404 <atan+0x314>)
 8014310:	2200      	movs	r2, #0
 8014312:	f7eb ffdb 	bl	80002cc <__adddf3>
 8014316:	4602      	mov	r2, r0
 8014318:	460b      	mov	r3, r1
 801431a:	4630      	mov	r0, r6
 801431c:	4639      	mov	r1, r7
 801431e:	f7ec fab5 	bl	800088c <__aeabi_ddiv>
 8014322:	f04f 0a02 	mov.w	sl, #2
 8014326:	4604      	mov	r4, r0
 8014328:	460d      	mov	r5, r1
 801432a:	e745      	b.n	80141b8 <atan+0xc8>
 801432c:	4622      	mov	r2, r4
 801432e:	462b      	mov	r3, r5
 8014330:	4938      	ldr	r1, [pc, #224]	@ (8014414 <atan+0x324>)
 8014332:	2000      	movs	r0, #0
 8014334:	f7ec faaa 	bl	800088c <__aeabi_ddiv>
 8014338:	f04f 0a03 	mov.w	sl, #3
 801433c:	4604      	mov	r4, r0
 801433e:	460d      	mov	r5, r1
 8014340:	e73a      	b.n	80141b8 <atan+0xc8>
 8014342:	4b35      	ldr	r3, [pc, #212]	@ (8014418 <atan+0x328>)
 8014344:	4e35      	ldr	r6, [pc, #212]	@ (801441c <atan+0x32c>)
 8014346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	f7eb ffbb 	bl	80002c8 <__aeabi_dsub>
 8014352:	4622      	mov	r2, r4
 8014354:	462b      	mov	r3, r5
 8014356:	f7eb ffb7 	bl	80002c8 <__aeabi_dsub>
 801435a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801435e:	4602      	mov	r2, r0
 8014360:	460b      	mov	r3, r1
 8014362:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014366:	f7eb ffaf 	bl	80002c8 <__aeabi_dsub>
 801436a:	f1bb 0f00 	cmp.w	fp, #0
 801436e:	4604      	mov	r4, r0
 8014370:	460d      	mov	r5, r1
 8014372:	f6bf aedc 	bge.w	801412e <atan+0x3e>
 8014376:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801437a:	461d      	mov	r5, r3
 801437c:	e6d7      	b.n	801412e <atan+0x3e>
 801437e:	a51c      	add	r5, pc, #112	@ (adr r5, 80143f0 <atan+0x300>)
 8014380:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014384:	e6d3      	b.n	801412e <atan+0x3e>
 8014386:	bf00      	nop
 8014388:	54442d18 	.word	0x54442d18
 801438c:	3ff921fb 	.word	0x3ff921fb
 8014390:	8800759c 	.word	0x8800759c
 8014394:	7e37e43c 	.word	0x7e37e43c
 8014398:	e322da11 	.word	0xe322da11
 801439c:	3f90ad3a 	.word	0x3f90ad3a
 80143a0:	24760deb 	.word	0x24760deb
 80143a4:	3fa97b4b 	.word	0x3fa97b4b
 80143a8:	a0d03d51 	.word	0xa0d03d51
 80143ac:	3fb10d66 	.word	0x3fb10d66
 80143b0:	c54c206e 	.word	0xc54c206e
 80143b4:	3fb745cd 	.word	0x3fb745cd
 80143b8:	920083ff 	.word	0x920083ff
 80143bc:	3fc24924 	.word	0x3fc24924
 80143c0:	5555550d 	.word	0x5555550d
 80143c4:	3fd55555 	.word	0x3fd55555
 80143c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80143cc:	bfa2b444 	.word	0xbfa2b444
 80143d0:	52defd9a 	.word	0x52defd9a
 80143d4:	3fadde2d 	.word	0x3fadde2d
 80143d8:	af749a6d 	.word	0xaf749a6d
 80143dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80143e0:	fe231671 	.word	0xfe231671
 80143e4:	3fbc71c6 	.word	0x3fbc71c6
 80143e8:	9998ebc4 	.word	0x9998ebc4
 80143ec:	3fc99999 	.word	0x3fc99999
 80143f0:	54442d18 	.word	0x54442d18
 80143f4:	bff921fb 	.word	0xbff921fb
 80143f8:	440fffff 	.word	0x440fffff
 80143fc:	7ff00000 	.word	0x7ff00000
 8014400:	3fdbffff 	.word	0x3fdbffff
 8014404:	3ff00000 	.word	0x3ff00000
 8014408:	3ff2ffff 	.word	0x3ff2ffff
 801440c:	40038000 	.word	0x40038000
 8014410:	3ff80000 	.word	0x3ff80000
 8014414:	bff00000 	.word	0xbff00000
 8014418:	08015520 	.word	0x08015520
 801441c:	08015540 	.word	0x08015540

08014420 <fabs>:
 8014420:	ec51 0b10 	vmov	r0, r1, d0
 8014424:	4602      	mov	r2, r0
 8014426:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801442a:	ec43 2b10 	vmov	d0, r2, r3
 801442e:	4770      	bx	lr

08014430 <scalbn>:
 8014430:	b570      	push	{r4, r5, r6, lr}
 8014432:	ec55 4b10 	vmov	r4, r5, d0
 8014436:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801443a:	4606      	mov	r6, r0
 801443c:	462b      	mov	r3, r5
 801443e:	b991      	cbnz	r1, 8014466 <scalbn+0x36>
 8014440:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014444:	4323      	orrs	r3, r4
 8014446:	d03d      	beq.n	80144c4 <scalbn+0x94>
 8014448:	4b35      	ldr	r3, [pc, #212]	@ (8014520 <scalbn+0xf0>)
 801444a:	4620      	mov	r0, r4
 801444c:	4629      	mov	r1, r5
 801444e:	2200      	movs	r2, #0
 8014450:	f7ec f8f2 	bl	8000638 <__aeabi_dmul>
 8014454:	4b33      	ldr	r3, [pc, #204]	@ (8014524 <scalbn+0xf4>)
 8014456:	429e      	cmp	r6, r3
 8014458:	4604      	mov	r4, r0
 801445a:	460d      	mov	r5, r1
 801445c:	da0f      	bge.n	801447e <scalbn+0x4e>
 801445e:	a328      	add	r3, pc, #160	@ (adr r3, 8014500 <scalbn+0xd0>)
 8014460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014464:	e01e      	b.n	80144a4 <scalbn+0x74>
 8014466:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801446a:	4291      	cmp	r1, r2
 801446c:	d10b      	bne.n	8014486 <scalbn+0x56>
 801446e:	4622      	mov	r2, r4
 8014470:	4620      	mov	r0, r4
 8014472:	4629      	mov	r1, r5
 8014474:	f7eb ff2a 	bl	80002cc <__adddf3>
 8014478:	4604      	mov	r4, r0
 801447a:	460d      	mov	r5, r1
 801447c:	e022      	b.n	80144c4 <scalbn+0x94>
 801447e:	460b      	mov	r3, r1
 8014480:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014484:	3936      	subs	r1, #54	@ 0x36
 8014486:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801448a:	4296      	cmp	r6, r2
 801448c:	dd0d      	ble.n	80144aa <scalbn+0x7a>
 801448e:	2d00      	cmp	r5, #0
 8014490:	a11d      	add	r1, pc, #116	@ (adr r1, 8014508 <scalbn+0xd8>)
 8014492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014496:	da02      	bge.n	801449e <scalbn+0x6e>
 8014498:	a11d      	add	r1, pc, #116	@ (adr r1, 8014510 <scalbn+0xe0>)
 801449a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801449e:	a31a      	add	r3, pc, #104	@ (adr r3, 8014508 <scalbn+0xd8>)
 80144a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a4:	f7ec f8c8 	bl	8000638 <__aeabi_dmul>
 80144a8:	e7e6      	b.n	8014478 <scalbn+0x48>
 80144aa:	1872      	adds	r2, r6, r1
 80144ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80144b0:	428a      	cmp	r2, r1
 80144b2:	dcec      	bgt.n	801448e <scalbn+0x5e>
 80144b4:	2a00      	cmp	r2, #0
 80144b6:	dd08      	ble.n	80144ca <scalbn+0x9a>
 80144b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80144bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80144c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80144c4:	ec45 4b10 	vmov	d0, r4, r5
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80144ce:	da08      	bge.n	80144e2 <scalbn+0xb2>
 80144d0:	2d00      	cmp	r5, #0
 80144d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8014500 <scalbn+0xd0>)
 80144d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144d8:	dac1      	bge.n	801445e <scalbn+0x2e>
 80144da:	a10f      	add	r1, pc, #60	@ (adr r1, 8014518 <scalbn+0xe8>)
 80144dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144e0:	e7bd      	b.n	801445e <scalbn+0x2e>
 80144e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80144e6:	3236      	adds	r2, #54	@ 0x36
 80144e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80144ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80144f0:	4620      	mov	r0, r4
 80144f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014528 <scalbn+0xf8>)
 80144f4:	4629      	mov	r1, r5
 80144f6:	2200      	movs	r2, #0
 80144f8:	e7d4      	b.n	80144a4 <scalbn+0x74>
 80144fa:	bf00      	nop
 80144fc:	f3af 8000 	nop.w
 8014500:	c2f8f359 	.word	0xc2f8f359
 8014504:	01a56e1f 	.word	0x01a56e1f
 8014508:	8800759c 	.word	0x8800759c
 801450c:	7e37e43c 	.word	0x7e37e43c
 8014510:	8800759c 	.word	0x8800759c
 8014514:	fe37e43c 	.word	0xfe37e43c
 8014518:	c2f8f359 	.word	0xc2f8f359
 801451c:	81a56e1f 	.word	0x81a56e1f
 8014520:	43500000 	.word	0x43500000
 8014524:	ffff3cb0 	.word	0xffff3cb0
 8014528:	3c900000 	.word	0x3c900000

0801452c <with_errno>:
 801452c:	b510      	push	{r4, lr}
 801452e:	ed2d 8b02 	vpush	{d8}
 8014532:	eeb0 8a40 	vmov.f32	s16, s0
 8014536:	eef0 8a60 	vmov.f32	s17, s1
 801453a:	4604      	mov	r4, r0
 801453c:	f7fb fd78 	bl	8010030 <__errno>
 8014540:	eeb0 0a48 	vmov.f32	s0, s16
 8014544:	eef0 0a68 	vmov.f32	s1, s17
 8014548:	ecbd 8b02 	vpop	{d8}
 801454c:	6004      	str	r4, [r0, #0]
 801454e:	bd10      	pop	{r4, pc}

08014550 <xflow>:
 8014550:	4603      	mov	r3, r0
 8014552:	b507      	push	{r0, r1, r2, lr}
 8014554:	ec51 0b10 	vmov	r0, r1, d0
 8014558:	b183      	cbz	r3, 801457c <xflow+0x2c>
 801455a:	4602      	mov	r2, r0
 801455c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014560:	e9cd 2300 	strd	r2, r3, [sp]
 8014564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014568:	f7ec f866 	bl	8000638 <__aeabi_dmul>
 801456c:	ec41 0b10 	vmov	d0, r0, r1
 8014570:	2022      	movs	r0, #34	@ 0x22
 8014572:	b003      	add	sp, #12
 8014574:	f85d eb04 	ldr.w	lr, [sp], #4
 8014578:	f7ff bfd8 	b.w	801452c <with_errno>
 801457c:	4602      	mov	r2, r0
 801457e:	460b      	mov	r3, r1
 8014580:	e7ee      	b.n	8014560 <xflow+0x10>
 8014582:	0000      	movs	r0, r0
 8014584:	0000      	movs	r0, r0
	...

08014588 <__math_uflow>:
 8014588:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014590 <__math_uflow+0x8>
 801458c:	f7ff bfe0 	b.w	8014550 <xflow>
 8014590:	00000000 	.word	0x00000000
 8014594:	10000000 	.word	0x10000000

08014598 <__math_oflow>:
 8014598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80145a0 <__math_oflow+0x8>
 801459c:	f7ff bfd8 	b.w	8014550 <xflow>
 80145a0:	00000000 	.word	0x00000000
 80145a4:	70000000 	.word	0x70000000

080145a8 <__kernel_rem_pio2>:
 80145a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ac:	ed2d 8b02 	vpush	{d8}
 80145b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80145b4:	f112 0f14 	cmn.w	r2, #20
 80145b8:	9306      	str	r3, [sp, #24]
 80145ba:	9104      	str	r1, [sp, #16]
 80145bc:	4bbe      	ldr	r3, [pc, #760]	@ (80148b8 <__kernel_rem_pio2+0x310>)
 80145be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80145c0:	9008      	str	r0, [sp, #32]
 80145c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	9b06      	ldr	r3, [sp, #24]
 80145ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80145ce:	bfa8      	it	ge
 80145d0:	1ed4      	subge	r4, r2, #3
 80145d2:	9305      	str	r3, [sp, #20]
 80145d4:	bfb2      	itee	lt
 80145d6:	2400      	movlt	r4, #0
 80145d8:	2318      	movge	r3, #24
 80145da:	fb94 f4f3 	sdivge	r4, r4, r3
 80145de:	f06f 0317 	mvn.w	r3, #23
 80145e2:	fb04 3303 	mla	r3, r4, r3, r3
 80145e6:	eb03 0b02 	add.w	fp, r3, r2
 80145ea:	9b00      	ldr	r3, [sp, #0]
 80145ec:	9a05      	ldr	r2, [sp, #20]
 80145ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80148a8 <__kernel_rem_pio2+0x300>
 80145f2:	eb03 0802 	add.w	r8, r3, r2
 80145f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80145f8:	1aa7      	subs	r7, r4, r2
 80145fa:	ae20      	add	r6, sp, #128	@ 0x80
 80145fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014600:	2500      	movs	r5, #0
 8014602:	4545      	cmp	r5, r8
 8014604:	dd13      	ble.n	801462e <__kernel_rem_pio2+0x86>
 8014606:	9b06      	ldr	r3, [sp, #24]
 8014608:	aa20      	add	r2, sp, #128	@ 0x80
 801460a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801460e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014612:	f04f 0800 	mov.w	r8, #0
 8014616:	9b00      	ldr	r3, [sp, #0]
 8014618:	4598      	cmp	r8, r3
 801461a:	dc31      	bgt.n	8014680 <__kernel_rem_pio2+0xd8>
 801461c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80148a8 <__kernel_rem_pio2+0x300>
 8014620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014628:	462f      	mov	r7, r5
 801462a:	2600      	movs	r6, #0
 801462c:	e01b      	b.n	8014666 <__kernel_rem_pio2+0xbe>
 801462e:	42ef      	cmn	r7, r5
 8014630:	d407      	bmi.n	8014642 <__kernel_rem_pio2+0x9a>
 8014632:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014636:	f7eb ff95 	bl	8000564 <__aeabi_i2d>
 801463a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801463e:	3501      	adds	r5, #1
 8014640:	e7df      	b.n	8014602 <__kernel_rem_pio2+0x5a>
 8014642:	ec51 0b18 	vmov	r0, r1, d8
 8014646:	e7f8      	b.n	801463a <__kernel_rem_pio2+0x92>
 8014648:	e9d7 2300 	ldrd	r2, r3, [r7]
 801464c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014650:	f7eb fff2 	bl	8000638 <__aeabi_dmul>
 8014654:	4602      	mov	r2, r0
 8014656:	460b      	mov	r3, r1
 8014658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801465c:	f7eb fe36 	bl	80002cc <__adddf3>
 8014660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014664:	3601      	adds	r6, #1
 8014666:	9b05      	ldr	r3, [sp, #20]
 8014668:	429e      	cmp	r6, r3
 801466a:	f1a7 0708 	sub.w	r7, r7, #8
 801466e:	ddeb      	ble.n	8014648 <__kernel_rem_pio2+0xa0>
 8014670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014674:	f108 0801 	add.w	r8, r8, #1
 8014678:	ecaa 7b02 	vstmia	sl!, {d7}
 801467c:	3508      	adds	r5, #8
 801467e:	e7ca      	b.n	8014616 <__kernel_rem_pio2+0x6e>
 8014680:	9b00      	ldr	r3, [sp, #0]
 8014682:	f8dd 8000 	ldr.w	r8, [sp]
 8014686:	aa0c      	add	r2, sp, #48	@ 0x30
 8014688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801468c:	930a      	str	r3, [sp, #40]	@ 0x28
 801468e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014690:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014694:	9309      	str	r3, [sp, #36]	@ 0x24
 8014696:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801469a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801469c:	ab98      	add	r3, sp, #608	@ 0x260
 801469e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80146a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80146a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80146aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80146ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80146ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80146b2:	46a1      	mov	r9, r4
 80146b4:	46c2      	mov	sl, r8
 80146b6:	f1ba 0f00 	cmp.w	sl, #0
 80146ba:	f1a5 0508 	sub.w	r5, r5, #8
 80146be:	dc77      	bgt.n	80147b0 <__kernel_rem_pio2+0x208>
 80146c0:	4658      	mov	r0, fp
 80146c2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80146c6:	f7ff feb3 	bl	8014430 <scalbn>
 80146ca:	ec57 6b10 	vmov	r6, r7, d0
 80146ce:	2200      	movs	r2, #0
 80146d0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80146d4:	4630      	mov	r0, r6
 80146d6:	4639      	mov	r1, r7
 80146d8:	f7eb ffae 	bl	8000638 <__aeabi_dmul>
 80146dc:	ec41 0b10 	vmov	d0, r0, r1
 80146e0:	f000 faba 	bl	8014c58 <floor>
 80146e4:	4b75      	ldr	r3, [pc, #468]	@ (80148bc <__kernel_rem_pio2+0x314>)
 80146e6:	ec51 0b10 	vmov	r0, r1, d0
 80146ea:	2200      	movs	r2, #0
 80146ec:	f7eb ffa4 	bl	8000638 <__aeabi_dmul>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4630      	mov	r0, r6
 80146f6:	4639      	mov	r1, r7
 80146f8:	f7eb fde6 	bl	80002c8 <__aeabi_dsub>
 80146fc:	460f      	mov	r7, r1
 80146fe:	4606      	mov	r6, r0
 8014700:	f7ec fa4a 	bl	8000b98 <__aeabi_d2iz>
 8014704:	9002      	str	r0, [sp, #8]
 8014706:	f7eb ff2d 	bl	8000564 <__aeabi_i2d>
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7eb fdd9 	bl	80002c8 <__aeabi_dsub>
 8014716:	f1bb 0f00 	cmp.w	fp, #0
 801471a:	4606      	mov	r6, r0
 801471c:	460f      	mov	r7, r1
 801471e:	dd6c      	ble.n	80147fa <__kernel_rem_pio2+0x252>
 8014720:	f108 31ff 	add.w	r1, r8, #4294967295
 8014724:	ab0c      	add	r3, sp, #48	@ 0x30
 8014726:	9d02      	ldr	r5, [sp, #8]
 8014728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801472c:	f1cb 0018 	rsb	r0, fp, #24
 8014730:	fa43 f200 	asr.w	r2, r3, r0
 8014734:	4415      	add	r5, r2
 8014736:	4082      	lsls	r2, r0
 8014738:	1a9b      	subs	r3, r3, r2
 801473a:	aa0c      	add	r2, sp, #48	@ 0x30
 801473c:	9502      	str	r5, [sp, #8]
 801473e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014742:	f1cb 0217 	rsb	r2, fp, #23
 8014746:	fa43 f902 	asr.w	r9, r3, r2
 801474a:	f1b9 0f00 	cmp.w	r9, #0
 801474e:	dd64      	ble.n	801481a <__kernel_rem_pio2+0x272>
 8014750:	9b02      	ldr	r3, [sp, #8]
 8014752:	2200      	movs	r2, #0
 8014754:	3301      	adds	r3, #1
 8014756:	9302      	str	r3, [sp, #8]
 8014758:	4615      	mov	r5, r2
 801475a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801475e:	4590      	cmp	r8, r2
 8014760:	f300 80b8 	bgt.w	80148d4 <__kernel_rem_pio2+0x32c>
 8014764:	f1bb 0f00 	cmp.w	fp, #0
 8014768:	dd07      	ble.n	801477a <__kernel_rem_pio2+0x1d2>
 801476a:	f1bb 0f01 	cmp.w	fp, #1
 801476e:	f000 80bf 	beq.w	80148f0 <__kernel_rem_pio2+0x348>
 8014772:	f1bb 0f02 	cmp.w	fp, #2
 8014776:	f000 80c6 	beq.w	8014906 <__kernel_rem_pio2+0x35e>
 801477a:	f1b9 0f02 	cmp.w	r9, #2
 801477e:	d14c      	bne.n	801481a <__kernel_rem_pio2+0x272>
 8014780:	4632      	mov	r2, r6
 8014782:	463b      	mov	r3, r7
 8014784:	494e      	ldr	r1, [pc, #312]	@ (80148c0 <__kernel_rem_pio2+0x318>)
 8014786:	2000      	movs	r0, #0
 8014788:	f7eb fd9e 	bl	80002c8 <__aeabi_dsub>
 801478c:	4606      	mov	r6, r0
 801478e:	460f      	mov	r7, r1
 8014790:	2d00      	cmp	r5, #0
 8014792:	d042      	beq.n	801481a <__kernel_rem_pio2+0x272>
 8014794:	4658      	mov	r0, fp
 8014796:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80148b0 <__kernel_rem_pio2+0x308>
 801479a:	f7ff fe49 	bl	8014430 <scalbn>
 801479e:	4630      	mov	r0, r6
 80147a0:	4639      	mov	r1, r7
 80147a2:	ec53 2b10 	vmov	r2, r3, d0
 80147a6:	f7eb fd8f 	bl	80002c8 <__aeabi_dsub>
 80147aa:	4606      	mov	r6, r0
 80147ac:	460f      	mov	r7, r1
 80147ae:	e034      	b.n	801481a <__kernel_rem_pio2+0x272>
 80147b0:	4b44      	ldr	r3, [pc, #272]	@ (80148c4 <__kernel_rem_pio2+0x31c>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147b8:	f7eb ff3e 	bl	8000638 <__aeabi_dmul>
 80147bc:	f7ec f9ec 	bl	8000b98 <__aeabi_d2iz>
 80147c0:	f7eb fed0 	bl	8000564 <__aeabi_i2d>
 80147c4:	4b40      	ldr	r3, [pc, #256]	@ (80148c8 <__kernel_rem_pio2+0x320>)
 80147c6:	2200      	movs	r2, #0
 80147c8:	4606      	mov	r6, r0
 80147ca:	460f      	mov	r7, r1
 80147cc:	f7eb ff34 	bl	8000638 <__aeabi_dmul>
 80147d0:	4602      	mov	r2, r0
 80147d2:	460b      	mov	r3, r1
 80147d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147d8:	f7eb fd76 	bl	80002c8 <__aeabi_dsub>
 80147dc:	f7ec f9dc 	bl	8000b98 <__aeabi_d2iz>
 80147e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147e4:	f849 0b04 	str.w	r0, [r9], #4
 80147e8:	4639      	mov	r1, r7
 80147ea:	4630      	mov	r0, r6
 80147ec:	f7eb fd6e 	bl	80002cc <__adddf3>
 80147f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147f8:	e75d      	b.n	80146b6 <__kernel_rem_pio2+0x10e>
 80147fa:	d107      	bne.n	801480c <__kernel_rem_pio2+0x264>
 80147fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8014800:	aa0c      	add	r2, sp, #48	@ 0x30
 8014802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014806:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801480a:	e79e      	b.n	801474a <__kernel_rem_pio2+0x1a2>
 801480c:	4b2f      	ldr	r3, [pc, #188]	@ (80148cc <__kernel_rem_pio2+0x324>)
 801480e:	2200      	movs	r2, #0
 8014810:	f7ec f998 	bl	8000b44 <__aeabi_dcmpge>
 8014814:	2800      	cmp	r0, #0
 8014816:	d143      	bne.n	80148a0 <__kernel_rem_pio2+0x2f8>
 8014818:	4681      	mov	r9, r0
 801481a:	2200      	movs	r2, #0
 801481c:	2300      	movs	r3, #0
 801481e:	4630      	mov	r0, r6
 8014820:	4639      	mov	r1, r7
 8014822:	f7ec f971 	bl	8000b08 <__aeabi_dcmpeq>
 8014826:	2800      	cmp	r0, #0
 8014828:	f000 80bf 	beq.w	80149aa <__kernel_rem_pio2+0x402>
 801482c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014830:	2200      	movs	r2, #0
 8014832:	9900      	ldr	r1, [sp, #0]
 8014834:	428b      	cmp	r3, r1
 8014836:	da6e      	bge.n	8014916 <__kernel_rem_pio2+0x36e>
 8014838:	2a00      	cmp	r2, #0
 801483a:	f000 8089 	beq.w	8014950 <__kernel_rem_pio2+0x3a8>
 801483e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014842:	ab0c      	add	r3, sp, #48	@ 0x30
 8014844:	f1ab 0b18 	sub.w	fp, fp, #24
 8014848:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d0f6      	beq.n	801483e <__kernel_rem_pio2+0x296>
 8014850:	4658      	mov	r0, fp
 8014852:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80148b0 <__kernel_rem_pio2+0x308>
 8014856:	f7ff fdeb 	bl	8014430 <scalbn>
 801485a:	f108 0301 	add.w	r3, r8, #1
 801485e:	00da      	lsls	r2, r3, #3
 8014860:	9205      	str	r2, [sp, #20]
 8014862:	ec55 4b10 	vmov	r4, r5, d0
 8014866:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014868:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80148c4 <__kernel_rem_pio2+0x31c>
 801486c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014870:	4646      	mov	r6, r8
 8014872:	f04f 0a00 	mov.w	sl, #0
 8014876:	2e00      	cmp	r6, #0
 8014878:	f280 80cf 	bge.w	8014a1a <__kernel_rem_pio2+0x472>
 801487c:	4644      	mov	r4, r8
 801487e:	2c00      	cmp	r4, #0
 8014880:	f2c0 80fd 	blt.w	8014a7e <__kernel_rem_pio2+0x4d6>
 8014884:	4b12      	ldr	r3, [pc, #72]	@ (80148d0 <__kernel_rem_pio2+0x328>)
 8014886:	461f      	mov	r7, r3
 8014888:	ab70      	add	r3, sp, #448	@ 0x1c0
 801488a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801488e:	9306      	str	r3, [sp, #24]
 8014890:	f04f 0a00 	mov.w	sl, #0
 8014894:	f04f 0b00 	mov.w	fp, #0
 8014898:	2600      	movs	r6, #0
 801489a:	eba8 0504 	sub.w	r5, r8, r4
 801489e:	e0e2      	b.n	8014a66 <__kernel_rem_pio2+0x4be>
 80148a0:	f04f 0902 	mov.w	r9, #2
 80148a4:	e754      	b.n	8014750 <__kernel_rem_pio2+0x1a8>
 80148a6:	bf00      	nop
	...
 80148b4:	3ff00000 	.word	0x3ff00000
 80148b8:	080155a0 	.word	0x080155a0
 80148bc:	40200000 	.word	0x40200000
 80148c0:	3ff00000 	.word	0x3ff00000
 80148c4:	3e700000 	.word	0x3e700000
 80148c8:	41700000 	.word	0x41700000
 80148cc:	3fe00000 	.word	0x3fe00000
 80148d0:	08015560 	.word	0x08015560
 80148d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80148d8:	b945      	cbnz	r5, 80148ec <__kernel_rem_pio2+0x344>
 80148da:	b123      	cbz	r3, 80148e6 <__kernel_rem_pio2+0x33e>
 80148dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80148e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80148e4:	2301      	movs	r3, #1
 80148e6:	3201      	adds	r2, #1
 80148e8:	461d      	mov	r5, r3
 80148ea:	e738      	b.n	801475e <__kernel_rem_pio2+0x1b6>
 80148ec:	1acb      	subs	r3, r1, r3
 80148ee:	e7f7      	b.n	80148e0 <__kernel_rem_pio2+0x338>
 80148f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80148f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80148f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80148fe:	a90c      	add	r1, sp, #48	@ 0x30
 8014900:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014904:	e739      	b.n	801477a <__kernel_rem_pio2+0x1d2>
 8014906:	f108 32ff 	add.w	r2, r8, #4294967295
 801490a:	ab0c      	add	r3, sp, #48	@ 0x30
 801490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014910:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014914:	e7f3      	b.n	80148fe <__kernel_rem_pio2+0x356>
 8014916:	a90c      	add	r1, sp, #48	@ 0x30
 8014918:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801491c:	3b01      	subs	r3, #1
 801491e:	430a      	orrs	r2, r1
 8014920:	e787      	b.n	8014832 <__kernel_rem_pio2+0x28a>
 8014922:	3401      	adds	r4, #1
 8014924:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014928:	2a00      	cmp	r2, #0
 801492a:	d0fa      	beq.n	8014922 <__kernel_rem_pio2+0x37a>
 801492c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801492e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014932:	eb0d 0503 	add.w	r5, sp, r3
 8014936:	9b06      	ldr	r3, [sp, #24]
 8014938:	aa20      	add	r2, sp, #128	@ 0x80
 801493a:	4443      	add	r3, r8
 801493c:	f108 0701 	add.w	r7, r8, #1
 8014940:	3d98      	subs	r5, #152	@ 0x98
 8014942:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014946:	4444      	add	r4, r8
 8014948:	42bc      	cmp	r4, r7
 801494a:	da04      	bge.n	8014956 <__kernel_rem_pio2+0x3ae>
 801494c:	46a0      	mov	r8, r4
 801494e:	e6a2      	b.n	8014696 <__kernel_rem_pio2+0xee>
 8014950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014952:	2401      	movs	r4, #1
 8014954:	e7e6      	b.n	8014924 <__kernel_rem_pio2+0x37c>
 8014956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014958:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801495c:	f7eb fe02 	bl	8000564 <__aeabi_i2d>
 8014960:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8014c28 <__kernel_rem_pio2+0x680>
 8014964:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014968:	ed8d 7b02 	vstr	d7, [sp, #8]
 801496c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014970:	46b2      	mov	sl, r6
 8014972:	f04f 0800 	mov.w	r8, #0
 8014976:	9b05      	ldr	r3, [sp, #20]
 8014978:	4598      	cmp	r8, r3
 801497a:	dd05      	ble.n	8014988 <__kernel_rem_pio2+0x3e0>
 801497c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014980:	3701      	adds	r7, #1
 8014982:	eca5 7b02 	vstmia	r5!, {d7}
 8014986:	e7df      	b.n	8014948 <__kernel_rem_pio2+0x3a0>
 8014988:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801498c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014990:	f7eb fe52 	bl	8000638 <__aeabi_dmul>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801499c:	f7eb fc96 	bl	80002cc <__adddf3>
 80149a0:	f108 0801 	add.w	r8, r8, #1
 80149a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149a8:	e7e5      	b.n	8014976 <__kernel_rem_pio2+0x3ce>
 80149aa:	f1cb 0000 	rsb	r0, fp, #0
 80149ae:	ec47 6b10 	vmov	d0, r6, r7
 80149b2:	f7ff fd3d 	bl	8014430 <scalbn>
 80149b6:	ec55 4b10 	vmov	r4, r5, d0
 80149ba:	4b9d      	ldr	r3, [pc, #628]	@ (8014c30 <__kernel_rem_pio2+0x688>)
 80149bc:	2200      	movs	r2, #0
 80149be:	4620      	mov	r0, r4
 80149c0:	4629      	mov	r1, r5
 80149c2:	f7ec f8bf 	bl	8000b44 <__aeabi_dcmpge>
 80149c6:	b300      	cbz	r0, 8014a0a <__kernel_rem_pio2+0x462>
 80149c8:	4b9a      	ldr	r3, [pc, #616]	@ (8014c34 <__kernel_rem_pio2+0x68c>)
 80149ca:	2200      	movs	r2, #0
 80149cc:	4620      	mov	r0, r4
 80149ce:	4629      	mov	r1, r5
 80149d0:	f7eb fe32 	bl	8000638 <__aeabi_dmul>
 80149d4:	f7ec f8e0 	bl	8000b98 <__aeabi_d2iz>
 80149d8:	4606      	mov	r6, r0
 80149da:	f7eb fdc3 	bl	8000564 <__aeabi_i2d>
 80149de:	4b94      	ldr	r3, [pc, #592]	@ (8014c30 <__kernel_rem_pio2+0x688>)
 80149e0:	2200      	movs	r2, #0
 80149e2:	f7eb fe29 	bl	8000638 <__aeabi_dmul>
 80149e6:	460b      	mov	r3, r1
 80149e8:	4602      	mov	r2, r0
 80149ea:	4629      	mov	r1, r5
 80149ec:	4620      	mov	r0, r4
 80149ee:	f7eb fc6b 	bl	80002c8 <__aeabi_dsub>
 80149f2:	f7ec f8d1 	bl	8000b98 <__aeabi_d2iz>
 80149f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80149f8:	f10b 0b18 	add.w	fp, fp, #24
 80149fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014a00:	f108 0801 	add.w	r8, r8, #1
 8014a04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014a08:	e722      	b.n	8014850 <__kernel_rem_pio2+0x2a8>
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	4629      	mov	r1, r5
 8014a0e:	f7ec f8c3 	bl	8000b98 <__aeabi_d2iz>
 8014a12:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014a18:	e71a      	b.n	8014850 <__kernel_rem_pio2+0x2a8>
 8014a1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014a20:	f7eb fda0 	bl	8000564 <__aeabi_i2d>
 8014a24:	4622      	mov	r2, r4
 8014a26:	462b      	mov	r3, r5
 8014a28:	f7eb fe06 	bl	8000638 <__aeabi_dmul>
 8014a2c:	4652      	mov	r2, sl
 8014a2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014a32:	465b      	mov	r3, fp
 8014a34:	4620      	mov	r0, r4
 8014a36:	4629      	mov	r1, r5
 8014a38:	f7eb fdfe 	bl	8000638 <__aeabi_dmul>
 8014a3c:	3e01      	subs	r6, #1
 8014a3e:	4604      	mov	r4, r0
 8014a40:	460d      	mov	r5, r1
 8014a42:	e718      	b.n	8014876 <__kernel_rem_pio2+0x2ce>
 8014a44:	9906      	ldr	r1, [sp, #24]
 8014a46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014a4a:	9106      	str	r1, [sp, #24]
 8014a4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014a50:	f7eb fdf2 	bl	8000638 <__aeabi_dmul>
 8014a54:	4602      	mov	r2, r0
 8014a56:	460b      	mov	r3, r1
 8014a58:	4650      	mov	r0, sl
 8014a5a:	4659      	mov	r1, fp
 8014a5c:	f7eb fc36 	bl	80002cc <__adddf3>
 8014a60:	3601      	adds	r6, #1
 8014a62:	4682      	mov	sl, r0
 8014a64:	468b      	mov	fp, r1
 8014a66:	9b00      	ldr	r3, [sp, #0]
 8014a68:	429e      	cmp	r6, r3
 8014a6a:	dc01      	bgt.n	8014a70 <__kernel_rem_pio2+0x4c8>
 8014a6c:	42b5      	cmp	r5, r6
 8014a6e:	dae9      	bge.n	8014a44 <__kernel_rem_pio2+0x49c>
 8014a70:	ab48      	add	r3, sp, #288	@ 0x120
 8014a72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014a76:	e9c5 ab00 	strd	sl, fp, [r5]
 8014a7a:	3c01      	subs	r4, #1
 8014a7c:	e6ff      	b.n	801487e <__kernel_rem_pio2+0x2d6>
 8014a7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014a80:	2b02      	cmp	r3, #2
 8014a82:	dc0b      	bgt.n	8014a9c <__kernel_rem_pio2+0x4f4>
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	dc39      	bgt.n	8014afc <__kernel_rem_pio2+0x554>
 8014a88:	d05d      	beq.n	8014b46 <__kernel_rem_pio2+0x59e>
 8014a8a:	9b02      	ldr	r3, [sp, #8]
 8014a8c:	f003 0007 	and.w	r0, r3, #7
 8014a90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014a94:	ecbd 8b02 	vpop	{d8}
 8014a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014a9e:	2b03      	cmp	r3, #3
 8014aa0:	d1f3      	bne.n	8014a8a <__kernel_rem_pio2+0x4e2>
 8014aa2:	9b05      	ldr	r3, [sp, #20]
 8014aa4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014aa8:	eb0d 0403 	add.w	r4, sp, r3
 8014aac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014ab0:	4625      	mov	r5, r4
 8014ab2:	46c2      	mov	sl, r8
 8014ab4:	f1ba 0f00 	cmp.w	sl, #0
 8014ab8:	f1a5 0508 	sub.w	r5, r5, #8
 8014abc:	dc6b      	bgt.n	8014b96 <__kernel_rem_pio2+0x5ee>
 8014abe:	4645      	mov	r5, r8
 8014ac0:	2d01      	cmp	r5, #1
 8014ac2:	f1a4 0408 	sub.w	r4, r4, #8
 8014ac6:	f300 8087 	bgt.w	8014bd8 <__kernel_rem_pio2+0x630>
 8014aca:	9c05      	ldr	r4, [sp, #20]
 8014acc:	ab48      	add	r3, sp, #288	@ 0x120
 8014ace:	441c      	add	r4, r3
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	2100      	movs	r1, #0
 8014ad4:	f1b8 0f01 	cmp.w	r8, #1
 8014ad8:	f300 809c 	bgt.w	8014c14 <__kernel_rem_pio2+0x66c>
 8014adc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014ae0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8014ae4:	f1b9 0f00 	cmp.w	r9, #0
 8014ae8:	f040 80a6 	bne.w	8014c38 <__kernel_rem_pio2+0x690>
 8014aec:	9b04      	ldr	r3, [sp, #16]
 8014aee:	e9c3 7800 	strd	r7, r8, [r3]
 8014af2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014af6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014afa:	e7c6      	b.n	8014a8a <__kernel_rem_pio2+0x4e2>
 8014afc:	9d05      	ldr	r5, [sp, #20]
 8014afe:	ab48      	add	r3, sp, #288	@ 0x120
 8014b00:	441d      	add	r5, r3
 8014b02:	4644      	mov	r4, r8
 8014b04:	2000      	movs	r0, #0
 8014b06:	2100      	movs	r1, #0
 8014b08:	2c00      	cmp	r4, #0
 8014b0a:	da35      	bge.n	8014b78 <__kernel_rem_pio2+0x5d0>
 8014b0c:	f1b9 0f00 	cmp.w	r9, #0
 8014b10:	d038      	beq.n	8014b84 <__kernel_rem_pio2+0x5dc>
 8014b12:	4602      	mov	r2, r0
 8014b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014b18:	9c04      	ldr	r4, [sp, #16]
 8014b1a:	e9c4 2300 	strd	r2, r3, [r4]
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8014b26:	f7eb fbcf 	bl	80002c8 <__aeabi_dsub>
 8014b2a:	ad4a      	add	r5, sp, #296	@ 0x128
 8014b2c:	2401      	movs	r4, #1
 8014b2e:	45a0      	cmp	r8, r4
 8014b30:	da2b      	bge.n	8014b8a <__kernel_rem_pio2+0x5e2>
 8014b32:	f1b9 0f00 	cmp.w	r9, #0
 8014b36:	d002      	beq.n	8014b3e <__kernel_rem_pio2+0x596>
 8014b38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	9b04      	ldr	r3, [sp, #16]
 8014b40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014b44:	e7a1      	b.n	8014a8a <__kernel_rem_pio2+0x4e2>
 8014b46:	9c05      	ldr	r4, [sp, #20]
 8014b48:	ab48      	add	r3, sp, #288	@ 0x120
 8014b4a:	441c      	add	r4, r3
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	2100      	movs	r1, #0
 8014b50:	f1b8 0f00 	cmp.w	r8, #0
 8014b54:	da09      	bge.n	8014b6a <__kernel_rem_pio2+0x5c2>
 8014b56:	f1b9 0f00 	cmp.w	r9, #0
 8014b5a:	d002      	beq.n	8014b62 <__kernel_rem_pio2+0x5ba>
 8014b5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014b60:	4619      	mov	r1, r3
 8014b62:	9b04      	ldr	r3, [sp, #16]
 8014b64:	e9c3 0100 	strd	r0, r1, [r3]
 8014b68:	e78f      	b.n	8014a8a <__kernel_rem_pio2+0x4e2>
 8014b6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b6e:	f7eb fbad 	bl	80002cc <__adddf3>
 8014b72:	f108 38ff 	add.w	r8, r8, #4294967295
 8014b76:	e7eb      	b.n	8014b50 <__kernel_rem_pio2+0x5a8>
 8014b78:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014b7c:	f7eb fba6 	bl	80002cc <__adddf3>
 8014b80:	3c01      	subs	r4, #1
 8014b82:	e7c1      	b.n	8014b08 <__kernel_rem_pio2+0x560>
 8014b84:	4602      	mov	r2, r0
 8014b86:	460b      	mov	r3, r1
 8014b88:	e7c6      	b.n	8014b18 <__kernel_rem_pio2+0x570>
 8014b8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014b8e:	f7eb fb9d 	bl	80002cc <__adddf3>
 8014b92:	3401      	adds	r4, #1
 8014b94:	e7cb      	b.n	8014b2e <__kernel_rem_pio2+0x586>
 8014b96:	ed95 7b00 	vldr	d7, [r5]
 8014b9a:	ed8d 7b00 	vstr	d7, [sp]
 8014b9e:	ed95 7b02 	vldr	d7, [r5, #8]
 8014ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ba6:	ec53 2b17 	vmov	r2, r3, d7
 8014baa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014bae:	f7eb fb8d 	bl	80002cc <__adddf3>
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	460f      	mov	r7, r1
 8014bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bbe:	f7eb fb83 	bl	80002c8 <__aeabi_dsub>
 8014bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bc6:	f7eb fb81 	bl	80002cc <__adddf3>
 8014bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014bd2:	e9c5 6700 	strd	r6, r7, [r5]
 8014bd6:	e76d      	b.n	8014ab4 <__kernel_rem_pio2+0x50c>
 8014bd8:	ed94 7b00 	vldr	d7, [r4]
 8014bdc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014be0:	ec51 0b17 	vmov	r0, r1, d7
 8014be4:	4652      	mov	r2, sl
 8014be6:	465b      	mov	r3, fp
 8014be8:	ed8d 7b00 	vstr	d7, [sp]
 8014bec:	f7eb fb6e 	bl	80002cc <__adddf3>
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4606      	mov	r6, r0
 8014bf6:	460f      	mov	r7, r1
 8014bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bfc:	f7eb fb64 	bl	80002c8 <__aeabi_dsub>
 8014c00:	4652      	mov	r2, sl
 8014c02:	465b      	mov	r3, fp
 8014c04:	f7eb fb62 	bl	80002cc <__adddf3>
 8014c08:	3d01      	subs	r5, #1
 8014c0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c0e:	e9c4 6700 	strd	r6, r7, [r4]
 8014c12:	e755      	b.n	8014ac0 <__kernel_rem_pio2+0x518>
 8014c14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014c18:	f7eb fb58 	bl	80002cc <__adddf3>
 8014c1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014c20:	e758      	b.n	8014ad4 <__kernel_rem_pio2+0x52c>
 8014c22:	bf00      	nop
 8014c24:	f3af 8000 	nop.w
	...
 8014c30:	41700000 	.word	0x41700000
 8014c34:	3e700000 	.word	0x3e700000
 8014c38:	9b04      	ldr	r3, [sp, #16]
 8014c3a:	9a04      	ldr	r2, [sp, #16]
 8014c3c:	601f      	str	r7, [r3, #0]
 8014c3e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8014c42:	605c      	str	r4, [r3, #4]
 8014c44:	609d      	str	r5, [r3, #8]
 8014c46:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014c4a:	60d3      	str	r3, [r2, #12]
 8014c4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c50:	6110      	str	r0, [r2, #16]
 8014c52:	6153      	str	r3, [r2, #20]
 8014c54:	e719      	b.n	8014a8a <__kernel_rem_pio2+0x4e2>
 8014c56:	bf00      	nop

08014c58 <floor>:
 8014c58:	ec51 0b10 	vmov	r0, r1, d0
 8014c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014c68:	2e13      	cmp	r6, #19
 8014c6a:	460c      	mov	r4, r1
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	4680      	mov	r8, r0
 8014c70:	dc34      	bgt.n	8014cdc <floor+0x84>
 8014c72:	2e00      	cmp	r6, #0
 8014c74:	da17      	bge.n	8014ca6 <floor+0x4e>
 8014c76:	a332      	add	r3, pc, #200	@ (adr r3, 8014d40 <floor+0xe8>)
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	f7eb fb26 	bl	80002cc <__adddf3>
 8014c80:	2200      	movs	r2, #0
 8014c82:	2300      	movs	r3, #0
 8014c84:	f7eb ff68 	bl	8000b58 <__aeabi_dcmpgt>
 8014c88:	b150      	cbz	r0, 8014ca0 <floor+0x48>
 8014c8a:	2c00      	cmp	r4, #0
 8014c8c:	da55      	bge.n	8014d3a <floor+0xe2>
 8014c8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014c92:	432c      	orrs	r4, r5
 8014c94:	2500      	movs	r5, #0
 8014c96:	42ac      	cmp	r4, r5
 8014c98:	4c2b      	ldr	r4, [pc, #172]	@ (8014d48 <floor+0xf0>)
 8014c9a:	bf08      	it	eq
 8014c9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014ca0:	4621      	mov	r1, r4
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	e023      	b.n	8014cee <floor+0x96>
 8014ca6:	4f29      	ldr	r7, [pc, #164]	@ (8014d4c <floor+0xf4>)
 8014ca8:	4137      	asrs	r7, r6
 8014caa:	ea01 0307 	and.w	r3, r1, r7
 8014cae:	4303      	orrs	r3, r0
 8014cb0:	d01d      	beq.n	8014cee <floor+0x96>
 8014cb2:	a323      	add	r3, pc, #140	@ (adr r3, 8014d40 <floor+0xe8>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb8:	f7eb fb08 	bl	80002cc <__adddf3>
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f7eb ff4a 	bl	8000b58 <__aeabi_dcmpgt>
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d0eb      	beq.n	8014ca0 <floor+0x48>
 8014cc8:	2c00      	cmp	r4, #0
 8014cca:	bfbe      	ittt	lt
 8014ccc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014cd0:	4133      	asrlt	r3, r6
 8014cd2:	18e4      	addlt	r4, r4, r3
 8014cd4:	ea24 0407 	bic.w	r4, r4, r7
 8014cd8:	2500      	movs	r5, #0
 8014cda:	e7e1      	b.n	8014ca0 <floor+0x48>
 8014cdc:	2e33      	cmp	r6, #51	@ 0x33
 8014cde:	dd0a      	ble.n	8014cf6 <floor+0x9e>
 8014ce0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014ce4:	d103      	bne.n	8014cee <floor+0x96>
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	460b      	mov	r3, r1
 8014cea:	f7eb faef 	bl	80002cc <__adddf3>
 8014cee:	ec41 0b10 	vmov	d0, r0, r1
 8014cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8014cfe:	40df      	lsrs	r7, r3
 8014d00:	4207      	tst	r7, r0
 8014d02:	d0f4      	beq.n	8014cee <floor+0x96>
 8014d04:	a30e      	add	r3, pc, #56	@ (adr r3, 8014d40 <floor+0xe8>)
 8014d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0a:	f7eb fadf 	bl	80002cc <__adddf3>
 8014d0e:	2200      	movs	r2, #0
 8014d10:	2300      	movs	r3, #0
 8014d12:	f7eb ff21 	bl	8000b58 <__aeabi_dcmpgt>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	d0c2      	beq.n	8014ca0 <floor+0x48>
 8014d1a:	2c00      	cmp	r4, #0
 8014d1c:	da0a      	bge.n	8014d34 <floor+0xdc>
 8014d1e:	2e14      	cmp	r6, #20
 8014d20:	d101      	bne.n	8014d26 <floor+0xce>
 8014d22:	3401      	adds	r4, #1
 8014d24:	e006      	b.n	8014d34 <floor+0xdc>
 8014d26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	40b3      	lsls	r3, r6
 8014d2e:	441d      	add	r5, r3
 8014d30:	4545      	cmp	r5, r8
 8014d32:	d3f6      	bcc.n	8014d22 <floor+0xca>
 8014d34:	ea25 0507 	bic.w	r5, r5, r7
 8014d38:	e7b2      	b.n	8014ca0 <floor+0x48>
 8014d3a:	2500      	movs	r5, #0
 8014d3c:	462c      	mov	r4, r5
 8014d3e:	e7af      	b.n	8014ca0 <floor+0x48>
 8014d40:	8800759c 	.word	0x8800759c
 8014d44:	7e37e43c 	.word	0x7e37e43c
 8014d48:	bff00000 	.word	0xbff00000
 8014d4c:	000fffff 	.word	0x000fffff

08014d50 <_init>:
 8014d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d52:	bf00      	nop
 8014d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d56:	bc08      	pop	{r3}
 8014d58:	469e      	mov	lr, r3
 8014d5a:	4770      	bx	lr

08014d5c <_fini>:
 8014d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5e:	bf00      	nop
 8014d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d62:	bc08      	pop	{r3}
 8014d64:	469e      	mov	lr, r3
 8014d66:	4770      	bx	lr
